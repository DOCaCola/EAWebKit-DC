/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCIceCandidateEvent.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include "JSRTCIceCandidate.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsRTCIceCandidateEventCandidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCIceCandidateEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCIceCandidateEventPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCIceCandidateEventPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCIceCandidateEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCIceCandidateEventPrototype>(vm.heap)) JSRTCIceCandidateEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCIceCandidateEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSRTCIceCandidateEventPrototypeTableValues[] =
{
    { "candidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateEventCandidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSRTCIceCandidateEventPrototype::s_info = { "RTCIceCandidateEventPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCIceCandidateEventPrototype) };

void JSRTCIceCandidateEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCIceCandidateEventPrototypeTableValues, *this);
}

const ClassInfo JSRTCIceCandidateEvent::s_info = { "RTCIceCandidateEvent", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCIceCandidateEvent) };

JSRTCIceCandidateEvent::JSRTCIceCandidateEvent(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCIceCandidateEvent>&& impl)
    : JSEvent(structure, globalObject, WTFMove(impl))
{
}

void JSRTCIceCandidateEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRTCIceCandidateEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCIceCandidateEventPrototype::create(vm, globalObject, JSRTCIceCandidateEventPrototype::createStructure(vm, globalObject, JSEvent::prototype(vm, globalObject)));
}

JSObject* JSRTCIceCandidateEvent::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCIceCandidateEvent>(vm, globalObject);
}

template<> inline JSRTCIceCandidateEvent* BindingCaller<JSRTCIceCandidateEvent>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRTCIceCandidateEvent*>(JSValue::decode(thisValue));
}

static inline JSValue jsRTCIceCandidateEventCandidateGetter(ExecState&, JSRTCIceCandidateEvent&, ThrowScope& throwScope);

EncodedJSValue jsRTCIceCandidateEventCandidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCIceCandidateEvent>::attribute<jsRTCIceCandidateEventCandidateGetter>(state, thisValue, "candidate");
}

static inline JSValue jsRTCIceCandidateEventCandidateGetter(ExecState& state, JSRTCIceCandidateEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCIceCandidate>>(state, *thisObject.globalObject(), impl.candidate());
    return result;
}

bool setJSRTCIceCandidateEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRTCIceCandidateEventPrototype* domObject = jsDynamicDowncast<JSRTCIceCandidateEventPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}


}

#endif // ENABLE(WEB_RTC)
