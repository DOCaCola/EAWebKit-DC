/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMPoint.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMPoint.h"
#include "JSDOMPointInit.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMPointConstructorFunctionFromPoint(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMPointX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMPointY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMPointZ(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointZ(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMPointW(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointW(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMPointPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMPointPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMPointPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMPointPrototype>(vm.heap)) JSDOMPointPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMPointPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMPointConstructor = JSDOMConstructor<JSDOMPoint>;

/* Hash table for constructor */

static const HashTableValue JSDOMPointConstructorTableValues[] =
{
    { "fromPoint", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMPointConstructorFunctionFromPoint), (intptr_t) (0) } },
};

static inline EncodedJSValue constructJSDOMPoint1(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMPointConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto point = convert<IDLDictionary<DOMPointInit>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMPoint::create(WTFMove(point));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPoint>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

static inline EncodedJSValue constructJSDOMPoint2(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMPointConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto x = state->argument(0).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = state->argument(1).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto z = state->argument(2).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto w = state->argument(3).isUndefined() ? 1 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMPoint::create(WTFMove(x), WTFMove(y), WTFMove(z), WTFMove(w));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPoint>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> EncodedJSValue JSC_HOST_CALL JSDOMPointConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(4, state->argumentCount());
    if (argsCount == 0) {
        return constructJSDOMPoint2(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return constructJSDOMPoint2(state);
        if (distinguishingArg.isUndefinedOrNull())
            return constructJSDOMPoint1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->type() != RegExpObjectType)
            return constructJSDOMPoint1(state);
        if (distinguishingArg.isNumber())
            return constructJSDOMPoint2(state);
        return constructJSDOMPoint2(state);
    }
    if (argsCount == 2) {
        return constructJSDOMPoint2(state);
    }
    if (argsCount == 3) {
        return constructJSDOMPoint2(state);
    }
    if (argsCount == 4) {
        return constructJSDOMPoint2(state);
    }
    return throwVMTypeError(state, throwScope);
}

template<> JSValue JSDOMPointConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSDOMPointReadOnly::getConstructor(vm, &globalObject);
}

template<> void JSDOMPointConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMPoint::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DOMPoint"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDOMPointConstructorTableValues, *this);
}

template<> const ClassInfo JSDOMPointConstructor::s_info = { "DOMPoint", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPointConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMPointPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointY) } },
    { "z", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointZ), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointZ) } },
    { "w", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointW), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointW) } },
};

const ClassInfo JSDOMPointPrototype::s_info = { "DOMPointPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPointPrototype) };

void JSDOMPointPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMPointPrototypeTableValues, *this);
}

const ClassInfo JSDOMPoint::s_info = { "DOMPoint", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPoint) };

JSDOMPoint::JSDOMPoint(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMPoint>&& impl)
    : JSDOMPointReadOnly(structure, globalObject, WTFMove(impl))
{
}

void JSDOMPoint::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMPoint::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMPointPrototype::create(vm, globalObject, JSDOMPointPrototype::createStructure(vm, globalObject, JSDOMPointReadOnly::prototype(vm, globalObject)));
}

JSObject* JSDOMPoint::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMPoint>(vm, globalObject);
}

template<> inline JSDOMPoint* BindingCaller<JSDOMPoint>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMPoint*>(JSValue::decode(thisValue));
}

template<> inline JSDOMPoint* BindingCaller<JSDOMPoint>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMPoint*>(state.thisValue());
}

static inline JSValue jsDOMPointXGetter(ExecState&, JSDOMPoint&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPoint>::attribute<jsDOMPointXGetter>(state, thisValue, "x");
}

static inline JSValue jsDOMPointXGetter(ExecState& state, JSDOMPoint& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.x());
    return result;
}

static inline JSValue jsDOMPointYGetter(ExecState&, JSDOMPoint&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPoint>::attribute<jsDOMPointYGetter>(state, thisValue, "y");
}

static inline JSValue jsDOMPointYGetter(ExecState& state, JSDOMPoint& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.y());
    return result;
}

static inline JSValue jsDOMPointZGetter(ExecState&, JSDOMPoint&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointZ(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPoint>::attribute<jsDOMPointZGetter>(state, thisValue, "z");
}

static inline JSValue jsDOMPointZGetter(ExecState& state, JSDOMPoint& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.z());
    return result;
}

static inline JSValue jsDOMPointWGetter(ExecState&, JSDOMPoint&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointW(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPoint>::attribute<jsDOMPointWGetter>(state, thisValue, "w");
}

static inline JSValue jsDOMPointWGetter(ExecState& state, JSDOMPoint& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.w());
    return result;
}

EncodedJSValue jsDOMPointConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMPointPrototype* domObject = jsDynamicDowncast<JSDOMPointPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMPoint::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMPointConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMPointPrototype* domObject = jsDynamicDowncast<JSDOMPointPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSDOMPointXFunction(ExecState&, JSDOMPoint&, JSValue, ThrowScope&);

bool setJSDOMPointX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMPoint>::setAttribute<setJSDOMPointXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSDOMPointXFunction(ExecState& state, JSDOMPoint& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMPointYFunction(ExecState&, JSDOMPoint&, JSValue, ThrowScope&);

bool setJSDOMPointY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMPoint>::setAttribute<setJSDOMPointYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSDOMPointYFunction(ExecState& state, JSDOMPoint& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMPointZFunction(ExecState&, JSDOMPoint&, JSValue, ThrowScope&);

bool setJSDOMPointZ(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMPoint>::setAttribute<setJSDOMPointZFunction>(state, thisValue, encodedValue, "z");
}

static inline bool setJSDOMPointZFunction(ExecState& state, JSDOMPoint& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setZ(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMPointWFunction(ExecState&, JSDOMPoint&, JSValue, ThrowScope&);

bool setJSDOMPointW(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMPoint>::setAttribute<setJSDOMPointWFunction>(state, thisValue, encodedValue, "w");
}

static inline bool setJSDOMPointWFunction(ExecState& state, JSDOMPoint& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setW(WTFMove(nativeValue));
    return true;
}


JSValue JSDOMPoint::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMPointConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMPointConstructorFunctionFromPoint(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto other = convert<IDLDictionary<DOMPointInit>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPoint>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), DOMPoint::fromPoint(WTFMove(other))));
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMPoint>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMPoint.
    static_assert(!__is_polymorphic(DOMPoint), "DOMPoint is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DOMPoint>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMPoint& impl)
{
    return wrap(state, globalObject, impl);
}


}
