/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSQLResultSetRowList.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>
#include <wtf/Vector.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSQLResultSetRowListPrototypeFunctionItem(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSQLResultSetRowListLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSQLResultSetRowListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSQLResultSetRowListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSQLResultSetRowListPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSQLResultSetRowListPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSQLResultSetRowListPrototype* ptr = new (NotNull, JSC::allocateCell<JSSQLResultSetRowListPrototype>(vm.heap)) JSSQLResultSetRowListPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSQLResultSetRowListPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSQLResultSetRowListConstructor = JSDOMConstructorNotConstructable<JSSQLResultSetRowList>;

template<> JSValue JSSQLResultSetRowListConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSSQLResultSetRowListConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSQLResultSetRowList::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SQLResultSetRowList"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSQLResultSetRowListConstructor::s_info = { "SQLResultSetRowList", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSQLResultSetRowListConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSQLResultSetRowListPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSQLResultSetRowListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSQLResultSetRowListConstructor) } },
    { "length", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSQLResultSetRowListLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "item", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSQLResultSetRowListPrototypeFunctionItem), (intptr_t) (1) } },
};

const ClassInfo JSSQLResultSetRowListPrototype::s_info = { "SQLResultSetRowListPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSQLResultSetRowListPrototype) };

void JSSQLResultSetRowListPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSQLResultSetRowListPrototypeTableValues, *this);
}

const ClassInfo JSSQLResultSetRowList::s_info = { "SQLResultSetRowList", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSQLResultSetRowList) };

JSSQLResultSetRowList::JSSQLResultSetRowList(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SQLResultSetRowList>&& impl)
    : JSDOMWrapper<SQLResultSetRowList>(structure, globalObject, WTFMove(impl))
{
}

void JSSQLResultSetRowList::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSQLResultSetRowList::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSQLResultSetRowListPrototype::create(vm, globalObject, JSSQLResultSetRowListPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSQLResultSetRowList::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSQLResultSetRowList>(vm, globalObject);
}

void JSSQLResultSetRowList::destroy(JSC::JSCell* cell)
{
    JSSQLResultSetRowList* thisObject = static_cast<JSSQLResultSetRowList*>(cell);
    thisObject->JSSQLResultSetRowList::~JSSQLResultSetRowList();
}

template<> inline JSSQLResultSetRowList* BindingCaller<JSSQLResultSetRowList>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSQLResultSetRowList*>(JSValue::decode(thisValue));
}

template<> inline JSSQLResultSetRowList* BindingCaller<JSSQLResultSetRowList>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSQLResultSetRowList*>(state.thisValue());
}

static inline JSValue jsSQLResultSetRowListLengthGetter(ExecState&, JSSQLResultSetRowList&, ThrowScope& throwScope);

EncodedJSValue jsSQLResultSetRowListLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSQLResultSetRowList>::attribute<jsSQLResultSetRowListLengthGetter>(state, thisValue, "length");
}

static inline JSValue jsSQLResultSetRowListLengthGetter(ExecState& state, JSSQLResultSetRowList& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.length());
    return result;
}

EncodedJSValue jsSQLResultSetRowListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSQLResultSetRowListPrototype* domObject = jsDynamicDowncast<JSSQLResultSetRowListPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSQLResultSetRowList::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSQLResultSetRowListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSQLResultSetRowListPrototype* domObject = jsDynamicDowncast<JSSQLResultSetRowListPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSQLResultSetRowList::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSQLResultSetRowListConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSQLResultSetRowListPrototypeFunctionItemCaller(JSC::ExecState*, JSSQLResultSetRowList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSQLResultSetRowListPrototypeFunctionItem(ExecState* state)
{
    return BindingCaller<JSSQLResultSetRowList>::callOperation<jsSQLResultSetRowListPrototypeFunctionItemCaller>(state, "item");
}

static inline JSC::EncodedJSValue jsSQLResultSetRowListPrototypeFunctionItemCaller(JSC::ExecState* state, JSSQLResultSetRowList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLRecord<IDLDOMString, IDLUnion<IDLNull, IDLDOMString, IDLUnrestrictedDouble>>>(*state, *castedThis->globalObject(), throwScope, impl.item(WTFMove(index))));
}

bool JSSQLResultSetRowListOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSSQLResultSetRowListOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSQLResultSetRowList = static_cast<JSSQLResultSetRowList*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSQLResultSetRowList->wrapped(), jsSQLResultSetRowList);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SQLResultSetRowList>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to SQLResultSetRowList.
    static_assert(!__is_polymorphic(SQLResultSetRowList), "SQLResultSetRowList is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<SQLResultSetRowList>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SQLResultSetRowList& impl)
{
    return wrap(state, globalObject, impl);
}

SQLResultSetRowList* JSSQLResultSetRowList::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSQLResultSetRowList*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
