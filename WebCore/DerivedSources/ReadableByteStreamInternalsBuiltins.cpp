/*
 * Copyright (c) 2016 Apple Inc. All rights reserved.
 * Copyright (c) 2016 Canon Inc. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

// DO NOT EDIT THIS FILE. It is automatically generated from JavaScript files for
// builtins by the script: Source/JavaScriptCore/Scripts/generate-js-builtins.py

#include "config.h"
#include "ReadableByteStreamInternalsBuiltins.h"

#if ENABLE(READABLE_STREAM_API) && ENABLE(READABLE_BYTE_STREAM_API)

#include "WebCoreJSClientData.h"
#include <heap/HeapInlines.h>
#include <runtime/Intrinsic.h>
#include <runtime/JSCJSValueInlines.h>
#include <runtime/JSCellInlines.h>
#include <runtime/StructureInlines.h>
#include <runtime/VM.h>

namespace WebCore {

const JSC::ConstructAbility s_readableByteStreamInternalsPrivateInitializeReadableByteStreamControllerCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsPrivateInitializeReadableByteStreamControllerCodeLength = 1922;
static const JSC::Intrinsic s_readableByteStreamInternalsPrivateInitializeReadableByteStreamControllerCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsPrivateInitializeReadableByteStreamControllerCode =
    "(function (stream, underlyingByteSource, highWaterMark)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    if (!@isReadableStream(stream))\n" \
    "        @throwTypeError(\"ReadableByteStreamController needs a ReadableStream\");\n" \
    "    if (stream.@readableStreamController !== null)\n" \
    "        @throwTypeError(\"ReadableStream already has a controller\");\n" \
    "    this.@controlledReadableStream = stream;\n" \
    "    this.@underlyingByteSource = underlyingByteSource;\n" \
    "    this.@pullAgain = false;\n" \
    "    this.@pulling = false;\n" \
    "    @readableByteStreamControllerClearPendingPullIntos(this);\n" \
    "    this.@queue = @newQueue();\n" \
    "    this.@totalQueuedBytes = 0;\n" \
    "    this.@started = false;\n" \
    "    this.@closeRequested = false;\n" \
    "    let hwm = @Number(highWaterMark);\n" \
    "    if (@isNaN(hwm) || hwm < 0)\n" \
    "        @throwRangeError(\"highWaterMark value is negative or not a number\");\n" \
    "    this.@strategyHWM = hwm;\n" \
    "    let autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n" \
    "    if (autoAllocateChunkSize !== @undefined) {\n" \
    "        autoAllocateChunkSize = @Number(autoAllocateChunkSize);\n" \
    "        if (autoAllocateChunkSize <= 0 || autoAllocateChunkSize === @Number.POSITIVE_INFINITY || autoAllocateChunkSize === @Number.NEGATIVE_INFINITY)\n" \
    "            @throwRangeError(\"autoAllocateChunkSize value is negative or equal to positive or negative infinity\");\n" \
    "    }\n" \
    "    this.@autoAllocateChunkSize = autoAllocateChunkSize;\n" \
    "    this.@pendingPullIntos = @newQueue();\n" \
    "    const controller = this;\n" \
    "    const startResult = @promiseInvokeOrNoopNoCatch(underlyingByteSource, \"start\", [this]).@then(() => {\n" \
    "        controller.@started = true;\n" \
    "        @assert(!controller.@pulling);\n" \
    "        @assert(!controller.@pullAgain);\n" \
    "        @readableByteStreamControllerCallPullIfNeeded(controller);\n" \
    "    }, (error) => {\n" \
    "        if (stream.@state === @streamReadable)\n" \
    "            @readableByteStreamControllerError(controller, error);\n" \
    "    });\n" \
    "    this.@cancel = @readableByteStreamControllerCancel;\n" \
    "    return this;\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsIsReadableByteStreamControllerCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsIsReadableByteStreamControllerCodeLength = 118;
static const JSC::Intrinsic s_readableByteStreamInternalsIsReadableByteStreamControllerCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsIsReadableByteStreamControllerCode =
    "(function (controller)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return @isObject(controller) && !!controller.@underlyingByteSource;\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsIsReadableStreamBYOBReaderCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsIsReadableStreamBYOBReaderCodeLength = 60;
static const JSC::Intrinsic s_readableByteStreamInternalsIsReadableStreamBYOBReaderCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsIsReadableStreamBYOBReaderCode =
    "(function (reader)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return false;\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerCancelCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerCancelCodeLength = 330;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerCancelCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerCancelCode =
    "(function (controller, reason)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    if (controller.@pendingPullIntos.content.length > 0)\n" \
    "        controller.@pendingPullIntos[0].bytesFilled = 0;\n" \
    "    controller.@queue = @newQueue();\n" \
    "    controller.@totalQueuedBytes = 0;\n" \
    "    return @promiseInvokeOrNoop(controller.@underlyingByteSource, \"cancel\", [reason]);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerErrorCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerErrorCodeLength = 299;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerErrorCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerErrorCode =
    "(function (controller, e)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    @assert(controller.@controlledReadableStream.@state === @streamReadable);\n" \
    "    @readableByteStreamControllerClearPendingPullIntos(controller);\n" \
    "    controller.@queue = @newQueue();\n" \
    "    @readableStreamError(controller.@controlledReadableStream, e);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerCloseCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerCloseCodeLength = 651;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerCloseCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerCloseCode =
    "(function (controller)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    @assert(!controller.@closeRequested);\n" \
    "    @assert(controller.@controlledReadableStream.@state === @streamReadable);\n" \
    "    if (controller.@totalQueuedBytes > 0) {\n" \
    "        controller.@closeRequested = true;\n" \
    "        return;\n" \
    "    }\n" \
    "    if (controller.@pendingPullIntos.content.length > 0) {\n" \
    "        if (controller.@pendingPullIntos[0].bytesFilled > 0) {\n" \
    "            const e = new @TypeError(\"Close requested while there remain pending bytes\");\n" \
    "            @readableByteStreamControllerError(controller, e);\n" \
    "            throw e;\n" \
    "        }\n" \
    "    }\n" \
    "    @readableStreamClose(controller.@controlledReadableStream);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerClearPendingPullIntosCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerClearPendingPullIntosCodeLength = 46;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerClearPendingPullIntosCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerClearPendingPullIntosCode =
    "(function (controller)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerGetDesiredSizeCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerGetDesiredSizeCodeLength = 111;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerGetDesiredSizeCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerGetDesiredSizeCode =
    "(function (controller)\n" \
    "{\n" \
    "   \"use strict\";\n" \
    "   return controller.@strategyHWM - controller.@totalQueuedBytes;\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableStreamHasBYOBReaderCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableStreamHasBYOBReaderCodeLength = 131;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableStreamHasBYOBReaderCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableStreamHasBYOBReaderCode =
    "(function (stream)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return stream.@reader !== @undefined && @isReadableStreamBYOBReader(stream.@reader);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableStreamHasDefaultReaderCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableStreamHasDefaultReaderCodeLength = 134;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableStreamHasDefaultReaderCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableStreamHasDefaultReaderCode =
    "(function (stream)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return stream.@reader !== @undefined && @isReadableStreamDefaultReader(stream.@reader);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerShouldCallPullCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerShouldCallPullCodeLength = 599;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerShouldCallPullCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerShouldCallPullCode =
    "(function (controller)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    const stream = controller.@controlledReadableStream;\n" \
    "    if (stream.@state !== @streamReadable)\n" \
    "        return false;\n" \
    "    if (controller.@closeRequested)\n" \
    "        return false;\n" \
    "    if (!controller.@started)\n" \
    "        return false;\n" \
    "    if (@readableStreamHasDefaultReader(stream) && stream.@reader.@readRequests > 0)\n" \
    "        return true;\n" \
    "    if (@readableStreamHasBYOBReader(stream) && stream.@reader.@readIntoRequests > 0)\n" \
    "        return true;\n" \
    "    if (@readableByteStreamControllerGetDesiredSize(controller) > 0)\n" \
    "        return true;\n" \
    "    return false;\n" \
    "})\n" \
;

const JSC::ConstructAbility s_readableByteStreamInternalsReadableByteStreamControllerCallPullIfNeededCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_readableByteStreamInternalsReadableByteStreamControllerCallPullIfNeededCodeLength = 753;
static const JSC::Intrinsic s_readableByteStreamInternalsReadableByteStreamControllerCallPullIfNeededCodeIntrinsic = JSC::NoIntrinsic;
const char* s_readableByteStreamInternalsReadableByteStreamControllerCallPullIfNeededCode =
    "(function (controller)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    if (!@readableByteStreamControllerShouldCallPull(controller))\n" \
    "        return;\n" \
    "    if (controller.@pulling) {\n" \
    "        controller.@pullAgain = true;\n" \
    "        return;\n" \
    "    }\n" \
    "    @assert(!controller.@pullAgain);\n" \
    "    controller.@pulling = true;\n" \
    "    @promiseInvokeOrNoop(controller.@underlyingByteSource, \"pull\", [controller]).@then(() => {\n" \
    "        controller.@pulling = false;\n" \
    "        if (controller.@pullAgain) {\n" \
    "            controller.@pullAgain = false;\n" \
    "            @readableByteStreamControllerCallPullIfNeeded(controller);\n" \
    "        }\n" \
    "    }, (error) => {\n" \
    "        if (controller.@controlledReadableStream.@state === @streamReadable)\n" \
    "            @readableByteStreamControllerError(controller, error);\n" \
    "    });\n" \
    "})\n" \
;


#define DEFINE_BUILTIN_GENERATOR(codeName, functionName, argumentCount) \
JSC::FunctionExecutable* codeName##Generator(JSC::VM& vm) \
{\
    JSVMClientData* clientData = static_cast<JSVMClientData*>(vm.clientData); \
    return clientData->builtinFunctions().readableByteStreamInternalsBuiltins().codeName##Executable()->link(vm, clientData->builtinFunctions().readableByteStreamInternalsBuiltins().codeName##Source(), std::nullopt, s_##codeName##Intrinsic); \
}
WEBCORE_FOREACH_READABLEBYTESTREAMINTERNALS_BUILTIN_CODE(DEFINE_BUILTIN_GENERATOR)
#undef DEFINE_BUILTIN_GENERATOR


} // namespace WebCore

#endif // ENABLE(READABLE_STREAM_API) && ENABLE(READABLE_BYTE_STREAM_API)
