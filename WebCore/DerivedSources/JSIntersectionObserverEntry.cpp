/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INTERSECTION_OBSERVER)

#include "JSIntersectionObserverEntry.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMRectInit.h"
#include "JSDOMRectReadOnly.h"
#include "JSElement.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

#if ENABLE(INTERSECTION_OBSERVER)

template<> IntersectionObserverEntry::Init convertDictionary<IntersectionObserverEntry::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    IntersectionObserverEntry::Init result;
    JSValue boundingClientRectValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "boundingClientRect"));
    if (!boundingClientRectValue.isUndefined()) {
        result.boundingClientRect = convert<IDLDictionary<DOMRectInit>>(state, boundingClientRectValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "boundingClientRect", "IntersectionObserverEntryInit", "DOMRectInit");
        return { };
    }
    JSValue intersectionRectValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "intersectionRect"));
    if (!intersectionRectValue.isUndefined()) {
        result.intersectionRect = convert<IDLDictionary<DOMRectInit>>(state, intersectionRectValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "intersectionRect", "IntersectionObserverEntryInit", "DOMRectInit");
        return { };
    }
    JSValue rootBoundsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "rootBounds"));
    if (!rootBoundsValue.isUndefined()) {
        result.rootBounds = convert<IDLDictionary<DOMRectInit>>(state, rootBoundsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "rootBounds", "IntersectionObserverEntryInit", "DOMRectInit");
        return { };
    }
    JSValue targetValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "target"));
    if (!targetValue.isUndefined()) {
        result.target = convert<IDLInterface<Element>>(state, targetValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "target", "IntersectionObserverEntryInit", "Element");
        return { };
    }
    JSValue timeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "time"));
    if (!timeValue.isUndefined()) {
        result.time = convert<IDLDouble>(state, timeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "time", "IntersectionObserverEntryInit", "double");
        return { };
    }
    return result;
}

#endif

// Attributes

JSC::EncodedJSValue jsIntersectionObserverEntryTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryRootBounds(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryBoundingClientRect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryIntersectionRect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryIntersectionRatio(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIntersectionObserverEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIntersectionObserverEntryPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIntersectionObserverEntryPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIntersectionObserverEntryPrototype* ptr = new (NotNull, JSC::allocateCell<JSIntersectionObserverEntryPrototype>(vm.heap)) JSIntersectionObserverEntryPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIntersectionObserverEntryPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIntersectionObserverEntryConstructor = JSDOMConstructor<JSIntersectionObserverEntry>;

template<> EncodedJSValue JSC_HOST_CALL JSIntersectionObserverEntryConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSIntersectionObserverEntryConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto intersectionObserverEntryInit = convert<IDLDictionary<IntersectionObserverEntry::Init>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = IntersectionObserverEntry::create(WTFMove(intersectionObserverEntryInit));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<IntersectionObserverEntry>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSIntersectionObserverEntryConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSIntersectionObserverEntryConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIntersectionObserverEntry::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IntersectionObserverEntry"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIntersectionObserverEntryConstructor::s_info = { "IntersectionObserverEntry", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserverEntryConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIntersectionObserverEntryPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIntersectionObserverEntryConstructor) } },
    { "time", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rootBounds", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryRootBounds), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "boundingClientRect", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryBoundingClientRect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "intersectionRect", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryIntersectionRect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "intersectionRatio", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryIntersectionRatio), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "target", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverEntryTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSIntersectionObserverEntryPrototype::s_info = { "IntersectionObserverEntryPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserverEntryPrototype) };

void JSIntersectionObserverEntryPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIntersectionObserverEntryPrototypeTableValues, *this);
}

const ClassInfo JSIntersectionObserverEntry::s_info = { "IntersectionObserverEntry", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserverEntry) };

JSIntersectionObserverEntry::JSIntersectionObserverEntry(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IntersectionObserverEntry>&& impl)
    : JSDOMWrapper<IntersectionObserverEntry>(structure, globalObject, WTFMove(impl))
{
}

void JSIntersectionObserverEntry::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIntersectionObserverEntry::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIntersectionObserverEntryPrototype::create(vm, globalObject, JSIntersectionObserverEntryPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSIntersectionObserverEntry::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIntersectionObserverEntry>(vm, globalObject);
}

void JSIntersectionObserverEntry::destroy(JSC::JSCell* cell)
{
    JSIntersectionObserverEntry* thisObject = static_cast<JSIntersectionObserverEntry*>(cell);
    thisObject->JSIntersectionObserverEntry::~JSIntersectionObserverEntry();
}

template<> inline JSIntersectionObserverEntry* BindingCaller<JSIntersectionObserverEntry>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIntersectionObserverEntry*>(JSValue::decode(thisValue));
}

static inline JSValue jsIntersectionObserverEntryTimeGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryTimeGetter>(state, thisValue, "time");
}

static inline JSValue jsIntersectionObserverEntryTimeGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.time());
    return result;
}

static inline JSValue jsIntersectionObserverEntryRootBoundsGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryRootBounds(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryRootBoundsGetter>(state, thisValue, "rootBounds");
}

static inline JSValue jsIntersectionObserverEntryRootBoundsGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMRectReadOnly>>(state, *thisObject.globalObject(), impl.rootBounds());
    return result;
}

static inline JSValue jsIntersectionObserverEntryBoundingClientRectGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryBoundingClientRect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryBoundingClientRectGetter>(state, thisValue, "boundingClientRect");
}

static inline JSValue jsIntersectionObserverEntryBoundingClientRectGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMRectReadOnly>>(state, *thisObject.globalObject(), impl.boundingClientRect());
    return result;
}

static inline JSValue jsIntersectionObserverEntryIntersectionRectGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryIntersectionRect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryIntersectionRectGetter>(state, thisValue, "intersectionRect");
}

static inline JSValue jsIntersectionObserverEntryIntersectionRectGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMRectReadOnly>>(state, *thisObject.globalObject(), impl.intersectionRect());
    return result;
}

static inline JSValue jsIntersectionObserverEntryIntersectionRatioGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryIntersectionRatio(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryIntersectionRatioGetter>(state, thisValue, "intersectionRatio");
}

static inline JSValue jsIntersectionObserverEntryIntersectionRatioGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.intersectionRatio());
    return result;
}

static inline JSValue jsIntersectionObserverEntryTargetGetter(ExecState&, JSIntersectionObserverEntry&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverEntryTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserverEntry>::attribute<jsIntersectionObserverEntryTargetGetter>(state, thisValue, "target");
}

static inline JSValue jsIntersectionObserverEntryTargetGetter(ExecState& state, JSIntersectionObserverEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Element>>(state, *thisObject.globalObject(), impl.target());
    return result;
}

EncodedJSValue jsIntersectionObserverEntryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIntersectionObserverEntryPrototype* domObject = jsDynamicDowncast<JSIntersectionObserverEntryPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIntersectionObserverEntry::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIntersectionObserverEntryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIntersectionObserverEntryPrototype* domObject = jsDynamicDowncast<JSIntersectionObserverEntryPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSIntersectionObserverEntry::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIntersectionObserverEntryConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSIntersectionObserverEntryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSIntersectionObserverEntryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIntersectionObserverEntry = static_cast<JSIntersectionObserverEntry*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIntersectionObserverEntry->wrapped(), jsIntersectionObserverEntry);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IntersectionObserverEntry>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to IntersectionObserverEntry.
    static_assert(!__is_polymorphic(IntersectionObserverEntry), "IntersectionObserverEntry is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<IntersectionObserverEntry>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IntersectionObserverEntry& impl)
{
    return wrap(state, globalObject, impl);
}

IntersectionObserverEntry* JSIntersectionObserverEntry::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIntersectionObserverEntry*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INTERSECTION_OBSERVER)
