/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMSelection.h"

#include "CustomElementReactionQueue.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSNode.h"
#include "JSRange.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapseToEnd(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapseToStart(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionDeleteFromDocument(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionContainsNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSelectAllChildren(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionExtend(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionGetRangeAt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionRemoveAllRanges(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionAddRange(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionToString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSetBaseAndExtent(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSetPosition(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionEmpty(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionModify(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMSelectionAnchorNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionAnchorOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionFocusNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionFocusOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionIsCollapsed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionRangeCount(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionBaseNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionBaseOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionExtentNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionExtentOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMSelectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMSelectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMSelectionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMSelectionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMSelectionPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMSelectionPrototype>(vm.heap)) JSDOMSelectionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMSelectionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMSelectionConstructor = JSDOMConstructorNotConstructable<JSDOMSelection>;

template<> JSValue JSDOMSelectionConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDOMSelectionConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMSelection::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Selection"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDOMSelectionConstructor::s_info = { "Selection", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMSelectionConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMSelectionPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMSelectionConstructor) } },
    { "anchorNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionAnchorNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "anchorOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionAnchorOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "focusNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionFocusNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "focusOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionFocusOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "isCollapsed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionIsCollapsed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rangeCount", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionRangeCount), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "baseNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionBaseNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "baseOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionBaseOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "extentNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionExtentNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "extentOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSelectionExtentOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "collapse", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionCollapse), (intptr_t) (1) } },
    { "collapseToEnd", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionCollapseToEnd), (intptr_t) (0) } },
    { "collapseToStart", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionCollapseToStart), (intptr_t) (0) } },
    { "deleteFromDocument", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionDeleteFromDocument), (intptr_t) (0) } },
    { "containsNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionContainsNode), (intptr_t) (1) } },
    { "selectAllChildren", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionSelectAllChildren), (intptr_t) (1) } },
    { "extend", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionExtend), (intptr_t) (1) } },
    { "getRangeAt", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionGetRangeAt), (intptr_t) (1) } },
    { "removeAllRanges", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionRemoveAllRanges), (intptr_t) (0) } },
    { "addRange", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionAddRange), (intptr_t) (1) } },
    { "toString", DontEnum | JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionToString), (intptr_t) (0) } },
    { "setBaseAndExtent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionSetBaseAndExtent), (intptr_t) (4) } },
    { "setPosition", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionSetPosition), (intptr_t) (1) } },
    { "empty", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionEmpty), (intptr_t) (0) } },
    { "modify", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMSelectionPrototypeFunctionModify), (intptr_t) (0) } },
};

const ClassInfo JSDOMSelectionPrototype::s_info = { "SelectionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMSelectionPrototype) };

void JSDOMSelectionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMSelectionPrototypeTableValues, *this);
}

const ClassInfo JSDOMSelection::s_info = { "Selection", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMSelection) };

JSDOMSelection::JSDOMSelection(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMSelection>&& impl)
    : JSDOMWrapper<DOMSelection>(structure, globalObject, WTFMove(impl))
{
}

void JSDOMSelection::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMSelection::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMSelectionPrototype::create(vm, globalObject, JSDOMSelectionPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDOMSelection::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMSelection>(vm, globalObject);
}

void JSDOMSelection::destroy(JSC::JSCell* cell)
{
    JSDOMSelection* thisObject = static_cast<JSDOMSelection*>(cell);
    thisObject->JSDOMSelection::~JSDOMSelection();
}

template<> inline JSDOMSelection* BindingCaller<JSDOMSelection>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMSelection*>(JSValue::decode(thisValue));
}

template<> inline JSDOMSelection* BindingCaller<JSDOMSelection>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMSelection*>(state.thisValue());
}

static inline JSValue jsDOMSelectionAnchorNodeGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionAnchorNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionAnchorNodeGetter>(state, thisValue, "anchorNode");
}

static inline JSValue jsDOMSelectionAnchorNodeGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.anchorNode());
    return result;
}

static inline JSValue jsDOMSelectionAnchorOffsetGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionAnchorOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionAnchorOffsetGetter>(state, thisValue, "anchorOffset");
}

static inline JSValue jsDOMSelectionAnchorOffsetGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.anchorOffset());
    return result;
}

static inline JSValue jsDOMSelectionFocusNodeGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionFocusNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionFocusNodeGetter>(state, thisValue, "focusNode");
}

static inline JSValue jsDOMSelectionFocusNodeGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.focusNode());
    return result;
}

static inline JSValue jsDOMSelectionFocusOffsetGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionFocusOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionFocusOffsetGetter>(state, thisValue, "focusOffset");
}

static inline JSValue jsDOMSelectionFocusOffsetGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.focusOffset());
    return result;
}

static inline JSValue jsDOMSelectionIsCollapsedGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionIsCollapsed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionIsCollapsedGetter>(state, thisValue, "isCollapsed");
}

static inline JSValue jsDOMSelectionIsCollapsedGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isCollapsed());
    return result;
}

static inline JSValue jsDOMSelectionRangeCountGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionRangeCount(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionRangeCountGetter>(state, thisValue, "rangeCount");
}

static inline JSValue jsDOMSelectionRangeCountGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.rangeCount());
    return result;
}

static inline JSValue jsDOMSelectionTypeGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsDOMSelectionTypeGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsDOMSelectionBaseNodeGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionBaseNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionBaseNodeGetter>(state, thisValue, "baseNode");
}

static inline JSValue jsDOMSelectionBaseNodeGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.baseNode());
    return result;
}

static inline JSValue jsDOMSelectionBaseOffsetGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionBaseOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionBaseOffsetGetter>(state, thisValue, "baseOffset");
}

static inline JSValue jsDOMSelectionBaseOffsetGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.baseOffset());
    return result;
}

static inline JSValue jsDOMSelectionExtentNodeGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionExtentNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionExtentNodeGetter>(state, thisValue, "extentNode");
}

static inline JSValue jsDOMSelectionExtentNodeGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.extentNode());
    return result;
}

static inline JSValue jsDOMSelectionExtentOffsetGetter(ExecState&, JSDOMSelection&, ThrowScope& throwScope);

EncodedJSValue jsDOMSelectionExtentOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMSelection>::attribute<jsDOMSelectionExtentOffsetGetter>(state, thisValue, "extentOffset");
}

static inline JSValue jsDOMSelectionExtentOffsetGetter(ExecState& state, JSDOMSelection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.extentOffset());
    return result;
}

EncodedJSValue jsDOMSelectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMSelectionPrototype* domObject = jsDynamicDowncast<JSDOMSelectionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMSelection::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMSelectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMSelectionPrototype* domObject = jsDynamicDowncast<JSDOMSelectionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDOMSelection::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMSelectionConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapse(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionCollapseCaller>(state, "collapse");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto node = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Selection", "collapse", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.collapse(WTFMove(node), WTFMove(offset));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseToEndCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapseToEnd(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionCollapseToEndCaller>(state, "collapseToEnd");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseToEndCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.collapseToEnd());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseToStartCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionCollapseToStart(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionCollapseToStartCaller>(state, "collapseToStart");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionCollapseToStartCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.collapseToStart());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionDeleteFromDocumentCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionDeleteFromDocument(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionDeleteFromDocumentCaller>(state, "deleteFromDocument");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionDeleteFromDocumentCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.deleteFromDocument();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionContainsNodeCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionContainsNode(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionContainsNodeCaller>(state, "containsNode");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionContainsNodeCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto node = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Selection", "containsNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto allowPartial = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.containsNode(*node, WTFMove(allowPartial))));
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSelectAllChildrenCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSelectAllChildren(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionSelectAllChildrenCaller>(state, "selectAllChildren");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSelectAllChildrenCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto node = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Selection", "selectAllChildren", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.selectAllChildren(*node);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionExtendCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionExtend(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionExtendCaller>(state, "extend");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionExtendCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto node = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Selection", "extend", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.extend(*node, WTFMove(offset)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionGetRangeAtCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionGetRangeAt(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionGetRangeAtCaller>(state, "getRangeAt");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionGetRangeAtCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<Range>>(*state, *castedThis->globalObject(), throwScope, impl.getRangeAt(WTFMove(index))));
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionRemoveAllRangesCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionRemoveAllRanges(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionRemoveAllRangesCaller>(state, "removeAllRanges");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionRemoveAllRangesCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.removeAllRanges();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionAddRangeCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionAddRange(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionAddRangeCaller>(state, "addRange");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionAddRangeCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto range = convert<IDLInterface<Range>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "Selection", "addRange", "Range"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.addRange(*range);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionToStringCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionToStringCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.toString()));
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSetBaseAndExtentCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSetBaseAndExtent(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionSetBaseAndExtentCaller>(state, "setBaseAndExtent");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSetBaseAndExtentCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 4))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto baseNode = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "baseNode", "Selection", "setBaseAndExtent", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto baseOffset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto extentNode = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(2), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 2, "extentNode", "Selection", "setBaseAndExtent", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto extentOffset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(3), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setBaseAndExtent(WTFMove(baseNode), WTFMove(baseOffset), WTFMove(extentNode), WTFMove(extentOffset));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSetPositionCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionSetPosition(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionSetPositionCaller>(state, "setPosition");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionSetPositionCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto node = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Selection", "setPosition", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setPosition(WTFMove(node), WTFMove(offset));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionEmptyCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionEmpty(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionEmptyCaller>(state, "empty");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionEmptyCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.empty();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionModifyCaller(JSC::ExecState*, JSDOMSelection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMSelectionPrototypeFunctionModify(ExecState* state)
{
    return BindingCaller<JSDOMSelection>::callOperation<jsDOMSelectionPrototypeFunctionModifyCaller>(state, "modify");
}

static inline JSC::EncodedJSValue jsDOMSelectionPrototypeFunctionModifyCaller(JSC::ExecState* state, JSDOMSelection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto alter = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto direction = convert<IDLDOMString>(*state, state->argument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto granularity = convert<IDLDOMString>(*state, state->argument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.modify(WTFMove(alter), WTFMove(direction), WTFMove(granularity));
    return JSValue::encode(jsUndefined());
}

bool JSDOMSelectionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsDOMSelection = jsCast<JSDOMSelection*>(handle.slot()->asCell());
    Frame* root = WTF::getPtr(jsDOMSelection->wrapped().frame());
    if (!root)
        return false;
    return visitor.containsOpaqueRoot(root);
}

void JSDOMSelectionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMSelection = static_cast<JSDOMSelection*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMSelection->wrapped(), jsDOMSelection);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7DOMSelection@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12DOMSelectionE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMSelection>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7DOMSelection@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12DOMSelectionE[2];
#if COMPILER(CLANG)
    // If this fails DOMSelection does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(DOMSelection), "DOMSelection is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // DOMSelection has subclasses. If DOMSelection has subclasses that get passed
    // to toJS() we currently require DOMSelection you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<DOMSelection>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMSelection& impl)
{
    return wrap(state, globalObject, impl);
}

DOMSelection* JSDOMSelection::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDOMSelection*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
