/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMRect.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMRect.h"
#include "JSDOMRectInit.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMRectConstructorFunctionFromRect(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMRectX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMRectY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMRectWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMRectHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMRectPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMRectPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMRectPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMRectPrototype>(vm.heap)) JSDOMRectPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMRectPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMRectConstructor = JSDOMConstructor<JSDOMRect>;

/* Hash table for constructor */

static const HashTableValue JSDOMRectConstructorTableValues[] =
{
    { "fromRect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMRectConstructorFunctionFromRect), (intptr_t) (0) } },
};

template<> EncodedJSValue JSC_HOST_CALL JSDOMRectConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMRectConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto x = state->argument(0).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = state->argument(1).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto width = state->argument(2).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto height = state->argument(3).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMRect::create(WTFMove(x), WTFMove(y), WTFMove(width), WTFMove(height));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMRect>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSDOMRectConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSDOMRectReadOnly::getConstructor(vm, &globalObject);
}

template<> void JSDOMRectConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMRect::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DOMRect"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDOMRectConstructorTableValues, *this);
}

template<> const ClassInfo JSDOMRectConstructor::s_info = { "DOMRect", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRectConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMRectPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectY) } },
    { "width", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectWidth) } },
    { "height", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectHeight) } },
};

const ClassInfo JSDOMRectPrototype::s_info = { "DOMRectPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRectPrototype) };

void JSDOMRectPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMRectPrototypeTableValues, *this);
}

const ClassInfo JSDOMRect::s_info = { "DOMRect", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRect) };

JSDOMRect::JSDOMRect(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMRect>&& impl)
    : JSDOMRectReadOnly(structure, globalObject, WTFMove(impl))
{
}

void JSDOMRect::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMRect::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMRectPrototype::create(vm, globalObject, JSDOMRectPrototype::createStructure(vm, globalObject, JSDOMRectReadOnly::prototype(vm, globalObject)));
}

JSObject* JSDOMRect::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMRect>(vm, globalObject);
}

template<> inline JSDOMRect* BindingCaller<JSDOMRect>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMRect*>(JSValue::decode(thisValue));
}

template<> inline JSDOMRect* BindingCaller<JSDOMRect>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMRect*>(state.thisValue());
}

static inline JSValue jsDOMRectXGetter(ExecState&, JSDOMRect&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRect>::attribute<jsDOMRectXGetter>(state, thisValue, "x");
}

static inline JSValue jsDOMRectXGetter(ExecState& state, JSDOMRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.x());
    return result;
}

static inline JSValue jsDOMRectYGetter(ExecState&, JSDOMRect&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRect>::attribute<jsDOMRectYGetter>(state, thisValue, "y");
}

static inline JSValue jsDOMRectYGetter(ExecState& state, JSDOMRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.y());
    return result;
}

static inline JSValue jsDOMRectWidthGetter(ExecState&, JSDOMRect&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRect>::attribute<jsDOMRectWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsDOMRectWidthGetter(ExecState& state, JSDOMRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.width());
    return result;
}

static inline JSValue jsDOMRectHeightGetter(ExecState&, JSDOMRect&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRect>::attribute<jsDOMRectHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsDOMRectHeightGetter(ExecState& state, JSDOMRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.height());
    return result;
}

EncodedJSValue jsDOMRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMRectPrototype* domObject = jsDynamicDowncast<JSDOMRectPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMRect::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMRectPrototype* domObject = jsDynamicDowncast<JSDOMRectPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSDOMRectXFunction(ExecState&, JSDOMRect&, JSValue, ThrowScope&);

bool setJSDOMRectX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMRect>::setAttribute<setJSDOMRectXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSDOMRectXFunction(ExecState& state, JSDOMRect& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMRectYFunction(ExecState&, JSDOMRect&, JSValue, ThrowScope&);

bool setJSDOMRectY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMRect>::setAttribute<setJSDOMRectYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSDOMRectYFunction(ExecState& state, JSDOMRect& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMRectWidthFunction(ExecState&, JSDOMRect&, JSValue, ThrowScope&);

bool setJSDOMRectWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMRect>::setAttribute<setJSDOMRectWidthFunction>(state, thisValue, encodedValue, "width");
}

static inline bool setJSDOMRectWidthFunction(ExecState& state, JSDOMRect& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setWidth(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMRectHeightFunction(ExecState&, JSDOMRect&, JSValue, ThrowScope&);

bool setJSDOMRectHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMRect>::setAttribute<setJSDOMRectHeightFunction>(state, thisValue, encodedValue, "height");
}

static inline bool setJSDOMRectHeightFunction(ExecState& state, JSDOMRect& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHeight(WTFMove(nativeValue));
    return true;
}


JSValue JSDOMRect::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMRectConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMRectConstructorFunctionFromRect(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto other = convert<IDLDictionary<DOMRectInit>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMRect>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), DOMRect::fromRect(WTFMove(other))));
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMRect>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMRect.
    static_assert(!__is_polymorphic(DOMRect), "DOMRect is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DOMRect>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMRect& impl)
{
    return wrap(state, globalObject, impl);
}


}
