/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_SESSION)

#include "JSMediaRemoteControls.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsMediaRemoteControlsPreviousTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaRemoteControlsPreviousTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaRemoteControlsNextTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaRemoteControlsNextTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaRemoteControlsOnprevioustrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaRemoteControlsOnprevioustrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaRemoteControlsOnnexttrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaRemoteControlsOnnexttrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaRemoteControlsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaRemoteControlsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMediaRemoteControlsPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaRemoteControlsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaRemoteControlsPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaRemoteControlsPrototype>(vm.heap)) JSMediaRemoteControlsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaRemoteControlsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSMediaRemoteControlsConstructor = JSDOMConstructor<JSMediaRemoteControls>;

template<> EncodedJSValue JSC_HOST_CALL JSMediaRemoteControlsConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSMediaRemoteControlsConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "MediaRemoteControls");
    auto object = MediaRemoteControls::create(*context);
    return JSValue::encode(toJSNewlyCreated<IDLInterface<MediaRemoteControls>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSMediaRemoteControlsConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSMediaRemoteControlsConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMediaRemoteControls::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("MediaRemoteControls"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSMediaRemoteControlsConstructor::s_info = { "MediaRemoteControls", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaRemoteControlsConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMediaRemoteControlsPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaRemoteControlsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaRemoteControlsConstructor) } },
    { "previousTrackEnabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaRemoteControlsPreviousTrackEnabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaRemoteControlsPreviousTrackEnabled) } },
    { "nextTrackEnabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaRemoteControlsNextTrackEnabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaRemoteControlsNextTrackEnabled) } },
    { "onprevioustrack", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaRemoteControlsOnprevioustrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaRemoteControlsOnprevioustrack) } },
    { "onnexttrack", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaRemoteControlsOnnexttrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaRemoteControlsOnnexttrack) } },
};

const ClassInfo JSMediaRemoteControlsPrototype::s_info = { "MediaRemoteControlsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaRemoteControlsPrototype) };

void JSMediaRemoteControlsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaRemoteControlsPrototypeTableValues, *this);
}

const ClassInfo JSMediaRemoteControls::s_info = { "MediaRemoteControls", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaRemoteControls) };

JSMediaRemoteControls::JSMediaRemoteControls(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaRemoteControls>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSMediaRemoteControls::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMediaRemoteControls::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaRemoteControlsPrototype::create(vm, globalObject, JSMediaRemoteControlsPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSMediaRemoteControls::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaRemoteControls>(vm, globalObject);
}

template<> inline JSMediaRemoteControls* BindingCaller<JSMediaRemoteControls>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMediaRemoteControls*>(JSValue::decode(thisValue));
}

static inline JSValue jsMediaRemoteControlsPreviousTrackEnabledGetter(ExecState&, JSMediaRemoteControls&, ThrowScope& throwScope);

EncodedJSValue jsMediaRemoteControlsPreviousTrackEnabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaRemoteControls>::attribute<jsMediaRemoteControlsPreviousTrackEnabledGetter>(state, thisValue, "previousTrackEnabled");
}

static inline JSValue jsMediaRemoteControlsPreviousTrackEnabledGetter(ExecState& state, JSMediaRemoteControls& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.previousTrackEnabled());
    return result;
}

static inline JSValue jsMediaRemoteControlsNextTrackEnabledGetter(ExecState&, JSMediaRemoteControls&, ThrowScope& throwScope);

EncodedJSValue jsMediaRemoteControlsNextTrackEnabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaRemoteControls>::attribute<jsMediaRemoteControlsNextTrackEnabledGetter>(state, thisValue, "nextTrackEnabled");
}

static inline JSValue jsMediaRemoteControlsNextTrackEnabledGetter(ExecState& state, JSMediaRemoteControls& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.nextTrackEnabled());
    return result;
}

static inline JSValue jsMediaRemoteControlsOnprevioustrackGetter(ExecState&, JSMediaRemoteControls&, ThrowScope& throwScope);

EncodedJSValue jsMediaRemoteControlsOnprevioustrack(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaRemoteControls>::attribute<jsMediaRemoteControlsOnprevioustrackGetter>(state, thisValue, "onprevioustrack");
}

static inline JSValue jsMediaRemoteControlsOnprevioustrackGetter(ExecState& state, JSMediaRemoteControls& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().previoustrackEvent);
}

static inline JSValue jsMediaRemoteControlsOnnexttrackGetter(ExecState&, JSMediaRemoteControls&, ThrowScope& throwScope);

EncodedJSValue jsMediaRemoteControlsOnnexttrack(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaRemoteControls>::attribute<jsMediaRemoteControlsOnnexttrackGetter>(state, thisValue, "onnexttrack");
}

static inline JSValue jsMediaRemoteControlsOnnexttrackGetter(ExecState& state, JSMediaRemoteControls& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().nexttrackEvent);
}

EncodedJSValue jsMediaRemoteControlsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSMediaRemoteControlsPrototype* domObject = jsDynamicDowncast<JSMediaRemoteControlsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSMediaRemoteControls::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMediaRemoteControlsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMediaRemoteControlsPrototype* domObject = jsDynamicDowncast<JSMediaRemoteControlsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMediaRemoteControlsPreviousTrackEnabledFunction(ExecState&, JSMediaRemoteControls&, JSValue, ThrowScope&);

bool setJSMediaRemoteControlsPreviousTrackEnabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaRemoteControls>::setAttribute<setJSMediaRemoteControlsPreviousTrackEnabledFunction>(state, thisValue, encodedValue, "previousTrackEnabled");
}

static inline bool setJSMediaRemoteControlsPreviousTrackEnabledFunction(ExecState& state, JSMediaRemoteControls& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPreviousTrackEnabled(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaRemoteControlsNextTrackEnabledFunction(ExecState&, JSMediaRemoteControls&, JSValue, ThrowScope&);

bool setJSMediaRemoteControlsNextTrackEnabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaRemoteControls>::setAttribute<setJSMediaRemoteControlsNextTrackEnabledFunction>(state, thisValue, encodedValue, "nextTrackEnabled");
}

static inline bool setJSMediaRemoteControlsNextTrackEnabledFunction(ExecState& state, JSMediaRemoteControls& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setNextTrackEnabled(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaRemoteControlsOnprevioustrackFunction(ExecState&, JSMediaRemoteControls&, JSValue, ThrowScope&);

bool setJSMediaRemoteControlsOnprevioustrack(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaRemoteControls>::setAttribute<setJSMediaRemoteControlsOnprevioustrackFunction>(state, thisValue, encodedValue, "onprevioustrack");
}

static inline bool setJSMediaRemoteControlsOnprevioustrackFunction(ExecState& state, JSMediaRemoteControls& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().previoustrackEvent, value);
    return true;
}


static inline bool setJSMediaRemoteControlsOnnexttrackFunction(ExecState&, JSMediaRemoteControls&, JSValue, ThrowScope&);

bool setJSMediaRemoteControlsOnnexttrack(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaRemoteControls>::setAttribute<setJSMediaRemoteControlsOnnexttrackFunction>(state, thisValue, encodedValue, "onnexttrack");
}

static inline bool setJSMediaRemoteControlsOnnexttrackFunction(ExecState& state, JSMediaRemoteControls& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().nexttrackEvent, value);
    return true;
}


JSValue JSMediaRemoteControls::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaRemoteControlsConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSMediaRemoteControls::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSMediaRemoteControls*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaRemoteControls@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore19MediaRemoteControlsE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MediaRemoteControls>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaRemoteControls@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore19MediaRemoteControlsE[2];
#if COMPILER(CLANG)
    // If this fails MediaRemoteControls does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(MediaRemoteControls), "MediaRemoteControls is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaRemoteControls has subclasses. If MediaRemoteControls has subclasses that get passed
    // to toJS() we currently require MediaRemoteControls you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<MediaRemoteControls>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MediaRemoteControls& impl)
{
    return wrap(state, globalObject, impl);
}

MediaRemoteControls* JSMediaRemoteControls::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMediaRemoteControls*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_SESSION)
