/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(BATTERY_STATUS)

#include "JSBatteryManager.h"

#include "Event.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionAddEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionRemoveEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionDispatchEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsBatteryManagerCharging(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBatteryManagerChargingTime(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBatteryManagerDischargingTime(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBatteryManagerLevel(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBatteryManagerOnchargingchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSBatteryManagerOnchargingchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsBatteryManagerOnchargingtimechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSBatteryManagerOnchargingtimechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsBatteryManagerOndischargingtimechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSBatteryManagerOndischargingtimechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsBatteryManagerOnlevelchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSBatteryManagerOnlevelchange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSBatteryManagerPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSBatteryManagerPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSBatteryManagerPrototype* ptr = new (NotNull, JSC::allocateCell<JSBatteryManagerPrototype>(vm.heap)) JSBatteryManagerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSBatteryManagerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSBatteryManagerPrototypeTableValues[] =
{
    { "charging", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerCharging), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "chargingTime", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerChargingTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "dischargingTime", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerDischargingTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "level", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerLevel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onchargingchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnchargingchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSBatteryManagerOnchargingchange) } },
    { "onchargingtimechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnchargingtimechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSBatteryManagerOnchargingtimechange) } },
    { "ondischargingtimechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOndischargingtimechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSBatteryManagerOndischargingtimechange) } },
    { "onlevelchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBatteryManagerOnlevelchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSBatteryManagerOnlevelchange) } },
    { "addEventListener", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionAddEventListener), (intptr_t) (2) } },
    { "removeEventListener", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionRemoveEventListener), (intptr_t) (2) } },
    { "dispatchEvent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsBatteryManagerPrototypeFunctionDispatchEvent), (intptr_t) (1) } },
};

const ClassInfo JSBatteryManagerPrototype::s_info = { "BatteryManagerPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSBatteryManagerPrototype) };

void JSBatteryManagerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSBatteryManagerPrototypeTableValues, *this);
}

const ClassInfo JSBatteryManager::s_info = { "BatteryManager", &Base::s_info, 0, CREATE_METHOD_TABLE(JSBatteryManager) };

JSBatteryManager::JSBatteryManager(Structure* structure, JSDOMGlobalObject& globalObject, Ref<BatteryManager>&& impl)
    : JSDOMWrapper<BatteryManager>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSBatteryManager::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSBatteryManagerPrototype::create(vm, globalObject, JSBatteryManagerPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSBatteryManager::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSBatteryManager>(vm, globalObject);
}

void JSBatteryManager::destroy(JSC::JSCell* cell)
{
    JSBatteryManager* thisObject = static_cast<JSBatteryManager*>(cell);
    thisObject->JSBatteryManager::~JSBatteryManager();
}

EncodedJSValue jsBatteryManagerCharging(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "charging");
        return throwGetterTypeError(*state, "BatteryManager", "charging");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.charging());
    return JSValue::encode(result);
}


EncodedJSValue jsBatteryManagerChargingTime(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "chargingTime");
        return throwGetterTypeError(*state, "BatteryManager", "chargingTime");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.chargingTime());
    return JSValue::encode(result);
}


EncodedJSValue jsBatteryManagerDischargingTime(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "dischargingTime");
        return throwGetterTypeError(*state, "BatteryManager", "dischargingTime");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.dischargingTime());
    return JSValue::encode(result);
}


EncodedJSValue jsBatteryManagerLevel(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "level");
        return throwGetterTypeError(*state, "BatteryManager", "level");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.level());
    return JSValue::encode(result);
}


EncodedJSValue jsBatteryManagerOnchargingchange(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "onchargingchange");
        return throwGetterTypeError(*state, "BatteryManager", "onchargingchange");
    }
    UNUSED_PARAM(state);
    return JSValue::encode(eventHandlerAttribute(castedThis->wrapped(), eventNames().chargingchangeEvent));
}


EncodedJSValue jsBatteryManagerOnchargingtimechange(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "onchargingtimechange");
        return throwGetterTypeError(*state, "BatteryManager", "onchargingtimechange");
    }
    UNUSED_PARAM(state);
    return JSValue::encode(eventHandlerAttribute(castedThis->wrapped(), eventNames().chargingtimechangeEvent));
}


EncodedJSValue jsBatteryManagerOndischargingtimechange(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "ondischargingtimechange");
        return throwGetterTypeError(*state, "BatteryManager", "ondischargingtimechange");
    }
    UNUSED_PARAM(state);
    return JSValue::encode(eventHandlerAttribute(castedThis->wrapped(), eventNames().dischargingtimechangeEvent));
}


EncodedJSValue jsBatteryManagerOnlevelchange(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "BatteryManager", "onlevelchange");
        return throwGetterTypeError(*state, "BatteryManager", "onlevelchange");
    }
    UNUSED_PARAM(state);
    return JSValue::encode(eventHandlerAttribute(castedThis->wrapped(), eventNames().levelchangeEvent));
}


void setJSBatteryManagerOnchargingchange(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "BatteryManager", "onchargingchange");
        else
            throwSetterTypeError(*state, "BatteryManager", "onchargingchange");
        return;
    }
    setEventHandlerAttribute(*state, *castedThis, castedThis->wrapped(), eventNames().chargingchangeEvent, value);
}


void setJSBatteryManagerOnchargingtimechange(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "BatteryManager", "onchargingtimechange");
        else
            throwSetterTypeError(*state, "BatteryManager", "onchargingtimechange");
        return;
    }
    setEventHandlerAttribute(*state, *castedThis, castedThis->wrapped(), eventNames().chargingtimechangeEvent, value);
}


void setJSBatteryManagerOndischargingtimechange(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "BatteryManager", "ondischargingtimechange");
        else
            throwSetterTypeError(*state, "BatteryManager", "ondischargingtimechange");
        return;
    }
    setEventHandlerAttribute(*state, *castedThis, castedThis->wrapped(), eventNames().dischargingtimechangeEvent, value);
}


void setJSBatteryManagerOnlevelchange(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSBatteryManagerPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "BatteryManager", "onlevelchange");
        else
            throwSetterTypeError(*state, "BatteryManager", "onlevelchange");
        return;
    }
    setEventHandlerAttribute(*state, *castedThis, castedThis->wrapped(), eventNames().levelchangeEvent, value);
}


EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionAddEventListener(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "BatteryManager", "addEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    auto& impl = castedThis->wrapped();
    JSValue listener = state->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.addEventListener(state->argument(0).toString(state)->toAtomicString(state), createJSEventListenerForAdd(*state, *asObject(listener), *castedThis), state->argument(2).toBoolean(state));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionRemoveEventListener(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "BatteryManager", "removeEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    auto& impl = castedThis->wrapped();
    JSValue listener = state->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(state->argument(0).toString(state)->toAtomicString(state), createJSEventListenerForRemove(*state, *asObject(listener), *castedThis).ptr(), state->argument(2).toBoolean(state));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsBatteryManagerPrototypeFunctionDispatchEvent(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSBatteryManager* castedThis = jsDynamicCast<JSBatteryManager*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "BatteryManager", "dispatchEvent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSBatteryManager::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    ExceptionCode ec = 0;
    Event* event = JSEvent::toWrapped(state->argument(0));
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.dispatchEvent(event, ec));

    setDOMException(state, ec);
    return JSValue::encode(result);
}

void JSBatteryManager::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSBatteryManager*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSBatteryManagerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsBatteryManager = jsCast<JSBatteryManager*>(handle.slot()->asCell());
    if (jsBatteryManager->wrapped().hasPendingActivity())
        return true;
    if (jsBatteryManager->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSBatteryManagerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsBatteryManager = jsCast<JSBatteryManager*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsBatteryManager->wrapped(), jsBatteryManager);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7BatteryManager@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14BatteryManagerE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, BatteryManager* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSBatteryManager>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, BatteryManager* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSBatteryManager>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7BatteryManager@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore14BatteryManagerE[2];
#if COMPILER(CLANG)
    // If this fails BatteryManager does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(BatteryManager), BatteryManager_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // BatteryManager has subclasses. If BatteryManager has subclasses that get passed
    // to toJS() we currently require BatteryManager you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSBatteryManager>(globalObject, impl);
}

BatteryManager* JSBatteryManager::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSBatteryManager*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(BATTERY_STATUS)
