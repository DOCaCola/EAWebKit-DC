/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLDocument.h"

#include "CustomElementReactionQueue.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionClose(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionWrite(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionWriteln(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionClear(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionCaptureEvents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionReleaseEvents(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLDocumentAll(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentAll(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentFgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentFgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentAlinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentAlinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentLinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentLinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentVlinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentVlinkColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLDocumentPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLDocumentPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLDocumentPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLDocumentPrototype>(vm.heap)) JSHTMLDocumentPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLDocumentPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLDocumentConstructor = JSDOMConstructorNotConstructable<JSHTMLDocument>;

template<> JSValue JSHTMLDocumentConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSDocument::getConstructor(vm, &globalObject);
}

template<> void JSHTMLDocumentConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLDocument::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLDocument"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLDocumentConstructor::s_info = { "HTMLDocument", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLDocumentConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLDocumentPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentConstructor) } },
    { "all", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentAll), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentAll) } },
    { "bgColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentBgColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentBgColor) } },
    { "fgColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentFgColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentFgColor) } },
    { "alinkColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentAlinkColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentAlinkColor) } },
    { "linkColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentLinkColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentLinkColor) } },
    { "vlinkColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLDocumentVlinkColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLDocumentVlinkColor) } },
    { "open", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionOpen), (intptr_t) (0) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionClose), (intptr_t) (0) } },
    { "write", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionWrite), (intptr_t) (0) } },
    { "writeln", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionWriteln), (intptr_t) (0) } },
    { "clear", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionClear), (intptr_t) (0) } },
    { "captureEvents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionCaptureEvents), (intptr_t) (0) } },
    { "releaseEvents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLDocumentPrototypeFunctionReleaseEvents), (intptr_t) (0) } },
};

const ClassInfo JSHTMLDocumentPrototype::s_info = { "HTMLDocumentPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLDocumentPrototype) };

void JSHTMLDocumentPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLDocumentPrototypeTableValues, *this);
}

const ClassInfo JSHTMLDocument::s_info = { "HTMLDocument", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLDocument) };

JSHTMLDocument::JSHTMLDocument(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLDocument>&& impl)
    : JSDocument(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLDocument::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLDocument::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLDocumentPrototype::create(vm, globalObject, JSHTMLDocumentPrototype::createStructure(vm, globalObject, JSDocument::prototype(vm, globalObject)));
}

JSObject* JSHTMLDocument::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLDocument>(vm, globalObject);
}

bool JSHTMLDocument::getOwnPropertySlotByIndex(JSObject* object, ExecState* state, unsigned index, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSHTMLDocument*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Identifier propertyName = Identifier::from(state, index);
    if (thisObject->classInfo() == info()) {
        JSValue value;
        if (thisObject->nameGetter(state, propertyName, value)) {
            slot.setValue(thisObject, ReadOnly, value);
            return true;
        }
    }
    return Base::getOwnPropertySlotByIndex(thisObject, state, index, slot);
}

template<> inline JSHTMLDocument* BindingCaller<JSHTMLDocument>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLDocument*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLDocument* BindingCaller<JSHTMLDocument>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLDocument*>(state.thisValue());
}

static inline JSValue jsHTMLDocumentAllGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentAll(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentAllGetter>(state, thisValue, "all");
}

static inline JSValue jsHTMLDocumentAllGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.all(state);
}

static inline JSValue jsHTMLDocumentBgColorGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentBgColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentBgColorGetter>(state, thisValue, "bgColor");
}

static inline JSValue jsHTMLDocumentBgColorGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.bgColor());
    return result;
}

static inline JSValue jsHTMLDocumentFgColorGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentFgColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentFgColorGetter>(state, thisValue, "fgColor");
}

static inline JSValue jsHTMLDocumentFgColorGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.fgColor());
    return result;
}

static inline JSValue jsHTMLDocumentAlinkColorGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentAlinkColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentAlinkColorGetter>(state, thisValue, "alinkColor");
}

static inline JSValue jsHTMLDocumentAlinkColorGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.alinkColor());
    return result;
}

static inline JSValue jsHTMLDocumentLinkColorGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentLinkColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentLinkColorGetter>(state, thisValue, "linkColor");
}

static inline JSValue jsHTMLDocumentLinkColorGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.linkColor());
    return result;
}

static inline JSValue jsHTMLDocumentVlinkColorGetter(ExecState&, JSHTMLDocument&, ThrowScope& throwScope);

EncodedJSValue jsHTMLDocumentVlinkColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLDocument>::attribute<jsHTMLDocumentVlinkColorGetter>(state, thisValue, "vlinkColor");
}

static inline JSValue jsHTMLDocumentVlinkColorGetter(ExecState& state, JSHTMLDocument& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.vlinkColor());
    return result;
}

EncodedJSValue jsHTMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLDocumentPrototype* domObject = jsDynamicDowncast<JSHTMLDocumentPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLDocument::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLDocumentPrototype* domObject = jsDynamicDowncast<JSHTMLDocumentPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLDocumentAllFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentAll(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentAllFunction>(state, thisValue, encodedValue, "all");
}

static inline bool setJSHTMLDocumentAllFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    thisObject.setAll(state, value);
    return true;
}


static inline bool setJSHTMLDocumentBgColorFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentBgColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentBgColorFunction>(state, thisValue, encodedValue, "bgColor");
}

static inline bool setJSHTMLDocumentBgColorFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBgColor(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLDocumentFgColorFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentFgColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentFgColorFunction>(state, thisValue, encodedValue, "fgColor");
}

static inline bool setJSHTMLDocumentFgColorFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFgColor(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLDocumentAlinkColorFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentAlinkColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentAlinkColorFunction>(state, thisValue, encodedValue, "alinkColor");
}

static inline bool setJSHTMLDocumentAlinkColorFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAlinkColor(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLDocumentLinkColorFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentLinkColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentLinkColorFunction>(state, thisValue, encodedValue, "linkColor");
}

static inline bool setJSHTMLDocumentLinkColorFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLinkColor(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLDocumentVlinkColorFunction(ExecState&, JSHTMLDocument&, JSValue, ThrowScope&);

bool setJSHTMLDocumentVlinkColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLDocument>::setAttribute<setJSHTMLDocumentVlinkColorFunction>(state, thisValue, encodedValue, "vlinkColor");
}

static inline bool setJSHTMLDocumentVlinkColorFunction(ExecState& state, JSHTMLDocument& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setVlinkColor(WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLDocument::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLDocumentConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionOpenCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionOpen(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionOpenCaller>(state, "open");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionOpenCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->open(*state));
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionCloseCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionCloseCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionWriteCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionWrite(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionWriteCaller>(state, "write");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionWriteCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->write(*state));
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionWritelnCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionWriteln(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionWritelnCaller>(state, "writeln");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionWritelnCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->writeln(*state));
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionClearCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionClear(ExecState* state)
{
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionClearCaller>(state, "clear");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionClearCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.clear();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionCaptureEventsCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionCaptureEvents(ExecState* state)
{
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionCaptureEventsCaller>(state, "captureEvents");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionCaptureEventsCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.captureEvents();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionReleaseEventsCaller(JSC::ExecState*, JSHTMLDocument*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLDocumentPrototypeFunctionReleaseEvents(ExecState* state)
{
    return BindingCaller<JSHTMLDocument>::callOperation<jsHTMLDocumentPrototypeFunctionReleaseEventsCaller>(state, "releaseEvents");
}

static inline JSC::EncodedJSValue jsHTMLDocumentPrototypeFunctionReleaseEventsCaller(JSC::ExecState* state, JSHTMLDocument* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.releaseEvents();
    return JSValue::encode(jsUndefined());
}

void JSHTMLDocument::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLDocument*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
