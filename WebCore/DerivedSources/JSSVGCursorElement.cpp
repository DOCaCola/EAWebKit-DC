/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGCursorElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGStringList.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGCursorElementPrototypeFunctionHasExtension(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGCursorElementX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementExternalResourcesRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementRequiredFeatures(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementRequiredExtensions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementSystemLanguage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementHref(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGCursorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGCursorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGCursorElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGCursorElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGCursorElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGCursorElementPrototype>(vm.heap)) JSSVGCursorElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGCursorElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGCursorElementConstructor = JSDOMConstructorNotConstructable<JSSVGCursorElement>;

template<> JSValue JSSVGCursorElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGCursorElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGCursorElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGCursorElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGCursorElementConstructor::s_info = { "SVGCursorElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGCursorElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGCursorElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGCursorElementConstructor) } },
    { "x", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "y", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "externalResourcesRequired", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementExternalResourcesRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredFeatures", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementRequiredFeatures), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredExtensions", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementRequiredExtensions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "systemLanguage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementSystemLanguage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "href", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGCursorElementHref), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "hasExtension", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGCursorElementPrototypeFunctionHasExtension), (intptr_t) (0) } },
};

const ClassInfo JSSVGCursorElementPrototype::s_info = { "SVGCursorElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGCursorElementPrototype) };

void JSSVGCursorElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGCursorElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGCursorElement::s_info = { "SVGCursorElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGCursorElement) };

JSSVGCursorElement::JSSVGCursorElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGCursorElement>&& impl)
    : JSSVGElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGCursorElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGCursorElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGCursorElementPrototype::create(vm, globalObject, JSSVGCursorElementPrototype::createStructure(vm, globalObject, JSSVGElement::prototype(vm, globalObject)));
}

JSObject* JSSVGCursorElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGCursorElement>(vm, globalObject);
}

template<> inline JSSVGCursorElement* BindingCaller<JSSVGCursorElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGCursorElement*>(JSValue::decode(thisValue));
}

template<> inline JSSVGCursorElement* BindingCaller<JSSVGCursorElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGCursorElement*>(state.thisValue());
}

static inline JSValue jsSVGCursorElementXGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGCursorElementXGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.xAnimated());
    return result;
}

static inline JSValue jsSVGCursorElementYGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGCursorElementYGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.yAnimated());
    return result;
}

static inline JSValue jsSVGCursorElementExternalResourcesRequiredGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementExternalResourcesRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementExternalResourcesRequiredGetter>(state, thisValue, "externalResourcesRequired");
}

static inline JSValue jsSVGCursorElementExternalResourcesRequiredGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedBoolean>>(state, *thisObject.globalObject(), impl.externalResourcesRequiredAnimated());
    return result;
}

static inline JSValue jsSVGCursorElementRequiredFeaturesGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementRequiredFeatures(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementRequiredFeaturesGetter>(state, thisValue, "requiredFeatures");
}

static inline JSValue jsSVGCursorElementRequiredFeaturesGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredFeatures());
    return result;
}

static inline JSValue jsSVGCursorElementRequiredExtensionsGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementRequiredExtensions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementRequiredExtensionsGetter>(state, thisValue, "requiredExtensions");
}

static inline JSValue jsSVGCursorElementRequiredExtensionsGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredExtensions());
    return result;
}

static inline JSValue jsSVGCursorElementSystemLanguageGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementSystemLanguage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementSystemLanguageGetter>(state, thisValue, "systemLanguage");
}

static inline JSValue jsSVGCursorElementSystemLanguageGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.systemLanguage());
    return result;
}

static inline JSValue jsSVGCursorElementHrefGetter(ExecState&, JSSVGCursorElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGCursorElementHref(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGCursorElement>::attribute<jsSVGCursorElementHrefGetter>(state, thisValue, "href");
}

static inline JSValue jsSVGCursorElementHrefGetter(ExecState& state, JSSVGCursorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedString>>(state, *thisObject.globalObject(), impl.hrefAnimated());
    return result;
}

EncodedJSValue jsSVGCursorElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGCursorElementPrototype* domObject = jsDynamicDowncast<JSSVGCursorElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGCursorElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGCursorElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGCursorElementPrototype* domObject = jsDynamicDowncast<JSSVGCursorElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGCursorElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGCursorElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGCursorElementPrototypeFunctionHasExtensionCaller(JSC::ExecState*, JSSVGCursorElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGCursorElementPrototypeFunctionHasExtension(ExecState* state)
{
    return BindingCaller<JSSVGCursorElement>::callOperation<jsSVGCursorElementPrototypeFunctionHasExtensionCaller>(state, "hasExtension");
}

static inline JSC::EncodedJSValue jsSVGCursorElementPrototypeFunctionHasExtensionCaller(JSC::ExecState* state, JSSVGCursorElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto extension = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.hasExtension(WTFMove(extension))));
}

void JSSVGCursorElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGCursorElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
