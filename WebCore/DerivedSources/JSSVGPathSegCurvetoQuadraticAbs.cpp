/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGPathSegCurvetoQuadraticAbs.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoQuadraticAbsX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoQuadraticAbsY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsX1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoQuadraticAbsX1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsY1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoQuadraticAbsY1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoQuadraticAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGPathSegCurvetoQuadraticAbsPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGPathSegCurvetoQuadraticAbsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGPathSegCurvetoQuadraticAbsPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGPathSegCurvetoQuadraticAbsPrototype>(vm.heap)) JSSVGPathSegCurvetoQuadraticAbsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGPathSegCurvetoQuadraticAbsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGPathSegCurvetoQuadraticAbsConstructor = JSDOMConstructorNotConstructable<JSSVGPathSegCurvetoQuadraticAbs>;

template<> JSValue JSSVGPathSegCurvetoQuadraticAbsConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGPathSeg::getConstructor(vm, &globalObject);
}

template<> void JSSVGPathSegCurvetoQuadraticAbsConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGPathSegCurvetoQuadraticAbs::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGPathSegCurvetoQuadraticAbs"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGPathSegCurvetoQuadraticAbsConstructor::s_info = { "SVGPathSegCurvetoQuadraticAbs", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoQuadraticAbsConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegCurvetoQuadraticAbsPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoQuadraticAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoQuadraticAbsConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoQuadraticAbsX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoQuadraticAbsX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoQuadraticAbsY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoQuadraticAbsY) } },
    { "x1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoQuadraticAbsX1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoQuadraticAbsX1) } },
    { "y1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoQuadraticAbsY1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoQuadraticAbsY1) } },
};

const ClassInfo JSSVGPathSegCurvetoQuadraticAbsPrototype::s_info = { "SVGPathSegCurvetoQuadraticAbsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoQuadraticAbsPrototype) };

void JSSVGPathSegCurvetoQuadraticAbsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGPathSegCurvetoQuadraticAbsPrototypeTableValues, *this);
}

const ClassInfo JSSVGPathSegCurvetoQuadraticAbs::s_info = { "SVGPathSegCurvetoQuadraticAbs", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoQuadraticAbs) };

JSSVGPathSegCurvetoQuadraticAbs::JSSVGPathSegCurvetoQuadraticAbs(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGPathSegCurvetoQuadraticAbs>&& impl)
    : JSSVGPathSeg(structure, globalObject, WTFMove(impl))
{
}

void JSSVGPathSegCurvetoQuadraticAbs::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGPathSegCurvetoQuadraticAbs::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGPathSegCurvetoQuadraticAbsPrototype::create(vm, globalObject, JSSVGPathSegCurvetoQuadraticAbsPrototype::createStructure(vm, globalObject, JSSVGPathSeg::prototype(vm, globalObject)));
}

JSObject* JSSVGPathSegCurvetoQuadraticAbs::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGPathSegCurvetoQuadraticAbs>(vm, globalObject);
}

template<> inline JSSVGPathSegCurvetoQuadraticAbs* BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGPathSegCurvetoQuadraticAbs*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsXGetter(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::attribute<jsSVGPathSegCurvetoQuadraticAbsXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsXGetter(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsYGetter(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::attribute<jsSVGPathSegCurvetoQuadraticAbsYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsYGetter(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsX1Getter(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsX1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::attribute<jsSVGPathSegCurvetoQuadraticAbsX1Getter>(state, thisValue, "x1");
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsX1Getter(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x1());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsY1Getter(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsY1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::attribute<jsSVGPathSegCurvetoQuadraticAbsY1Getter>(state, thisValue, "y1");
}

static inline JSValue jsSVGPathSegCurvetoQuadraticAbsY1Getter(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y1());
    return result;
}

EncodedJSValue jsSVGPathSegCurvetoQuadraticAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGPathSegCurvetoQuadraticAbsPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoQuadraticAbsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGPathSegCurvetoQuadraticAbs::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGPathSegCurvetoQuadraticAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGPathSegCurvetoQuadraticAbsPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoQuadraticAbsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGPathSegCurvetoQuadraticAbsXFunction(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoQuadraticAbsX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::setAttribute<setJSSVGPathSegCurvetoQuadraticAbsXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSSVGPathSegCurvetoQuadraticAbsXFunction(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoQuadraticAbsYFunction(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoQuadraticAbsY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::setAttribute<setJSSVGPathSegCurvetoQuadraticAbsYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSSVGPathSegCurvetoQuadraticAbsYFunction(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoQuadraticAbsX1Function(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoQuadraticAbsX1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::setAttribute<setJSSVGPathSegCurvetoQuadraticAbsX1Function>(state, thisValue, encodedValue, "x1");
}

static inline bool setJSSVGPathSegCurvetoQuadraticAbsX1Function(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX1(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoQuadraticAbsY1Function(ExecState&, JSSVGPathSegCurvetoQuadraticAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoQuadraticAbsY1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoQuadraticAbs>::setAttribute<setJSSVGPathSegCurvetoQuadraticAbsY1Function>(state, thisValue, encodedValue, "y1");
}

static inline bool setJSSVGPathSegCurvetoQuadraticAbsY1Function(ExecState& state, JSSVGPathSegCurvetoQuadraticAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY1(WTFMove(nativeValue));
    return true;
}


JSValue JSSVGPathSegCurvetoQuadraticAbs::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGPathSegCurvetoQuadraticAbsConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}


}
