/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_SOCKETS)

#include "JSWebSocket.h"

#include "EventNames.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

#if ENABLE(WEB_SOCKETS)
#include <runtime/JSArray.h>
#endif

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWebSocketPrototypeFunctionSend(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebSocketPrototypeFunctionClose(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsWebSocketURL(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketUrl(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketReadyState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketBufferedAmount(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebSocketOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebSocketOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebSocketOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebSocketProtocol(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketExtensions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebSocketBinaryType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketBinaryType(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebSocketConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebSocketConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSWebSocketPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebSocketPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebSocketPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebSocketPrototype>(vm.heap)) JSWebSocketPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebSocketPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSWebSocketConstructor = JSDOMConstructor<JSWebSocket>;

/* Hash table for constructor */

static const HashTableValue JSWebSocketConstructorTableValues[] =
{
    { "CONNECTING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "OPEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CLOSING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "CLOSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

static_assert(WebSocket::CONNECTING == 0, "CONNECTING in WebSocket does not match value from IDL");
static_assert(WebSocket::OPEN == 1, "OPEN in WebSocket does not match value from IDL");
static_assert(WebSocket::CLOSING == 2, "CLOSING in WebSocket does not match value from IDL");
static_assert(WebSocket::CLOSED == 3, "CLOSED in WebSocket does not match value from IDL");

static inline EncodedJSValue constructJSWebSocket1(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSWebSocketConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto url = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto protocols = state->argument(1).isUndefined() ? Converter<IDLSequence<IDLDOMString>>::ReturnType{ } : convert<IDLSequence<IDLDOMString>>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "WebSocket");
    auto object = WebSocket::create(*context, WTFMove(url), WTFMove(protocols));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<WebSocket>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

static inline EncodedJSValue constructJSWebSocket2(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSWebSocketConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto url = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto protocol = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "WebSocket");
    auto object = WebSocket::create(*context, WTFMove(url), WTFMove(protocol));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<WebSocket>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

#if ENABLE(WEB_SOCKETS)
template<> EncodedJSValue JSC_HOST_CALL JSWebSocketConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
#if ENABLE(WEB_SOCKETS)
        return constructJSWebSocket1(state);
#endif
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(1);
#if ENABLE(WEB_SOCKETS)
        if (distinguishingArg.isUndefined())
            return constructJSWebSocket1(state);
#endif
#if ENABLE(WEB_SOCKETS)
        if (hasIteratorMethod(*state, distinguishingArg))
            return constructJSWebSocket1(state);
#endif
#if ENABLE(WEB_SOCKETS)
        return constructJSWebSocket2(state);
#endif
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}
#endif

template<> JSValue JSWebSocketConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSWebSocketConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSWebSocket::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebSocket"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSWebSocketConstructorTableValues, *this);
}

template<> const ClassInfo JSWebSocketConstructor::s_info = { "WebSocket", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebSocketConstructor) };

/* Hash table for prototype */

static const HashTableValue JSWebSocketPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketConstructor) } },
    { "URL", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "url", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "readyState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketReadyState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "bufferedAmount", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketBufferedAmount), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onopen", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketOnopen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketOnopen) } },
    { "onmessage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketOnmessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketOnmessage) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketOnerror) } },
    { "onclose", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketOnclose), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketOnclose) } },
    { "protocol", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketProtocol), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "extensions", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketExtensions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "binaryType", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebSocketBinaryType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebSocketBinaryType) } },
    { "send", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebSocketPrototypeFunctionSend), (intptr_t) (1) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebSocketPrototypeFunctionClose), (intptr_t) (0) } },
    { "CONNECTING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "OPEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CLOSING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "CLOSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

const ClassInfo JSWebSocketPrototype::s_info = { "WebSocketPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebSocketPrototype) };

void JSWebSocketPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebSocketPrototypeTableValues, *this);
}

const ClassInfo JSWebSocket::s_info = { "WebSocket", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebSocket) };

JSWebSocket::JSWebSocket(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebSocket>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSWebSocket::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWebSocket::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebSocketPrototype::create(vm, globalObject, JSWebSocketPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSWebSocket::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebSocket>(vm, globalObject);
}

template<> inline JSWebSocket* BindingCaller<JSWebSocket>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSWebSocket*>(JSValue::decode(thisValue));
}

template<> inline JSWebSocket* BindingCaller<JSWebSocket>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSWebSocket*>(state.thisValue());
}

static inline JSValue jsWebSocketURLGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketURL(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketURLGetter>(state, thisValue, "URL");
}

static inline JSValue jsWebSocketURLGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.url());
    return result;
}

static inline JSValue jsWebSocketUrlGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketUrl(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketUrlGetter>(state, thisValue, "url");
}

static inline JSValue jsWebSocketUrlGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.url());
    return result;
}

static inline JSValue jsWebSocketReadyStateGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketReadyState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketReadyStateGetter>(state, thisValue, "readyState");
}

static inline JSValue jsWebSocketReadyStateGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.readyState());
    return result;
}

static inline JSValue jsWebSocketBufferedAmountGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketBufferedAmount(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketBufferedAmountGetter>(state, thisValue, "bufferedAmount");
}

static inline JSValue jsWebSocketBufferedAmountGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.bufferedAmount());
    return result;
}

static inline JSValue jsWebSocketOnopenGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketOnopen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketOnopenGetter>(state, thisValue, "onopen");
}

static inline JSValue jsWebSocketOnopenGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().openEvent);
}

static inline JSValue jsWebSocketOnmessageGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketOnmessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketOnmessageGetter>(state, thisValue, "onmessage");
}

static inline JSValue jsWebSocketOnmessageGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().messageEvent);
}

static inline JSValue jsWebSocketOnerrorGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsWebSocketOnerrorGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsWebSocketOncloseGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketOnclose(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketOncloseGetter>(state, thisValue, "onclose");
}

static inline JSValue jsWebSocketOncloseGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().closeEvent);
}

static inline JSValue jsWebSocketProtocolGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketProtocol(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketProtocolGetter>(state, thisValue, "protocol");
}

static inline JSValue jsWebSocketProtocolGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.protocol());
    return result;
}

static inline JSValue jsWebSocketExtensionsGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketExtensions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketExtensionsGetter>(state, thisValue, "extensions");
}

static inline JSValue jsWebSocketExtensionsGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.extensions());
    return result;
}

static inline JSValue jsWebSocketBinaryTypeGetter(ExecState&, JSWebSocket&, ThrowScope& throwScope);

EncodedJSValue jsWebSocketBinaryType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebSocket>::attribute<jsWebSocketBinaryTypeGetter>(state, thisValue, "binaryType");
}

static inline JSValue jsWebSocketBinaryTypeGetter(ExecState& state, JSWebSocket& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.binaryType());
    return result;
}

EncodedJSValue jsWebSocketConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSWebSocketPrototype* domObject = jsDynamicDowncast<JSWebSocketPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSWebSocket::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSWebSocketConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSWebSocketPrototype* domObject = jsDynamicDowncast<JSWebSocketPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSWebSocketOnopenFunction(ExecState&, JSWebSocket&, JSValue, ThrowScope&);

bool setJSWebSocketOnopen(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebSocket>::setAttribute<setJSWebSocketOnopenFunction>(state, thisValue, encodedValue, "onopen");
}

static inline bool setJSWebSocketOnopenFunction(ExecState& state, JSWebSocket& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().openEvent, value);
    return true;
}


static inline bool setJSWebSocketOnmessageFunction(ExecState&, JSWebSocket&, JSValue, ThrowScope&);

bool setJSWebSocketOnmessage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebSocket>::setAttribute<setJSWebSocketOnmessageFunction>(state, thisValue, encodedValue, "onmessage");
}

static inline bool setJSWebSocketOnmessageFunction(ExecState& state, JSWebSocket& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().messageEvent, value);
    return true;
}


static inline bool setJSWebSocketOnerrorFunction(ExecState&, JSWebSocket&, JSValue, ThrowScope&);

bool setJSWebSocketOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebSocket>::setAttribute<setJSWebSocketOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSWebSocketOnerrorFunction(ExecState& state, JSWebSocket& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSWebSocketOncloseFunction(ExecState&, JSWebSocket&, JSValue, ThrowScope&);

bool setJSWebSocketOnclose(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebSocket>::setAttribute<setJSWebSocketOncloseFunction>(state, thisValue, encodedValue, "onclose");
}

static inline bool setJSWebSocketOncloseFunction(ExecState& state, JSWebSocket& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().closeEvent, value);
    return true;
}


static inline bool setJSWebSocketBinaryTypeFunction(ExecState&, JSWebSocket&, JSValue, ThrowScope&);

bool setJSWebSocketBinaryType(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebSocket>::setAttribute<setJSWebSocketBinaryTypeFunction>(state, thisValue, encodedValue, "binaryType");
}

static inline bool setJSWebSocketBinaryTypeFunction(ExecState& state, JSWebSocket& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setBinaryType(WTFMove(nativeValue)));
    return true;
}


JSValue JSWebSocket::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebSocketConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend1Caller(JSC::ExecState*, JSWebSocket*, JSC::ThrowScope&);

static inline EncodedJSValue jsWebSocketPrototypeFunctionSend1(ExecState* state)
{
    return BindingCaller<JSWebSocket>::callOperation<jsWebSocketPrototypeFunctionSend1Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend1Caller(JSC::ExecState* state, JSWebSocket* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<ArrayBuffer>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "WebSocket", "send", "ArrayBuffer"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(*data));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend2Caller(JSC::ExecState*, JSWebSocket*, JSC::ThrowScope&);

static inline EncodedJSValue jsWebSocketPrototypeFunctionSend2(ExecState* state)
{
    return BindingCaller<JSWebSocket>::callOperation<jsWebSocketPrototypeFunctionSend2Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend2Caller(JSC::ExecState* state, JSWebSocket* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<ArrayBufferView>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "WebSocket", "send", "ArrayBufferView"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(data.releaseNonNull()));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend3Caller(JSC::ExecState*, JSWebSocket*, JSC::ThrowScope&);

static inline EncodedJSValue jsWebSocketPrototypeFunctionSend3(ExecState* state)
{
    return BindingCaller<JSWebSocket>::callOperation<jsWebSocketPrototypeFunctionSend3Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend3Caller(JSC::ExecState* state, JSWebSocket* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<Blob>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "WebSocket", "send", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(*data));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend4Caller(JSC::ExecState*, JSWebSocket*, JSC::ThrowScope&);

static inline EncodedJSValue jsWebSocketPrototypeFunctionSend4(ExecState* state)
{
    return BindingCaller<JSWebSocket>::callOperation<jsWebSocketPrototypeFunctionSend4Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionSend4Caller(JSC::ExecState* state, JSWebSocket* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(WTFMove(data)));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsWebSocketPrototypeFunctionSend(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSArrayBuffer::info()))
            return jsWebSocketPrototypeFunctionSend1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSArrayBufferView::info()))
            return jsWebSocketPrototypeFunctionSend2(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSBlob::info()))
            return jsWebSocketPrototypeFunctionSend3(state);
        return jsWebSocketPrototypeFunctionSend4(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionCloseCaller(JSC::ExecState*, JSWebSocket*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebSocketPrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSWebSocket>::callOperation<jsWebSocketPrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsWebSocketPrototypeFunctionCloseCaller(JSC::ExecState* state, JSWebSocket* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto code = state->argument(0).isUndefined() ? std::optional<uint16_t>() : convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Clamp);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto reason = state->argument(1).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.close(WTFMove(code), WTFMove(reason)));
    return JSValue::encode(jsUndefined());
}

void JSWebSocket::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSWebSocket*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSWebSocketOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsWebSocket = jsCast<JSWebSocket*>(handle.slot()->asCell());
    if (jsWebSocket->wrapped().hasPendingActivity())
        return true;
    if (jsWebSocket->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebSocketOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebSocket = static_cast<JSWebSocket*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebSocket->wrapped(), jsWebSocket);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebSocket@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore9WebSocketE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WebSocket>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7WebSocket@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore9WebSocketE[2];
#if COMPILER(CLANG)
    // If this fails WebSocket does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(WebSocket), "WebSocket is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // WebSocket has subclasses. If WebSocket has subclasses that get passed
    // to toJS() we currently require WebSocket you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<WebSocket>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WebSocket& impl)
{
    return wrap(state, globalObject, impl);
}

WebSocket* JSWebSocket::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWebSocket*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_SOCKETS)
