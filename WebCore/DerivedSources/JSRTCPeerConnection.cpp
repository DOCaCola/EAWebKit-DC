/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCPeerConnection.h"

#include "Document.h"
#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMPromise.h"
#include "JSEventListener.h"
#include "JSMediaStream.h"
#include "JSMediaStreamTrack.h"
#include "JSRTCConfiguration.h"
#include "JSRTCDataChannel.h"
#include "JSRTCIceCandidate.h"
#include "JSRTCRtpReceiver.h"
#include "JSRTCRtpSender.h"
#include "JSRTCRtpTransceiver.h"
#include "JSRTCSessionDescription.h"
#include "RTCPeerConnectionBuiltins.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, RTCPeerConnection::RtpTransceiverDirection enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("sendrecv"),
        ASCIILiteral("sendonly"),
        ASCIILiteral("recvonly"),
        ASCIILiteral("inactive"),
    };
    static_assert(static_cast<size_t>(RTCPeerConnection::RtpTransceiverDirection::Sendrecv) == 0, "RTCPeerConnection::RtpTransceiverDirection::Sendrecv is not 0 as expected");
    static_assert(static_cast<size_t>(RTCPeerConnection::RtpTransceiverDirection::Sendonly) == 1, "RTCPeerConnection::RtpTransceiverDirection::Sendonly is not 1 as expected");
    static_assert(static_cast<size_t>(RTCPeerConnection::RtpTransceiverDirection::Recvonly) == 2, "RTCPeerConnection::RtpTransceiverDirection::Recvonly is not 2 as expected");
    static_assert(static_cast<size_t>(RTCPeerConnection::RtpTransceiverDirection::Inactive) == 3, "RTCPeerConnection::RtpTransceiverDirection::Inactive is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<RTCPeerConnection::RtpTransceiverDirection> parseEnumeration<RTCPeerConnection::RtpTransceiverDirection>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "sendrecv")
        return RTCPeerConnection::RtpTransceiverDirection::Sendrecv;
    if (stringValue == "sendonly")
        return RTCPeerConnection::RtpTransceiverDirection::Sendonly;
    if (stringValue == "recvonly")
        return RTCPeerConnection::RtpTransceiverDirection::Recvonly;
    if (stringValue == "inactive")
        return RTCPeerConnection::RtpTransceiverDirection::Inactive;
    return std::nullopt;
}

template<> RTCPeerConnection::RtpTransceiverDirection convertEnumeration<RTCPeerConnection::RtpTransceiverDirection>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<RTCPeerConnection::RtpTransceiverDirection>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<RTCPeerConnection::RtpTransceiverDirection>()
{
    return "\"sendrecv\", \"sendonly\", \"recvonly\", \"inactive\"";
}

template<> RTCPeerConnection::OfferAnswerOptions convertDictionary<RTCPeerConnection::OfferAnswerOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCPeerConnection::OfferAnswerOptions result;
    JSValue voiceActivityDetectionValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "voiceActivityDetection"));
    if (!voiceActivityDetectionValue.isUndefined()) {
        result.voiceActivityDetection = convert<IDLBoolean>(state, voiceActivityDetectionValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.voiceActivityDetection = true;
    return result;
}

template<> RTCPeerConnection::OfferOptions convertDictionary<RTCPeerConnection::OfferOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCPeerConnection::OfferOptions result;
    JSValue voiceActivityDetectionValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "voiceActivityDetection"));
    if (!voiceActivityDetectionValue.isUndefined()) {
        result.voiceActivityDetection = convert<IDLBoolean>(state, voiceActivityDetectionValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.voiceActivityDetection = true;
    JSValue iceRestartValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "iceRestart"));
    if (!iceRestartValue.isUndefined()) {
        result.iceRestart = convert<IDLBoolean>(state, iceRestartValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.iceRestart = false;
    return result;
}

template<> RTCPeerConnection::AnswerOptions convertDictionary<RTCPeerConnection::AnswerOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCPeerConnection::AnswerOptions result;
    JSValue voiceActivityDetectionValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "voiceActivityDetection"));
    if (!voiceActivityDetectionValue.isUndefined()) {
        result.voiceActivityDetection = convert<IDLBoolean>(state, voiceActivityDetectionValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.voiceActivityDetection = true;
    return result;
}

template<> RTCPeerConnection::DataChannelInit convertDictionary<RTCPeerConnection::DataChannelInit>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCPeerConnection::DataChannelInit result;
    JSValue idValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "id"));
    if (!idValue.isUndefined()) {
        result.id = convert<IDLUnsignedShort>(state, idValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue maxRetransmitTimeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "maxRetransmitTime"));
    if (!maxRetransmitTimeValue.isUndefined()) {
        result.maxRetransmitTime = convert<IDLUnsignedShort>(state, maxRetransmitTimeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue maxRetransmitsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "maxRetransmits"));
    if (!maxRetransmitsValue.isUndefined()) {
        result.maxRetransmits = convert<IDLUnsignedShort>(state, maxRetransmitsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue negotiatedValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "negotiated"));
    if (!negotiatedValue.isUndefined()) {
        result.negotiated = convert<IDLBoolean>(state, negotiatedValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.negotiated = false;
    JSValue orderedValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "ordered"));
    if (!orderedValue.isUndefined()) {
        result.ordered = convert<IDLBoolean>(state, orderedValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.ordered = true;
    JSValue protocolValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "protocol"));
    if (!protocolValue.isUndefined()) {
        result.protocol = convert<IDLUSVString>(state, protocolValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.protocol = emptyString();
    return result;
}

template<> RTCPeerConnection::RtpTransceiverInit convertDictionary<RTCPeerConnection::RtpTransceiverInit>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCPeerConnection::RtpTransceiverInit result;
    JSValue directionValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "direction"));
    if (!directionValue.isUndefined()) {
        result.direction = convert<IDLEnumeration<RTCPeerConnection::RtpTransceiverDirection>>(state, directionValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.direction = RTCPeerConnection::RtpTransceiverDirection::Sendrecv;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionInitializeWith(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetSenders(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetReceivers(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetTransceivers(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddTrack(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionRemoveTrack(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddTransceiver(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetConfiguration(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionSetConfiguration(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedCreateOffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescription(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescription(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionPrivateGetStats(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateDataChannel(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionClose(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRTCPeerConnectionLocalDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionCurrentLocalDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionPendingLocalDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionRemoteDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionCurrentRemoteDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionPendingRemoteDescription(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionSignalingState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionIceGatheringState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionIceConnectionState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCPeerConnectionOnnegotiationneeded(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOnnegotiationneeded(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOnicecandidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOnicecandidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOnsignalingstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOnsignalingstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOntrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOntrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOniceconnectionstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOniceconnectionstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOnicegatheringstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOnicegatheringstatechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOndatachannel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOndatachannel(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionOnaddstream(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionOnaddstream(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCPeerConnectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCPeerConnectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCPeerConnectionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCPeerConnectionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCPeerConnectionPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCPeerConnectionPrototype>(vm.heap)) JSRTCPeerConnectionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCPeerConnectionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSRTCPeerConnectionConstructor = JSBuiltinConstructor<JSRTCPeerConnection>;

template<> JSValue JSRTCPeerConnectionConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSRTCPeerConnectionConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSRTCPeerConnection::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("RTCPeerConnection"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> FunctionExecutable* JSRTCPeerConnectionConstructor::initializeExecutable(VM& vm)
{
    return rtcPeerConnectionInitializeRTCPeerConnectionCodeGenerator(vm);
}

template<> const ClassInfo JSRTCPeerConnectionConstructor::s_info = { "RTCPeerConnection", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCPeerConnectionConstructor) };

/* Hash table for prototype */

static const HashTableValue JSRTCPeerConnectionPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionConstructor) } },
    { "localDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionLocalDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "currentLocalDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionCurrentLocalDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pendingLocalDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionPendingLocalDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "remoteDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionRemoteDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "currentRemoteDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionCurrentRemoteDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pendingRemoteDescription", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionPendingRemoteDescription), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "signalingState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionSignalingState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "iceGatheringState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionIceGatheringState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "iceConnectionState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionIceConnectionState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onnegotiationneeded", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnnegotiationneeded), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOnnegotiationneeded) } },
    { "onicecandidate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnicecandidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOnicecandidate) } },
    { "onsignalingstatechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnsignalingstatechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOnsignalingstatechange) } },
    { "ontrack", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOntrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOntrack) } },
    { "oniceconnectionstatechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOniceconnectionstatechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOniceconnectionstatechange) } },
    { "onicegatheringstatechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnicegatheringstatechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOnicegatheringstatechange) } },
    { "ondatachannel", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOndatachannel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOndatachannel) } },
    { "onaddstream", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCPeerConnectionOnaddstream), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCPeerConnectionOnaddstream) } },
    { "getSenders", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetSenders), (intptr_t) (0) } },
    { "getReceivers", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetReceivers), (intptr_t) (0) } },
    { "getTransceivers", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetTransceivers), (intptr_t) (0) } },
    { "addTrack", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionAddTrack), (intptr_t) (1) } },
    { "removeTrack", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionRemoveTrack), (intptr_t) (1) } },
    { "addTransceiver", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionAddTransceiver), (intptr_t) (1) } },
    { "getLocalStreams", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionGetLocalStreamsCodeGenerator), (intptr_t) (0) } },
    { "getRemoteStreams", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams), (intptr_t) (0) } },
    { "getStreamById", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionGetStreamByIdCodeGenerator), (intptr_t) (1) } },
    { "addStream", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionAddStreamCodeGenerator), (intptr_t) (1) } },
    { "removeStream", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionRemoveStreamCodeGenerator), (intptr_t) (1) } },
    { "createOffer", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionCreateOfferCodeGenerator), (intptr_t) (0) } },
    { "createAnswer", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionCreateAnswerCodeGenerator), (intptr_t) (0) } },
    { "setLocalDescription", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionSetLocalDescriptionCodeGenerator), (intptr_t) (1) } },
    { "setRemoteDescription", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionSetRemoteDescriptionCodeGenerator), (intptr_t) (1) } },
    { "addIceCandidate", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionAddIceCandidateCodeGenerator), (intptr_t) (1) } },
    { "getConfiguration", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionGetConfiguration), (intptr_t) (0) } },
    { "setConfiguration", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionSetConfiguration), (intptr_t) (1) } },
    { "getStats", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(rtcPeerConnectionGetStatsCodeGenerator), (intptr_t) (0) } },
    { "createDataChannel", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionCreateDataChannel), (intptr_t) (1) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCPeerConnectionPrototypeFunctionClose), (intptr_t) (0) } },
};

const ClassInfo JSRTCPeerConnectionPrototype::s_info = { "RTCPeerConnectionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCPeerConnectionPrototype) };

void JSRTCPeerConnectionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCPeerConnectionPrototypeTableValues, *this);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().initializeWithPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionInitializeWith), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().getSendersPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionGetSenders), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().addTrackPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionAddTrack), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().removeTrackPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionRemoveTrack), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().getRemoteStreamsPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().queuedCreateOfferPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionQueuedCreateOffer), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().queuedCreateAnswerPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswer), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().queuedSetLocalDescriptionPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescription), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().queuedSetRemoteDescriptionPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescription), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().queuedAddIceCandidatePrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidate), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().privateGetStatsPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsRTCPeerConnectionPrototypeFunctionPrivateGetStats), ReadOnly | DontEnum);
}

const ClassInfo JSRTCPeerConnection::s_info = { "RTCPeerConnection", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCPeerConnection) };

JSRTCPeerConnection::JSRTCPeerConnection(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCPeerConnection>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSRTCPeerConnection::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRTCPeerConnection::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCPeerConnectionPrototype::create(vm, globalObject, JSRTCPeerConnectionPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSRTCPeerConnection::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCPeerConnection>(vm, globalObject);
}

template<> inline JSRTCPeerConnection* BindingCaller<JSRTCPeerConnection>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRTCPeerConnection*>(JSValue::decode(thisValue));
}

template<> inline JSRTCPeerConnection* BindingCaller<JSRTCPeerConnection>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSRTCPeerConnection*>(state.thisValue());
}

static inline JSValue jsRTCPeerConnectionLocalDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionLocalDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionLocalDescriptionGetter>(state, thisValue, "localDescription");
}

static inline JSValue jsRTCPeerConnectionLocalDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.localDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionCurrentLocalDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionCurrentLocalDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionCurrentLocalDescriptionGetter>(state, thisValue, "currentLocalDescription");
}

static inline JSValue jsRTCPeerConnectionCurrentLocalDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.currentLocalDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionPendingLocalDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionPendingLocalDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionPendingLocalDescriptionGetter>(state, thisValue, "pendingLocalDescription");
}

static inline JSValue jsRTCPeerConnectionPendingLocalDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.pendingLocalDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionRemoteDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionRemoteDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionRemoteDescriptionGetter>(state, thisValue, "remoteDescription");
}

static inline JSValue jsRTCPeerConnectionRemoteDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.remoteDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionCurrentRemoteDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionCurrentRemoteDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionCurrentRemoteDescriptionGetter>(state, thisValue, "currentRemoteDescription");
}

static inline JSValue jsRTCPeerConnectionCurrentRemoteDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.currentRemoteDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionPendingRemoteDescriptionGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionPendingRemoteDescription(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionPendingRemoteDescriptionGetter>(state, thisValue, "pendingRemoteDescription");
}

static inline JSValue jsRTCPeerConnectionPendingRemoteDescriptionGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<RTCSessionDescription>>(state, *thisObject.globalObject(), impl.pendingRemoteDescription());
    return result;
}

static inline JSValue jsRTCPeerConnectionSignalingStateGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionSignalingState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionSignalingStateGetter>(state, thisValue, "signalingState");
}

static inline JSValue jsRTCPeerConnectionSignalingStateGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.signalingState());
    return result;
}

static inline JSValue jsRTCPeerConnectionIceGatheringStateGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionIceGatheringState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionIceGatheringStateGetter>(state, thisValue, "iceGatheringState");
}

static inline JSValue jsRTCPeerConnectionIceGatheringStateGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.iceGatheringState());
    return result;
}

static inline JSValue jsRTCPeerConnectionIceConnectionStateGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionIceConnectionState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionIceConnectionStateGetter>(state, thisValue, "iceConnectionState");
}

static inline JSValue jsRTCPeerConnectionIceConnectionStateGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.iceConnectionState());
    return result;
}

static inline JSValue jsRTCPeerConnectionOnnegotiationneededGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOnnegotiationneeded(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOnnegotiationneededGetter>(state, thisValue, "onnegotiationneeded");
}

static inline JSValue jsRTCPeerConnectionOnnegotiationneededGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().negotiationneededEvent);
}

static inline JSValue jsRTCPeerConnectionOnicecandidateGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOnicecandidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOnicecandidateGetter>(state, thisValue, "onicecandidate");
}

static inline JSValue jsRTCPeerConnectionOnicecandidateGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().icecandidateEvent);
}

static inline JSValue jsRTCPeerConnectionOnsignalingstatechangeGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOnsignalingstatechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOnsignalingstatechangeGetter>(state, thisValue, "onsignalingstatechange");
}

static inline JSValue jsRTCPeerConnectionOnsignalingstatechangeGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().signalingstatechangeEvent);
}

static inline JSValue jsRTCPeerConnectionOntrackGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOntrack(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOntrackGetter>(state, thisValue, "ontrack");
}

static inline JSValue jsRTCPeerConnectionOntrackGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().trackEvent);
}

static inline JSValue jsRTCPeerConnectionOniceconnectionstatechangeGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOniceconnectionstatechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOniceconnectionstatechangeGetter>(state, thisValue, "oniceconnectionstatechange");
}

static inline JSValue jsRTCPeerConnectionOniceconnectionstatechangeGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().iceconnectionstatechangeEvent);
}

static inline JSValue jsRTCPeerConnectionOnicegatheringstatechangeGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOnicegatheringstatechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOnicegatheringstatechangeGetter>(state, thisValue, "onicegatheringstatechange");
}

static inline JSValue jsRTCPeerConnectionOnicegatheringstatechangeGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().icegatheringstatechangeEvent);
}

static inline JSValue jsRTCPeerConnectionOndatachannelGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOndatachannel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOndatachannelGetter>(state, thisValue, "ondatachannel");
}

static inline JSValue jsRTCPeerConnectionOndatachannelGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().datachannelEvent);
}

static inline JSValue jsRTCPeerConnectionOnaddstreamGetter(ExecState&, JSRTCPeerConnection&, ThrowScope& throwScope);

EncodedJSValue jsRTCPeerConnectionOnaddstream(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCPeerConnection>::attribute<jsRTCPeerConnectionOnaddstreamGetter>(state, thisValue, "onaddstream");
}

static inline JSValue jsRTCPeerConnectionOnaddstreamGetter(ExecState& state, JSRTCPeerConnection& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().addstreamEvent);
}

EncodedJSValue jsRTCPeerConnectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSRTCPeerConnectionPrototype* domObject = jsDynamicDowncast<JSRTCPeerConnectionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSRTCPeerConnection::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSRTCPeerConnectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRTCPeerConnectionPrototype* domObject = jsDynamicDowncast<JSRTCPeerConnectionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSRTCPeerConnectionOnnegotiationneededFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOnnegotiationneeded(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOnnegotiationneededFunction>(state, thisValue, encodedValue, "onnegotiationneeded");
}

static inline bool setJSRTCPeerConnectionOnnegotiationneededFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().negotiationneededEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOnicecandidateFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOnicecandidate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOnicecandidateFunction>(state, thisValue, encodedValue, "onicecandidate");
}

static inline bool setJSRTCPeerConnectionOnicecandidateFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().icecandidateEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOnsignalingstatechangeFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOnsignalingstatechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOnsignalingstatechangeFunction>(state, thisValue, encodedValue, "onsignalingstatechange");
}

static inline bool setJSRTCPeerConnectionOnsignalingstatechangeFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().signalingstatechangeEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOntrackFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOntrack(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOntrackFunction>(state, thisValue, encodedValue, "ontrack");
}

static inline bool setJSRTCPeerConnectionOntrackFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().trackEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOniceconnectionstatechangeFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOniceconnectionstatechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOniceconnectionstatechangeFunction>(state, thisValue, encodedValue, "oniceconnectionstatechange");
}

static inline bool setJSRTCPeerConnectionOniceconnectionstatechangeFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().iceconnectionstatechangeEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOnicegatheringstatechangeFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOnicegatheringstatechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOnicegatheringstatechangeFunction>(state, thisValue, encodedValue, "onicegatheringstatechange");
}

static inline bool setJSRTCPeerConnectionOnicegatheringstatechangeFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().icegatheringstatechangeEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOndatachannelFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOndatachannel(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOndatachannelFunction>(state, thisValue, encodedValue, "ondatachannel");
}

static inline bool setJSRTCPeerConnectionOndatachannelFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().datachannelEvent, value);
    return true;
}


static inline bool setJSRTCPeerConnectionOnaddstreamFunction(ExecState&, JSRTCPeerConnection&, JSValue, ThrowScope&);

bool setJSRTCPeerConnectionOnaddstream(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCPeerConnection>::setAttribute<setJSRTCPeerConnectionOnaddstreamFunction>(state, thisValue, encodedValue, "onaddstream");
}

static inline bool setJSRTCPeerConnectionOnaddstreamFunction(ExecState& state, JSRTCPeerConnection& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().addstreamEvent, value);
    return true;
}


JSValue JSRTCPeerConnection::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCPeerConnectionConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionInitializeWithCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionInitializeWith(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionInitializeWithCaller, CastedThisErrorBehavior::Assert>(state, "initializeWith");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionInitializeWithCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto configuration = convert<IDLDictionary<RTCConfiguration>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.initializeWith(document, WTFMove(configuration)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetSendersCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetSenders(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionGetSendersCaller>(state, "getSenders");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetSendersCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<RTCRtpSender>>>(*state, *castedThis->globalObject(), impl.getSenders()));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetReceiversCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetReceivers(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionGetReceiversCaller>(state, "getReceivers");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetReceiversCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<RTCRtpReceiver>>>(*state, *castedThis->globalObject(), impl.getReceivers()));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetTransceiversCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetTransceivers(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionGetTransceiversCaller>(state, "getTransceivers");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetTransceiversCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<RTCRtpTransceiver>>>(*state, *castedThis->globalObject(), impl.getTransceivers()));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTrackCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddTrack(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionAddTrackCaller>(state, "addTrack");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTrackCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto track = convert<IDLInterface<MediaStreamTrack>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "track", "RTCPeerConnection", "addTrack", "MediaStreamTrack"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto streams = convertVariadicArguments<IDLInterface<MediaStream>>(*state, 1);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<RTCRtpSender>>(*state, *castedThis->globalObject(), throwScope, impl.addTrack(*track, WTFMove(streams.arguments.value()))));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionRemoveTrackCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionRemoveTrack(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionRemoveTrackCaller>(state, "removeTrack");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionRemoveTrackCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto sender = convert<IDLInterface<RTCRtpSender>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "sender", "RTCPeerConnection", "removeTrack", "RTCRtpSender"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.removeTrack(*sender));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver1Caller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver1(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionAddTransceiver1Caller>(state, "addTransceiver");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver1Caller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto track = convert<IDLInterface<MediaStreamTrack>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "track", "RTCPeerConnection", "addTransceiver", "MediaStreamTrack"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto init = convert<IDLDictionary<RTCPeerConnection::RtpTransceiverInit>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<RTCRtpTransceiver>>(*state, *castedThis->globalObject(), throwScope, impl.addTransceiver(*track, WTFMove(init))));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver2Caller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver2(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionAddTransceiver2Caller>(state, "addTransceiver");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionAddTransceiver2Caller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto kind = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto init = convert<IDLDictionary<RTCPeerConnection::RtpTransceiverInit>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<RTCRtpTransceiver>>(*state, *castedThis->globalObject(), throwScope, impl.addTransceiver(WTFMove(kind), WTFMove(init))));
}

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionAddTransceiver(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSMediaStreamTrack::info()))
            return jsRTCPeerConnectionPrototypeFunctionAddTransceiver1(state);
        return jsRTCPeerConnectionPrototypeFunctionAddTransceiver2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSMediaStreamTrack::info()))
            return jsRTCPeerConnectionPrototypeFunctionAddTransceiver1(state);
        return jsRTCPeerConnectionPrototypeFunctionAddTransceiver2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetRemoteStreamsCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetRemoteStreams(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionGetRemoteStreamsCaller>(state, "getRemoteStreams");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetRemoteStreamsCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<MediaStream>>>(*state, *castedThis->globalObject(), impl.getRemoteStreams()));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetConfigurationCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionGetConfiguration(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionGetConfigurationCaller>(state, "getConfiguration");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionGetConfigurationCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDictionary<RTCConfiguration>>(*state, *castedThis->globalObject(), impl.getConfiguration()));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionSetConfigurationCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionSetConfiguration(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionSetConfigurationCaller>(state, "setConfiguration");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionSetConfigurationCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto configuration = convert<IDLDictionary<RTCConfiguration>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setConfiguration(WTFMove(configuration)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedCreateOffer(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "queuedCreateOffer");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateOfferCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offerOptions = convert<IDLDictionary<RTCPeerConnection::OfferOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.queuedCreateOffer(WTFMove(offerOptions), WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswer(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "queuedCreateAnswer");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedCreateAnswerCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto answerOptions = convert<IDLDictionary<RTCPeerConnection::AnswerOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.queuedCreateAnswer(WTFMove(answerOptions), WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescription(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "queuedSetLocalDescription");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetLocalDescriptionCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto description = convert<IDLInterface<RTCSessionDescription>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "description", "RTCPeerConnection", "queuedSetLocalDescription", "RTCSessionDescription"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.queuedSetLocalDescription(*description, WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescription(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "queuedSetRemoteDescription");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedSetRemoteDescriptionCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto description = convert<IDLInterface<RTCSessionDescription>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "description", "RTCPeerConnection", "queuedSetRemoteDescription", "RTCSessionDescription"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.queuedSetRemoteDescription(*description, WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidateCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidatePromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidate(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidatePromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidatePromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidateCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "queuedAddIceCandidate");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionQueuedAddIceCandidateCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto candidate = convert<IDLInterface<RTCIceCandidate>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "candidate", "RTCPeerConnection", "queuedAddIceCandidate", "RTCIceCandidate"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.queuedAddIceCandidate(*candidate, WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsCaller(JSC::ExecState*, JSRTCPeerConnection*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionPrivateGetStats(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSRTCPeerConnection>::callPromiseOperation<jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "privateGetStats");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionPrivateGetStatsCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto selector = convert<IDLNullable<IDLInterface<MediaStreamTrack>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "selector", "RTCPeerConnection", "privateGetStats", "MediaStreamTrack"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.privateGetStats(WTFMove(selector), WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionCreateDataChannelCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionCreateDataChannel(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionCreateDataChannelCaller>(state, "createDataChannel");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionCreateDataChannelCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    auto label = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<RTCPeerConnection::DataChannelInit>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<RTCDataChannel>>(*state, *castedThis->globalObject(), throwScope, impl.createDataChannel(*context, WTFMove(label), WTFMove(options))));
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionCloseCaller(JSC::ExecState*, JSRTCPeerConnection*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCPeerConnectionPrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSRTCPeerConnection>::callOperation<jsRTCPeerConnectionPrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsRTCPeerConnectionPrototypeFunctionCloseCaller(JSC::ExecState* state, JSRTCPeerConnection* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

void JSRTCPeerConnection::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSRTCPeerConnection*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSRTCPeerConnectionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsRTCPeerConnection = jsCast<JSRTCPeerConnection*>(handle.slot()->asCell());
    if (jsRTCPeerConnection->wrapped().hasPendingActivity())
        return true;
    if (jsRTCPeerConnection->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCPeerConnectionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCPeerConnection = static_cast<JSRTCPeerConnection*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCPeerConnection->wrapped(), jsRTCPeerConnection);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCPeerConnection@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore17RTCPeerConnectionE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<RTCPeerConnection>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCPeerConnection@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore17RTCPeerConnectionE[2];
#if COMPILER(CLANG)
    // If this fails RTCPeerConnection does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(RTCPeerConnection), "RTCPeerConnection is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCPeerConnection has subclasses. If RTCPeerConnection has subclasses that get passed
    // to toJS() we currently require RTCPeerConnection you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<RTCPeerConnection>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, RTCPeerConnection& impl)
{
    return wrap(state, globalObject, impl);
}

RTCPeerConnection* JSRTCPeerConnection::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSRTCPeerConnection*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
