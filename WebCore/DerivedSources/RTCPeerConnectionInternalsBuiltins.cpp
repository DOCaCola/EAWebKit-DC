/*
 * Copyright (c) 2015 Ericsson AB. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

// DO NOT EDIT THIS FILE. It is automatically generated from JavaScript files for
// builtins by the script: Source/JavaScriptCore/Scripts/generate-js-builtins.py

#include "config.h"
#include "RTCPeerConnectionInternalsBuiltins.h"

#if ENABLE(MEDIA_STREAM)

#include "WebCoreJSClientData.h"
#include <runtime/Executable.h>
#include <runtime/JSCJSValueInlines.h>
#include <runtime/JSCellInlines.h>
#include <runtime/StructureInlines.h>
#include <runtime/VM.h>

namespace WebCore {

const JSC::ConstructAbility s_rtcPeerConnectionInternalsEnqueueOperationCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionInternalsEnqueueOperationCodeLength = 555;
const char* s_rtcPeerConnectionInternalsEnqueueOperationCode =
    "(function (peerConnection, operation)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    if (!peerConnection.@operations)\n" \
    "        peerConnection.@operations = [];\n" \
    "    var operations = peerConnection.@operations;\n" \
    "    function runNext() {\n" \
    "        operations.@shift();\n" \
    "        if (operations.length)\n" \
    "            operations[0]();\n" \
    "    };\n" \
    "    return new @Promise(function (resolve, reject) {\n" \
    "        operations.@push(function() {\n" \
    "            operation().then(resolve, reject).then(runNext, runNext);\n" \
    "        });\n" \
    "        if (operations.length == 1)\n" \
    "            operations[0]();\n" \
    "    });\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionInternalsCreateOfferOrAnswerCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionInternalsCreateOfferOrAnswerCodeLength = 775;
const char* s_rtcPeerConnectionInternalsCreateOfferOrAnswerCode =
    "(function (peerConnection, targetFunction, functionName, args)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    var options = {};\n" \
    "    if (args.length <= 1) {\n" \
    "        if (args.length && @isDictionary(args[0]))\n" \
    "            options = args[0]\n" \
    "        return @enqueueOperation(peerConnection, function () {\n" \
    "            return targetFunction.@call(peerConnection, options);\n" \
    "        });\n" \
    "    }\n" \
    "    var successCallback = @extractCallbackArg(args, 0, \"successCallback\", functionName);\n" \
    "    var errorCallback = @extractCallbackArg(args, 1, \"errorCallback\", functionName);\n" \
    "    if (args.length > 2 && @isDictionary(args[2]))\n" \
    "        options = args[2];\n" \
    "    @enqueueOperation(peerConnection, function () {\n" \
    "        return targetFunction.@call(peerConnection, options).then(successCallback, errorCallback);\n" \
    "    });\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionInternalsSetLocalOrRemoteDescriptionCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionInternalsSetLocalOrRemoteDescriptionCodeLength = 995;
const char* s_rtcPeerConnectionInternalsSetLocalOrRemoteDescriptionCode =
    "(function (peerConnection, targetFunction, functionName, args)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    if (args.length < 1)\n" \
    "        throw new @TypeError(\"Not enough arguments\");\n" \
    "    var description = args[0];\n" \
    "    if (!(description instanceof RTCSessionDescription))\n" \
    "        throw new @TypeError(\"Argument 1 ('description') to RTCPeerConnection.\" + functionName + \" must be an instance of RTCSessionDescription\");\n" \
    "    if (args.length == 1) {\n" \
    "        return @enqueueOperation(peerConnection, function () {\n" \
    "            return targetFunction.@call(peerConnection, description);\n" \
    "        });\n" \
    "    }\n" \
    "    if (args.length < 3)\n" \
    "        throw new @TypeError(\"Not enough arguments\");\n" \
    "    var successCallback = @extractCallbackArg(args, 1, \"successCallback\", functionName);\n" \
    "    var errorCallback = @extractCallbackArg(args, 2, \"errorCallback\", functionName);\n" \
    "    @enqueueOperation(peerConnection, function () {\n" \
    "        return targetFunction.@call(peerConnection, description).then(successCallback, errorCallback);\n" \
    "    });\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionInternalsExtractCallbackArgCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionInternalsExtractCallbackArgCodeLength = 312;
const char* s_rtcPeerConnectionInternalsExtractCallbackArgCode =
    "(function (args, index, name, parentFunctionName)\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    var callback = args[index];\n" \
    "    if (typeof callback !== \"function\")\n" \
    "        throw new @TypeError(\"Argument \" + (index + 1) + \" ('\" + name + \"') to RTCPeerConnection.\" + parentFunctionName + \" must be a Function\");\n" \
    "    return callback;\n" \
    "})\n" \
;


#define DEFINE_BUILTIN_GENERATOR(codeName, functionName, argumentCount) \
JSC::FunctionExecutable* codeName##Generator(JSC::VM& vm) \
{\
    JSVMClientData* clientData = static_cast<JSVMClientData*>(vm.clientData); \
    return clientData->builtinFunctions().rtcPeerConnectionInternalsBuiltins().codeName##Executable()->link(vm, clientData->builtinFunctions().rtcPeerConnectionInternalsBuiltins().codeName##Source()); \
}
WEBCORE_FOREACH_RTCPEERCONNECTIONINTERNALS_BUILTIN_CODE(DEFINE_BUILTIN_GENERATOR)
#undef DEFINE_BUILTIN_GENERATOR


} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
