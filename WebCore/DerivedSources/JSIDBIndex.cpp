/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBIndex.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSIDBCursorDirection.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBRequest.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionOpenCursor(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionOpenKeyCursor(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetAll(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetAllKeys(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionCount(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIDBIndexName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBIndexName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBIndexObjectStore(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBIndexKeyPath(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBIndexMultiEntry(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBIndexUnique(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBIndexConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBIndexConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIDBIndexPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIDBIndexPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIDBIndexPrototype* ptr = new (NotNull, JSC::allocateCell<JSIDBIndexPrototype>(vm.heap)) JSIDBIndexPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIDBIndexPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIDBIndexConstructor = JSDOMConstructorNotConstructable<JSIDBIndex>;

template<> JSValue JSIDBIndexConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSIDBIndexConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIDBIndex::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IDBIndex"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIDBIndexConstructor::s_info = { "IDBIndex", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBIndexConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIDBIndexPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBIndexConstructor) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBIndexName) } },
    { "objectStore", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexObjectStore), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "keyPath", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexKeyPath), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "multiEntry", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexMultiEntry), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "unique", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBIndexUnique), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "openCursor", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionOpenCursor), (intptr_t) (0) } },
    { "openKeyCursor", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionOpenKeyCursor), (intptr_t) (0) } },
    { "get", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionGet), (intptr_t) (1) } },
    { "getKey", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionGetKey), (intptr_t) (1) } },
    { "getAll", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionGetAll), (intptr_t) (0) } },
    { "getAllKeys", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionGetAllKeys), (intptr_t) (0) } },
    { "count", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBIndexPrototypeFunctionCount), (intptr_t) (0) } },
};

const ClassInfo JSIDBIndexPrototype::s_info = { "IDBIndexPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBIndexPrototype) };

void JSIDBIndexPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIDBIndexPrototypeTableValues, *this);
}

const ClassInfo JSIDBIndex::s_info = { "IDBIndex", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBIndex) };

JSIDBIndex::JSIDBIndex(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IDBIndex>&& impl)
    : JSDOMWrapper<IDBIndex>(structure, globalObject, WTFMove(impl))
{
}

void JSIDBIndex::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIDBIndex::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIDBIndexPrototype::create(vm, globalObject, JSIDBIndexPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSIDBIndex::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBIndex>(vm, globalObject);
}

void JSIDBIndex::destroy(JSC::JSCell* cell)
{
    JSIDBIndex* thisObject = static_cast<JSIDBIndex*>(cell);
    thisObject->JSIDBIndex::~JSIDBIndex();
}

template<> inline JSIDBIndex* BindingCaller<JSIDBIndex>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIDBIndex*>(JSValue::decode(thisValue));
}

template<> inline JSIDBIndex* BindingCaller<JSIDBIndex>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIDBIndex*>(state.thisValue());
}

static inline JSValue jsIDBIndexNameGetter(ExecState&, JSIDBIndex&, ThrowScope& throwScope);

EncodedJSValue jsIDBIndexName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBIndex>::attribute<jsIDBIndexNameGetter>(state, thisValue, "name");
}

static inline JSValue jsIDBIndexNameGetter(ExecState& state, JSIDBIndex& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsIDBIndexObjectStoreGetter(ExecState&, JSIDBIndex&, ThrowScope& throwScope);

EncodedJSValue jsIDBIndexObjectStore(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBIndex>::attribute<jsIDBIndexObjectStoreGetter>(state, thisValue, "objectStore");
}

static inline JSValue jsIDBIndexObjectStoreGetter(ExecState& state, JSIDBIndex& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<IDBObjectStore>>(state, *thisObject.globalObject(), impl.objectStore());
    return result;
}

static inline JSValue jsIDBIndexKeyPathGetter(ExecState&, JSIDBIndex&, ThrowScope& throwScope);

EncodedJSValue jsIDBIndexKeyPath(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBIndex>::attribute<jsIDBIndexKeyPathGetter>(state, thisValue, "keyPath");
}

static inline JSValue jsIDBIndexKeyPathGetter(ExecState& state, JSIDBIndex& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLUnion<IDLDOMString, IDLSequence<IDLDOMString>>>>(state, *thisObject.globalObject(), impl.keyPath());
    return result;
}

static inline JSValue jsIDBIndexMultiEntryGetter(ExecState&, JSIDBIndex&, ThrowScope& throwScope);

EncodedJSValue jsIDBIndexMultiEntry(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBIndex>::attribute<jsIDBIndexMultiEntryGetter>(state, thisValue, "multiEntry");
}

static inline JSValue jsIDBIndexMultiEntryGetter(ExecState& state, JSIDBIndex& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.multiEntry());
    return result;
}

static inline JSValue jsIDBIndexUniqueGetter(ExecState&, JSIDBIndex&, ThrowScope& throwScope);

EncodedJSValue jsIDBIndexUnique(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBIndex>::attribute<jsIDBIndexUniqueGetter>(state, thisValue, "unique");
}

static inline JSValue jsIDBIndexUniqueGetter(ExecState& state, JSIDBIndex& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.unique());
    return result;
}

EncodedJSValue jsIDBIndexConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIDBIndexPrototype* domObject = jsDynamicDowncast<JSIDBIndexPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIDBIndex::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIDBIndexConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIDBIndexPrototype* domObject = jsDynamicDowncast<JSIDBIndexPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSIDBIndexNameFunction(ExecState&, JSIDBIndex&, JSValue, ThrowScope&);

bool setJSIDBIndexName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBIndex>::setAttribute<setJSIDBIndexNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSIDBIndexNameFunction(ExecState& state, JSIDBIndex& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setName(WTFMove(nativeValue)));
    return true;
}


JSValue JSIDBIndex::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBIndexConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionOpenCursor1Caller>(state, "openCursor");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto range = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "IDBIndex", "openCursor", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto directionValue = state->argument(1);
    IDBCursorDirection direction;
    if (directionValue.isUndefined())
        direction = IDBCursorDirection::Next;
    else {
        auto optionalValue = parseEnumeration<IDBCursorDirection>(*state, directionValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "direction", "IDBIndex", "openCursor", expectedEnumerationValues<IDBCursorDirection>());
        direction = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.openCursor(*state, WTFMove(range), direction)));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionOpenCursor2Caller>(state, "openCursor");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenCursor2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto directionValue = state->argument(1);
    IDBCursorDirection direction;
    if (directionValue.isUndefined())
        direction = IDBCursorDirection::Next;
    else {
        auto optionalValue = parseEnumeration<IDBCursorDirection>(*state, directionValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "direction", "IDBIndex", "openCursor", expectedEnumerationValues<IDBCursorDirection>());
        direction = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.openCursor(*state, WTFMove(key), direction)));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionOpenCursor(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsIDBIndexPrototypeFunctionOpenCursor1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        return jsIDBIndexPrototypeFunctionOpenCursor2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionOpenCursor1(state);
        return jsIDBIndexPrototypeFunctionOpenCursor2(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionOpenKeyCursor1Caller>(state, "openKeyCursor");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto range = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "IDBIndex", "openKeyCursor", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto directionValue = state->argument(1);
    IDBCursorDirection direction;
    if (directionValue.isUndefined())
        direction = IDBCursorDirection::Next;
    else {
        auto optionalValue = parseEnumeration<IDBCursorDirection>(*state, directionValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "direction", "IDBIndex", "openKeyCursor", expectedEnumerationValues<IDBCursorDirection>());
        direction = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.openKeyCursor(*state, WTFMove(range), direction)));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionOpenKeyCursor2Caller>(state, "openKeyCursor");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionOpenKeyCursor2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto directionValue = state->argument(1);
    IDBCursorDirection direction;
    if (directionValue.isUndefined())
        direction = IDBCursorDirection::Next;
    else {
        auto optionalValue = parseEnumeration<IDBCursorDirection>(*state, directionValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "direction", "IDBIndex", "openKeyCursor", expectedEnumerationValues<IDBCursorDirection>());
        direction = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.openKeyCursor(*state, WTFMove(key), direction)));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionOpenKeyCursor(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        return jsIDBIndexPrototypeFunctionOpenKeyCursor2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionOpenKeyCursor1(state);
        return jsIDBIndexPrototypeFunctionOpenKeyCursor2(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGet1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGet1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGet1Caller>(state, "get");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGet1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "key", "IDBIndex", "get", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.get(*state, WTFMove(key))));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGet2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGet2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGet2Caller>(state, "get");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGet2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.get(*state, WTFMove(key))));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGet(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGet1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGet1(state);
        return jsIDBIndexPrototypeFunctionGet2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetKey1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetKey1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetKey1Caller>(state, "getKey");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetKey1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "key", "IDBIndex", "getKey", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getKey(*state, WTFMove(key))));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetKey2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetKey2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetKey2Caller>(state, "getKey");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetKey2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getKey(*state, WTFMove(key))));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetKey(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGetKey1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGetKey1(state);
        return jsIDBIndexPrototypeFunctionGetKey2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAll1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetAll1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetAll1Caller>(state, "getAll");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAll1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto range = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "IDBIndex", "getAll", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = state->argument(1).isUndefined() ? std::optional<uint32_t>() : convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::EnforceRange);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getAll(*state, WTFMove(range), WTFMove(count))));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAll2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetAll2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetAll2Caller>(state, "getAll");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAll2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = state->argument(1).isUndefined() ? std::optional<uint32_t>() : convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::EnforceRange);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getAll(*state, WTFMove(key), WTFMove(count))));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetAll(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsIDBIndexPrototypeFunctionGetAll1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        return jsIDBIndexPrototypeFunctionGetAll2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGetAll1(state);
        return jsIDBIndexPrototypeFunctionGetAll2(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetAllKeys1Caller>(state, "getAllKeys");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto range = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "IDBIndex", "getAllKeys", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = state->argument(1).isUndefined() ? std::optional<uint32_t>() : convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::EnforceRange);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getAllKeys(*state, WTFMove(range), WTFMove(count))));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionGetAllKeys2Caller>(state, "getAllKeys");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionGetAllKeys2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = state->argument(1).isUndefined() ? std::optional<uint32_t>() : convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::EnforceRange);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.getAllKeys(*state, WTFMove(key), WTFMove(count))));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionGetAllKeys(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        return jsIDBIndexPrototypeFunctionGetAllKeys2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionGetAllKeys1(state);
        return jsIDBIndexPrototypeFunctionGetAllKeys2(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionCount1Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionCount1(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionCount1Caller>(state, "count");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionCount1Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto range = convert<IDLNullable<IDLInterface<IDBKeyRange>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "range", "IDBIndex", "count", "IDBKeyRange"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.count(*state, WTFMove(range))));
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionCount2Caller(JSC::ExecState*, JSIDBIndex*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBIndexPrototypeFunctionCount2(ExecState* state)
{
    return BindingCaller<JSIDBIndex>::callOperation<jsIDBIndexPrototypeFunctionCount2Caller>(state, "count");
}

static inline JSC::EncodedJSValue jsIDBIndexPrototypeFunctionCount2Caller(JSC::ExecState* state, JSIDBIndex* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.count(*state, WTFMove(key))));
}

EncodedJSValue JSC_HOST_CALL jsIDBIndexPrototypeFunctionCount(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 0) {
        return jsIDBIndexPrototypeFunctionCount1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return jsIDBIndexPrototypeFunctionCount1(state);
        if (distinguishingArg.isUndefinedOrNull())
            return jsIDBIndexPrototypeFunctionCount1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSIDBKeyRange::info()))
            return jsIDBIndexPrototypeFunctionCount1(state);
        return jsIDBIndexPrototypeFunctionCount2(state);
    }
    return throwVMTypeError(state, throwScope);
}

void JSIDBIndex::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBIndex*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSIDBIndex::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBIndex*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

bool JSIDBIndexOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsIDBIndex = jsCast<JSIDBIndex*>(handle.slot()->asCell());
    IDBIndex* root = &jsIDBIndex->wrapped();
    return visitor.containsOpaqueRoot(root);
}

void JSIDBIndexOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIDBIndex = static_cast<JSIDBIndex*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIDBIndex->wrapped(), jsIDBIndex);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IDBIndex>&& impl)
{
    return createWrapper<IDBIndex>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IDBIndex& impl)
{
    return wrap(state, globalObject, impl);
}

IDBIndex* JSIDBIndex::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIDBIndex*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INDEXED_DATABASE)
