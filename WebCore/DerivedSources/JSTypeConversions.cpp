/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTypeConversions.h"

#include "JSDOMBinding.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsTypeConversionsTestLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestUnsignedLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestUnsignedLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeUnsignedLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestUnsignedLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestUnsignedLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeUnsignedLongLong(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestByte(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestByte(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeByte(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeByte(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestOctet(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestOctet(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeOctet(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeOctet(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestUnsignedShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestUnsignedShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSTypeConversionsTestEnforceRangeUnsignedShort(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSTypeConversionsPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSTypeConversionsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTypeConversionsPrototype* ptr = new (NotNull, JSC::allocateCell<JSTypeConversionsPrototype>(vm.heap)) JSTypeConversionsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTypeConversionsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSTypeConversionsPrototypeTableValues[] =
{
    { "testLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestLong) } },
    { "testEnforceRangeLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeLong) } },
    { "testUnsignedLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestUnsignedLong) } },
    { "testEnforceRangeUnsignedLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeUnsignedLong) } },
    { "testLongLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestLongLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestLongLong) } },
    { "testEnforceRangeLongLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeLongLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeLongLong) } },
    { "testUnsignedLongLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedLongLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestUnsignedLongLong) } },
    { "testEnforceRangeUnsignedLongLong", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedLongLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeUnsignedLongLong) } },
    { "testByte", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestByte), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestByte) } },
    { "testEnforceRangeByte", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeByte), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeByte) } },
    { "testOctet", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestOctet), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestOctet) } },
    { "testEnforceRangeOctet", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeOctet), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeOctet) } },
    { "testShort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestShort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestShort) } },
    { "testEnforceRangeShort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeShort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeShort) } },
    { "testUnsignedShort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestUnsignedShort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestUnsignedShort) } },
    { "testEnforceRangeUnsignedShort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTypeConversionsTestEnforceRangeUnsignedShort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTypeConversionsTestEnforceRangeUnsignedShort) } },
};

const ClassInfo JSTypeConversionsPrototype::s_info = { "TypeConversionsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTypeConversionsPrototype) };

void JSTypeConversionsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTypeConversionsPrototypeTableValues, *this);
}

const ClassInfo JSTypeConversions::s_info = { "TypeConversions", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTypeConversions) };

JSTypeConversions::JSTypeConversions(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TypeConversions>&& impl)
    : JSDOMWrapper<TypeConversions>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSTypeConversions::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTypeConversionsPrototype::create(vm, globalObject, JSTypeConversionsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSTypeConversions::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTypeConversions>(vm, globalObject);
}

void JSTypeConversions::destroy(JSC::JSCell* cell)
{
    JSTypeConversions* thisObject = static_cast<JSTypeConversions*>(cell);
    thisObject->JSTypeConversions::~JSTypeConversions();
}

EncodedJSValue jsTypeConversionsTestLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testLong");
        return throwGetterTypeError(*state, "TypeConversions", "testLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeLong");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testUnsignedLong");
        return throwGetterTypeError(*state, "TypeConversions", "testUnsignedLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testUnsignedLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeUnsignedLong");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestLongLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testLongLong");
        return throwGetterTypeError(*state, "TypeConversions", "testLongLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeLongLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeLongLong");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeLongLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedLongLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testUnsignedLongLong");
        return throwGetterTypeError(*state, "TypeConversions", "testUnsignedLongLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testUnsignedLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedLongLong(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeUnsignedLongLong");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedLongLong");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedLongLong());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestByte(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testByte");
        return throwGetterTypeError(*state, "TypeConversions", "testByte");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testByte());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeByte(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeByte");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeByte");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeByte());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestOctet(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testOctet");
        return throwGetterTypeError(*state, "TypeConversions", "testOctet");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testOctet());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeOctet(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeOctet");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeOctet");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeOctet());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestShort(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testShort");
        return throwGetterTypeError(*state, "TypeConversions", "testShort");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeShort(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeShort");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeShort");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestUnsignedShort(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testUnsignedShort");
        return throwGetterTypeError(*state, "TypeConversions", "testUnsignedShort");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testUnsignedShort());
    return JSValue::encode(result);
}


EncodedJSValue jsTypeConversionsTestEnforceRangeUnsignedShort(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "TypeConversions", "testEnforceRangeUnsignedShort");
        return throwGetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedShort");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.testEnforceRangeUnsignedShort());
    return JSValue::encode(result);
}


void setJSTypeConversionsTestLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    int nativeValue = toInt32(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    int nativeValue = toInt32(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeLong(nativeValue);
}


void setJSTypeConversionsTestUnsignedLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testUnsignedLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testUnsignedLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    unsigned nativeValue = toUInt32(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestUnsignedLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeUnsignedLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    unsigned nativeValue = toUInt32(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeUnsignedLong(nativeValue);
}


void setJSTypeConversionsTestLongLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testLongLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testLongLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    long long nativeValue = toInt64(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestLongLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeLongLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeLongLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeLongLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    long long nativeValue = toInt64(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeLongLong(nativeValue);
}


void setJSTypeConversionsTestUnsignedLongLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testUnsignedLongLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testUnsignedLongLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    unsigned long long nativeValue = toUInt64(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestUnsignedLongLong(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedLongLong(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeUnsignedLongLong");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedLongLong");
        return;
    }
    auto& impl = castedThis->wrapped();
    unsigned long long nativeValue = toUInt64(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeUnsignedLongLong(nativeValue);
}


void setJSTypeConversionsTestByte(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testByte");
        else
            throwSetterTypeError(*state, "TypeConversions", "testByte");
        return;
    }
    auto& impl = castedThis->wrapped();
    int8_t nativeValue = toInt8(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestByte(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeByte(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeByte");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeByte");
        return;
    }
    auto& impl = castedThis->wrapped();
    int8_t nativeValue = toInt8(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeByte(nativeValue);
}


void setJSTypeConversionsTestOctet(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testOctet");
        else
            throwSetterTypeError(*state, "TypeConversions", "testOctet");
        return;
    }
    auto& impl = castedThis->wrapped();
    uint8_t nativeValue = toUInt8(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestOctet(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeOctet(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeOctet");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeOctet");
        return;
    }
    auto& impl = castedThis->wrapped();
    uint8_t nativeValue = toUInt8(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeOctet(nativeValue);
}


void setJSTypeConversionsTestShort(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testShort");
        else
            throwSetterTypeError(*state, "TypeConversions", "testShort");
        return;
    }
    auto& impl = castedThis->wrapped();
    int16_t nativeValue = toInt16(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestShort(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeShort(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeShort");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeShort");
        return;
    }
    auto& impl = castedThis->wrapped();
    int16_t nativeValue = toInt16(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeShort(nativeValue);
}


void setJSTypeConversionsTestUnsignedShort(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testUnsignedShort");
        else
            throwSetterTypeError(*state, "TypeConversions", "testUnsignedShort");
        return;
    }
    auto& impl = castedThis->wrapped();
    uint16_t nativeValue = toUInt16(state, value, NormalConversion);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestUnsignedShort(nativeValue);
}


void setJSTypeConversionsTestEnforceRangeUnsignedShort(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSTypeConversions* castedThis = jsDynamicCast<JSTypeConversions*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSTypeConversionsPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "TypeConversions", "testEnforceRangeUnsignedShort");
        else
            throwSetterTypeError(*state, "TypeConversions", "testEnforceRangeUnsignedShort");
        return;
    }
    auto& impl = castedThis->wrapped();
    uint16_t nativeValue = toUInt16(state, value, EnforceRange);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setTestEnforceRangeUnsignedShort(nativeValue);
}


bool JSTypeConversionsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSTypeConversionsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTypeConversions = jsCast<JSTypeConversions*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsTypeConversions->wrapped(), jsTypeConversions);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, TypeConversions* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSTypeConversions>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, TypeConversions* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSTypeConversions>(globalObject, impl))
        return result;
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to TypeConversions.
    COMPILE_ASSERT(!__is_polymorphic(TypeConversions), TypeConversions_is_polymorphic_but_idl_claims_not_to_be);
#endif
    return createNewWrapper<JSTypeConversions>(globalObject, impl);
}

TypeConversions* JSTypeConversions::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSTypeConversions*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
