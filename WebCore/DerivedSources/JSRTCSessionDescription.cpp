/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCSessionDescription.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSString.h>
#include <runtime/ObjectConstructor.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, RTCSessionDescription::SdpType enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("offer"),
        ASCIILiteral("pranswer"),
        ASCIILiteral("answer"),
        ASCIILiteral("rollback"),
    };
    static_assert(static_cast<size_t>(RTCSessionDescription::SdpType::Offer) == 0, "RTCSessionDescription::SdpType::Offer is not 0 as expected");
    static_assert(static_cast<size_t>(RTCSessionDescription::SdpType::Pranswer) == 1, "RTCSessionDescription::SdpType::Pranswer is not 1 as expected");
    static_assert(static_cast<size_t>(RTCSessionDescription::SdpType::Answer) == 2, "RTCSessionDescription::SdpType::Answer is not 2 as expected");
    static_assert(static_cast<size_t>(RTCSessionDescription::SdpType::Rollback) == 3, "RTCSessionDescription::SdpType::Rollback is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<RTCSessionDescription::SdpType> parseEnumeration<RTCSessionDescription::SdpType>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "offer")
        return RTCSessionDescription::SdpType::Offer;
    if (stringValue == "pranswer")
        return RTCSessionDescription::SdpType::Pranswer;
    if (stringValue == "answer")
        return RTCSessionDescription::SdpType::Answer;
    if (stringValue == "rollback")
        return RTCSessionDescription::SdpType::Rollback;
    return std::nullopt;
}

template<> RTCSessionDescription::SdpType convertEnumeration<RTCSessionDescription::SdpType>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<RTCSessionDescription::SdpType>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<RTCSessionDescription::SdpType>()
{
    return "\"offer\", \"pranswer\", \"answer\", \"rollback\"";
}

template<> RTCSessionDescription::Init convertDictionary<RTCSessionDescription::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCSessionDescription::Init result;
    JSValue sdpValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sdp"));
    if (!sdpValue.isUndefined()) {
        result.sdp = convert<IDLDOMString>(state, sdpValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.sdp = emptyString();
    JSValue typeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "type"));
    if (!typeValue.isUndefined()) {
        result.type = convert<IDLEnumeration<RTCSessionDescription::SdpType>>(state, typeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "type", "RTCSessionDescriptionInit", "RTCSdpType");
        return { };
    }
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCSessionDescriptionPrototypeFunctionToJSON(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRTCSessionDescriptionType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCSessionDescriptionSdp(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCSessionDescriptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCSessionDescriptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCSessionDescriptionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCSessionDescriptionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCSessionDescriptionPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCSessionDescriptionPrototype>(vm.heap)) JSRTCSessionDescriptionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCSessionDescriptionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSRTCSessionDescriptionConstructor = JSDOMConstructor<JSRTCSessionDescription>;

template<> EncodedJSValue JSC_HOST_CALL JSRTCSessionDescriptionConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSRTCSessionDescriptionConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto descriptionInitDict = convert<IDLDictionary<RTCSessionDescription::Init>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = RTCSessionDescription::create(WTFMove(descriptionInitDict));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<RTCSessionDescription>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSRTCSessionDescriptionConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRTCSessionDescriptionConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSRTCSessionDescription::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("RTCSessionDescription"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSRTCSessionDescriptionConstructor::s_info = { "RTCSessionDescription", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCSessionDescriptionConstructor) };

/* Hash table for prototype */

static const HashTableValue JSRTCSessionDescriptionPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCSessionDescriptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCSessionDescriptionConstructor) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCSessionDescriptionType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "sdp", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCSessionDescriptionSdp), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toJSON", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCSessionDescriptionPrototypeFunctionToJSON), (intptr_t) (0) } },
};

const ClassInfo JSRTCSessionDescriptionPrototype::s_info = { "RTCSessionDescriptionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCSessionDescriptionPrototype) };

void JSRTCSessionDescriptionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCSessionDescriptionPrototypeTableValues, *this);
}

const ClassInfo JSRTCSessionDescription::s_info = { "RTCSessionDescription", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCSessionDescription) };

JSRTCSessionDescription::JSRTCSessionDescription(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCSessionDescription>&& impl)
    : JSDOMWrapper<RTCSessionDescription>(structure, globalObject, WTFMove(impl))
{
}

void JSRTCSessionDescription::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRTCSessionDescription::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCSessionDescriptionPrototype::create(vm, globalObject, JSRTCSessionDescriptionPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRTCSessionDescription::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCSessionDescription>(vm, globalObject);
}

void JSRTCSessionDescription::destroy(JSC::JSCell* cell)
{
    JSRTCSessionDescription* thisObject = static_cast<JSRTCSessionDescription*>(cell);
    thisObject->JSRTCSessionDescription::~JSRTCSessionDescription();
}

template<> inline JSRTCSessionDescription* BindingCaller<JSRTCSessionDescription>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRTCSessionDescription*>(JSValue::decode(thisValue));
}

template<> inline JSRTCSessionDescription* BindingCaller<JSRTCSessionDescription>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSRTCSessionDescription*>(state.thisValue());
}

static inline JSValue jsRTCSessionDescriptionTypeGetter(ExecState&, JSRTCSessionDescription&, ThrowScope& throwScope);

EncodedJSValue jsRTCSessionDescriptionType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCSessionDescription>::attribute<jsRTCSessionDescriptionTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsRTCSessionDescriptionTypeGetter(ExecState& state, JSRTCSessionDescription& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<RTCSessionDescription::SdpType>>(state, impl.type());
    return result;
}

static inline JSValue jsRTCSessionDescriptionSdpGetter(ExecState&, JSRTCSessionDescription&, ThrowScope& throwScope);

EncodedJSValue jsRTCSessionDescriptionSdp(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCSessionDescription>::attribute<jsRTCSessionDescriptionSdpGetter>(state, thisValue, "sdp");
}

static inline JSValue jsRTCSessionDescriptionSdpGetter(ExecState& state, JSRTCSessionDescription& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.sdp());
    return result;
}

EncodedJSValue jsRTCSessionDescriptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSRTCSessionDescriptionPrototype* domObject = jsDynamicDowncast<JSRTCSessionDescriptionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSRTCSessionDescription::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSRTCSessionDescriptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRTCSessionDescriptionPrototype* domObject = jsDynamicDowncast<JSRTCSessionDescriptionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSRTCSessionDescription::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCSessionDescriptionConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline EncodedJSValue jsRTCSessionDescriptionPrototypeFunctionToJSONCaller(ExecState* state, JSRTCSessionDescription* thisObject, JSC::ThrowScope& throwScope)
{
    auto& vm = state->vm();
    auto* result = constructEmptyObject(state);

    auto typeValue = jsRTCSessionDescriptionTypeGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "type"), typeValue);

    auto sdpValue = jsRTCSessionDescriptionSdpGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "sdp"), sdpValue);

    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCSessionDescriptionPrototypeFunctionToJSON(ExecState* state)
{
    return BindingCaller<JSRTCSessionDescription>::callOperation<jsRTCSessionDescriptionPrototypeFunctionToJSONCaller>(state, "toJSON");
}

bool JSRTCSessionDescriptionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCSessionDescriptionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCSessionDescription = static_cast<JSRTCSessionDescription*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCSessionDescription->wrapped(), jsRTCSessionDescription);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<RTCSessionDescription>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to RTCSessionDescription.
    static_assert(!__is_polymorphic(RTCSessionDescription), "RTCSessionDescription is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<RTCSessionDescription>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, RTCSessionDescription& impl)
{
    return wrap(state, globalObject, impl);
}

RTCSessionDescription* JSRTCSessionDescription::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSRTCSessionDescription*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
