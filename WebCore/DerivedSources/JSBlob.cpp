/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSBlob.h"

#include "JSBlob.h"
#include "JSBlobPropertyBag.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsBlobPrototypeFunctionSlice(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsBlobSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBlobType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsBlobConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSBlobConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSBlobPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSBlobPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSBlobPrototype* ptr = new (NotNull, JSC::allocateCell<JSBlobPrototype>(vm.heap)) JSBlobPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSBlobPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSBlobConstructor = JSDOMConstructor<JSBlob>;

template<> EncodedJSValue JSC_HOST_CALL JSBlobConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSBlobConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto blobParts = state->argument(0).isUndefined() ? Converter<IDLSequence<IDLUnion<IDLInterface<ArrayBufferView>, IDLInterface<ArrayBuffer>, IDLInterface<Blob>, IDLUSVString>>>::ReturnType{ } : convert<IDLSequence<IDLUnion<IDLInterface<ArrayBufferView>, IDLInterface<ArrayBuffer>, IDLInterface<Blob>, IDLUSVString>>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<BlobPropertyBag>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = Blob::create(WTFMove(blobParts), WTFMove(options));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<Blob>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSBlobConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSBlobConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSBlob::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Blob"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSBlobConstructor::s_info = { "Blob", &Base::s_info, 0, CREATE_METHOD_TABLE(JSBlobConstructor) };

/* Hash table for prototype */

static const HashTableValue JSBlobPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBlobConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSBlobConstructor) } },
    { "size", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBlobSize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsBlobType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "slice", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsBlobPrototypeFunctionSlice), (intptr_t) (0) } },
};

const ClassInfo JSBlobPrototype::s_info = { "BlobPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSBlobPrototype) };

void JSBlobPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSBlobPrototypeTableValues, *this);
}

const ClassInfo JSBlob::s_info = { "Blob", &Base::s_info, 0, CREATE_METHOD_TABLE(JSBlob) };

JSBlob::JSBlob(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Blob>&& impl)
    : JSDOMWrapper<Blob>(structure, globalObject, WTFMove(impl))
{
}

void JSBlob::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSBlob::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSBlobPrototype::create(vm, globalObject, JSBlobPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSBlob::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSBlob>(vm, globalObject);
}

void JSBlob::destroy(JSC::JSCell* cell)
{
    JSBlob* thisObject = static_cast<JSBlob*>(cell);
    thisObject->JSBlob::~JSBlob();
}

template<> inline JSBlob* BindingCaller<JSBlob>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSBlob*>(JSValue::decode(thisValue));
}

template<> inline JSBlob* BindingCaller<JSBlob>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSBlob*>(state.thisValue());
}

static inline JSValue jsBlobSizeGetter(ExecState&, JSBlob&, ThrowScope& throwScope);

EncodedJSValue jsBlobSize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSBlob>::attribute<jsBlobSizeGetter>(state, thisValue, "size");
}

static inline JSValue jsBlobSizeGetter(ExecState& state, JSBlob& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLongLong>(impl.size());
    return result;
}

static inline JSValue jsBlobTypeGetter(ExecState&, JSBlob&, ThrowScope& throwScope);

EncodedJSValue jsBlobType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSBlob>::attribute<jsBlobTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsBlobTypeGetter(ExecState& state, JSBlob& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

EncodedJSValue jsBlobConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSBlobPrototype* domObject = jsDynamicDowncast<JSBlobPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSBlob::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSBlobConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSBlobPrototype* domObject = jsDynamicDowncast<JSBlobPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSBlob::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSBlobConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsBlobPrototypeFunctionSliceCaller(JSC::ExecState*, JSBlob*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsBlobPrototypeFunctionSlice(ExecState* state)
{
    return BindingCaller<JSBlob>::callOperation<jsBlobPrototypeFunctionSliceCaller>(state, "slice");
}

static inline JSC::EncodedJSValue jsBlobPrototypeFunctionSliceCaller(JSC::ExecState* state, JSBlob* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto start = convert<IDLLongLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = state->argument(1).isUndefined() ? 0x7FFFFFFFFFFFFFFF : convert<IDLLongLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto contentType = state->argument(2).isUndefined() ? String() : convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<Blob>>(*state, *castedThis->globalObject(), impl.slice(WTFMove(start), WTFMove(end), WTFMove(contentType))));
}

bool JSBlobOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsBlob = jsCast<JSBlob*>(handle.slot()->asCell());
    Blob* root = &jsBlob->wrapped();
    return visitor.containsOpaqueRoot(root);
}

void JSBlobOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsBlob = static_cast<JSBlob*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsBlob->wrapped(), jsBlob);
}

Blob* JSBlob::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSBlob*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
