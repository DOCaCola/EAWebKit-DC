/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMRectReadOnly.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMRectInit.h"
#include "JSDOMRectReadOnly.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/ObjectConstructor.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMRectReadOnlyConstructorFunctionFromRect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMRectReadOnlyPrototypeFunctionToJSON(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMRectReadOnlyX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyTop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyRight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyBottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyLeft(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMRectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMRectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMRectReadOnlyPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMRectReadOnlyPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMRectReadOnlyPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMRectReadOnlyPrototype>(vm.heap)) JSDOMRectReadOnlyPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMRectReadOnlyPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMRectReadOnlyConstructor = JSDOMConstructor<JSDOMRectReadOnly>;

/* Hash table for constructor */

static const HashTableValue JSDOMRectReadOnlyConstructorTableValues[] =
{
    { "fromRect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMRectReadOnlyConstructorFunctionFromRect), (intptr_t) (0) } },
};

template<> EncodedJSValue JSC_HOST_CALL JSDOMRectReadOnlyConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMRectReadOnlyConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto x = state->argument(0).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = state->argument(1).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto width = state->argument(2).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto height = state->argument(3).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMRectReadOnly::create(WTFMove(x), WTFMove(y), WTFMove(width), WTFMove(height));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMRectReadOnly>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSDOMRectReadOnlyConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDOMRectReadOnlyConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMRectReadOnly::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DOMRectReadOnly"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDOMRectReadOnlyConstructorTableValues, *this);
}

template<> const ClassInfo JSDOMRectReadOnlyConstructor::s_info = { "DOMRectReadOnly", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRectReadOnlyConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMRectReadOnlyPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMRectReadOnlyConstructor) } },
    { "x", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "y", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "width", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "height", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "top", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyTop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "right", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyRight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "bottom", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyBottom), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "left", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMRectReadOnlyLeft), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toJSON", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMRectReadOnlyPrototypeFunctionToJSON), (intptr_t) (0) } },
};

const ClassInfo JSDOMRectReadOnlyPrototype::s_info = { "DOMRectReadOnlyPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRectReadOnlyPrototype) };

void JSDOMRectReadOnlyPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMRectReadOnlyPrototypeTableValues, *this);
}

const ClassInfo JSDOMRectReadOnly::s_info = { "DOMRectReadOnly", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMRectReadOnly) };

JSDOMRectReadOnly::JSDOMRectReadOnly(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMRectReadOnly>&& impl)
    : JSDOMWrapper<DOMRectReadOnly>(structure, globalObject, WTFMove(impl))
{
}

void JSDOMRectReadOnly::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMRectReadOnly::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMRectReadOnlyPrototype::create(vm, globalObject, JSDOMRectReadOnlyPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDOMRectReadOnly::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMRectReadOnly>(vm, globalObject);
}

void JSDOMRectReadOnly::destroy(JSC::JSCell* cell)
{
    JSDOMRectReadOnly* thisObject = static_cast<JSDOMRectReadOnly*>(cell);
    thisObject->JSDOMRectReadOnly::~JSDOMRectReadOnly();
}

template<> inline JSDOMRectReadOnly* BindingCaller<JSDOMRectReadOnly>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMRectReadOnly*>(JSValue::decode(thisValue));
}

template<> inline JSDOMRectReadOnly* BindingCaller<JSDOMRectReadOnly>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMRectReadOnly*>(state.thisValue());
}

static inline JSValue jsDOMRectReadOnlyXGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyXGetter>(state, thisValue, "x");
}

static inline JSValue jsDOMRectReadOnlyXGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.x());
    return result;
}

static inline JSValue jsDOMRectReadOnlyYGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyYGetter>(state, thisValue, "y");
}

static inline JSValue jsDOMRectReadOnlyYGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.y());
    return result;
}

static inline JSValue jsDOMRectReadOnlyWidthGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsDOMRectReadOnlyWidthGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.width());
    return result;
}

static inline JSValue jsDOMRectReadOnlyHeightGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsDOMRectReadOnlyHeightGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.height());
    return result;
}

static inline JSValue jsDOMRectReadOnlyTopGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyTop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyTopGetter>(state, thisValue, "top");
}

static inline JSValue jsDOMRectReadOnlyTopGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.top());
    return result;
}

static inline JSValue jsDOMRectReadOnlyRightGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyRight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyRightGetter>(state, thisValue, "right");
}

static inline JSValue jsDOMRectReadOnlyRightGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.right());
    return result;
}

static inline JSValue jsDOMRectReadOnlyBottomGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyBottom(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyBottomGetter>(state, thisValue, "bottom");
}

static inline JSValue jsDOMRectReadOnlyBottomGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.bottom());
    return result;
}

static inline JSValue jsDOMRectReadOnlyLeftGetter(ExecState&, JSDOMRectReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMRectReadOnlyLeft(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMRectReadOnly>::attribute<jsDOMRectReadOnlyLeftGetter>(state, thisValue, "left");
}

static inline JSValue jsDOMRectReadOnlyLeftGetter(ExecState& state, JSDOMRectReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.left());
    return result;
}

EncodedJSValue jsDOMRectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMRectReadOnlyPrototype* domObject = jsDynamicDowncast<JSDOMRectReadOnlyPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMRectReadOnly::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMRectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMRectReadOnlyPrototype* domObject = jsDynamicDowncast<JSDOMRectReadOnlyPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDOMRectReadOnly::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMRectReadOnlyConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMRectReadOnlyConstructorFunctionFromRect(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto other = convert<IDLDictionary<DOMRectInit>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMRectReadOnly>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), DOMRectReadOnly::fromRect(WTFMove(other))));
}

static inline EncodedJSValue jsDOMRectReadOnlyPrototypeFunctionToJSONCaller(ExecState* state, JSDOMRectReadOnly* thisObject, JSC::ThrowScope& throwScope)
{
    auto& vm = state->vm();
    auto* result = constructEmptyObject(state);

    auto xValue = jsDOMRectReadOnlyXGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "x"), xValue);

    auto yValue = jsDOMRectReadOnlyYGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "y"), yValue);

    auto widthValue = jsDOMRectReadOnlyWidthGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "width"), widthValue);

    auto heightValue = jsDOMRectReadOnlyHeightGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "height"), heightValue);

    auto topValue = jsDOMRectReadOnlyTopGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "top"), topValue);

    auto rightValue = jsDOMRectReadOnlyRightGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "right"), rightValue);

    auto bottomValue = jsDOMRectReadOnlyBottomGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "bottom"), bottomValue);

    auto leftValue = jsDOMRectReadOnlyLeftGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "left"), leftValue);

    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMRectReadOnlyPrototypeFunctionToJSON(ExecState* state)
{
    return BindingCaller<JSDOMRectReadOnly>::callOperation<jsDOMRectReadOnlyPrototypeFunctionToJSONCaller>(state, "toJSON");
}

bool JSDOMRectReadOnlyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMRectReadOnlyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMRectReadOnly = static_cast<JSDOMRectReadOnly*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMRectReadOnly->wrapped(), jsDOMRectReadOnly);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMRectReadOnly>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMRectReadOnly.
    static_assert(!__is_polymorphic(DOMRectReadOnly), "DOMRectReadOnly is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DOMRectReadOnly>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMRectReadOnly& impl)
{
    return wrap(state, globalObject, impl);
}

DOMRectReadOnly* JSDOMRectReadOnly::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDOMRectReadOnly*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
