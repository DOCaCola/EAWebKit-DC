/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSShadowRoot.h"

#include "CustomElementReactionQueue.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSElement.h"
#include "JSShadowRootMode.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsShadowRootPrototypeFunctionElementFromPoint(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsShadowRootMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsShadowRootHost(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsShadowRootInnerHTML(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSShadowRootInnerHTML(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsShadowRootActiveElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#if ENABLE(POINTER_LOCK)
JSC::EncodedJSValue jsShadowRootPointerLockElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsShadowRootConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSShadowRootConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSShadowRootPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSShadowRootPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSShadowRootPrototype* ptr = new (NotNull, JSC::allocateCell<JSShadowRootPrototype>(vm.heap)) JSShadowRootPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSShadowRootPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSShadowRootConstructor = JSDOMConstructorNotConstructable<JSShadowRoot>;

template<> JSValue JSShadowRootConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSDocumentFragment::getConstructor(vm, &globalObject);
}

template<> void JSShadowRootConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSShadowRoot::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("ShadowRoot"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSShadowRootConstructor::s_info = { "ShadowRoot", &Base::s_info, 0, CREATE_METHOD_TABLE(JSShadowRootConstructor) };

/* Hash table for prototype */

static const HashTableValue JSShadowRootPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSShadowRootConstructor) } },
    { "mode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootMode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "host", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootHost), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "innerHTML", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootInnerHTML), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSShadowRootInnerHTML) } },
    { "activeElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootActiveElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#if ENABLE(POINTER_LOCK)
    { "pointerLockElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsShadowRootPointerLockElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "elementFromPoint", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsShadowRootPrototypeFunctionElementFromPoint), (intptr_t) (0) } },
};

const ClassInfo JSShadowRootPrototype::s_info = { "ShadowRootPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSShadowRootPrototype) };

void JSShadowRootPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSShadowRootPrototypeTableValues, *this);
}

const ClassInfo JSShadowRoot::s_info = { "ShadowRoot", &Base::s_info, 0, CREATE_METHOD_TABLE(JSShadowRoot) };

JSShadowRoot::JSShadowRoot(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ShadowRoot>&& impl)
    : JSDocumentFragment(structure, globalObject, WTFMove(impl))
{
}

void JSShadowRoot::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSShadowRoot::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSShadowRootPrototype::create(vm, globalObject, JSShadowRootPrototype::createStructure(vm, globalObject, JSDocumentFragment::prototype(vm, globalObject)));
}

JSObject* JSShadowRoot::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSShadowRoot>(vm, globalObject);
}

template<> inline JSShadowRoot* BindingCaller<JSShadowRoot>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSShadowRoot*>(JSValue::decode(thisValue));
}

template<> inline JSShadowRoot* BindingCaller<JSShadowRoot>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSShadowRoot*>(state.thisValue());
}

static inline JSValue jsShadowRootModeGetter(ExecState&, JSShadowRoot&, ThrowScope& throwScope);

EncodedJSValue jsShadowRootMode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSShadowRoot>::attribute<jsShadowRootModeGetter>(state, thisValue, "mode");
}

static inline JSValue jsShadowRootModeGetter(ExecState& state, JSShadowRoot& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<ShadowRootMode>>(state, impl.mode());
    return result;
}

static inline JSValue jsShadowRootHostGetter(ExecState&, JSShadowRoot&, ThrowScope& throwScope);

EncodedJSValue jsShadowRootHost(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSShadowRoot>::attribute<jsShadowRootHostGetter>(state, thisValue, "host");
}

static inline JSValue jsShadowRootHostGetter(ExecState& state, JSShadowRoot& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Element>>(state, *thisObject.globalObject(), impl.host());
    return result;
}

static inline JSValue jsShadowRootInnerHTMLGetter(ExecState&, JSShadowRoot&, ThrowScope& throwScope);

EncodedJSValue jsShadowRootInnerHTML(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSShadowRoot>::attribute<jsShadowRootInnerHTMLGetter>(state, thisValue, "innerHTML");
}

static inline JSValue jsShadowRootInnerHTMLGetter(ExecState& state, JSShadowRoot& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.innerHTML());
    return result;
}

static inline JSValue jsShadowRootActiveElementGetter(ExecState&, JSShadowRoot&, ThrowScope& throwScope);

EncodedJSValue jsShadowRootActiveElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSShadowRoot>::attribute<jsShadowRootActiveElementGetter>(state, thisValue, "activeElement");
}

static inline JSValue jsShadowRootActiveElementGetter(ExecState& state, JSShadowRoot& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Element>>>(state, *thisObject.globalObject(), impl.activeElement());
    return result;
}

#if ENABLE(POINTER_LOCK)
static inline JSValue jsShadowRootPointerLockElementGetter(ExecState&, JSShadowRoot&, ThrowScope& throwScope);

EncodedJSValue jsShadowRootPointerLockElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSShadowRoot>::attribute<jsShadowRootPointerLockElementGetter>(state, thisValue, "pointerLockElement");
}

static inline JSValue jsShadowRootPointerLockElementGetter(ExecState& state, JSShadowRoot& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Element>>>(state, *thisObject.globalObject(), impl.pointerLockElement());
    return result;
}

#endif

EncodedJSValue jsShadowRootConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSShadowRootPrototype* domObject = jsDynamicDowncast<JSShadowRootPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSShadowRoot::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSShadowRootConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSShadowRootPrototype* domObject = jsDynamicDowncast<JSShadowRootPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSShadowRootInnerHTMLFunction(ExecState&, JSShadowRoot&, JSValue, ThrowScope&);

bool setJSShadowRootInnerHTML(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSShadowRoot>::setAttribute<setJSShadowRootInnerHTMLFunction>(state, thisValue, encodedValue, "innerHTML");
}

static inline bool setJSShadowRootInnerHTMLFunction(ExecState& state, JSShadowRoot& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setInnerHTML(WTFMove(nativeValue)));
    return true;
}


JSValue JSShadowRoot::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSShadowRootConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsShadowRootPrototypeFunctionElementFromPointCaller(JSC::ExecState*, JSShadowRoot*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsShadowRootPrototypeFunctionElementFromPoint(ExecState* state)
{
    return BindingCaller<JSShadowRoot>::callOperation<jsShadowRootPrototypeFunctionElementFromPointCaller>(state, "elementFromPoint");
}

static inline JSC::EncodedJSValue jsShadowRootPrototypeFunctionElementFromPointCaller(JSC::ExecState* state, JSShadowRoot* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLInterface<Element>>>(*state, *castedThis->globalObject(), impl.elementFromPoint(WTFMove(x), WTFMove(y))));
}

void JSShadowRoot::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSShadowRoot*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7ShadowRoot@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore10ShadowRootE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<ShadowRoot>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7ShadowRoot@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore10ShadowRootE[2];
#if COMPILER(CLANG)
    // If this fails ShadowRoot does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(ShadowRoot), "ShadowRoot is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // ShadowRoot has subclasses. If ShadowRoot has subclasses that get passed
    // to toJS() we currently require ShadowRoot you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<ShadowRoot>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, ShadowRoot& impl)
{
    return wrap(state, globalObject, impl);
}


}
