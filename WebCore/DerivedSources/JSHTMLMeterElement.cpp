/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(METER_ELEMENT)

#include "JSHTMLMeterElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSNodeList.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsHTMLMeterElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementMin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementMin(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementMax(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementMax(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementLow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementLow(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementHigh(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementHigh(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementOptimum(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementOptimum(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMeterElementLabels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLMeterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMeterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLMeterElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLMeterElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLMeterElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLMeterElementPrototype>(vm.heap)) JSHTMLMeterElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLMeterElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLMeterElementConstructor = JSDOMConstructorNotConstructable<JSHTMLMeterElement>;

template<> JSValue JSHTMLMeterElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLMeterElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLMeterElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLMeterElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLMeterElementConstructor::s_info = { "HTMLMeterElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMeterElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLMeterElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementConstructor) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementValue) } },
    { "min", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementMin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementMin) } },
    { "max", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementMax), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementMax) } },
    { "low", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementLow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementLow) } },
    { "high", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementHigh), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementHigh) } },
    { "optimum", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementOptimum), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMeterElementOptimum) } },
    { "labels", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMeterElementLabels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSHTMLMeterElementPrototype::s_info = { "HTMLMeterElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMeterElementPrototype) };

void JSHTMLMeterElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLMeterElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLMeterElement::s_info = { "HTMLMeterElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMeterElement) };

JSHTMLMeterElement::JSHTMLMeterElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLMeterElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLMeterElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLMeterElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLMeterElementPrototype::create(vm, globalObject, JSHTMLMeterElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLMeterElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLMeterElement>(vm, globalObject);
}

template<> inline JSHTMLMeterElement* BindingCaller<JSHTMLMeterElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLMeterElement*>(JSValue::decode(thisValue));
}

static inline JSValue jsHTMLMeterElementValueGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementValueGetter>(state, thisValue, "value");
}

static inline JSValue jsHTMLMeterElementValueGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.value());
    return result;
}

static inline JSValue jsHTMLMeterElementMinGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementMin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementMinGetter>(state, thisValue, "min");
}

static inline JSValue jsHTMLMeterElementMinGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.min());
    return result;
}

static inline JSValue jsHTMLMeterElementMaxGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementMax(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementMaxGetter>(state, thisValue, "max");
}

static inline JSValue jsHTMLMeterElementMaxGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.max());
    return result;
}

static inline JSValue jsHTMLMeterElementLowGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementLow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementLowGetter>(state, thisValue, "low");
}

static inline JSValue jsHTMLMeterElementLowGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.low());
    return result;
}

static inline JSValue jsHTMLMeterElementHighGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementHigh(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementHighGetter>(state, thisValue, "high");
}

static inline JSValue jsHTMLMeterElementHighGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.high());
    return result;
}

static inline JSValue jsHTMLMeterElementOptimumGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementOptimum(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementOptimumGetter>(state, thisValue, "optimum");
}

static inline JSValue jsHTMLMeterElementOptimumGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.optimum());
    return result;
}

static inline JSValue jsHTMLMeterElementLabelsGetter(ExecState&, JSHTMLMeterElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMeterElementLabels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMeterElement>::attribute<jsHTMLMeterElementLabelsGetter>(state, thisValue, "labels");
}

static inline JSValue jsHTMLMeterElementLabelsGetter(ExecState& state, JSHTMLMeterElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.labels());
    return result;
}

EncodedJSValue jsHTMLMeterElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLMeterElementPrototype* domObject = jsDynamicDowncast<JSHTMLMeterElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLMeterElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLMeterElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLMeterElementPrototype* domObject = jsDynamicDowncast<JSHTMLMeterElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLMeterElementValueFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSHTMLMeterElementValueFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMeterElementMinFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementMin(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementMinFunction>(state, thisValue, encodedValue, "min");
}

static inline bool setJSHTMLMeterElementMinFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setMin(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMeterElementMaxFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementMax(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementMaxFunction>(state, thisValue, encodedValue, "max");
}

static inline bool setJSHTMLMeterElementMaxFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setMax(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMeterElementLowFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementLow(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementLowFunction>(state, thisValue, encodedValue, "low");
}

static inline bool setJSHTMLMeterElementLowFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLow(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMeterElementHighFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementHigh(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementHighFunction>(state, thisValue, encodedValue, "high");
}

static inline bool setJSHTMLMeterElementHighFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHigh(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMeterElementOptimumFunction(ExecState&, JSHTMLMeterElement&, JSValue, ThrowScope&);

bool setJSHTMLMeterElementOptimum(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMeterElement>::setAttribute<setJSHTMLMeterElementOptimumFunction>(state, thisValue, encodedValue, "optimum");
}

static inline bool setJSHTMLMeterElementOptimumFunction(ExecState& state, JSHTMLMeterElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setOptimum(WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLMeterElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLMeterElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSHTMLMeterElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLMeterElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}

#endif // ENABLE(METER_ELEMENT)
