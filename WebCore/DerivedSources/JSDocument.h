/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#pragma once

#include "Document.h"
#include "JSDOMConvert.h"
#include "JSNode.h"
#include <domjit/DOMJITGetterSetter.h>

namespace WebCore {

class WEBCORE_EXPORT JSDocument : public JSNode {
public:
    using Base = JSNode;
    using DOMWrapped = Document;
    static JSDocument* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject, Ref<Document>&& impl)
    {
        JSDocument* ptr = new (NotNull, JSC::allocateCell<JSDocument>(globalObject->vm().heap)) JSDocument(structure, *globalObject, WTFMove(impl));
        ptr->finishCreation(globalObject->vm());
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::VM&, JSC::JSGlobalObject*);
    static JSC::JSObject* prototype(JSC::VM&, JSC::JSGlobalObject*);
    static Document* toWrapped(JSC::JSValue);

    DECLARE_INFO;

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::JSType(JSDocumentWrapperType), StructureFlags), info());
    }

    static JSC::JSValue getConstructor(JSC::VM&, const JSC::JSGlobalObject*);
    static void visitChildren(JSCell*, JSC::SlotVisitor&);
    void visitAdditionalChildren(JSC::SlotVisitor&);

    static void visitOutputConstraints(JSCell*, JSC::SlotVisitor&);
    template<typename> static JSC::Subspace* subspaceFor(JSC::VM& vm) { return outputConstraintSubspaceFor(vm); }

    // Custom functions
    JSC::JSValue getCSSCanvasContext(JSC::ExecState&);
    Document& wrapped() const
    {
        return static_cast<Document&>(Base::wrapped());
    }
public:
    static const unsigned StructureFlags = JSC::HasStaticPropertyTable | Base::StructureFlags;
protected:
    JSDocument(JSC::Structure*, JSDOMGlobalObject&, Ref<Document>&&);

    void finishCreation(JSC::VM&);
};

WEBCORE_EXPORT JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject*, Document&);
inline JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, Document* impl) { return impl ? toJS(state, globalObject, *impl) : JSC::jsNull(); }
JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject*, Ref<Document>&&);
inline JSC::JSValue toJSNewlyCreated(JSC::ExecState* state, JSDOMGlobalObject* globalObject, RefPtr<Document>&& impl) { return impl ? toJSNewlyCreated(state, globalObject, impl.releaseNonNull()) : JSC::jsNull(); }

// DOMJIT emitters for attributes

JSC::DOMJIT::GetterSetter* domJITGetterSetterForDocumentDocumentElement(void);
class DocumentDocumentElementDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    DocumentDocumentElementDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

JSC::DOMJIT::GetterSetter* domJITGetterSetterForDocumentBody(void);
class DocumentBodyDOMJIT : public JSC::DOMJIT::GetterSetter {
public:
    DocumentBodyDOMJIT();
#if ENABLE(JIT)
    Ref<JSC::DOMJIT::Patchpoint> checkDOM() override;
    Ref<JSC::DOMJIT::CallDOMGetterPatchpoint> callDOMGetter() override;
#endif
};

template<> struct JSDOMWrapperConverterTraits<Document> {
    using WrapperClass = JSDocument;
    using ToWrappedReturnType = Document*;
};
template<> JSC::JSString* convertEnumerationToJS(JSC::ExecState&, Document::VisibilityState);

template<> std::optional<Document::VisibilityState> parseEnumeration<Document::VisibilityState>(JSC::ExecState&, JSC::JSValue);
template<> Document::VisibilityState convertEnumeration<Document::VisibilityState>(JSC::ExecState&, JSC::JSValue);
template<> const char* expectedEnumerationValues<Document::VisibilityState>();


} // namespace WebCore
#include "JSDocumentCustom.h"
