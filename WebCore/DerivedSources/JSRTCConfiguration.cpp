/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCConfiguration.h"

#include "JSRTCIceServer.h"
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/NeverDestroyed.h>

using namespace JSC;

namespace WebCore {

template<> RTCConfiguration convertDictionary<RTCConfiguration>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCConfiguration result;
    JSValue bundlePolicyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "bundlePolicy"));
    if (!bundlePolicyValue.isUndefined()) {
        result.bundlePolicy = convert<IDLEnumeration<RTCConfiguration::BundlePolicy>>(state, bundlePolicyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.bundlePolicy = RTCConfiguration::BundlePolicy::Balanced;
    JSValue iceServersValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "iceServers"));
    if (!iceServersValue.isUndefined()) {
        result.iceServers = convert<IDLSequence<IDLDictionary<RTCIceServer>>>(state, iceServersValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue iceTransportPolicyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "iceTransportPolicy"));
    if (!iceTransportPolicyValue.isUndefined()) {
        result.iceTransportPolicy = convert<IDLEnumeration<RTCConfiguration::IceTransportPolicy>>(state, iceTransportPolicyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.iceTransportPolicy = RTCConfiguration::IceTransportPolicy::All;
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const RTCConfiguration& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    auto bundlePolicyValue = toJS<IDLEnumeration<RTCConfiguration::BundlePolicy>>(state, globalObject, dictionary.bundlePolicy);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "bundlePolicy"), bundlePolicyValue);
    if (!IDLSequence<IDLDictionary<RTCIceServer>>::isNullValue(dictionary.iceServers)) {
        auto iceServersValue = toJS<IDLSequence<IDLDictionary<RTCIceServer>>>(state, globalObject, IDLSequence<IDLDictionary<RTCIceServer>>::extractValueFromNullable(dictionary.iceServers));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "iceServers"), iceServersValue);
    }
    auto iceTransportPolicyValue = toJS<IDLEnumeration<RTCConfiguration::IceTransportPolicy>>(state, globalObject, dictionary.iceTransportPolicy);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "iceTransportPolicy"), iceTransportPolicyValue);
    return result;
}

template<> JSString* convertEnumerationToJS(ExecState& state, RTCConfiguration::IceTransportPolicy enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("relay"),
        ASCIILiteral("all"),
    };
    static_assert(static_cast<size_t>(RTCConfiguration::IceTransportPolicy::Relay) == 0, "RTCConfiguration::IceTransportPolicy::Relay is not 0 as expected");
    static_assert(static_cast<size_t>(RTCConfiguration::IceTransportPolicy::All) == 1, "RTCConfiguration::IceTransportPolicy::All is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<RTCConfiguration::IceTransportPolicy> parseEnumeration<RTCConfiguration::IceTransportPolicy>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "relay")
        return RTCConfiguration::IceTransportPolicy::Relay;
    if (stringValue == "all")
        return RTCConfiguration::IceTransportPolicy::All;
    return std::nullopt;
}

template<> RTCConfiguration::IceTransportPolicy convertEnumeration<RTCConfiguration::IceTransportPolicy>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<RTCConfiguration::IceTransportPolicy>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<RTCConfiguration::IceTransportPolicy>()
{
    return "\"relay\", \"all\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, RTCConfiguration::BundlePolicy enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("balanced"),
        ASCIILiteral("max-compat"),
        ASCIILiteral("max-bundle"),
    };
    static_assert(static_cast<size_t>(RTCConfiguration::BundlePolicy::Balanced) == 0, "RTCConfiguration::BundlePolicy::Balanced is not 0 as expected");
    static_assert(static_cast<size_t>(RTCConfiguration::BundlePolicy::MaxCompat) == 1, "RTCConfiguration::BundlePolicy::MaxCompat is not 1 as expected");
    static_assert(static_cast<size_t>(RTCConfiguration::BundlePolicy::MaxBundle) == 2, "RTCConfiguration::BundlePolicy::MaxBundle is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<RTCConfiguration::BundlePolicy> parseEnumeration<RTCConfiguration::BundlePolicy>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "balanced")
        return RTCConfiguration::BundlePolicy::Balanced;
    if (stringValue == "max-compat")
        return RTCConfiguration::BundlePolicy::MaxCompat;
    if (stringValue == "max-bundle")
        return RTCConfiguration::BundlePolicy::MaxBundle;
    return std::nullopt;
}

template<> RTCConfiguration::BundlePolicy convertEnumeration<RTCConfiguration::BundlePolicy>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<RTCConfiguration::BundlePolicy>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<RTCConfiguration::BundlePolicy>()
{
    return "\"balanced\", \"max-compat\", \"max-bundle\"";
}

} // namespace WebCore

#endif // ENABLE(WEB_RTC)
