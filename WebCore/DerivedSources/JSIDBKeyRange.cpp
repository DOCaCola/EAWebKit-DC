/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBKeyRange.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSIDBKeyRange.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionOnly(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionLowerBound(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionUpperBound(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionBound(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBKeyRangePrototypeFunctionIncludes(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIDBKeyRangeLower(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBKeyRangeUpper(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBKeyRangeLowerOpen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBKeyRangeUpperOpen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBKeyRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBKeyRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIDBKeyRangePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIDBKeyRangePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIDBKeyRangePrototype* ptr = new (NotNull, JSC::allocateCell<JSIDBKeyRangePrototype>(vm.heap)) JSIDBKeyRangePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIDBKeyRangePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIDBKeyRangeConstructor = JSDOMConstructorNotConstructable<JSIDBKeyRange>;

/* Hash table for constructor */

static const HashTableValue JSIDBKeyRangeConstructorTableValues[] =
{
    { "only", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBKeyRangeConstructorFunctionOnly), (intptr_t) (1) } },
    { "lowerBound", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBKeyRangeConstructorFunctionLowerBound), (intptr_t) (1) } },
    { "upperBound", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBKeyRangeConstructorFunctionUpperBound), (intptr_t) (1) } },
    { "bound", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBKeyRangeConstructorFunctionBound), (intptr_t) (2) } },
};

template<> JSValue JSIDBKeyRangeConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSIDBKeyRangeConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIDBKeyRange::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IDBKeyRange"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSIDBKeyRangeConstructorTableValues, *this);
}

template<> const ClassInfo JSIDBKeyRangeConstructor::s_info = { "IDBKeyRange", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBKeyRangeConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIDBKeyRangePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyRangeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBKeyRangeConstructor) } },
    { "lower", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyRangeLower), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "upper", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyRangeUpper), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "lowerOpen", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyRangeLowerOpen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "upperOpen", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBKeyRangeUpperOpen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "includes", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBKeyRangePrototypeFunctionIncludes), (intptr_t) (1) } },
};

const ClassInfo JSIDBKeyRangePrototype::s_info = { "IDBKeyRangePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBKeyRangePrototype) };

void JSIDBKeyRangePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIDBKeyRangePrototypeTableValues, *this);
}

const ClassInfo JSIDBKeyRange::s_info = { "IDBKeyRange", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBKeyRange) };

JSIDBKeyRange::JSIDBKeyRange(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IDBKeyRange>&& impl)
    : JSDOMWrapper<IDBKeyRange>(structure, globalObject, WTFMove(impl))
{
}

void JSIDBKeyRange::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIDBKeyRange::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIDBKeyRangePrototype::create(vm, globalObject, JSIDBKeyRangePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSIDBKeyRange::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBKeyRange>(vm, globalObject);
}

void JSIDBKeyRange::destroy(JSC::JSCell* cell)
{
    JSIDBKeyRange* thisObject = static_cast<JSIDBKeyRange*>(cell);
    thisObject->JSIDBKeyRange::~JSIDBKeyRange();
}

template<> inline JSIDBKeyRange* BindingCaller<JSIDBKeyRange>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIDBKeyRange*>(JSValue::decode(thisValue));
}

template<> inline JSIDBKeyRange* BindingCaller<JSIDBKeyRange>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIDBKeyRange*>(state.thisValue());
}

static inline JSValue jsIDBKeyRangeLowerGetter(ExecState&, JSIDBKeyRange&, ThrowScope& throwScope);

EncodedJSValue jsIDBKeyRangeLower(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBKeyRange>::attribute<jsIDBKeyRangeLowerGetter>(state, thisValue, "lower");
}

static inline JSValue jsIDBKeyRangeLowerGetter(ExecState& state, JSIDBKeyRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLIDBKey>(state, *thisObject.globalObject(), impl.lower());
    return result;
}

static inline JSValue jsIDBKeyRangeUpperGetter(ExecState&, JSIDBKeyRange&, ThrowScope& throwScope);

EncodedJSValue jsIDBKeyRangeUpper(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBKeyRange>::attribute<jsIDBKeyRangeUpperGetter>(state, thisValue, "upper");
}

static inline JSValue jsIDBKeyRangeUpperGetter(ExecState& state, JSIDBKeyRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLIDBKey>(state, *thisObject.globalObject(), impl.upper());
    return result;
}

static inline JSValue jsIDBKeyRangeLowerOpenGetter(ExecState&, JSIDBKeyRange&, ThrowScope& throwScope);

EncodedJSValue jsIDBKeyRangeLowerOpen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBKeyRange>::attribute<jsIDBKeyRangeLowerOpenGetter>(state, thisValue, "lowerOpen");
}

static inline JSValue jsIDBKeyRangeLowerOpenGetter(ExecState& state, JSIDBKeyRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.lowerOpen());
    return result;
}

static inline JSValue jsIDBKeyRangeUpperOpenGetter(ExecState&, JSIDBKeyRange&, ThrowScope& throwScope);

EncodedJSValue jsIDBKeyRangeUpperOpen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBKeyRange>::attribute<jsIDBKeyRangeUpperOpenGetter>(state, thisValue, "upperOpen");
}

static inline JSValue jsIDBKeyRangeUpperOpenGetter(ExecState& state, JSIDBKeyRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.upperOpen());
    return result;
}

EncodedJSValue jsIDBKeyRangeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIDBKeyRangePrototype* domObject = jsDynamicDowncast<JSIDBKeyRangePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIDBKeyRange::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIDBKeyRangeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIDBKeyRangePrototype* domObject = jsDynamicDowncast<JSIDBKeyRangePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSIDBKeyRange::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBKeyRangeConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionOnly(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto value = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBKeyRange>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), throwScope, IDBKeyRange::only(*state, WTFMove(value))));
}

EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionLowerBound(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto lower = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto open = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBKeyRange>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), throwScope, IDBKeyRange::lowerBound(*state, WTFMove(lower), WTFMove(open))));
}

EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionUpperBound(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto upper = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto open = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBKeyRange>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), throwScope, IDBKeyRange::upperBound(*state, WTFMove(upper), WTFMove(open))));
}

EncodedJSValue JSC_HOST_CALL jsIDBKeyRangeConstructorFunctionBound(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto lower = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto upper = convert<IDLAny>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto lowerOpen = convert<IDLBoolean>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto upperOpen = convert<IDLBoolean>(*state, state->argument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBKeyRange>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), throwScope, IDBKeyRange::bound(*state, WTFMove(lower), WTFMove(upper), WTFMove(lowerOpen), WTFMove(upperOpen))));
}

static inline JSC::EncodedJSValue jsIDBKeyRangePrototypeFunctionIncludesCaller(JSC::ExecState*, JSIDBKeyRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBKeyRangePrototypeFunctionIncludes(ExecState* state)
{
    return BindingCaller<JSIDBKeyRange>::callOperation<jsIDBKeyRangePrototypeFunctionIncludesCaller>(state, "includes");
}

static inline JSC::EncodedJSValue jsIDBKeyRangePrototypeFunctionIncludesCaller(JSC::ExecState* state, JSIDBKeyRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(*state, throwScope, impl.includes(*state, WTFMove(key))));
}

bool JSIDBKeyRangeOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBKeyRangeOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIDBKeyRange = static_cast<JSIDBKeyRange*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIDBKeyRange->wrapped(), jsIDBKeyRange);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IDBKeyRange>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to IDBKeyRange.
    static_assert(!__is_polymorphic(IDBKeyRange), "IDBKeyRange is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<IDBKeyRange>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IDBKeyRange& impl)
{
    return wrap(state, globalObject, impl);
}

IDBKeyRange* JSIDBKeyRange::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIDBKeyRange*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INDEXED_DATABASE)
