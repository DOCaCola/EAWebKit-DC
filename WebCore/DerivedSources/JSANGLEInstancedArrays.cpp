/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSANGLEInstancedArrays.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLE(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLE(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLE(JSC::ExecState*);

class JSANGLEInstancedArraysPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSANGLEInstancedArraysPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSANGLEInstancedArraysPrototype* ptr = new (NotNull, JSC::allocateCell<JSANGLEInstancedArraysPrototype>(vm.heap)) JSANGLEInstancedArraysPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSANGLEInstancedArraysPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSANGLEInstancedArraysPrototypeTableValues[] =
{
    { "drawArraysInstancedANGLE", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLE), (intptr_t) (4) } },
    { "drawElementsInstancedANGLE", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLE), (intptr_t) (5) } },
    { "vertexAttribDivisorANGLE", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLE), (intptr_t) (2) } },
    { "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x88FE) } },
};

const ClassInfo JSANGLEInstancedArraysPrototype::s_info = { "ANGLEInstancedArraysPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSANGLEInstancedArraysPrototype) };

void JSANGLEInstancedArraysPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSANGLEInstancedArraysPrototypeTableValues, *this);
}

const ClassInfo JSANGLEInstancedArrays::s_info = { "ANGLEInstancedArrays", &Base::s_info, 0, CREATE_METHOD_TABLE(JSANGLEInstancedArrays) };

JSANGLEInstancedArrays::JSANGLEInstancedArrays(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ANGLEInstancedArrays>&& impl)
    : JSDOMWrapper<ANGLEInstancedArrays>(structure, globalObject, WTFMove(impl))
{
}

void JSANGLEInstancedArrays::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSANGLEInstancedArrays::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSANGLEInstancedArraysPrototype::create(vm, globalObject, JSANGLEInstancedArraysPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSANGLEInstancedArrays::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSANGLEInstancedArrays>(vm, globalObject);
}

void JSANGLEInstancedArrays::destroy(JSC::JSCell* cell)
{
    JSANGLEInstancedArrays* thisObject = static_cast<JSANGLEInstancedArrays*>(cell);
    thisObject->JSANGLEInstancedArrays::~JSANGLEInstancedArrays();
}

template<> inline JSANGLEInstancedArrays* BindingCaller<JSANGLEInstancedArrays>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSANGLEInstancedArrays*>(state.thisValue());
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLECaller(JSC::ExecState*, JSANGLEInstancedArrays*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLE(ExecState* state)
{
    return BindingCaller<JSANGLEInstancedArrays>::callOperation<jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLECaller>(state, "drawArraysInstancedANGLE");
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionDrawArraysInstancedANGLECaller(JSC::ExecState* state, JSANGLEInstancedArrays* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 4))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto mode = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto first = convert<IDLLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = convert<IDLLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto primcount = convert<IDLLong>(*state, state->uncheckedArgument(3), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.drawArraysInstancedANGLE(WTFMove(mode), WTFMove(first), WTFMove(count), WTFMove(primcount));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLECaller(JSC::ExecState*, JSANGLEInstancedArrays*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLE(ExecState* state)
{
    return BindingCaller<JSANGLEInstancedArrays>::callOperation<jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLECaller>(state, "drawElementsInstancedANGLE");
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionDrawElementsInstancedANGLECaller(JSC::ExecState* state, JSANGLEInstancedArrays* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 5))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto mode = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto count = convert<IDLLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto type = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLLongLong>(*state, state->uncheckedArgument(3), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto primcount = convert<IDLLong>(*state, state->uncheckedArgument(4), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.drawElementsInstancedANGLE(WTFMove(mode), WTFMove(count), WTFMove(type), WTFMove(offset), WTFMove(primcount));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLECaller(JSC::ExecState*, JSANGLEInstancedArrays*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLE(ExecState* state)
{
    return BindingCaller<JSANGLEInstancedArrays>::callOperation<jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLECaller>(state, "vertexAttribDivisorANGLE");
}

static inline JSC::EncodedJSValue jsANGLEInstancedArraysPrototypeFunctionVertexAttribDivisorANGLECaller(JSC::ExecState* state, JSANGLEInstancedArrays* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto divisor = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.vertexAttribDivisorANGLE(WTFMove(index), WTFMove(divisor));
    return JSValue::encode(jsUndefined());
}

bool JSANGLEInstancedArraysOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsANGLEInstancedArrays = jsCast<JSANGLEInstancedArrays*>(handle.slot()->asCell());
    WebGLRenderingContextBase* root = WTF::getPtr(jsANGLEInstancedArrays->wrapped().context());
    return visitor.containsOpaqueRoot(root);
}

void JSANGLEInstancedArraysOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsANGLEInstancedArrays = static_cast<JSANGLEInstancedArrays*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsANGLEInstancedArrays->wrapped(), jsANGLEInstancedArrays);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7ANGLEInstancedArrays@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore20ANGLEInstancedArraysE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<ANGLEInstancedArrays>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7ANGLEInstancedArrays@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore20ANGLEInstancedArraysE[2];
#if COMPILER(CLANG)
    // If this fails ANGLEInstancedArrays does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(ANGLEInstancedArrays), "ANGLEInstancedArrays is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // ANGLEInstancedArrays has subclasses. If ANGLEInstancedArrays has subclasses that get passed
    // to toJS() we currently require ANGLEInstancedArrays you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<ANGLEInstancedArrays>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, ANGLEInstancedArrays& impl)
{
    return wrap(state, globalObject, impl);
}

ANGLEInstancedArrays* JSANGLEInstancedArrays::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSANGLEInstancedArrays*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBGL)
