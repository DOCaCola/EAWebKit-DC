/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMWindow.h"

#include "DOMWindowIndexedDatabase.h"
#include "DOMWindowSpeechSynthesis.h"
#include "DOMWindowWebDatabase.h"
#include "Document.h"
#include "EventNames.h"
#include "Frame.h"
#include "JSAnimationEvent.h"
#include "JSAttr.h"
#include "JSBarProp.h"
#include "JSBeforeLoadEvent.h"
#include "JSBeforeUnloadEvent.h"
#include "JSBlob.h"
#include "JSCDATASection.h"
#include "JSCSSFontFaceRule.h"
#include "JSCSSImportRule.h"
#include "JSCSSKeyframeRule.h"
#include "JSCSSKeyframesRule.h"
#include "JSCSSMediaRule.h"
#include "JSCSSNamespaceRule.h"
#include "JSCSSPageRule.h"
#include "JSCSSRule.h"
#include "JSCSSRuleList.h"
#include "JSCSSStyleDeclaration.h"
#include "JSCSSStyleRule.h"
#include "JSCSSStyleSheet.h"
#include "JSCSSSupportsRule.h"
#include "JSCanvasGradient.h"
#include "JSCanvasPattern.h"
#include "JSCanvasRenderingContext2D.h"
#include "JSCharacterData.h"
#include "JSClientRect.h"
#include "JSClientRectList.h"
#include "JSClipboardEvent.h"
#include "JSCloseEvent.h"
#include "JSComment.h"
#include "JSCompositionEvent.h"
#include "JSCrypto.h"
#include "JSCustomElementRegistry.h"
#include "JSCustomEvent.h"
#include "JSDOMApplicationCache.h"
#include "JSDOMBinding.h"
#include "JSDOMCSSNamespace.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMCoreException.h"
#include "JSDOMFormData.h"
#include "JSDOMImplementation.h"
#include "JSDOMMimeType.h"
#include "JSDOMMimeTypeArray.h"
#include "JSDOMParser.h"
#include "JSDOMPath.h"
#include "JSDOMPlugin.h"
#include "JSDOMPluginArray.h"
#include "JSDOMPoint.h"
#include "JSDOMPointReadOnly.h"
#include "JSDOMPromise.h"
#include "JSDOMRect.h"
#include "JSDOMRectReadOnly.h"
#include "JSDOMSelection.h"
#include "JSDOMStringList.h"
#include "JSDOMStringMap.h"
#include "JSDOMTokenList.h"
#include "JSDOMURL.h"
#include "JSDOMWindow.h"
#include "JSDOMWindowShell.h"
#include "JSDataTransfer.h"
#include "JSDatabase.h"
#include "JSDatabaseCallback.h"
#include "JSDeprecatedCSSOMCounter.h"
#include "JSDeprecatedCSSOMPrimitiveValue.h"
#include "JSDeprecatedCSSOMRGBColor.h"
#include "JSDeprecatedCSSOMRect.h"
#include "JSDeprecatedCSSOMValue.h"
#include "JSDeprecatedCSSOMValueList.h"
#include "JSDocument.h"
#include "JSDocumentFragment.h"
#include "JSDocumentType.h"
#include "JSElement.h"
#include "JSErrorEvent.h"
#include "JSErrorHandler.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSEventSource.h"
#include "JSEventTarget.h"
#include "JSFile.h"
#include "JSFileError.h"
#include "JSFileList.h"
#include "JSFileReader.h"
#include "JSFocusEvent.h"
#include "JSFontFace.h"
#include "JSFontFaceSet.h"
#include "JSHTMLAllCollection.h"
#include "JSHTMLAnchorElement.h"
#include "JSHTMLAppletElement.h"
#include "JSHTMLAreaElement.h"
#include "JSHTMLBRElement.h"
#include "JSHTMLBaseElement.h"
#include "JSHTMLBodyElement.h"
#include "JSHTMLButtonElement.h"
#include "JSHTMLCanvasElement.h"
#include "JSHTMLCollection.h"
#include "JSHTMLDListElement.h"
#include "JSHTMLDataElement.h"
#include "JSHTMLDetailsElement.h"
#include "JSHTMLDirectoryElement.h"
#include "JSHTMLDivElement.h"
#include "JSHTMLDocument.h"
#include "JSHTMLElement.h"
#include "JSHTMLEmbedElement.h"
#include "JSHTMLFieldSetElement.h"
#include "JSHTMLFontElement.h"
#include "JSHTMLFormControlsCollection.h"
#include "JSHTMLFormElement.h"
#include "JSHTMLFrameElement.h"
#include "JSHTMLFrameSetElement.h"
#include "JSHTMLHRElement.h"
#include "JSHTMLHeadElement.h"
#include "JSHTMLHeadingElement.h"
#include "JSHTMLHtmlElement.h"
#include "JSHTMLIFrameElement.h"
#include "JSHTMLImageElement.h"
#include "JSHTMLInputElement.h"
#include "JSHTMLKeygenElement.h"
#include "JSHTMLLIElement.h"
#include "JSHTMLLabelElement.h"
#include "JSHTMLLegendElement.h"
#include "JSHTMLLinkElement.h"
#include "JSHTMLMapElement.h"
#include "JSHTMLMarqueeElement.h"
#include "JSHTMLMenuElement.h"
#include "JSHTMLMetaElement.h"
#include "JSHTMLModElement.h"
#include "JSHTMLOListElement.h"
#include "JSHTMLObjectElement.h"
#include "JSHTMLOptGroupElement.h"
#include "JSHTMLOptionElement.h"
#include "JSHTMLOptionsCollection.h"
#include "JSHTMLOutputElement.h"
#include "JSHTMLParagraphElement.h"
#include "JSHTMLParamElement.h"
#include "JSHTMLPictureElement.h"
#include "JSHTMLPreElement.h"
#include "JSHTMLProgressElement.h"
#include "JSHTMLQuoteElement.h"
#include "JSHTMLScriptElement.h"
#include "JSHTMLSelectElement.h"
#include "JSHTMLSlotElement.h"
#include "JSHTMLSourceElement.h"
#include "JSHTMLSpanElement.h"
#include "JSHTMLStyleElement.h"
#include "JSHTMLTableCaptionElement.h"
#include "JSHTMLTableCellElement.h"
#include "JSHTMLTableColElement.h"
#include "JSHTMLTableElement.h"
#include "JSHTMLTableRowElement.h"
#include "JSHTMLTableSectionElement.h"
#include "JSHTMLTemplateElement.h"
#include "JSHTMLTextAreaElement.h"
#include "JSHTMLTimeElement.h"
#include "JSHTMLTitleElement.h"
#include "JSHTMLUListElement.h"
#include "JSHTMLUnknownElement.h"
#include "JSHashChangeEvent.h"
#include "JSHistory.h"
#include "JSImageData.h"
#include "JSInputEvent.h"
#include "JSKeyboardEvent.h"
#include "JSLocation.h"
#include "JSMediaList.h"
#include "JSMediaQueryList.h"
#include "JSMessageEvent.h"
#include "JSMessagePort.h"
#include "JSMouseEvent.h"
#include "JSMutationEvent.h"
#include "JSMutationObserver.h"
#include "JSMutationRecord.h"
#include "JSNamedNodeMap.h"
#include "JSNavigator.h"
#include "JSNode.h"
#include "JSNodeFilter.h"
#include "JSNodeIterator.h"
#include "JSNodeList.h"
#include "JSOverflowEvent.h"
#include "JSPageTransitionEvent.h"
#include "JSPopStateEvent.h"
#include "JSProcessingInstruction.h"
#include "JSProgressEvent.h"
#include "JSRadioNodeList.h"
#include "JSRange.h"
#include "JSRequestAnimationFrameCallback.h"
#include "JSSQLError.h"
#include "JSSQLException.h"
#include "JSSQLResultSet.h"
#include "JSSQLResultSetRowList.h"
#include "JSSQLTransaction.h"
#include "JSSVGAElement.h"
#include "JSSVGAngle.h"
#include "JSSVGAnimateColorElement.h"
#include "JSSVGAnimateElement.h"
#include "JSSVGAnimateMotionElement.h"
#include "JSSVGAnimateTransformElement.h"
#include "JSSVGAnimatedAngle.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedInteger.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedLengthList.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedNumberList.h"
#include "JSSVGAnimatedPreserveAspectRatio.h"
#include "JSSVGAnimatedRect.h"
#include "JSSVGAnimatedString.h"
#include "JSSVGAnimatedTransformList.h"
#include "JSSVGAnimationElement.h"
#include "JSSVGCircleElement.h"
#include "JSSVGClipPathElement.h"
#include "JSSVGComponentTransferFunctionElement.h"
#include "JSSVGCursorElement.h"
#include "JSSVGDefsElement.h"
#include "JSSVGDescElement.h"
#include "JSSVGElement.h"
#include "JSSVGEllipseElement.h"
#include "JSSVGException.h"
#include "JSSVGFEBlendElement.h"
#include "JSSVGFEColorMatrixElement.h"
#include "JSSVGFEComponentTransferElement.h"
#include "JSSVGFECompositeElement.h"
#include "JSSVGFEConvolveMatrixElement.h"
#include "JSSVGFEDiffuseLightingElement.h"
#include "JSSVGFEDisplacementMapElement.h"
#include "JSSVGFEDistantLightElement.h"
#include "JSSVGFEDropShadowElement.h"
#include "JSSVGFEFloodElement.h"
#include "JSSVGFEFuncAElement.h"
#include "JSSVGFEFuncBElement.h"
#include "JSSVGFEFuncGElement.h"
#include "JSSVGFEFuncRElement.h"
#include "JSSVGFEGaussianBlurElement.h"
#include "JSSVGFEImageElement.h"
#include "JSSVGFEMergeElement.h"
#include "JSSVGFEMergeNodeElement.h"
#include "JSSVGFEMorphologyElement.h"
#include "JSSVGFEOffsetElement.h"
#include "JSSVGFEPointLightElement.h"
#include "JSSVGFESpecularLightingElement.h"
#include "JSSVGFESpotLightElement.h"
#include "JSSVGFETileElement.h"
#include "JSSVGFETurbulenceElement.h"
#include "JSSVGFilterElement.h"
#include "JSSVGForeignObjectElement.h"
#include "JSSVGGElement.h"
#include "JSSVGGradientElement.h"
#include "JSSVGGraphicsElement.h"
#include "JSSVGImageElement.h"
#include "JSSVGLength.h"
#include "JSSVGLengthList.h"
#include "JSSVGLineElement.h"
#include "JSSVGLinearGradientElement.h"
#include "JSSVGMPathElement.h"
#include "JSSVGMarkerElement.h"
#include "JSSVGMaskElement.h"
#include "JSSVGMatrix.h"
#include "JSSVGMetadataElement.h"
#include "JSSVGNumber.h"
#include "JSSVGNumberList.h"
#include "JSSVGPathElement.h"
#include "JSSVGPathSeg.h"
#include "JSSVGPathSegArcAbs.h"
#include "JSSVGPathSegArcRel.h"
#include "JSSVGPathSegClosePath.h"
#include "JSSVGPathSegCurvetoCubicAbs.h"
#include "JSSVGPathSegCurvetoCubicRel.h"
#include "JSSVGPathSegCurvetoCubicSmoothAbs.h"
#include "JSSVGPathSegCurvetoCubicSmoothRel.h"
#include "JSSVGPathSegCurvetoQuadraticAbs.h"
#include "JSSVGPathSegCurvetoQuadraticRel.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothAbs.h"
#include "JSSVGPathSegCurvetoQuadraticSmoothRel.h"
#include "JSSVGPathSegLinetoAbs.h"
#include "JSSVGPathSegLinetoHorizontalAbs.h"
#include "JSSVGPathSegLinetoHorizontalRel.h"
#include "JSSVGPathSegLinetoRel.h"
#include "JSSVGPathSegLinetoVerticalAbs.h"
#include "JSSVGPathSegLinetoVerticalRel.h"
#include "JSSVGPathSegList.h"
#include "JSSVGPathSegMovetoAbs.h"
#include "JSSVGPathSegMovetoRel.h"
#include "JSSVGPatternElement.h"
#include "JSSVGPoint.h"
#include "JSSVGPointList.h"
#include "JSSVGPolygonElement.h"
#include "JSSVGPolylineElement.h"
#include "JSSVGPreserveAspectRatio.h"
#include "JSSVGRadialGradientElement.h"
#include "JSSVGRect.h"
#include "JSSVGRectElement.h"
#include "JSSVGRenderingIntent.h"
#include "JSSVGSVGElement.h"
#include "JSSVGScriptElement.h"
#include "JSSVGSetElement.h"
#include "JSSVGStopElement.h"
#include "JSSVGStringList.h"
#include "JSSVGStyleElement.h"
#include "JSSVGSwitchElement.h"
#include "JSSVGSymbolElement.h"
#include "JSSVGTRefElement.h"
#include "JSSVGTSpanElement.h"
#include "JSSVGTextContentElement.h"
#include "JSSVGTextElement.h"
#include "JSSVGTextPathElement.h"
#include "JSSVGTextPositioningElement.h"
#include "JSSVGTitleElement.h"
#include "JSSVGTransform.h"
#include "JSSVGTransformList.h"
#include "JSSVGUnitTypes.h"
#include "JSSVGUseElement.h"
#include "JSSVGViewElement.h"
#include "JSSVGViewSpec.h"
#include "JSSVGZoomEvent.h"
#include "JSScreen.h"
#include "JSScrollToOptions.h"
#include "JSSecurityPolicyViolationEvent.h"
#include "JSShadowRoot.h"
#include "JSStaticRange.h"
#include "JSStorage.h"
#include "JSStorageEvent.h"
#include "JSStyleMedia.h"
#include "JSStyleSheet.h"
#include "JSStyleSheetList.h"
#include "JSText.h"
#include "JSTextDecoder.h"
#include "JSTextEncoder.h"
#include "JSTextEvent.h"
#include "JSTextMetrics.h"
#include "JSTransitionEvent.h"
#include "JSTreeWalker.h"
#include "JSUIEvent.h"
#include "JSURLSearchParams.h"
#include "JSValidityState.h"
#include "JSWebKitAnimationEvent.h"
#include "JSWebKitCSSMatrix.h"
#include "JSWebKitPoint.h"
#include "JSWebKitTransitionEvent.h"
#include "JSWheelEvent.h"
#include "JSWorker.h"
#include "JSXMLDocument.h"
#include "JSXMLHttpRequest.h"
#include "JSXMLHttpRequestEventTarget.h"
#include "JSXMLHttpRequestProgressEvent.h"
#include "JSXMLHttpRequestUpload.h"
#include "JSXMLSerializer.h"
#include "JSXPathEvaluator.h"
#include "JSXPathException.h"
#include "JSXPathExpression.h"
#include "JSXPathResult.h"
#include "RuntimeEnabledFeatures.h"
#include "Settings.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

#if ENABLE(ATTACHMENT_ELEMENT)
#include "JSHTMLAttachmentElement.h"
#endif

#if ENABLE(CANVAS_PROXY)
#include "JSCanvasProxy.h"
#endif

#if ENABLE(CHANNEL_MESSAGING)
#include "JSMessageChannel.h"
#endif

#if ENABLE(CSS_DEVICE_ADAPTATION)
#include "JSWebKitCSSViewportRule.h"
#endif

#if ENABLE(CSS_REGIONS)
#include "JSWebKitCSSRegionRule.h"
#endif

#if ENABLE(DATALIST_ELEMENT)
#include "JSHTMLDataListElement.h"
#endif

#if ENABLE(DEVICE_ORIENTATION)
#include "JSDeviceMotionEvent.h"
#include "JSDeviceOrientationEvent.h"
#endif

#if ENABLE(FETCH_API)
#include "DOMWindowFetch.h"
#include "DOMWindowFetchBuiltins.h"
#include "JSFetchHeaders.h"
#include "JSFetchRequest.h"
#include "JSFetchResponse.h"
#endif

#if ENABLE(FONT_LOAD_EVENTS)
#include "JSCSSFontFaceLoadEvent.h"
#endif

#if ENABLE(INDEXED_DATABASE)
#include "JSIDBCursor.h"
#include "JSIDBCursorWithValue.h"
#include "JSIDBDatabase.h"
#include "JSIDBFactory.h"
#include "JSIDBIndex.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBOpenDBRequest.h"
#include "JSIDBRequest.h"
#include "JSIDBTransaction.h"
#include "JSIDBVersionChangeEvent.h"
#endif

#if ENABLE(INTERSECTION_OBSERVER)
#include "JSIntersectionObserver.h"
#include "JSIntersectionObserverEntry.h"
#endif

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
#include "JSNotification.h"
#endif

#if ENABLE(MEDIA_SESSION)
#include "JSMediaRemoteControls.h"
#include "JSMediaSession.h"
#endif

#if ENABLE(MEDIA_SOURCE)
#include "JSMediaSource.h"
#include "JSSourceBuffer.h"
#include "JSSourceBufferList.h"
#endif

#if ENABLE(MEDIA_STREAM)
#include "JSMediaStream.h"
#include "JSMediaStreamTrack.h"
#include "JSMediaStreamTrackEvent.h"
#include "JSOverconstrainedError.h"
#include "JSOverconstrainedErrorEvent.h"
#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
#include "JSMediaStreamAudioDestinationNode.h"
#include "JSMediaStreamAudioSourceNode.h"
#endif

#if ENABLE(METER_ELEMENT)
#include "JSHTMLMeterElement.h"
#endif

#if ENABLE(PROXIMITY_EVENTS)
#include "JSDeviceProximityEvent.h"
#endif

#if ENABLE(READABLE_STREAM_API)
#include "JSReadableStream.h"
#endif

#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
#include "JSByteLengthQueuingStrategy.h"
#include "JSCountQueuingStrategy.h"
#endif

#if ENABLE(SPEECH_SYNTHESIS)
#include "JSSpeechSynthesis.h"
#include "JSSpeechSynthesisEvent.h"
#include "JSSpeechSynthesisUtterance.h"
#endif

#if ENABLE(SUBTLE_CRYPTO)
#include "JSCryptoKey.h"
#include "JSSubtleCrypto.h"
#endif

#if ENABLE(SVG_FONTS)
#include "JSSVGAltGlyphDefElement.h"
#include "JSSVGAltGlyphElement.h"
#include "JSSVGAltGlyphItemElement.h"
#include "JSSVGFontElement.h"
#include "JSSVGFontFaceElement.h"
#include "JSSVGFontFaceFormatElement.h"
#include "JSSVGFontFaceNameElement.h"
#include "JSSVGFontFaceSrcElement.h"
#include "JSSVGFontFaceUriElement.h"
#include "JSSVGGlyphElement.h"
#include "JSSVGGlyphRefElement.h"
#include "JSSVGHKernElement.h"
#include "JSSVGMissingGlyphElement.h"
#include "JSSVGVKernElement.h"
#endif

#if ENABLE(TOUCH_EVENTS)
#include "JSTouch.h"
#include "JSTouchEvent.h"
#include "JSTouchList.h"
#endif

#if ENABLE(VIDEO)
#include "JSHTMLAudioElement.h"
#include "JSHTMLMediaElement.h"
#include "JSHTMLVideoElement.h"
#include "JSMediaController.h"
#include "JSMediaError.h"
#include "JSTimeRanges.h"
#endif

#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
#include "JSMediaElementAudioSourceNode.h"
#endif

#if ENABLE(VIDEO_TRACK)
#include "JSAudioTrack.h"
#include "JSAudioTrackList.h"
#include "JSDataCue.h"
#include "JSHTMLTrackElement.h"
#include "JSTextTrack.h"
#include "JSTextTrackCue.h"
#include "JSTextTrackCueList.h"
#include "JSTextTrackList.h"
#include "JSTrackEvent.h"
#include "JSVTTCue.h"
#include "JSVTTRegion.h"
#include "JSVideoTrack.h"
#include "JSVideoTrackList.h"
#endif

#if ENABLE(WEBGL)
#include "JSWebGLActiveInfo.h"
#include "JSWebGLBuffer.h"
#include "JSWebGLContextEvent.h"
#include "JSWebGLFramebuffer.h"
#include "JSWebGLProgram.h"
#include "JSWebGLQuery.h"
#include "JSWebGLRenderbuffer.h"
#include "JSWebGLRenderingContext.h"
#include "JSWebGLSampler.h"
#include "JSWebGLShader.h"
#include "JSWebGLShaderPrecisionFormat.h"
#include "JSWebGLSync.h"
#include "JSWebGLTexture.h"
#include "JSWebGLTransformFeedback.h"
#include "JSWebGLUniformLocation.h"
#endif

#if ENABLE(WEBGL2)
#include "JSWebGL2RenderingContext.h"
#include "JSWebGLVertexArrayObject.h"
#endif

#if ENABLE(WEB_ANIMATIONS)
#include "JSAnimationEffect.h"
#include "JSAnimationTimeline.h"
#include "JSDocumentTimeline.h"
#include "JSKeyframeEffect.h"
#include "JSWebAnimation.h"
#endif

#if ENABLE(WEB_AUDIO)
#include "JSAnalyserNode.h"
#include "JSAudioBuffer.h"
#include "JSAudioBufferSourceNode.h"
#include "JSAudioContext.h"
#include "JSAudioDestinationNode.h"
#include "JSAudioListener.h"
#include "JSAudioNode.h"
#include "JSAudioParam.h"
#include "JSAudioProcessingEvent.h"
#include "JSBiquadFilterNode.h"
#include "JSChannelMergerNode.h"
#include "JSChannelSplitterNode.h"
#include "JSConvolverNode.h"
#include "JSDelayNode.h"
#include "JSDynamicsCompressorNode.h"
#include "JSGainNode.h"
#include "JSOfflineAudioCompletionEvent.h"
#include "JSOfflineAudioContext.h"
#include "JSOscillatorNode.h"
#include "JSPannerNode.h"
#include "JSPeriodicWave.h"
#include "JSScriptProcessorNode.h"
#include "JSWaveShaperNode.h"
#endif

#if ENABLE(WEB_RTC)
#include "JSMediaStreamEvent.h"
#include "JSRTCDTMFToneChangeEvent.h"
#include "JSRTCIceCandidate.h"
#include "JSRTCPeerConnection.h"
#include "JSRTCRtpReceiver.h"
#include "JSRTCRtpSender.h"
#include "JSRTCRtpTransceiver.h"
#include "JSRTCSessionDescription.h"
#include "JSRTCTrackEvent.h"
#endif

#if ENABLE(WEB_SOCKETS)
#include "JSWebSocket.h"
#endif

#if ENABLE(WEB_TIMING)
#include "JSPerformance.h"
#include "JSPerformanceEntry.h"
#include "JSPerformanceMark.h"
#include "JSPerformanceMeasure.h"
#include "JSPerformanceNavigation.h"
#include "JSPerformanceResourceTiming.h"
#include "JSPerformanceTiming.h"
#endif

#if ENABLE(WIRELESS_PLAYBACK_TARGET)
#include "JSWebKitPlaybackTargetAvailabilityEvent.h"
#endif

#if ENABLE(WRITABLE_STREAM_API)
#include "JSWritableStream.h"
#endif

#if ENABLE(XSLT)
#include "JSXSLTProcessor.h"
#endif

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetSelection(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionPrint(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionStop(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionOpen(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionShowModalDialog(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionAlert(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionConfirm(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionPrompt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionFind(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScrollBy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScrollTo(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScroll(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMoveBy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMoveTo(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionResizeBy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionResizeTo(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMatchMedia(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetComputedStyle(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetMatchedCSSRules(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPage(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionRequestAnimationFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCancelAnimationFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitRequestAnimationFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitCancelAnimationFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCaptureEvents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionReleaseEvents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTree(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMatchingElementInFlatTree(JSC::ExecState*);
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionFetchRequest(JSC::ExecState*);
#endif
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionOpenDatabase(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionSetTimeout(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionClearTimeout(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionSetInterval(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionClearInterval(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionAtob(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionBtoa(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMWindowScreen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreen(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHistory(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowLocationbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowLocationbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMenubar(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMenubar(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPersonalbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPersonalbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScrollbars(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScrollbars(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStatusbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStatusbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowToolbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowToolbar(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNavigator(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowClientInformation(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowClientInformation(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowLocation(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowLocation(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowEvent(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowEvent(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFrameElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowOffscreenBuffering(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOffscreenBuffering(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOuterHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOuterHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOuterWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOuterWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowInnerHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowInnerHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowInnerWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowInnerWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScreenX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreenX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScreenY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreenY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScreenLeft(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreenLeft(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScreenTop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreenTop(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScrollX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScrollX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowScrollY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScrollY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPageXOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPageXOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPageYOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPageYOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDefaultStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDefaultStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDefaultstatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDefaultstatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSelf(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSelf(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWindow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowFrames(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFrames(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOpener(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOpener(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowParent(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowParent(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowDocument(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowStyleMedia(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowDevicePixelRatio(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDevicePixelRatio(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowApplicationCache(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowSessionStorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowLocalStorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#if ENABLE(ORIENTATION_EVENTS)
JSC::EncodedJSValue jsDOMWindowOrientation(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformance(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformance(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebkitURLConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebkitURLConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebKitMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCustomElements(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowOnanimationend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnanimationend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnanimationiteration(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnanimationiteration(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnanimationstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnanimationstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOntransitionend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntransitionend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwebkitanimationend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitanimationend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwebkitanimationiteration(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitanimationiteration(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwebkitanimationstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitanimationstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwebkittransitionend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkittransitionend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(IOS_GESTURE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOngesturechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOngesturechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOngestureend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOngestureend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOngesturestart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOngesturestart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(DEVICE_ORIENTATION)
JSC::EncodedJSValue jsDOMWindowOndevicemotion(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndevicemotion(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(DEVICE_ORIENTATION)
JSC::EncodedJSValue jsDOMWindowOndeviceorientation(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndeviceorientation(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(PROXIMITY_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitdeviceproximity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitdeviceproximity(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIndexedDB(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowWebkitIndexedDB(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
JSC::EncodedJSValue jsDOMWindowSpeechSynthesis(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsDOMWindowOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(REQUEST_AUTOCOMPLETE)
JSC::EncodedJSValue jsDOMWindowOnautocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnautocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(REQUEST_AUTOCOMPLETE)
JSC::EncodedJSValue jsDOMWindowOnautocompleteerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnautocompleteerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowOnblur(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnblur(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOncanplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOncanplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOncanplaythrough(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOncanplaythrough(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOncontextmenu(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOncontextmenu(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOncuechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOncuechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndblclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndblclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndrag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndrag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndragend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndragend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndragenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndragenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndragleave(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndragleave(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndragover(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndragover(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndragstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndragstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndrop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndrop(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOndurationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOndurationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnemptied(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnemptied(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnended(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnended(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnfocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnfocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOninput(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOninput(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOninvalid(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOninvalid(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnkeydown(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnkeydown(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnkeypress(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnkeypress(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnkeyup(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnkeyup(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnloadeddata(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnloadeddata(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnloadedmetadata(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnloadedmetadata(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnloadstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnloadstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmousedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmousedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmouseenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmouseenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmouseleave(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmouseleave(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmousemove(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmousemove(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmouseout(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmouseout(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmouseover(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmouseover(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmouseup(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmouseup(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmousewheel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmousewheel(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnpause(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnpause(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnplaying(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnplaying(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnprogress(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnprogress(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnratechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnratechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnreset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnreset(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnresize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnresize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnscroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnscroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnseeked(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnseeked(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnseeking(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnseeking(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnselect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnselect(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnstalled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnstalled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnsubmit(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnsubmit(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnsuspend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnsuspend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOntimeupdate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntimeupdate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOntoggle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntoggle(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnvolumechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnvolumechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwaiting(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwaiting(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnsearch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnsearch(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnwheel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwheel(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowOntouchcancel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntouchcancel(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowOntouchend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntouchend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowOntouchmove(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntouchmove(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowOntouchstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntouchstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowOntouchforcechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOntouchforcechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitmouseforcechanged(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitmouseforcechanged(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitmouseforcedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitmouseforcedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitmouseforcewillbegin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitmouseforcewillbegin(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitmouseforceup(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitmouseforceup(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitwillrevealbottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitwillrevealbottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitwillrevealleft(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitwillrevealleft(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitwillrevealright(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitwillrevealright(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnwebkitwillrevealtop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnwebkitwillrevealtop(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowCrypto(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMWindowOnbeforeunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnbeforeunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnhashchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnhashchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnlanguagechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnlanguagechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnoffline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnoffline(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnonline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnonline(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnpagehide(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnpagehide(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnpageshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnpageshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnpopstate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnpopstate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnstorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnstorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOnunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(ORIENTATION_EVENTS)
JSC::EncodedJSValue jsDOMWindowOnorientationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOnorientationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
JSC::EncodedJSValue jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue jsDOMWindowHeadersConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHeadersConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue jsDOMWindowRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue jsDOMWindowResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBCursorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBCursorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBCursorWithValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBCursorWithValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBFactoryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBFactoryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBIndexConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBIndexConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBKeyRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBKeyRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBObjectStoreConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBObjectStoreConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBOpenDBRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBOpenDBRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INDEXED_DATABASE)
JSC::EncodedJSValue jsDOMWindowIDBVersionChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIDBVersionChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_SESSION)
JSC::EncodedJSValue jsDOMWindowMediaRemoteControlsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaRemoteControlsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_SESSION)
JSC::EncodedJSValue jsDOMWindowMediaSessionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaSessionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_SOURCE)
JSC::EncodedJSValue jsDOMWindowMediaSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_SOURCE)
JSC::EncodedJSValue jsDOMWindowSourceBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSourceBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_SOURCE)
JSC::EncodedJSValue jsDOMWindowSourceBufferListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSourceBufferListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM)
JSC::EncodedJSValue jsDOMWindowMediaStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowMediaStreamEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM)
JSC::EncodedJSValue jsDOMWindowMediaStreamTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM)
JSC::EncodedJSValue jsDOMWindowMediaStreamTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM)
JSC::EncodedJSValue jsDOMWindowOverconstrainedErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOverconstrainedErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM)
JSC::EncodedJSValue jsDOMWindowOverconstrainedErrorEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOverconstrainedErrorEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCDTMFToneChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCDTMFToneChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCIceCandidateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCIceCandidateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCPeerConnectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCPeerConnectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCRtpReceiverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCRtpReceiverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCRtpSenderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCRtpSenderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCRtpTransceiverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCRtpTransceiverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCSessionDescriptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCSessionDescriptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_RTC)
JSC::EncodedJSValue jsDOMWindowRTCTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRTCTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
JSC::EncodedJSValue jsDOMWindowNotificationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNotificationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(PROXIMITY_EVENTS)
JSC::EncodedJSValue jsDOMWindowDeviceProximityEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDeviceProximityEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
JSC::EncodedJSValue jsDOMWindowSpeechSynthesisEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSpeechSynthesisEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SPEECH_SYNTHESIS)
JSC::EncodedJSValue jsDOMWindowSpeechSynthesisUtteranceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSpeechSynthesisUtteranceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
JSC::EncodedJSValue jsDOMWindowByteLengthQueuingStrategyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowByteLengthQueuingStrategyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
JSC::EncodedJSValue jsDOMWindowCountQueuingStrategyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCountQueuingStrategyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(READABLE_STREAM_API)
JSC::EncodedJSValue jsDOMWindowReadableStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowReadableStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WRITABLE_STREAM_API)
JSC::EncodedJSValue jsDOMWindowWritableStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWritableStreamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAnalyserNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAnalyserNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioBufferSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioBufferSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowWebkitAudioContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebkitAudioContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioDestinationNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioDestinationNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioListenerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioListenerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioParamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioParamConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowAudioProcessingEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioProcessingEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowBiquadFilterNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowBiquadFilterNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowChannelMergerNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowChannelMergerNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowChannelSplitterNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowChannelSplitterNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowConvolverNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowConvolverNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowDelayNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDelayNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowDynamicsCompressorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDynamicsCompressorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowGainNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowGainNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowMediaElementAudioSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaElementAudioSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowMediaStreamAudioDestinationNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamAudioDestinationNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowMediaStreamAudioSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaStreamAudioSourceNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowOfflineAudioCompletionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOfflineAudioCompletionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowWebkitOfflineAudioContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebkitOfflineAudioContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowOscillatorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOscillatorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowWebkitAudioPannerNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebkitAudioPannerNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowPeriodicWaveConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPeriodicWaveConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowScriptProcessorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScriptProcessorNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_AUDIO)
JSC::EncodedJSValue jsDOMWindowWaveShaperNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWaveShaperNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSQLErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSQLErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSQLExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSQLExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSQLResultSetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSQLResultSetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSQLResultSetRowListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSQLResultSetRowListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSQLTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSQLTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCloseEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCloseEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(WEB_SOCKETS)
JSC::EncodedJSValue jsDOMWindowWebSocketConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebSocketConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_ANIMATIONS)
JSC::EncodedJSValue jsDOMWindowAnimationEffectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAnimationEffectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_ANIMATIONS)
JSC::EncodedJSValue jsDOMWindowAnimationTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAnimationTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_ANIMATIONS)
JSC::EncodedJSValue jsDOMWindowDocumentTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDocumentTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_ANIMATIONS)
JSC::EncodedJSValue jsDOMWindowKeyframeEffectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowKeyframeEffectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_ANIMATIONS)
JSC::EncodedJSValue jsDOMWindowAnimationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAnimationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SUBTLE_CRYPTO)
JSC::EncodedJSValue jsDOMWindowCryptoKeyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCryptoKeyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SUBTLE_CRYPTO)
JSC::EncodedJSValue jsDOMWindowSubtleCryptoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSubtleCryptoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(FONT_LOAD_EVENTS)
JSC::EncodedJSValue jsDOMWindowCSSFontFaceLoadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSFontFaceLoadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowCSSFontFaceRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSFontFaceRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSImportRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSImportRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSKeyframeRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSKeyframeRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSKeyframesRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSKeyframesRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSMediaRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSMediaRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSNamespaceRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSNamespaceRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSPageRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSPageRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSRuleListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSRuleListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSStyleDeclarationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSStyleDeclarationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSStyleRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSStyleRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSSupportsRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSSupportsRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCounterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCounterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSPrimitiveValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSPrimitiveValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowRGBColorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRGBColorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCSSValueListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCSSValueListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFontFaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFontFaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFontFaceSetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFontFaceSetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMediaListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStyleSheetListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStyleSheetListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebKitCSSMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitCSSMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(CSS_REGIONS)
JSC::EncodedJSValue jsDOMWindowWebKitCSSRegionRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitCSSRegionRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(CSS_DEVICE_ADAPTATION)
JSC::EncodedJSValue jsDOMWindowWebKitCSSViewportRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitCSSViewportRuleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowAnimationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAnimationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowAttrConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAttrConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowBeforeLoadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowBeforeLoadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowBeforeUnloadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowBeforeUnloadEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCDATASectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCDATASectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCharacterDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCharacterDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowClientRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowClientRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowClientRectListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowClientRectListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowClipboardEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowClipboardEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCommentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCommentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCompositionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCompositionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCustomElementRegistryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCustomElementRegistryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCustomEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCustomEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMImplementationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMImplementationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMPointReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMPointReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMRectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMRectReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMStringListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMStringListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMStringMapConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMStringMapConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDataTransferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDataTransferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(DEVICE_ORIENTATION)
JSC::EncodedJSValue jsDOMWindowDeviceMotionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDeviceMotionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(DEVICE_ORIENTATION)
JSC::EncodedJSValue jsDOMWindowDeviceOrientationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDeviceOrientationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDocumentFragmentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDocumentFragmentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDocumentTypeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDocumentTypeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowErrorEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowErrorEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowEventTargetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowEventTargetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFocusEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFocusEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHashChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHashChangeEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowInputEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowInputEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowKeyboardEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowKeyboardEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(CHANNEL_MESSAGING)
JSC::EncodedJSValue jsDOMWindowMessageChannelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMessageChannelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowMessageEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMessageEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMessagePortConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMessagePortConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMouseEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMouseEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMutationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMutationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMutationRecordConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMutationRecordConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNamedNodeMapConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNamedNodeMapConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNodeFilterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNodeFilterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNodeIteratorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNodeIteratorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNodeListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNodeListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOverflowEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOverflowEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPageTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPageTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPopStateEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPopStateEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowProcessingInstructionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowProcessingInstructionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowProgressEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowProgressEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSecurityPolicyViolationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSecurityPolicyViolationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowShadowRootConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowShadowRootConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStaticRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStaticRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTextDecoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextDecoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTextEncoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextEncoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTextEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowTouchConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTouchConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowTouchEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTouchEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(TOUCH_EVENTS)
JSC::EncodedJSValue jsDOMWindowTouchListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTouchListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTreeWalkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTreeWalkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowUIEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowUIEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebKitAnimationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitAnimationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebKitTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitTransitionEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWheelEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWheelEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowBlobConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowBlobConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFileConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFileConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFileErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFileErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFileListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFileListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFileReaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFileReaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowFormDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowFormDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMTokenListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMTokenListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowURLConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowURLConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLAllCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAllCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLAnchorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAnchorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLAppletElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAppletElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(ATTACHMENT_ELEMENT)
JSC::EncodedJSValue jsDOMWindowHTMLAttachmentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAttachmentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowHTMLAudioElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLAudioElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowAudioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowHTMLBRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLBRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLBaseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLBaseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLBodyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLBodyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLButtonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLButtonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLCanvasElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLCanvasElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLDListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLDataElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDataElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(DATALIST_ELEMENT)
JSC::EncodedJSValue jsDOMWindowHTMLDataListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDataListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowHTMLDetailsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDetailsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLDirectoryElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDirectoryElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLDivElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDivElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLDocumentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLEmbedElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLEmbedElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFieldSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFieldSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFontElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFontElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFormControlsCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFormControlsCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFormElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFormElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLFrameSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLFrameSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLHRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLHRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLHeadElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLHeadElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLHeadingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLHeadingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLHtmlElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLHtmlElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLIFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLIFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowImageConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowImageConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLInputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLInputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLKeygenElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLKeygenElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLLIElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLLIElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLLabelElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLLabelElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLLegendElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLLegendElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLLinkElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLLinkElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLMarqueeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMarqueeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowHTMLMediaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMediaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowHTMLMenuElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMenuElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLMetaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMetaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(METER_ELEMENT)
JSC::EncodedJSValue jsDOMWindowHTMLMeterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLMeterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowHTMLModElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLModElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLOListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLOListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLObjectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLObjectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLOptGroupElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLOptGroupElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLOptionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLOptionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowOptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowOptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLOptionsCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLOptionsCollectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLOutputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLOutputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLParagraphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLParagraphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLParamElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLParamElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLPictureElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLPictureElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLPreElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLPreElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLProgressElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLProgressElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLQuoteElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLQuoteElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLScriptElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLScriptElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLSelectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLSelectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLSlotElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLSlotElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLSourceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLSourceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLSpanElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLSpanElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLStyleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLStyleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableCaptionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableCaptionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableCellElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableCellElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableColElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableColElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableRowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableRowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTableSectionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTableSectionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTemplateElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTemplateElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTextAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTextAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTimeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTimeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLTitleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTitleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowHTMLTrackElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLTrackElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowHTMLUListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLUListElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHTMLUnknownElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLUnknownElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowHTMLVideoElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHTMLVideoElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowImageDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowImageDataConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowMediaControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowMediaErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMediaErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowRadioNodeListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowRadioNodeListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowTextMetricsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextMetricsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO)
JSC::EncodedJSValue jsDOMWindowTimeRangesConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTimeRangesConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowURLSearchParamsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowURLSearchParamsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowValidityStateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowValidityStateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCanvasGradientConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCanvasGradientConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCanvasPatternConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCanvasPatternConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(CANVAS_PROXY)
JSC::EncodedJSValue jsDOMWindowCanvasProxyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCanvasProxyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowCanvasRenderingContext2DConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCanvasRenderingContext2DConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPath2DConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPath2DConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(WEBGL2)
JSC::EncodedJSValue jsDOMWindowWebGL2RenderingContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGL2RenderingContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLActiveInfoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLActiveInfoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLContextEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLContextEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLFramebufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLFramebufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLProgramConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLProgramConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLQueryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLQueryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLRenderbufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLRenderbufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLRenderingContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLRenderingContextConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLSamplerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLSamplerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLShaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLShaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLShaderPrecisionFormatConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLShaderPrecisionFormatConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLSyncConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLSyncConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLTextureConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLTextureConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLTransformFeedbackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLTransformFeedbackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL)
JSC::EncodedJSValue jsDOMWindowWebGLUniformLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLUniformLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEBGL2)
JSC::EncodedJSValue jsDOMWindowWebGLVertexArrayObjectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebGLVertexArrayObjectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowAudioTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowAudioTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowAudioTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowDataCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDataCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowTextTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowTextTrackCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextTrackCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowTextTrackCueListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextTrackCueListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowTextTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTextTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowTrackEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowVTTCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowVTTCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowVTTRegionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowVTTRegionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowVideoTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowVideoTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsDOMWindowVideoTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowVideoTrackListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowApplicationCacheConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowApplicationCacheConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowBarPropConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowBarPropConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowCryptoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowCryptoConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSelectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSelectionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWindowConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWindowConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowEventSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowEventSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowHistoryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowHistoryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(INTERSECTION_OBSERVER)
JSC::EncodedJSValue jsDOMWindowIntersectionObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIntersectionObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(INTERSECTION_OBSERVER)
JSC::EncodedJSValue jsDOMWindowIntersectionObserverEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowIntersectionObserverEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowNavigatorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowNavigatorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceMarkConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceMarkConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceMeasureConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceMeasureConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceNavigationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceNavigationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceResourceTimingConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceResourceTimingConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WEB_TIMING)
JSC::EncodedJSValue jsDOMWindowPerformanceTimingConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPerformanceTimingConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowScreenConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowScreenConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWebKitPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWebKitPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMimeTypeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMimeTypeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowMimeTypeArrayConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowMimeTypeArrayConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPluginConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPluginConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowPluginArrayConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowPluginArrayConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStorageConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStorageConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowStorageEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowStorageEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGAltGlyphDefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAltGlyphDefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGAltGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAltGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGAltGlyphItemElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAltGlyphItemElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimateColorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimateColorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimateElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimateElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimateMotionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimateMotionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimateTransformElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimateTransformElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedBooleanConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedBooleanConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedEnumerationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedEnumerationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedIntegerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedIntegerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedLengthConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedLengthConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedLengthListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedLengthListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedNumberConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedNumberConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedNumberListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedNumberListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedPreserveAspectRatioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedStringConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedStringConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimatedTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimatedTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGAnimationElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGAnimationElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGCircleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGCircleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGClipPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGClipPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGComponentTransferFunctionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGComponentTransferFunctionElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGCursorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGCursorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGDefsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGDefsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGDescElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGDescElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGEllipseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGEllipseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEBlendElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEBlendElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEColorMatrixElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEColorMatrixElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEComponentTransferElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEComponentTransferElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFECompositeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFECompositeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEConvolveMatrixElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEConvolveMatrixElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEDiffuseLightingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEDiffuseLightingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEDisplacementMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEDisplacementMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEDistantLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEDistantLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEDropShadowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEDropShadowElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEFloodElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEFloodElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEFuncAElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEFuncAElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEFuncBElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEFuncBElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEFuncGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEFuncGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEFuncRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEFuncRElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEGaussianBlurElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEGaussianBlurElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEMergeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEMergeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEMergeNodeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEMergeNodeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEMorphologyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEMorphologyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEOffsetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEOffsetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFEPointLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFEPointLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFESpecularLightingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFESpecularLightingElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFESpotLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFESpotLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFETileElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFETileElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFETurbulenceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFETurbulenceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGFilterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFilterElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontFaceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontFaceElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontFaceFormatElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontFaceFormatElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontFaceNameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontFaceNameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontFaceSrcElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontFaceSrcElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGFontFaceUriElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGFontFaceUriElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGForeignObjectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGForeignObjectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGGlyphRefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGGlyphRefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGGraphicsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGGraphicsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGHKernElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGHKernElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGImageElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGLengthConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGLengthConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGLengthListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGLengthListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGLineElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGLineElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGLinearGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGLinearGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGMPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGMarkerElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMarkerElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGMaskElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMaskElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGMetadataElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMetadataElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGMissingGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGMissingGlyphElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGNumberConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGNumberConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGNumberListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGNumberListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegArcAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegArcAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegArcRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegArcRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegClosePathConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegClosePathConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoCubicRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoHorizontalRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoVerticalAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegLinetoVerticalRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegLinetoVerticalRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegMovetoAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegMovetoAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPathSegMovetoRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPathSegMovetoRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPatternElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPatternElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPointConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPointListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPointListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPolygonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPolygonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPolylineElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPolylineElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGPreserveAspectRatioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGPreserveAspectRatioConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGRadialGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGRadialGradientElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGRectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGRectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGRenderingIntentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGRenderingIntentConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGSVGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGSVGElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGScriptElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGScriptElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGSetElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGStopElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGStopElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGStringListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGStringListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGStyleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGStyleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGSwitchElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGSwitchElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGSymbolElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGSymbolElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTRefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTRefElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTSpanElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTSpanElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTextContentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTextContentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTextElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTextElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTextPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTextPathElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTextPositioningElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTextPositioningElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTitleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTitleElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTransformConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTransformConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGUnitTypesConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGUnitTypesConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGUseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGUseElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(SVG_FONTS)
JSC::EncodedJSValue jsDOMWindowSVGVKernElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGVKernElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowSVGViewElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGViewElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGViewSpecConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGViewSpecConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowSVGZoomEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowSVGZoomEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowWorkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowWorkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowDOMParserConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowDOMParserConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLHttpRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLHttpRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLHttpRequestEventTargetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLHttpRequestEventTargetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLHttpRequestProgressEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLHttpRequestProgressEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLHttpRequestUploadConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLHttpRequestUploadConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXMLSerializerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXMLSerializerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXPathEvaluatorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXPathEvaluatorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXPathExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXPathExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXPathExpressionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXPathExpressionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMWindowXPathResultConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXPathResultConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(XSLT)
JSC::EncodedJSValue jsDOMWindowXSLTProcessorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowXSLTProcessorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsDOMWindowConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMWindowConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

using JSDOMWindowConstructor = JSDOMConstructorNotConstructable<JSDOMWindow>;

/* Hash table */

static const struct CompactHashIndex JSDOMWindowTableIndex[2138] = {
    { 623, -1 },
    { 396, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 642, -1 },
    { 201, -1 },
    { -1, -1 },
    { 447, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 266, -1 },
    { 213, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 174, -1 },
    { -1, -1 },
    { -1, -1 },
    { 458, -1 },
    { -1, -1 },
    { 645, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 180, -1 },
    { 51, -1 },
    { -1, -1 },
    { 424, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 12, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 540, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 381, -1 },
    { -1, -1 },
    { -1, -1 },
    { 282, 2101 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 301, 2092 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 599, -1 },
    { -1, -1 },
    { -1, -1 },
    { 451, -1 },
    { 156, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 322, -1 },
    { -1, -1 },
    { 244, -1 },
    { -1, -1 },
    { -1, -1 },
    { 192, -1 },
    { -1, -1 },
    { -1, -1 },
    { 478, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 490, -1 },
    { 258, -1 },
    { 345, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 189, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 9, 2054 },
    { 545, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 141, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 251, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 499, -1 },
    { 82, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 606, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 100, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 91, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 426, -1 },
    { -1, -1 },
    { 76, -1 },
    { -1, -1 },
    { 442, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 586, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 435, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 436, -1 },
    { -1, -1 },
    { -1, -1 },
    { 160, -1 },
    { -1, -1 },
    { 459, -1 },
    { 14, 2048 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 210, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 590, -1 },
    { -1, -1 },
    { -1, -1 },
    { 37, 2116 },
    { -1, -1 },
    { 558, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 536, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 36, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 289, -1 },
    { 318, -1 },
    { -1, -1 },
    { -1, -1 },
    { 402, -1 },
    { -1, -1 },
    { 637, -1 },
    { 382, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 49, -1 },
    { 359, -1 },
    { 146, -1 },
    { -1, -1 },
    { 234, -1 },
    { -1, -1 },
    { 90, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 170, 2062 },
    { 421, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 245, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 247, -1 },
    { -1, -1 },
    { -1, -1 },
    { 384, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 204, -1 },
    { 102, -1 },
    { -1, -1 },
    { 364, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 25, -1 },
    { 353, -1 },
    { -1, -1 },
    { -1, -1 },
    { 20, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 93, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 379, -1 },
    { -1, -1 },
    { -1, -1 },
    { 446, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 473, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 47, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 182, 2089 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 535, -1 },
    { -1, -1 },
    { 325, 2083 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 415, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 287, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 73, -1 },
    { 369, 2131 },
    { -1, -1 },
    { 313, -1 },
    { 171, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 122, 2088 },
    { -1, -1 },
    { 285, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 242, -1 },
    { -1, -1 },
    { 194, -1 },
    { 296, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 220, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 103, 2061 },
    { -1, -1 },
    { -1, -1 },
    { 644, -1 },
    { 470, -1 },
    { 319, -1 },
    { -1, -1 },
    { 321, -1 },
    { 16, -1 },
    { -1, -1 },
    { -1, -1 },
    { 162, -1 },
    { -1, -1 },
    { -1, -1 },
    { 222, -1 },
    { -1, -1 },
    { 593, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 339, 2129 },
    { -1, -1 },
    { -1, -1 },
    { 497, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 188, 2071 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 308, -1 },
    { 613, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 13, -1 },
    { 277, -1 },
    { -1, -1 },
    { 391, 2112 },
    { -1, -1 },
    { -1, -1 },
    { 110, 2065 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 248, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 52, -1 },
    { -1, -1 },
    { 278, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 518, -1 },
    { -1, -1 },
    { -1, -1 },
    { 205, 2094 },
    { 371, -1 },
    { 416, -1 },
    { -1, -1 },
    { 81, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 336, -1 },
    { 326, -1 },
    { -1, -1 },
    { 306, -1 },
    { 582, -1 },
    { -1, -1 },
    { -1, -1 },
    { 212, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 636, -1 },
    { -1, -1 },
    { 581, -1 },
    { -1, -1 },
    { 118, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 167, 2117 },
    { 355, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 564, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 58, -1 },
    { -1, -1 },
    { 551, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 195, 2081 },
    { -1, -1 },
    { 316, -1 },
    { -1, -1 },
    { 273, -1 },
    { -1, -1 },
    { -1, -1 },
    { 109, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 123, -1 },
    { 461, -1 },
    { -1, -1 },
    { 365, -1 },
    { -1, -1 },
    { 555, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 425, -1 },
    { -1, -1 },
    { -1, -1 },
    { 120, -1 },
    { 553, -1 },
    { -1, -1 },
    { 15, -1 },
    { -1, -1 },
    { 107, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 84, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 351, -1 },
    { 250, 2120 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 11, -1 },
    { -1, -1 },
    { -1, -1 },
    { 237, 2095 },
    { -1, -1 },
    { 0, -1 },
    { -1, -1 },
    { 42, 2068 },
    { -1, -1 },
    { -1, -1 },
    { 191, 2073 },
    { -1, -1 },
    { -1, -1 },
    { 142, -1 },
    { 145, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 576, -1 },
    { 74, 2052 },
    { 163, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 619, -1 },
    { -1, -1 },
    { 543, -1 },
    { -1, -1 },
    { 546, -1 },
    { -1, -1 },
    { -1, -1 },
    { 144, -1 },
    { -1, -1 },
    { -1, -1 },
    { 175, 2093 },
    { -1, -1 },
    { 310, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 492, -1 },
    { -1, -1 },
    { -1, -1 },
    { 594, -1 },
    { -1, -1 },
    { -1, -1 },
    { 151, -1 },
    { -1, -1 },
    { 324, -1 },
    { 137, -1 },
    { -1, -1 },
    { -1, -1 },
    { 419, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 509, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 500, -1 },
    { 280, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 199, -1 },
    { -1, -1 },
    { -1, -1 },
    { 338, -1 },
    { -1, -1 },
    { -1, -1 },
    { 124, 2053 },
    { -1, -1 },
    { 114, -1 },
    { 232, 2085 },
    { -1, -1 },
    { -1, -1 },
    { 286, -1 },
    { -1, -1 },
    { -1, -1 },
    { 246, -1 },
    { -1, -1 },
    { -1, -1 },
    { 368, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 450, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 57, 2049 },
    { 449, -1 },
    { -1, -1 },
    { 209, -1 },
    { 489, -1 },
    { -1, -1 },
    { -1, -1 },
    { 433, -1 },
    { 401, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 373, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 420, -1 },
    { 481, -1 },
    { -1, -1 },
    { 463, -1 },
    { 482, -1 },
    { -1, -1 },
    { 64, -1 },
    { 83, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 211, -1 },
    { -1, -1 },
    { 263, -1 },
    { -1, -1 },
    { -1, -1 },
    { 633, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 173, -1 },
    { -1, -1 },
    { 4, -1 },
    { -1, -1 },
    { -1, -1 },
    { 380, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 71, -1 },
    { -1, -1 },
    { 295, 2102 },
    { 29, 2056 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 106, 2074 },
    { 50, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 400, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 344, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 40, 2050 },
    { 227, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 388, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 168, 2100 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 352, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 95, -1 },
    { -1, -1 },
    { 521, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 532, -1 },
    { 22, 2091 },
    { -1, -1 },
    { -1, -1 },
    { 56, -1 },
    { -1, -1 },
    { 19, -1 },
    { -1, -1 },
    { 136, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 583, -1 },
    { 33, -1 },
    { 323, -1 },
    { 257, -1 },
    { -1, -1 },
    { 274, -1 },
    { -1, -1 },
    { 21, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 520, -1 },
    { -1, -1 },
    { -1, -1 },
    { 63, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 467, -1 },
    { -1, -1 },
    { -1, -1 },
    { 187, -1 },
    { -1, -1 },
    { 154, -1 },
    { -1, -1 },
    { 75, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 372, -1 },
    { 477, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 303, -1 },
    { -1, -1 },
    { 128, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 617, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 131, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 630, -1 },
    { 615, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 238, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 567, -1 },
    { 466, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 181, 2124 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 346, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 31, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 414, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 498, 2121 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 621, -1 },
    { 475, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 72, -1 },
    { -1, -1 },
    { -1, -1 },
    { 519, -1 },
    { -1, -1 },
    { -1, -1 },
    { 541, -1 },
    { -1, -1 },
    { -1, -1 },
    { 265, 2079 },
    { -1, -1 },
    { -1, -1 },
    { 584, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 34, -1 },
    { -1, -1 },
    { -1, -1 },
    { 327, 2137 },
    { 445, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 130, -1 },
    { 527, -1 },
    { -1, -1 },
    { -1, -1 },
    { 147, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 115, 2113 },
    { 3, -1 },
    { 86, 2090 },
    { 119, -1 },
    { 465, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 24, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 27, -1 },
    { -1, -1 },
    { 203, -1 },
    { -1, -1 },
    { -1, -1 },
    { 233, 2123 },
    { 526, -1 },
    { 264, -1 },
    { 178, 2087 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 332, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 362, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 288, -1 },
    { -1, -1 },
    { 132, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 38, 2070 },
    { -1, -1 },
    { 111, -1 },
    { 378, -1 },
    { 635, -1 },
    { 54, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 299, 2127 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 363, -1 },
    { -1, -1 },
    { 605, -1 },
    { 330, -1 },
    { -1, -1 },
    { -1, -1 },
    { 159, -1 },
    { 6, -1 },
    { -1, -1 },
    { -1, -1 },
    { 383, -1 },
    { -1, -1 },
    { -1, -1 },
    { 80, -1 },
    { 317, -1 },
    { 455, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 179, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 89, 2134 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 43, 2067 },
    { 626, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 589, -1 },
    { 96, 2055 },
    { 395, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 438, -1 },
    { -1, -1 },
    { 133, -1 },
    { 28, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 302, -1 },
    { 357, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 276, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 376, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 45, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 55, -1 },
    { 406, -1 },
    { -1, -1 },
    { -1, -1 },
    { 517, -1 },
    { -1, -1 },
    { -1, -1 },
    { 523, -1 },
    { -1, -1 },
    { 385, -1 },
    { -1, -1 },
    { 607, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 166, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 226, -1 },
    { 101, -1 },
    { -1, -1 },
    { 309, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 39, -1 },
    { 217, 2126 },
    { 249, -1 },
    { -1, -1 },
    { 78, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 44, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 59, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 409, -1 },
    { 643, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 253, -1 },
    { 328, -1 },
    { -1, -1 },
    { -1, -1 },
    { 150, -1 },
    { -1, -1 },
    { -1, -1 },
    { 23, -1 },
    { -1, -1 },
    { 208, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 454, -1 },
    { 511, -1 },
    { -1, -1 },
    { 77, 2082 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 628, -1 },
    { 293, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 281, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 598, -1 },
    { -1, -1 },
    { 367, -1 },
    { 184, -1 },
    { -1, -1 },
    { 161, -1 },
    { -1, -1 },
    { 32, 2066 },
    { -1, -1 },
    { -1, -1 },
    { 292, 2086 },
    { 283, -1 },
    { 46, -1 },
    { -1, -1 },
    { -1, -1 },
    { 48, 2111 },
    { 375, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 471, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 561, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 563, -1 },
    { -1, -1 },
    { 437, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 560, 2133 },
    { -1, -1 },
    { -1, -1 },
    { 105, -1 },
    { -1, -1 },
    { 398, 2115 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 469, 2106 },
    { 262, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 485, -1 },
    { 176, -1 },
    { 405, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 501, -1 },
    { -1, -1 },
    { 149, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 366, -1 },
    { -1, -1 },
    { -1, -1 },
    { 231, -1 },
    { -1, -1 },
    { 256, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 329, -1 },
    { -1, -1 },
    { 218, -1 },
    { 311, -1 },
    { -1, -1 },
    { -1, -1 },
    { 496, -1 },
    { -1, -1 },
    { 228, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 595, -1 },
    { -1, -1 },
    { -1, -1 },
    { 341, -1 },
    { 524, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 393, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 342, 2084 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 298, -1 },
    { 516, -1 },
    { 387, 2105 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 230, -1 },
    { -1, -1 },
    { -1, -1 },
    { 221, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 591, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 629, -1 },
    { -1, -1 },
    { 611, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 349, -1 },
    { -1, -1 },
    { 108, -1 },
    { -1, -1 },
    { 407, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 67, -1 },
    { 530, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 207, -1 },
    { 417, -1 },
    { 290, -1 },
    { 534, -1 },
    { 202, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 104, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 196, -1 },
    { -1, -1 },
    { -1, -1 },
    { 374, -1 },
    { -1, -1 },
    { -1, -1 },
    { 399, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 460, -1 },
    { 2, -1 },
    { -1, -1 },
    { 215, -1 },
    { -1, -1 },
    { 529, -1 },
    { -1, -1 },
    { -1, -1 },
    { 390, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 304, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 197, -1 },
    { 320, 2077 },
    { 200, 2060 },
    { 444, -1 },
    { -1, -1 },
    { 566, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 198, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 297, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 510, -1 },
    { 620, -1 },
    { -1, -1 },
    { -1, -1 },
    { 493, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 350, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 129, -1 },
    { -1, -1 },
    { -1, -1 },
    { 476, -1 },
    { 462, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 165, -1 },
    { -1, -1 },
    { 334, -1 },
    { 622, -1 },
    { 512, -1 },
    { 10, -1 },
    { -1, -1 },
    { 117, -1 },
    { 5, 2051 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 331, 2099 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 261, -1 },
    { 506, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 343, -1 },
    { -1, -1 },
    { -1, -1 },
    { 35, 2063 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 62, -1 },
    { -1, -1 },
    { -1, -1 },
    { 88, -1 },
    { -1, -1 },
    { 377, -1 },
    { -1, -1 },
    { 569, -1 },
    { -1, -1 },
    { 347, -1 },
    { -1, -1 },
    { -1, -1 },
    { 223, 2064 },
    { -1, -1 },
    { 70, -1 },
    { 85, -1 },
    { 573, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 452, -1 },
    { 495, 2135 },
    { 468, -1 },
    { 26, -1 },
    { -1, -1 },
    { -1, -1 },
    { 236, -1 },
    { 597, -1 },
    { -1, -1 },
    { -1, -1 },
    { 8, -1 },
    { -1, -1 },
    { 315, -1 },
    { -1, -1 },
    { 549, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 602, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 616, -1 },
    { -1, -1 },
    { -1, -1 },
    { 99, -1 },
    { 155, -1 },
    { 125, -1 },
    { 260, -1 },
    { -1, -1 },
    { 522, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 539, -1 },
    { 411, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 112, 2098 },
    { 456, -1 },
    { -1, -1 },
    { -1, -1 },
    { 441, -1 },
    { 169, 2128 },
    { -1, -1 },
    { 17, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 235, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 457, -1 },
    { -1, -1 },
    { 65, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 413, -1 },
    { -1, -1 },
    { -1, -1 },
    { 547, -1 },
    { -1, -1 },
    { 429, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 348, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 479, 2125 },
    { 412, 2114 },
    { -1, -1 },
    { 97, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 185, 2132 },
    { 143, -1 },
    { -1, -1 },
    { -1, -1 },
    { 69, 2078 },
    { -1, -1 },
    { -1, -1 },
    { 127, -1 },
    { -1, -1 },
    { -1, -1 },
    { 542, -1 },
    { -1, -1 },
    { 474, -1 },
    { -1, -1 },
    { -1, -1 },
    { 486, -1 },
    { 254, -1 },
    { 340, -1 },
    { -1, -1 },
    { 135, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 241, -1 },
    { -1, -1 },
    { 183, 2118 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 61, -1 },
    { 484, -1 },
    { 152, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 608, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 410, -1 },
    { 483, 2104 },
    { -1, -1 },
    { 291, -1 },
    { -1, -1 },
    { -1, -1 },
    { 604, -1 },
    { 525, -1 },
    { -1, -1 },
    { -1, -1 },
    { 397, -1 },
    { -1, -1 },
    { -1, -1 },
    { 116, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 225, -1 },
    { 157, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 592, 2130 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 335, -1 },
    { -1, -1 },
    { -1, -1 },
    { 587, -1 },
    { 580, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 354, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 370, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 487, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 314, -1 },
    { -1, -1 },
    { 618, -1 },
    { 505, -1 },
    { -1, -1 },
    { 609, -1 },
    { -1, -1 },
    { 92, -1 },
    { -1, -1 },
    { -1, -1 },
    { 7, -1 },
    { -1, -1 },
    { -1, -1 },
    { 68, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 434, -1 },
    { 408, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 430, 2110 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 272, 2080 },
    { -1, -1 },
    { 574, -1 },
    { -1, -1 },
    { -1, -1 },
    { 575, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 158, 2058 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 394, -1 },
    { -1, -1 },
    { 578, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 448, -1 },
    { 641, -1 },
    { -1, -1 },
    { 440, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 271, 2096 },
    { -1, -1 },
    { 164, -1 },
    { -1, -1 },
    { 139, -1 },
    { 640, -1 },
    { 60, 2075 },
    { -1, -1 },
    { -1, -1 },
    { 267, 2136 },
    { -1, -1 },
    { 30, -1 },
    { -1, -1 },
    { 548, -1 },
    { -1, -1 },
    { -1, -1 },
    { 53, -1 },
    { -1, -1 },
    { 18, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 544, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 432, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 494, -1 },
    { 193, 2059 },
    { -1, -1 },
    { 138, -1 },
    { -1, -1 },
    { 305, -1 },
    { -1, -1 },
    { 552, -1 },
    { 121, 2057 },
    { -1, -1 },
    { -1, -1 },
    { 533, -1 },
    { -1, -1 },
    { -1, -1 },
    { 190, -1 },
    { 219, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 269, 2069 },
    { 610, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 41, -1 },
    { -1, -1 },
    { 224, -1 },
    { -1, -1 },
    { 94, 2097 },
    { -1, -1 },
    { 87, -1 },
    { -1, -1 },
    { 404, -1 },
    { 531, -1 },
    { 603, -1 },
    { 172, 2107 },
    { -1, -1 },
    { 443, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 632, -1 },
    { 503, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 240, -1 },
    { 66, -1 },
    { 79, -1 },
    { 98, -1 },
    { 113, -1 },
    { 126, -1 },
    { 134, -1 },
    { 140, -1 },
    { 148, -1 },
    { 153, 2108 },
    { 177, -1 },
    { 186, -1 },
    { 206, -1 },
    { 214, -1 },
    { 216, -1 },
    { 229, -1 },
    { 239, -1 },
    { 243, -1 },
    { 252, 2072 },
    { 255, -1 },
    { 259, -1 },
    { 268, -1 },
    { 270, -1 },
    { 275, -1 },
    { 279, 2103 },
    { 284, 2076 },
    { 294, -1 },
    { 300, -1 },
    { 307, -1 },
    { 312, -1 },
    { 333, -1 },
    { 337, -1 },
    { 356, -1 },
    { 358, -1 },
    { 360, -1 },
    { 361, -1 },
    { 386, 2119 },
    { 389, -1 },
    { 392, -1 },
    { 403, -1 },
    { 418, -1 },
    { 422, -1 },
    { 423, -1 },
    { 427, -1 },
    { 428, 2109 },
    { 431, -1 },
    { 439, -1 },
    { 453, -1 },
    { 464, -1 },
    { 472, -1 },
    { 480, -1 },
    { 488, -1 },
    { 491, -1 },
    { 502, -1 },
    { 504, -1 },
    { 507, -1 },
    { 508, -1 },
    { 513, -1 },
    { 514, -1 },
    { 515, -1 },
    { 528, -1 },
    { 537, -1 },
    { 538, -1 },
    { 550, -1 },
    { 554, -1 },
    { 556, 2122 },
    { 557, -1 },
    { 559, -1 },
    { 562, -1 },
    { 565, -1 },
    { 568, -1 },
    { 570, -1 },
    { 571, -1 },
    { 572, -1 },
    { 577, -1 },
    { 579, -1 },
    { 585, -1 },
    { 588, -1 },
    { 596, -1 },
    { 600, -1 },
    { 601, -1 },
    { 612, -1 },
    { 614, -1 },
    { 624, -1 },
    { 625, -1 },
    { 627, -1 },
    { 631, -1 },
    { 634, -1 },
    { 638, -1 },
    { 639, -1 },
    { 646, -1 },
};


static const HashTableValue JSDOMWindowTableValues[] =
{
    { "screen", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreen) } },
    { "history", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHistory), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "locationbar", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocationbar), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowLocationbar) } },
    { "menubar", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMenubar), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMenubar) } },
    { "personalbar", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPersonalbar), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPersonalbar) } },
    { "scrollbars", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollbars), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScrollbars) } },
    { "statusbar", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStatusbar), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStatusbar) } },
    { "toolbar", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowToolbar), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowToolbar) } },
    { "navigator", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNavigator), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "clientInformation", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClientInformation), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowClientInformation) } },
    { "location", DontDelete | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocation), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowLocation) } },
    { "event", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowEvent), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowEvent) } },
    { "frameElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFrameElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "offscreenBuffering", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOffscreenBuffering), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOffscreenBuffering) } },
    { "outerHeight", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOuterHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOuterHeight) } },
    { "outerWidth", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOuterWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOuterWidth) } },
    { "innerHeight", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowInnerHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowInnerHeight) } },
    { "innerWidth", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowInnerWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowInnerWidth) } },
    { "screenX", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreenX) } },
    { "screenY", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreenY) } },
    { "screenLeft", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenLeft), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreenLeft) } },
    { "screenTop", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenTop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreenTop) } },
    { "scrollX", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScrollX) } },
    { "scrollY", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScrollY) } },
    { "pageXOffset", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPageXOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPageXOffset) } },
    { "pageYOffset", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPageYOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPageYOffset) } },
    { "closed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClosed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "length", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowLength) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowName) } },
    { "status", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStatus) } },
    { "defaultStatus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDefaultStatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDefaultStatus) } },
    { "defaultstatus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDefaultstatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDefaultstatus) } },
    { "self", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSelf), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSelf) } },
    { "window", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWindow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "frames", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFrames), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFrames) } },
    { "opener", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOpener), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOpener) } },
    { "parent", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowParent), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowParent) } },
    { "top", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "document", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDocument), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "styleMedia", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStyleMedia), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "devicePixelRatio", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDevicePixelRatio), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDevicePixelRatio) } },
    { "applicationCache", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowApplicationCache), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "sessionStorage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSessionStorage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "localStorage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocalStorage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#if ENABLE(ORIENTATION_EVENTS)
    { "orientation", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOrientation), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_TIMING)
    { "performance", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPerformance), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPerformance) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGDocument", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGDocumentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGDocumentConstructor) } },
    { "webkitURL", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitURLConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebkitURLConstructor) } },
    { "WebKitMutationObserver", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitMutationObserverConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitMutationObserverConstructor) } },
    { "onanimationend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnanimationend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnanimationend) } },
    { "onanimationiteration", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnanimationiteration), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnanimationiteration) } },
    { "onanimationstart", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnanimationstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnanimationstart) } },
    { "ontransitionend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntransitionend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntransitionend) } },
    { "onwebkitanimationend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitanimationend) } },
    { "onwebkitanimationiteration", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationiteration), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitanimationiteration) } },
    { "onwebkitanimationstart", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitanimationstart) } },
    { "onwebkittransitionend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkittransitionend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkittransitionend) } },
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongesturechange", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngesturechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOngesturechange) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongestureend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngestureend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOngestureend) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongesturestart", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngesturestart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOngesturestart) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    { "ondevicemotion", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndevicemotion), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndevicemotion) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    { "ondeviceorientation", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndeviceorientation), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndeviceorientation) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(PROXIMITY_EVENTS)
    { "onwebkitdeviceproximity", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitdeviceproximity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitdeviceproximity) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "indexedDB", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIndexedDB), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIndexedDB", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIndexedDB), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    { "speechSynthesis", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSpeechSynthesis), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "onabort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnabort) } },
#if ENABLE(REQUEST_AUTOCOMPLETE)
    { "onautocomplete", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnautocomplete), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnautocomplete) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(REQUEST_AUTOCOMPLETE)
    { "onautocompleteerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnautocompleteerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnautocompleteerror) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "onblur", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnblur), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnblur) } },
    { "oncanplay", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncanplay), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOncanplay) } },
    { "oncanplaythrough", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncanplaythrough), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOncanplaythrough) } },
    { "onchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnchange) } },
    { "onclick", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnclick), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnclick) } },
    { "oncontextmenu", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncontextmenu), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOncontextmenu) } },
    { "oncuechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncuechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOncuechange) } },
    { "ondblclick", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndblclick), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndblclick) } },
    { "ondrag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndrag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndrag) } },
    { "ondragend", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndragend) } },
    { "ondragenter", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragenter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndragenter) } },
    { "ondragleave", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragleave), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndragleave) } },
    { "ondragover", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragover), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndragover) } },
    { "ondragstart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndragstart) } },
    { "ondrop", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndrop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndrop) } },
    { "ondurationchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndurationchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOndurationchange) } },
    { "onemptied", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnemptied), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnemptied) } },
    { "onended", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnended), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnended) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnerror) } },
    { "onfocus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnfocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnfocus) } },
    { "oninput", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOninput), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOninput) } },
    { "oninvalid", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOninvalid), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOninvalid) } },
    { "onkeydown", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeydown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnkeydown) } },
    { "onkeypress", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeypress), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnkeypress) } },
    { "onkeyup", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeyup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnkeyup) } },
    { "onload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnload) } },
    { "onloadeddata", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadeddata), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnloadeddata) } },
    { "onloadedmetadata", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadedmetadata), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnloadedmetadata) } },
    { "onloadstart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnloadstart) } },
    { "onmousedown", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousedown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmousedown) } },
    { "onmouseenter", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseenter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmouseenter) } },
    { "onmouseleave", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseleave), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmouseleave) } },
    { "onmousemove", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousemove), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmousemove) } },
    { "onmouseout", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseout), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmouseout) } },
    { "onmouseover", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseover), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmouseover) } },
    { "onmouseup", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmouseup) } },
    { "onmousewheel", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousewheel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmousewheel) } },
    { "onpause", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpause), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnpause) } },
    { "onplay", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnplay), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnplay) } },
    { "onplaying", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnplaying), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnplaying) } },
    { "onprogress", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnprogress), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnprogress) } },
    { "onratechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnratechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnratechange) } },
    { "onreset", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnreset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnreset) } },
    { "onresize", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnresize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnresize) } },
    { "onscroll", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnscroll), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnscroll) } },
    { "onseeked", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnseeked), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnseeked) } },
    { "onseeking", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnseeking), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnseeking) } },
    { "onselect", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnselect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnselect) } },
    { "onstalled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnstalled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnstalled) } },
    { "onsubmit", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsubmit), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnsubmit) } },
    { "onsuspend", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsuspend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnsuspend) } },
    { "ontimeupdate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntimeupdate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntimeupdate) } },
    { "ontoggle", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntoggle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntoggle) } },
    { "onvolumechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnvolumechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnvolumechange) } },
    { "onwaiting", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwaiting), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwaiting) } },
    { "onsearch", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsearch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnsearch) } },
    { "onwheel", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwheel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwheel) } },
#if ENABLE(TOUCH_EVENTS)
    { "ontouchcancel", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchcancel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntouchcancel) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchend", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntouchend) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchmove", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchmove), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntouchmove) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchstart", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntouchstart) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchforcechange", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchforcechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOntouchforcechange) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcechanged", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitmouseforcechanged), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitmouseforcechanged) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcedown", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitmouseforcedown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitmouseforcedown) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcewillbegin", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitmouseforcewillbegin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitmouseforcewillbegin) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforceup", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitmouseforceup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitmouseforceup) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealbottom", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitwillrevealbottom), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitwillrevealbottom) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealleft", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitwillrevealleft), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitwillrevealleft) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealright", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitwillrevealright), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitwillrevealright) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealtop", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitwillrevealtop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnwebkitwillrevealtop) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "crypto", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCrypto), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onbeforeunload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnbeforeunload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnbeforeunload) } },
    { "onhashchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnhashchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnhashchange) } },
    { "onlanguagechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnlanguagechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnlanguagechange) } },
    { "onmessage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnmessage) } },
    { "onoffline", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnoffline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnoffline) } },
    { "ononline", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnonline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnonline) } },
    { "onpagehide", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpagehide), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnpagehide) } },
    { "onpageshow", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpageshow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnpageshow) } },
    { "onpopstate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpopstate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnpopstate) } },
    { "onstorage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnstorage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnstorage) } },
    { "onunload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnunload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnunload) } },
#if ENABLE(ORIENTATION_EVENTS)
    { "onorientationchange", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnorientationchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOnorientationchange) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WIRELESS_PLAYBACK_TARGET)
    { "WebKitPlaybackTargetAvailabilityEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBCursor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBCursorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBCursorConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBCursorWithValue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBCursorWithValueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBCursorWithValueConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBDatabase", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBDatabaseConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBDatabaseConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBFactory", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBFactoryConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBFactoryConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBIndex", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBIndexConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBIndexConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBKeyRange", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBKeyRangeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBKeyRangeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBObjectStore", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBObjectStoreConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBObjectStoreConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBOpenDBRequest", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBOpenDBRequestConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBOpenDBRequestConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBRequest", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBRequestConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBRequestConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBTransaction", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBTransactionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBTransactionConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "IDBVersionChangeEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowIDBVersionChangeEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowIDBVersionChangeEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_SESSION)
    { "MediaRemoteControls", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaRemoteControlsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaRemoteControlsConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_SESSION)
    { "MediaSession", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaSessionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaSessionConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_SOURCE)
    { "MediaSource", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaSourceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaSourceConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_SOURCE)
    { "SourceBuffer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSourceBufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSourceBufferConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_SOURCE)
    { "SourceBufferList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSourceBufferListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSourceBufferListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM)
    { "MediaStream", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaStreamConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaStreamConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM)
    { "MediaStreamTrack", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaStreamTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaStreamTrackConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM)
    { "MediaStreamTrackEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaStreamTrackEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaStreamTrackEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM)
    { "OverconstrainedError", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOverconstrainedErrorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOverconstrainedErrorConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM)
    { "OverconstrainedErrorEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOverconstrainedErrorEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOverconstrainedErrorEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
    { "Notification", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNotificationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNotificationConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(PROXIMITY_EVENTS)
    { "DeviceProximityEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDeviceProximityEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDeviceProximityEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    { "SpeechSynthesisEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSpeechSynthesisEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSpeechSynthesisEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SPEECH_SYNTHESIS)
    { "SpeechSynthesisUtterance", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSpeechSynthesisUtteranceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSpeechSynthesisUtteranceConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
    { "ByteLengthQueuingStrategy", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowByteLengthQueuingStrategyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowByteLengthQueuingStrategyConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
    { "CountQueuingStrategy", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCountQueuingStrategyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCountQueuingStrategyConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(READABLE_STREAM_API)
    { "ReadableStream", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowReadableStreamConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowReadableStreamConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WRITABLE_STREAM_API)
    { "WritableStream", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWritableStreamConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWritableStreamConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AnalyserNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAnalyserNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAnalyserNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioBuffer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioBufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioBufferConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioBufferSourceNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioBufferSourceNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioBufferSourceNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "webkitAudioContext", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitAudioContextConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebkitAudioContextConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioDestinationNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioDestinationNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioDestinationNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioListener", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioListenerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioListenerConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioParam", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioParamConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioParamConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "AudioProcessingEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioProcessingEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioProcessingEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "BiquadFilterNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowBiquadFilterNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowBiquadFilterNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "ChannelMergerNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowChannelMergerNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowChannelMergerNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "ChannelSplitterNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowChannelSplitterNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowChannelSplitterNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "ConvolverNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowConvolverNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowConvolverNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "DelayNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDelayNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDelayNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "DynamicsCompressorNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDynamicsCompressorNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDynamicsCompressorNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "GainNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowGainNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowGainNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
    { "MediaElementAudioSourceNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaElementAudioSourceNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaElementAudioSourceNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
    { "MediaStreamAudioDestinationNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaStreamAudioDestinationNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaStreamAudioDestinationNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
    { "MediaStreamAudioSourceNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaStreamAudioSourceNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaStreamAudioSourceNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "OfflineAudioCompletionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOfflineAudioCompletionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOfflineAudioCompletionEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "webkitOfflineAudioContext", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitOfflineAudioContextConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebkitOfflineAudioContextConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "OscillatorNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOscillatorNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOscillatorNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "webkitAudioPannerNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitAudioPannerNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebkitAudioPannerNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "PeriodicWave", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPeriodicWaveConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPeriodicWaveConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "ScriptProcessorNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScriptProcessorNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScriptProcessorNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_AUDIO)
    { "WaveShaperNode", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWaveShaperNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWaveShaperNodeConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "Database", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDatabaseConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDatabaseConstructor) } },
    { "SQLError", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSQLErrorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSQLErrorConstructor) } },
    { "SQLException", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSQLExceptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSQLExceptionConstructor) } },
    { "SQLResultSet", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSQLResultSetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSQLResultSetConstructor) } },
    { "SQLResultSetRowList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSQLResultSetRowListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSQLResultSetRowListConstructor) } },
    { "SQLTransaction", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSQLTransactionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSQLTransactionConstructor) } },
    { "CloseEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCloseEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCloseEventConstructor) } },
#if ENABLE(SUBTLE_CRYPTO)
    { "CryptoKey", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCryptoKeyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCryptoKeyConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SUBTLE_CRYPTO)
    { "SubtleCrypto", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSubtleCryptoConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSubtleCryptoConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FONT_LOAD_EVENTS)
    { "CSSFontFaceLoadEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSFontFaceLoadEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSFontFaceLoadEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "CSSFontFaceRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSFontFaceRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSFontFaceRuleConstructor) } },
    { "CSSImportRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSImportRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSImportRuleConstructor) } },
    { "CSSKeyframeRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSKeyframeRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSKeyframeRuleConstructor) } },
    { "CSSKeyframesRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSKeyframesRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSKeyframesRuleConstructor) } },
    { "CSSMediaRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSMediaRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSMediaRuleConstructor) } },
    { "CSSNamespaceRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSNamespaceRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSNamespaceRuleConstructor) } },
    { "CSSPageRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSPageRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSPageRuleConstructor) } },
    { "CSSRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSRuleConstructor) } },
    { "CSSRuleList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSRuleListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSRuleListConstructor) } },
    { "CSSStyleDeclaration", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSStyleDeclarationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSStyleDeclarationConstructor) } },
    { "CSSStyleRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSStyleRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSStyleRuleConstructor) } },
    { "CSSStyleSheet", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSStyleSheetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSStyleSheetConstructor) } },
    { "CSSSupportsRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSSupportsRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSSupportsRuleConstructor) } },
    { "CSS", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSConstructor) } },
    { "Counter", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCounterConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCounterConstructor) } },
    { "CSSPrimitiveValue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSPrimitiveValueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSPrimitiveValueConstructor) } },
    { "RGBColor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowRGBColorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowRGBColorConstructor) } },
    { "Rect", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowRectConstructor) } },
    { "CSSValue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSValueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSValueConstructor) } },
    { "CSSValueList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSSValueListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCSSValueListConstructor) } },
    { "FontFace", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFontFaceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFontFaceConstructor) } },
    { "FontFaceSet", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFontFaceSetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFontFaceSetConstructor) } },
    { "MediaList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaListConstructor) } },
    { "StyleSheet", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStyleSheetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStyleSheetConstructor) } },
    { "StyleSheetList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStyleSheetListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStyleSheetListConstructor) } },
    { "WebKitCSSMatrix", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitCSSMatrixConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitCSSMatrixConstructor) } },
#if ENABLE(CSS_REGIONS)
    { "WebKitCSSRegionRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitCSSRegionRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitCSSRegionRuleConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(CSS_DEVICE_ADAPTATION)
    { "WebKitCSSViewportRule", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitCSSViewportRuleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitCSSViewportRuleConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "AnimationEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAnimationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAnimationEventConstructor) } },
    { "Attr", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAttrConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAttrConstructor) } },
    { "BeforeLoadEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowBeforeLoadEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowBeforeLoadEventConstructor) } },
    { "BeforeUnloadEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowBeforeUnloadEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowBeforeUnloadEventConstructor) } },
    { "CDATASection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCDATASectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCDATASectionConstructor) } },
    { "CharacterData", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCharacterDataConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCharacterDataConstructor) } },
    { "ClientRect", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClientRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowClientRectConstructor) } },
    { "ClientRectList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClientRectListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowClientRectListConstructor) } },
    { "ClipboardEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClipboardEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowClipboardEventConstructor) } },
    { "Comment", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCommentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCommentConstructor) } },
    { "CompositionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCompositionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCompositionEventConstructor) } },
    { "CustomEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCustomEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCustomEventConstructor) } },
    { "DOMException", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMExceptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMExceptionConstructor) } },
    { "DOMImplementation", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMImplementationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMImplementationConstructor) } },
    { "DOMPoint", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMPointConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMPointConstructor) } },
    { "DOMPointReadOnly", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMPointReadOnlyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMPointReadOnlyConstructor) } },
    { "DOMRect", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMRectConstructor) } },
    { "DOMRectReadOnly", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMRectReadOnlyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMRectReadOnlyConstructor) } },
    { "DOMStringList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMStringListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMStringListConstructor) } },
    { "DOMStringMap", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMStringMapConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMStringMapConstructor) } },
    { "DataTransfer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDataTransferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDataTransferConstructor) } },
#if ENABLE(DEVICE_ORIENTATION)
    { "DeviceMotionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDeviceMotionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDeviceMotionEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    { "DeviceOrientationEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDeviceOrientationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDeviceOrientationEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "Document", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDocumentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDocumentConstructor) } },
    { "DocumentFragment", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDocumentFragmentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDocumentFragmentConstructor) } },
    { "DocumentType", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDocumentTypeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDocumentTypeConstructor) } },
    { "Element", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowElementConstructor) } },
    { "ErrorEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowErrorEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowErrorEventConstructor) } },
    { "Event", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowEventConstructor) } },
    { "EventTarget", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowEventTargetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowEventTargetConstructor) } },
    { "FocusEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFocusEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFocusEventConstructor) } },
    { "HashChangeEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHashChangeEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHashChangeEventConstructor) } },
    { "KeyboardEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowKeyboardEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowKeyboardEventConstructor) } },
#if ENABLE(CHANNEL_MESSAGING)
    { "MessageChannel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMessageChannelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMessageChannelConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "MessageEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMessageEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMessageEventConstructor) } },
    { "MessagePort", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMessagePortConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMessagePortConstructor) } },
    { "MouseEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMouseEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMouseEventConstructor) } },
    { "MutationEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMutationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMutationEventConstructor) } },
    { "MutationObserver", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMutationObserverConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMutationObserverConstructor) } },
    { "MutationRecord", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMutationRecordConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMutationRecordConstructor) } },
    { "NamedNodeMap", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNamedNodeMapConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNamedNodeMapConstructor) } },
    { "Node", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNodeConstructor) } },
    { "NodeFilter", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNodeFilterConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNodeFilterConstructor) } },
    { "NodeIterator", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNodeIteratorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNodeIteratorConstructor) } },
    { "NodeList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNodeListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNodeListConstructor) } },
    { "OverflowEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOverflowEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOverflowEventConstructor) } },
    { "PageTransitionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPageTransitionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPageTransitionEventConstructor) } },
    { "PopStateEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPopStateEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPopStateEventConstructor) } },
    { "ProcessingInstruction", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowProcessingInstructionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowProcessingInstructionConstructor) } },
    { "ProgressEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowProgressEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowProgressEventConstructor) } },
    { "Range", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowRangeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowRangeConstructor) } },
    { "SecurityPolicyViolationEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSecurityPolicyViolationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSecurityPolicyViolationEventConstructor) } },
    { "Text", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextConstructor) } },
    { "TextDecoder", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextDecoderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextDecoderConstructor) } },
    { "TextEncoder", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextEncoderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextEncoderConstructor) } },
    { "TextEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextEventConstructor) } },
#if ENABLE(TOUCH_EVENTS)
    { "Touch", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTouchConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTouchConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "TouchEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTouchEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTouchEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "TouchList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTouchListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTouchListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "TransitionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTransitionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTransitionEventConstructor) } },
    { "TreeWalker", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTreeWalkerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTreeWalkerConstructor) } },
    { "UIEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowUIEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowUIEventConstructor) } },
    { "WebKitAnimationEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitAnimationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitAnimationEventConstructor) } },
    { "WebKitTransitionEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitTransitionEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitTransitionEventConstructor) } },
    { "WheelEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWheelEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWheelEventConstructor) } },
    { "XMLDocument", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLDocumentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLDocumentConstructor) } },
    { "Blob", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowBlobConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowBlobConstructor) } },
    { "File", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFileConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFileConstructor) } },
    { "FileError", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFileErrorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFileErrorConstructor) } },
    { "FileList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFileListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFileListConstructor) } },
    { "FileReader", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFileReaderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFileReaderConstructor) } },
    { "FormData", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFormDataConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowFormDataConstructor) } },
    { "DOMTokenList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMTokenListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMTokenListConstructor) } },
    { "URL", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowURLConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowURLConstructor) } },
    { "HTMLAllCollection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLAllCollectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLAllCollectionConstructor) } },
    { "HTMLAnchorElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLAnchorElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLAnchorElementConstructor) } },
    { "HTMLAppletElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLAppletElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLAppletElementConstructor) } },
    { "HTMLAreaElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLAreaElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLAreaElementConstructor) } },
#if ENABLE(ATTACHMENT_ELEMENT)
    { "HTMLAttachmentElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLAttachmentElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLAttachmentElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "HTMLBRElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLBRElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLBRElementConstructor) } },
    { "HTMLBaseElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLBaseElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLBaseElementConstructor) } },
    { "HTMLBodyElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLBodyElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLBodyElementConstructor) } },
    { "HTMLButtonElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLButtonElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLButtonElementConstructor) } },
    { "HTMLCanvasElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLCanvasElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLCanvasElementConstructor) } },
    { "HTMLCollection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLCollectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLCollectionConstructor) } },
    { "HTMLDListElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDListElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDListElementConstructor) } },
    { "HTMLDataElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDataElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDataElementConstructor) } },
#if ENABLE(DATALIST_ELEMENT)
    { "HTMLDataListElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDataListElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDataListElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "HTMLDetailsElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDetailsElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDetailsElementConstructor) } },
    { "HTMLDirectoryElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDirectoryElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDirectoryElementConstructor) } },
    { "HTMLDivElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDivElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDivElementConstructor) } },
    { "HTMLDocument", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLDocumentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLDocumentConstructor) } },
    { "HTMLElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLElementConstructor) } },
    { "HTMLEmbedElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLEmbedElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLEmbedElementConstructor) } },
    { "HTMLFieldSetElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFieldSetElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFieldSetElementConstructor) } },
    { "HTMLFontElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFontElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFontElementConstructor) } },
    { "HTMLFormControlsCollection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFormControlsCollectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFormControlsCollectionConstructor) } },
    { "HTMLFormElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFormElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFormElementConstructor) } },
    { "HTMLFrameElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFrameElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFrameElementConstructor) } },
    { "HTMLFrameSetElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLFrameSetElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLFrameSetElementConstructor) } },
    { "HTMLHRElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLHRElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLHRElementConstructor) } },
    { "HTMLHeadElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLHeadElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLHeadElementConstructor) } },
    { "HTMLHeadingElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLHeadingElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLHeadingElementConstructor) } },
    { "HTMLHtmlElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLHtmlElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLHtmlElementConstructor) } },
    { "HTMLIFrameElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLIFrameElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLIFrameElementConstructor) } },
    { "HTMLImageElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLImageElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLImageElementConstructor) } },
    { "Image", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowImageConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowImageConstructor) } },
    { "HTMLInputElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLInputElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLInputElementConstructor) } },
    { "HTMLKeygenElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLKeygenElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLKeygenElementConstructor) } },
    { "HTMLLIElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLLIElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLLIElementConstructor) } },
    { "HTMLLabelElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLLabelElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLLabelElementConstructor) } },
    { "HTMLLegendElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLLegendElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLLegendElementConstructor) } },
    { "HTMLLinkElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLLinkElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLLinkElementConstructor) } },
    { "HTMLMapElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMapElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMapElementConstructor) } },
    { "HTMLMarqueeElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMarqueeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMarqueeElementConstructor) } },
#if ENABLE(VIDEO)
    { "HTMLMediaElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMediaElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMediaElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "HTMLMenuElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMenuElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMenuElementConstructor) } },
    { "HTMLMetaElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMetaElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMetaElementConstructor) } },
#if ENABLE(METER_ELEMENT)
    { "HTMLMeterElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLMeterElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLMeterElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "HTMLModElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLModElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLModElementConstructor) } },
    { "HTMLOListElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLOListElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLOListElementConstructor) } },
    { "HTMLObjectElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLObjectElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLObjectElementConstructor) } },
    { "HTMLOptGroupElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLOptGroupElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLOptGroupElementConstructor) } },
    { "HTMLOptionElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLOptionElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLOptionElementConstructor) } },
    { "Option", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowOptionConstructor) } },
    { "HTMLOptionsCollection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLOptionsCollectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLOptionsCollectionConstructor) } },
    { "HTMLOutputElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLOutputElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLOutputElementConstructor) } },
    { "HTMLParagraphElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLParagraphElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLParagraphElementConstructor) } },
    { "HTMLParamElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLParamElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLParamElementConstructor) } },
    { "HTMLPictureElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLPictureElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLPictureElementConstructor) } },
    { "HTMLPreElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLPreElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLPreElementConstructor) } },
    { "HTMLProgressElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLProgressElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLProgressElementConstructor) } },
    { "HTMLQuoteElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLQuoteElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLQuoteElementConstructor) } },
    { "HTMLScriptElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLScriptElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLScriptElementConstructor) } },
    { "HTMLSelectElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLSelectElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLSelectElementConstructor) } },
    { "HTMLSourceElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLSourceElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLSourceElementConstructor) } },
    { "HTMLSpanElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLSpanElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLSpanElementConstructor) } },
    { "HTMLStyleElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLStyleElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLStyleElementConstructor) } },
    { "HTMLTableCaptionElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableCaptionElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableCaptionElementConstructor) } },
    { "HTMLTableCellElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableCellElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableCellElementConstructor) } },
    { "HTMLTableColElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableColElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableColElementConstructor) } },
    { "HTMLTableElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableElementConstructor) } },
    { "HTMLTableRowElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableRowElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableRowElementConstructor) } },
    { "HTMLTableSectionElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTableSectionElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTableSectionElementConstructor) } },
    { "HTMLTemplateElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTemplateElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTemplateElementConstructor) } },
    { "HTMLTextAreaElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTextAreaElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTextAreaElementConstructor) } },
    { "HTMLTimeElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTimeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTimeElementConstructor) } },
    { "HTMLTitleElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTitleElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTitleElementConstructor) } },
#if ENABLE(VIDEO_TRACK)
    { "HTMLTrackElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLTrackElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLTrackElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "HTMLUListElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLUListElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLUListElementConstructor) } },
    { "HTMLUnknownElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLUnknownElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLUnknownElementConstructor) } },
#if ENABLE(VIDEO)
    { "HTMLVideoElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHTMLVideoElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHTMLVideoElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "ImageData", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowImageDataConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowImageDataConstructor) } },
#if ENABLE(VIDEO)
    { "MediaController", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaControllerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaControllerConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO)
    { "MediaError", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMediaErrorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMediaErrorConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "RadioNodeList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowRadioNodeListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowRadioNodeListConstructor) } },
    { "TextMetrics", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextMetricsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextMetricsConstructor) } },
#if ENABLE(VIDEO)
    { "TimeRanges", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTimeRangesConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTimeRangesConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "URLSearchParams", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowURLSearchParamsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowURLSearchParamsConstructor) } },
    { "ValidityState", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowValidityStateConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowValidityStateConstructor) } },
    { "CanvasGradient", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCanvasGradientConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCanvasGradientConstructor) } },
    { "CanvasPattern", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCanvasPatternConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCanvasPatternConstructor) } },
#if ENABLE(CANVAS_PROXY)
    { "CanvasProxy", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCanvasProxyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCanvasProxyConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "CanvasRenderingContext2D", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCanvasRenderingContext2DConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCanvasRenderingContext2DConstructor) } },
    { "Path2D", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPath2DConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPath2DConstructor) } },
#if ENABLE(WEBGL)
    { "WebGLActiveInfo", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLActiveInfoConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLActiveInfoConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLBuffer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLBufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLBufferConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLContextEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLContextEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLContextEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLFramebuffer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLFramebufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLFramebufferConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLProgram", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLProgramConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLProgramConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLQuery", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLQueryConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLQueryConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLRenderbuffer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLRenderbufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLRenderbufferConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLRenderingContext", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLRenderingContextConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLRenderingContextConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLSampler", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLSamplerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLSamplerConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLShader", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLShaderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLShaderConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLShaderPrecisionFormat", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLShaderPrecisionFormatConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLShaderPrecisionFormatConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLSync", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLSyncConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLSyncConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLTexture", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLTextureConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLTextureConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLTransformFeedback", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLTransformFeedbackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLTransformFeedbackConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEBGL)
    { "WebGLUniformLocation", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebGLUniformLocationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebGLUniformLocationConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "AudioTrack", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioTrackConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "AudioTrackList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowAudioTrackListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowAudioTrackListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "DataCue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDataCueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDataCueConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "TextTrack", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextTrackConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "TextTrackCue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextTrackCueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextTrackCueConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "TextTrackCueList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextTrackCueListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextTrackCueListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "TextTrackList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTextTrackListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTextTrackListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "TrackEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTrackEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowTrackEventConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "VTTCue", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowVTTCueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowVTTCueConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "VTTRegion", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowVTTRegionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowVTTRegionConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "VideoTrack", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowVideoTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowVideoTrackConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "VideoTrackList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowVideoTrackListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowVideoTrackListConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "ApplicationCache", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowApplicationCacheConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowApplicationCacheConstructor) } },
    { "BarProp", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowBarPropConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowBarPropConstructor) } },
    { "Crypto", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCryptoConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowCryptoConstructor) } },
    { "Selection", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSelectionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSelectionConstructor) } },
    { "Window", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWindowConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWindowConstructor) } },
    { "EventSource", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowEventSourceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowEventSourceConstructor) } },
    { "History", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHistoryConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowHistoryConstructor) } },
    { "Location", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowLocationConstructor) } },
    { "Navigator", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNavigatorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowNavigatorConstructor) } },
#if ENABLE(WEB_TIMING)
    { "Performance", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPerformanceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPerformanceConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_TIMING)
    { "PerformanceNavigation", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPerformanceNavigationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPerformanceNavigationConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WEB_TIMING)
    { "PerformanceTiming", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPerformanceTimingConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPerformanceTimingConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "Screen", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowScreenConstructor) } },
    { "WebKitPoint", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitPointConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWebKitPointConstructor) } },
    { "MimeType", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMimeTypeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMimeTypeConstructor) } },
    { "MimeTypeArray", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMimeTypeArrayConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowMimeTypeArrayConstructor) } },
    { "Plugin", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPluginConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPluginConstructor) } },
    { "PluginArray", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPluginArrayConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowPluginArrayConstructor) } },
    { "Storage", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStorageConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStorageConstructor) } },
    { "StorageEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStorageEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowStorageEventConstructor) } },
    { "SVGAElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGAltGlyphDefElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAltGlyphDefElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAltGlyphDefElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGAltGlyphElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAltGlyphElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAltGlyphElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGAltGlyphItemElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAltGlyphItemElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAltGlyphItemElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGAngle", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAngleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAngleConstructor) } },
    { "SVGAnimateColorElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimateColorElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimateColorElementConstructor) } },
    { "SVGAnimateElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimateElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimateElementConstructor) } },
    { "SVGAnimateMotionElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimateMotionElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimateMotionElementConstructor) } },
    { "SVGAnimateTransformElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimateTransformElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimateTransformElementConstructor) } },
    { "SVGAnimatedAngle", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedAngleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedAngleConstructor) } },
    { "SVGAnimatedBoolean", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedBooleanConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedBooleanConstructor) } },
    { "SVGAnimatedEnumeration", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedEnumerationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedEnumerationConstructor) } },
    { "SVGAnimatedInteger", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedIntegerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedIntegerConstructor) } },
    { "SVGAnimatedLength", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedLengthConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedLengthConstructor) } },
    { "SVGAnimatedLengthList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedLengthListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedLengthListConstructor) } },
    { "SVGAnimatedNumber", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedNumberConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedNumberConstructor) } },
    { "SVGAnimatedNumberList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedNumberListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedNumberListConstructor) } },
    { "SVGAnimatedPreserveAspectRatio", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedPreserveAspectRatioConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructor) } },
    { "SVGAnimatedRect", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedRectConstructor) } },
    { "SVGAnimatedString", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedStringConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedStringConstructor) } },
    { "SVGAnimatedTransformList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimatedTransformListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimatedTransformListConstructor) } },
    { "SVGAnimationElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGAnimationElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGAnimationElementConstructor) } },
    { "SVGCircleElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGCircleElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGCircleElementConstructor) } },
    { "SVGClipPathElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGClipPathElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGClipPathElementConstructor) } },
    { "SVGComponentTransferFunctionElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGComponentTransferFunctionElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGComponentTransferFunctionElementConstructor) } },
    { "SVGCursorElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGCursorElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGCursorElementConstructor) } },
    { "SVGDefsElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGDefsElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGDefsElementConstructor) } },
    { "SVGDescElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGDescElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGDescElementConstructor) } },
    { "SVGElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGElementConstructor) } },
    { "SVGEllipseElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGEllipseElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGEllipseElementConstructor) } },
    { "SVGException", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGExceptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGExceptionConstructor) } },
    { "SVGFEBlendElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEBlendElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEBlendElementConstructor) } },
    { "SVGFEColorMatrixElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEColorMatrixElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEColorMatrixElementConstructor) } },
    { "SVGFEComponentTransferElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEComponentTransferElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEComponentTransferElementConstructor) } },
    { "SVGFECompositeElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFECompositeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFECompositeElementConstructor) } },
    { "SVGFEConvolveMatrixElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEConvolveMatrixElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEConvolveMatrixElementConstructor) } },
    { "SVGFEDiffuseLightingElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEDiffuseLightingElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEDiffuseLightingElementConstructor) } },
    { "SVGFEDisplacementMapElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEDisplacementMapElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEDisplacementMapElementConstructor) } },
    { "SVGFEDistantLightElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEDistantLightElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEDistantLightElementConstructor) } },
    { "SVGFEDropShadowElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEDropShadowElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEDropShadowElementConstructor) } },
    { "SVGFEFloodElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEFloodElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEFloodElementConstructor) } },
    { "SVGFEFuncAElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEFuncAElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEFuncAElementConstructor) } },
    { "SVGFEFuncBElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEFuncBElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEFuncBElementConstructor) } },
    { "SVGFEFuncGElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEFuncGElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEFuncGElementConstructor) } },
    { "SVGFEFuncRElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEFuncRElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEFuncRElementConstructor) } },
    { "SVGFEGaussianBlurElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEGaussianBlurElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEGaussianBlurElementConstructor) } },
    { "SVGFEImageElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEImageElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEImageElementConstructor) } },
    { "SVGFEMergeElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEMergeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEMergeElementConstructor) } },
    { "SVGFEMergeNodeElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEMergeNodeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEMergeNodeElementConstructor) } },
    { "SVGFEMorphologyElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEMorphologyElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEMorphologyElementConstructor) } },
    { "SVGFEOffsetElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEOffsetElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEOffsetElementConstructor) } },
    { "SVGFEPointLightElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFEPointLightElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFEPointLightElementConstructor) } },
    { "SVGFESpecularLightingElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFESpecularLightingElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFESpecularLightingElementConstructor) } },
    { "SVGFESpotLightElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFESpotLightElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFESpotLightElementConstructor) } },
    { "SVGFETileElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFETileElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFETileElementConstructor) } },
    { "SVGFETurbulenceElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFETurbulenceElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFETurbulenceElementConstructor) } },
    { "SVGFilterElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFilterElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFilterElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGFontElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGFontFaceElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontFaceElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontFaceElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGFontFaceFormatElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontFaceFormatElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontFaceFormatElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGFontFaceNameElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontFaceNameElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontFaceNameElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGFontFaceSrcElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontFaceSrcElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontFaceSrcElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGFontFaceUriElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGFontFaceUriElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGFontFaceUriElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGForeignObjectElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGForeignObjectElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGForeignObjectElementConstructor) } },
    { "SVGGElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGGElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGGElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGGlyphElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGGlyphElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGGlyphElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(SVG_FONTS)
    { "SVGGlyphRefElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGGlyphRefElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGGlyphRefElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGGradientElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGGradientElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGGradientElementConstructor) } },
    { "SVGGraphicsElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGGraphicsElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGGraphicsElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGHKernElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGHKernElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGHKernElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGImageElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGImageElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGImageElementConstructor) } },
    { "SVGLength", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGLengthConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGLengthConstructor) } },
    { "SVGLengthList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGLengthListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGLengthListConstructor) } },
    { "SVGLineElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGLineElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGLineElementConstructor) } },
    { "SVGLinearGradientElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGLinearGradientElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGLinearGradientElementConstructor) } },
    { "SVGMPathElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMPathElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMPathElementConstructor) } },
    { "SVGMarkerElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMarkerElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMarkerElementConstructor) } },
    { "SVGMaskElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMaskElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMaskElementConstructor) } },
    { "SVGMatrix", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMatrixConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMatrixConstructor) } },
    { "SVGMetadataElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMetadataElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMetadataElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGMissingGlyphElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGMissingGlyphElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGMissingGlyphElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGNumber", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGNumberConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGNumberConstructor) } },
    { "SVGNumberList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGNumberListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGNumberListConstructor) } },
    { "SVGPathElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathElementConstructor) } },
    { "SVGPathSeg", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegConstructor) } },
    { "SVGPathSegArcAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegArcAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegArcAbsConstructor) } },
    { "SVGPathSegArcRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegArcRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegArcRelConstructor) } },
    { "SVGPathSegClosePath", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegClosePathConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegClosePathConstructor) } },
    { "SVGPathSegCurvetoCubicAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoCubicAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructor) } },
    { "SVGPathSegCurvetoCubicRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoCubicRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoCubicRelConstructor) } },
    { "SVGPathSegCurvetoCubicSmoothAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor) } },
    { "SVGPathSegCurvetoCubicSmoothRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor) } },
    { "SVGPathSegCurvetoQuadraticAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor) } },
    { "SVGPathSegCurvetoQuadraticRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructor) } },
    { "SVGPathSegCurvetoQuadraticSmoothAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor) } },
    { "SVGPathSegCurvetoQuadraticSmoothRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor) } },
    { "SVGPathSegLinetoAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoAbsConstructor) } },
    { "SVGPathSegLinetoHorizontalAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructor) } },
    { "SVGPathSegLinetoHorizontalRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoHorizontalRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructor) } },
    { "SVGPathSegLinetoRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoRelConstructor) } },
    { "SVGPathSegLinetoVerticalAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoVerticalAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructor) } },
    { "SVGPathSegLinetoVerticalRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegLinetoVerticalRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegLinetoVerticalRelConstructor) } },
    { "SVGPathSegList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegListConstructor) } },
    { "SVGPathSegMovetoAbs", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegMovetoAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegMovetoAbsConstructor) } },
    { "SVGPathSegMovetoRel", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPathSegMovetoRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPathSegMovetoRelConstructor) } },
    { "SVGPatternElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPatternElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPatternElementConstructor) } },
    { "SVGPoint", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPointConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPointConstructor) } },
    { "SVGPointList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPointListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPointListConstructor) } },
    { "SVGPolygonElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPolygonElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPolygonElementConstructor) } },
    { "SVGPolylineElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPolylineElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPolylineElementConstructor) } },
    { "SVGPreserveAspectRatio", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGPreserveAspectRatioConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGPreserveAspectRatioConstructor) } },
    { "SVGRadialGradientElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGRadialGradientElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGRadialGradientElementConstructor) } },
    { "SVGRect", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGRectConstructor) } },
    { "SVGRectElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGRectElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGRectElementConstructor) } },
    { "SVGRenderingIntent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGRenderingIntentConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGRenderingIntentConstructor) } },
    { "SVGSVGElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGSVGElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGSVGElementConstructor) } },
    { "SVGScriptElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGScriptElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGScriptElementConstructor) } },
    { "SVGSetElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGSetElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGSetElementConstructor) } },
    { "SVGStopElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGStopElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGStopElementConstructor) } },
    { "SVGStringList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGStringListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGStringListConstructor) } },
    { "SVGStyleElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGStyleElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGStyleElementConstructor) } },
    { "SVGSwitchElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGSwitchElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGSwitchElementConstructor) } },
    { "SVGSymbolElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGSymbolElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGSymbolElementConstructor) } },
    { "SVGTRefElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTRefElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTRefElementConstructor) } },
    { "SVGTSpanElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTSpanElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTSpanElementConstructor) } },
    { "SVGTextContentElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTextContentElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTextContentElementConstructor) } },
    { "SVGTextElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTextElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTextElementConstructor) } },
    { "SVGTextPathElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTextPathElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTextPathElementConstructor) } },
    { "SVGTextPositioningElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTextPositioningElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTextPositioningElementConstructor) } },
    { "SVGTitleElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTitleElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTitleElementConstructor) } },
    { "SVGTransform", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTransformConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTransformConstructor) } },
    { "SVGTransformList", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGTransformListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGTransformListConstructor) } },
    { "SVGUnitTypes", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGUnitTypesConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGUnitTypesConstructor) } },
    { "SVGUseElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGUseElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGUseElementConstructor) } },
#if ENABLE(SVG_FONTS)
    { "SVGVKernElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGVKernElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGVKernElementConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "SVGViewElement", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGViewElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGViewElementConstructor) } },
    { "SVGViewSpec", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGViewSpecConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGViewSpecConstructor) } },
    { "SVGZoomEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSVGZoomEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowSVGZoomEventConstructor) } },
    { "Worker", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWorkerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowWorkerConstructor) } },
    { "DOMParser", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDOMParserConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowDOMParserConstructor) } },
    { "XMLHttpRequest", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLHttpRequestConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLHttpRequestConstructor) } },
    { "XMLHttpRequestEventTarget", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLHttpRequestEventTargetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLHttpRequestEventTargetConstructor) } },
    { "XMLHttpRequestProgressEvent", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLHttpRequestProgressEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLHttpRequestProgressEventConstructor) } },
    { "XMLHttpRequestUpload", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLHttpRequestUploadConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLHttpRequestUploadConstructor) } },
    { "XMLSerializer", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLSerializerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXMLSerializerConstructor) } },
    { "XPathEvaluator", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXPathEvaluatorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXPathEvaluatorConstructor) } },
    { "XPathException", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXPathExceptionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXPathExceptionConstructor) } },
    { "XPathExpression", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXPathExpressionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXPathExpressionConstructor) } },
    { "XPathResult", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXPathResultConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXPathResultConstructor) } },
#if ENABLE(XSLT)
    { "XSLTProcessor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXSLTProcessorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowXSLTProcessorConstructor) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "getSelection", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionGetSelection), (intptr_t) (0) } },
    { "focus", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionFocus), (intptr_t) (0) } },
    { "blur", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionBlur), (intptr_t) (0) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionClose), (intptr_t) (0) } },
    { "print", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionPrint), (intptr_t) (0) } },
    { "stop", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionStop), (intptr_t) (0) } },
    { "open", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionOpen), (intptr_t) (0) } },
    { "showModalDialog", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionShowModalDialog), (intptr_t) (1) } },
    { "alert", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionAlert), (intptr_t) (0) } },
    { "confirm", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionConfirm), (intptr_t) (0) } },
    { "prompt", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionPrompt), (intptr_t) (0) } },
    { "find", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionFind), (intptr_t) (0) } },
    { "scrollBy", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionScrollBy), (intptr_t) (0) } },
    { "scrollTo", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionScrollTo), (intptr_t) (0) } },
    { "scroll", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionScroll), (intptr_t) (0) } },
    { "moveBy", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionMoveBy), (intptr_t) (0) } },
    { "moveTo", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionMoveTo), (intptr_t) (0) } },
    { "resizeBy", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionResizeBy), (intptr_t) (0) } },
    { "resizeTo", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionResizeTo), (intptr_t) (0) } },
    { "matchMedia", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionMatchMedia), (intptr_t) (1) } },
    { "getComputedStyle", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionGetComputedStyle), (intptr_t) (1) } },
    { "getMatchedCSSRules", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionGetMatchedCSSRules), (intptr_t) (0) } },
    { "webkitConvertPointFromPageToNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNode), (intptr_t) (0) } },
    { "webkitConvertPointFromNodeToPage", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPage), (intptr_t) (0) } },
    { "postMessage", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionPostMessage), (intptr_t) (2) } },
    { "requestAnimationFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionRequestAnimationFrame), (intptr_t) (1) } },
    { "cancelAnimationFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionCancelAnimationFrame), (intptr_t) (1) } },
    { "webkitRequestAnimationFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionWebkitRequestAnimationFrame), (intptr_t) (1) } },
    { "webkitCancelAnimationFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionWebkitCancelAnimationFrame), (intptr_t) (1) } },
    { "webkitCancelRequestAnimationFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrame), (intptr_t) (1) } },
    { "captureEvents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionCaptureEvents), (intptr_t) (0) } },
    { "releaseEvents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionReleaseEvents), (intptr_t) (0) } },
    { "openDatabase", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionOpenDatabase), (intptr_t) (4) } },
    { "setTimeout", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionSetTimeout), (intptr_t) (1) } },
    { "clearTimeout", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionClearTimeout), (intptr_t) (0) } },
    { "setInterval", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionSetInterval), (intptr_t) (1) } },
    { "clearInterval", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionClearInterval), (intptr_t) (0) } },
    { "atob", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionAtob), (intptr_t) (1) } },
    { "btoa", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMWindowInstanceFunctionBtoa), (intptr_t) (1) } },
};

static const HashTable JSDOMWindowTable = { 647, 2047, true, JSDOMWindowTableValues, JSDOMWindowTableIndex };
template<> JSValue JSDOMWindowConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSDOMWindowConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, globalObject.getPrototypeDirect(), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Window"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDOMWindowConstructor::s_info = { "Window", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMWindowConstructor) };

/* Hash table for prototype */

static const struct CompactHashIndex JSDOMWindowPrototypeTableIndex[2] = {
    { -1, -1 },
    { 0, -1 },
};


static const HashTableValue JSDOMWindowPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMWindowConstructor) } },
};

static const HashTable JSDOMWindowPrototypeTable = { 1, 1, true, JSDOMWindowPrototypeTableValues, JSDOMWindowPrototypeTableIndex };
const ClassInfo JSDOMWindowPrototype::s_info = { "WindowPrototype", &Base::s_info, &JSDOMWindowPrototypeTable, CREATE_METHOD_TABLE(JSDOMWindowPrototype) };

const ClassInfo JSDOMWindow::s_info = { "Window", &Base::s_info, &JSDOMWindowTable, CREATE_METHOD_TABLE(JSDOMWindow) };

JSDOMWindow::JSDOMWindow(VM& vm, Structure* structure, Ref<DOMWindow>&& impl, JSDOMWindowShell* shell)
    : JSDOMWindowBase(vm, structure, WTFMove(impl), shell)
{
}

void JSDOMWindow::finishCreation(VM& vm, JSDOMWindowShell* shell)
{
    Base::finishCreation(vm, shell);

    if (RuntimeEnabledFeatures::sharedFeatures().customElementsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowCustomElements, nullptr);
        putDirectCustomAccessor(vm, vm.propertyNames->customElements, customGetterSetter, attributesForStructure(ReadOnly | CustomAccessor));
    }
#if ENABLE(FETCH_API)
    if (RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowHeadersConstructor, setJSDOMWindowHeadersConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->Headers, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(FETCH_API)
    if (RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRequestConstructor, setJSDOMWindowRequestConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->Request, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(FETCH_API)
    if (RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowResponseConstructor, setJSDOMWindowResponseConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->Response, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().mediaStreamEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowMediaStreamEventConstructor, setJSDOMWindowMediaStreamEventConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->MediaStreamEvent, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCDTMFToneChangeEventConstructor, setJSDOMWindowRTCDTMFToneChangeEventConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCDTMFToneChangeEvent, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCIceCandidateConstructor, setJSDOMWindowRTCIceCandidateConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCIceCandidate, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCPeerConnectionConstructor, setJSDOMWindowRTCPeerConnectionConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCPeerConnection, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCRtpReceiverConstructor, setJSDOMWindowRTCRtpReceiverConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCRtpReceiver, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCRtpSenderConstructor, setJSDOMWindowRTCRtpSenderConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCRtpSender, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCRtpTransceiverConstructor, setJSDOMWindowRTCRtpTransceiverConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCRtpTransceiver, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCSessionDescriptionConstructor, setJSDOMWindowRTCSessionDescriptionConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCSessionDescription, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_RTC)
    if (RuntimeEnabledFeatures::sharedFeatures().peerConnectionEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowRTCTrackEventConstructor, setJSDOMWindowRTCTrackEventConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->RTCTrackEvent, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_SOCKETS)
    if (RuntimeEnabledFeatures::sharedFeatures().webSocketEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowWebSocketConstructor, setJSDOMWindowWebSocketConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->WebSocket, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_ANIMATIONS)
    if (RuntimeEnabledFeatures::sharedFeatures().webAnimationsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowAnimationEffectReadOnlyConstructor, setJSDOMWindowAnimationEffectReadOnlyConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->AnimationEffectReadOnly, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_ANIMATIONS)
    if (RuntimeEnabledFeatures::sharedFeatures().webAnimationsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowAnimationTimelineConstructor, setJSDOMWindowAnimationTimelineConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->AnimationTimeline, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_ANIMATIONS)
    if (RuntimeEnabledFeatures::sharedFeatures().webAnimationsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowDocumentTimelineConstructor, setJSDOMWindowDocumentTimelineConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->DocumentTimeline, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_ANIMATIONS)
    if (RuntimeEnabledFeatures::sharedFeatures().webAnimationsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowKeyframeEffectConstructor, setJSDOMWindowKeyframeEffectConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->KeyframeEffect, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_ANIMATIONS)
    if (RuntimeEnabledFeatures::sharedFeatures().webAnimationsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowAnimationConstructor, setJSDOMWindowAnimationConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->Animation, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
    if (RuntimeEnabledFeatures::sharedFeatures().customElementsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowCustomElementRegistryConstructor, setJSDOMWindowCustomElementRegistryConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->CustomElementRegistry, customGetterSetter, attributesForStructure(DontEnum));
    }
    if (RuntimeEnabledFeatures::sharedFeatures().inputEventsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowInputEventConstructor, setJSDOMWindowInputEventConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->InputEvent, customGetterSetter, attributesForStructure(DontEnum));
    }
    if (RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowShadowRootConstructor, setJSDOMWindowShadowRootConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->ShadowRoot, customGetterSetter, attributesForStructure(DontEnum));
    }
    if (RuntimeEnabledFeatures::sharedFeatures().inputEventsEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowStaticRangeConstructor, setJSDOMWindowStaticRangeConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->StaticRange, customGetterSetter, attributesForStructure(DontEnum));
    }
#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::sharedFeatures().htmlAudioElementEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowHTMLAudioElementConstructor, setJSDOMWindowHTMLAudioElementConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->HTMLAudioElement, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(VIDEO)
    if (RuntimeEnabledFeatures::sharedFeatures().audioEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowAudioConstructor, setJSDOMWindowAudioConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->Audio, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
    if (RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowHTMLSlotElementConstructor, setJSDOMWindowHTMLSlotElementConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->HTMLSlotElement, customGetterSetter, attributesForStructure(DontEnum));
    }
#if ENABLE(WEBGL2)
    if (RuntimeEnabledFeatures::sharedFeatures().webGL2Enabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowWebGL2RenderingContextConstructor, setJSDOMWindowWebGL2RenderingContextConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->WebGL2RenderingContext, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEBGL2)
    if (RuntimeEnabledFeatures::sharedFeatures().webGL2Enabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowWebGLVertexArrayObjectConstructor, setJSDOMWindowWebGLVertexArrayObjectConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->WebGLVertexArrayObject, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(INTERSECTION_OBSERVER)
    if (RuntimeEnabledFeatures::sharedFeatures().intersectionObserverEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowIntersectionObserverConstructor, setJSDOMWindowIntersectionObserverConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->IntersectionObserver, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(INTERSECTION_OBSERVER)
    if (RuntimeEnabledFeatures::sharedFeatures().intersectionObserverEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowIntersectionObserverEntryConstructor, setJSDOMWindowIntersectionObserverEntryConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->IntersectionObserverEntry, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_TIMING)
    if (RuntimeEnabledFeatures::sharedFeatures().resourceTimingEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowPerformanceEntryConstructor, setJSDOMWindowPerformanceEntryConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->PerformanceEntry, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_TIMING)
    if (RuntimeEnabledFeatures::sharedFeatures().userTimingEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowPerformanceMarkConstructor, setJSDOMWindowPerformanceMarkConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->PerformanceMark, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_TIMING)
    if (RuntimeEnabledFeatures::sharedFeatures().userTimingEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowPerformanceMeasureConstructor, setJSDOMWindowPerformanceMeasureConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->PerformanceMeasure, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(WEB_TIMING)
    if (RuntimeEnabledFeatures::sharedFeatures().resourceTimingEnabled()) {
        auto* customGetterSetter = CustomGetterSetter::create(vm, jsDOMWindowPerformanceResourceTimingConstructor, setJSDOMWindowPerformanceResourceTimingConstructor);
        putDirectCustomAccessor(vm, vm.propertyNames->PerformanceResourceTiming, customGetterSetter, attributesForStructure(DontEnum));
    }
#endif
#if ENABLE(FETCH_API)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().HeadersPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowHeadersConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(FETCH_API)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().RequestPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowRequestConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(FETCH_API)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().ResponsePrivateName(), CustomGetterSetter::create(vm, jsDOMWindowResponseConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(MEDIA_STREAM)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().MediaStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowMediaStreamConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(MEDIA_STREAM)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().MediaStreamTrackPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowMediaStreamTrackConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(WEB_RTC)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().RTCIceCandidatePrivateName(), CustomGetterSetter::create(vm, jsDOMWindowRTCIceCandidateConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(WEB_RTC)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().RTCSessionDescriptionPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowRTCSessionDescriptionConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
#if ENABLE(READABLE_STREAM_API)
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().ReadableStreamPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowReadableStreamConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
#endif
    putDirectCustomAccessor(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().XMLHttpRequestPrivateName(), CustomGetterSetter::create(vm, jsDOMWindowXMLHttpRequestConstructor, nullptr), attributesForStructure(DontDelete | ReadOnly));
    if (worldForDOMObject(this).shadowRootIsAlwaysOpen())
        putDirectNativeFunction(vm, this, vm.propertyNames->collectMatchingElementsInFlatTree, 2, jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTree, NoIntrinsic, attributesForStructure(JSC::Function));
    if (worldForDOMObject(this).shadowRootIsAlwaysOpen())
        putDirectNativeFunction(vm, this, vm.propertyNames->matchingElementInFlatTree, 2, jsDOMWindowInstanceFunctionMatchingElementInFlatTree, NoIntrinsic, attributesForStructure(JSC::Function));
#if ENABLE(FETCH_API)
    if (RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled())
        putDirectBuiltinFunction(vm, this, vm.propertyNames->fetch, domWindowFetchFetchCodeGenerator(vm), attributesForStructure(JSC::Builtin));
#endif
#if ENABLE(FETCH_API)
    if (RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled())
        putDirectNativeFunction(vm, this, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().fetchRequestPrivateName(), 1, jsDOMWindowInstanceFunctionFetchRequest, NoIntrinsic, attributesForStructure(JSC::Function));
#endif
}

template<> inline JSDOMWindow* BindingCaller<JSDOMWindow>::castForAttribute(ExecState& state, EncodedJSValue thisValue)
{
    auto decodedThisValue = JSValue::decode(thisValue);
    if (decodedThisValue.isUndefinedOrNull())
        decodedThisValue = state.thisValue().toThis(&state, NotStrictMode);
    return toJSDOMWindow(decodedThisValue);}

template<> inline JSDOMWindow* BindingCaller<JSDOMWindow>::castForOperation(ExecState& state)
{
    return toJSDOMWindow(state.thisValue().toThis(&state, NotStrictMode));
}

static inline JSValue jsDOMWindowScreenGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenGetter>(state, thisValue, "screen");
}

static inline JSValue jsDOMWindowScreenGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Screen>>(state, *thisObject.globalObject(), impl.screen());
    return result;
}

static inline JSValue jsDOMWindowHistoryGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHistory(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHistoryGetter>(state, thisValue, "history");
}

static inline JSValue jsDOMWindowHistoryGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<History>>(state, *thisObject.globalObject(), impl.history());
    return result;
}

static inline JSValue jsDOMWindowLocationbarGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowLocationbar(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowLocationbarGetter>(state, thisValue, "locationbar");
}

static inline JSValue jsDOMWindowLocationbarGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.locationbar());
    return result;
}

static inline JSValue jsDOMWindowMenubarGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMenubar(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMenubarGetter>(state, thisValue, "menubar");
}

static inline JSValue jsDOMWindowMenubarGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.menubar());
    return result;
}

static inline JSValue jsDOMWindowPersonalbarGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPersonalbar(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPersonalbarGetter>(state, thisValue, "personalbar");
}

static inline JSValue jsDOMWindowPersonalbarGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.personalbar());
    return result;
}

static inline JSValue jsDOMWindowScrollbarsGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScrollbars(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScrollbarsGetter>(state, thisValue, "scrollbars");
}

static inline JSValue jsDOMWindowScrollbarsGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.scrollbars());
    return result;
}

static inline JSValue jsDOMWindowStatusbarGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStatusbar(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStatusbarGetter>(state, thisValue, "statusbar");
}

static inline JSValue jsDOMWindowStatusbarGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.statusbar());
    return result;
}

static inline JSValue jsDOMWindowToolbarGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowToolbar(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowToolbarGetter>(state, thisValue, "toolbar");
}

static inline JSValue jsDOMWindowToolbarGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<BarProp>>(state, *thisObject.globalObject(), impl.toolbar());
    return result;
}

static inline JSValue jsDOMWindowNavigatorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNavigator(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNavigatorGetter>(state, thisValue, "navigator");
}

static inline JSValue jsDOMWindowNavigatorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Navigator>>(state, *thisObject.globalObject(), impl.navigator());
    return result;
}

static inline JSValue jsDOMWindowClientInformationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowClientInformation(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowClientInformationGetter>(state, thisValue, "clientInformation");
}

static inline JSValue jsDOMWindowClientInformationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Navigator>>(state, *thisObject.globalObject(), impl.clientInformation());
    return result;
}

static inline JSValue jsDOMWindowLocationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowLocation(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowLocationGetter>(state, thisValue, "location");
}

static inline JSValue jsDOMWindowLocationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Location>>(state, *thisObject.globalObject(), impl.location());
    return result;
}

static inline JSValue jsDOMWindowEventGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowEvent(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowEventGetter>(state, thisValue, "event");
}

static inline JSValue jsDOMWindowEventGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return thisObject.event(state);
}

static inline JSValue jsDOMWindowFrameElementGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFrameElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFrameElementGetter>(state, thisValue, "frameElement");
}

static inline JSValue jsDOMWindowFrameElementGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Element>>(state, *thisObject.globalObject(), BindingSecurity::checkSecurityForNode(state, impl.frameElement()));
    return result;
}

static inline JSValue jsDOMWindowOffscreenBufferingGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOffscreenBuffering(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOffscreenBufferingGetter>(state, thisValue, "offscreenBuffering");
}

static inline JSValue jsDOMWindowOffscreenBufferingGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.offscreenBuffering());
    return result;
}

static inline JSValue jsDOMWindowOuterHeightGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOuterHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOuterHeightGetter>(state, thisValue, "outerHeight");
}

static inline JSValue jsDOMWindowOuterHeightGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.outerHeight());
    return result;
}

static inline JSValue jsDOMWindowOuterWidthGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOuterWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOuterWidthGetter>(state, thisValue, "outerWidth");
}

static inline JSValue jsDOMWindowOuterWidthGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.outerWidth());
    return result;
}

static inline JSValue jsDOMWindowInnerHeightGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowInnerHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowInnerHeightGetter>(state, thisValue, "innerHeight");
}

static inline JSValue jsDOMWindowInnerHeightGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.innerHeight());
    return result;
}

static inline JSValue jsDOMWindowInnerWidthGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowInnerWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowInnerWidthGetter>(state, thisValue, "innerWidth");
}

static inline JSValue jsDOMWindowInnerWidthGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.innerWidth());
    return result;
}

static inline JSValue jsDOMWindowScreenXGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreenX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenXGetter>(state, thisValue, "screenX");
}

static inline JSValue jsDOMWindowScreenXGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.screenX());
    return result;
}

static inline JSValue jsDOMWindowScreenYGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreenY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenYGetter>(state, thisValue, "screenY");
}

static inline JSValue jsDOMWindowScreenYGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.screenY());
    return result;
}

static inline JSValue jsDOMWindowScreenLeftGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreenLeft(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenLeftGetter>(state, thisValue, "screenLeft");
}

static inline JSValue jsDOMWindowScreenLeftGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.screenLeft());
    return result;
}

static inline JSValue jsDOMWindowScreenTopGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreenTop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenTopGetter>(state, thisValue, "screenTop");
}

static inline JSValue jsDOMWindowScreenTopGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.screenTop());
    return result;
}

static inline JSValue jsDOMWindowScrollXGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScrollX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScrollXGetter>(state, thisValue, "scrollX");
}

static inline JSValue jsDOMWindowScrollXGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.scrollX());
    return result;
}

static inline JSValue jsDOMWindowScrollYGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScrollY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScrollYGetter>(state, thisValue, "scrollY");
}

static inline JSValue jsDOMWindowScrollYGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.scrollY());
    return result;
}

static inline JSValue jsDOMWindowPageXOffsetGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPageXOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPageXOffsetGetter>(state, thisValue, "pageXOffset");
}

static inline JSValue jsDOMWindowPageXOffsetGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.scrollX());
    return result;
}

static inline JSValue jsDOMWindowPageYOffsetGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPageYOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPageYOffsetGetter>(state, thisValue, "pageYOffset");
}

static inline JSValue jsDOMWindowPageYOffsetGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.scrollY());
    return result;
}

static inline JSValue jsDOMWindowClosedGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowClosed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowClosedGetter>(state, thisValue, "closed");
}

static inline JSValue jsDOMWindowClosedGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.closed());
    return result;
}

static inline JSValue jsDOMWindowLengthGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowLengthGetter>(state, thisValue, "length");
}

static inline JSValue jsDOMWindowLengthGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.length());
    return result;
}

static inline JSValue jsDOMWindowNameGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNameGetter>(state, thisValue, "name");
}

static inline JSValue jsDOMWindowNameGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsDOMWindowStatusGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStatusGetter>(state, thisValue, "status");
}

static inline JSValue jsDOMWindowStatusGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.status());
    return result;
}

static inline JSValue jsDOMWindowDefaultStatusGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDefaultStatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDefaultStatusGetter>(state, thisValue, "defaultStatus");
}

static inline JSValue jsDOMWindowDefaultStatusGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.defaultStatus());
    return result;
}

static inline JSValue jsDOMWindowDefaultstatusGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDefaultstatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDefaultstatusGetter>(state, thisValue, "defaultstatus");
}

static inline JSValue jsDOMWindowDefaultstatusGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.defaultStatus());
    return result;
}

static inline JSValue jsDOMWindowSelfGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSelf(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSelfGetter>(state, thisValue, "self");
}

static inline JSValue jsDOMWindowSelfGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.self());
    return result;
}

static inline JSValue jsDOMWindowWindowGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWindow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWindowGetter>(state, thisValue, "window");
}

static inline JSValue jsDOMWindowWindowGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.window());
    return result;
}

static inline JSValue jsDOMWindowFramesGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFrames(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFramesGetter>(state, thisValue, "frames");
}

static inline JSValue jsDOMWindowFramesGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.frames());
    return result;
}

static inline JSValue jsDOMWindowOpenerGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOpener(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOpenerGetter>(state, thisValue, "opener");
}

static inline JSValue jsDOMWindowOpenerGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.opener());
    return result;
}

static inline JSValue jsDOMWindowParentGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowParent(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowParentGetter>(state, thisValue, "parent");
}

static inline JSValue jsDOMWindowParentGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.parent());
    return result;
}

static inline JSValue jsDOMWindowTopGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTopGetter>(state, thisValue, "top");
}

static inline JSValue jsDOMWindowTopGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.top());
    return result;
}

static inline JSValue jsDOMWindowDocumentGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDocument(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDocumentGetter>(state, thisValue, "document");
}

static inline JSValue jsDOMWindowDocumentGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Document>>(state, *thisObject.globalObject(), impl.document());
    return result;
}

static inline JSValue jsDOMWindowStyleMediaGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStyleMedia(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStyleMediaGetter>(state, thisValue, "styleMedia");
}

static inline JSValue jsDOMWindowStyleMediaGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<StyleMedia>>(state, *thisObject.globalObject(), impl.styleMedia());
    return result;
}

static inline JSValue jsDOMWindowDevicePixelRatioGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDevicePixelRatio(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDevicePixelRatioGetter>(state, thisValue, "devicePixelRatio");
}

static inline JSValue jsDOMWindowDevicePixelRatioGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.devicePixelRatio());
    return result;
}

static inline JSValue jsDOMWindowApplicationCacheGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowApplicationCache(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowApplicationCacheGetter>(state, thisValue, "applicationCache");
}

static inline JSValue jsDOMWindowApplicationCacheGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMApplicationCache>>(state, *thisObject.globalObject(), impl.applicationCache());
    return result;
}

static inline JSValue jsDOMWindowSessionStorageGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSessionStorage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSessionStorageGetter>(state, thisValue, "sessionStorage");
}

static inline JSValue jsDOMWindowSessionStorageGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Storage>>(state, *thisObject.globalObject(), throwScope, impl.sessionStorage());
    return result;
}

static inline JSValue jsDOMWindowLocalStorageGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowLocalStorage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowLocalStorageGetter>(state, thisValue, "localStorage");
}

static inline JSValue jsDOMWindowLocalStorageGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Storage>>(state, *thisObject.globalObject(), throwScope, impl.localStorage());
    return result;
}

#if ENABLE(ORIENTATION_EVENTS)
static inline JSValue jsDOMWindowOrientationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOrientation(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOrientationGetter>(state, thisValue, "orientation");
}

static inline JSValue jsDOMWindowOrientationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.orientation());
    return result;
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformance(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceGetter>(state, thisValue, "performance");
}

static inline JSValue jsDOMWindowPerformanceGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Performance>>(state, *thisObject.globalObject(), impl.performance());
    return result;
}

#endif

static inline JSValue jsDOMWindowSVGDocumentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGDocumentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGDocumentConstructorGetter>(state, thisValue, "SVGDocument");
}

static inline JSValue jsDOMWindowSVGDocumentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLDocument::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebkitURLConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebkitURLConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebkitURLConstructorGetter>(state, thisValue, "webkitURL");
}

static inline JSValue jsDOMWindowWebkitURLConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMURL::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebKitMutationObserverConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitMutationObserverConstructorGetter>(state, thisValue, "WebKitMutationObserver");
}

static inline JSValue jsDOMWindowWebKitMutationObserverConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMutationObserver::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCustomElementsGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCustomElements(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCustomElementsGetter>(state, thisValue, "customElements");
}

static inline JSValue jsDOMWindowCustomElementsGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<CustomElementRegistry>>(state, *thisObject.globalObject(), impl.ensureCustomElementRegistry());
    return result;
}

static inline JSValue jsDOMWindowOnanimationendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnanimationend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnanimationendGetter>(state, thisValue, "onanimationend");
}

static inline JSValue jsDOMWindowOnanimationendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().animationendEvent);
}

static inline JSValue jsDOMWindowOnanimationiterationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnanimationiteration(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnanimationiterationGetter>(state, thisValue, "onanimationiteration");
}

static inline JSValue jsDOMWindowOnanimationiterationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().animationiterationEvent);
}

static inline JSValue jsDOMWindowOnanimationstartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnanimationstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnanimationstartGetter>(state, thisValue, "onanimationstart");
}

static inline JSValue jsDOMWindowOnanimationstartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().animationstartEvent);
}

static inline JSValue jsDOMWindowOntransitionendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntransitionend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntransitionendGetter>(state, thisValue, "ontransitionend");
}

static inline JSValue jsDOMWindowOntransitionendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().transitionendEvent);
}

static inline JSValue jsDOMWindowOnwebkitanimationendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitanimationend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitanimationendGetter>(state, thisValue, "onwebkitanimationend");
}

static inline JSValue jsDOMWindowOnwebkitanimationendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitAnimationEndEvent);
}

static inline JSValue jsDOMWindowOnwebkitanimationiterationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitanimationiteration(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitanimationiterationGetter>(state, thisValue, "onwebkitanimationiteration");
}

static inline JSValue jsDOMWindowOnwebkitanimationiterationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitAnimationIterationEvent);
}

static inline JSValue jsDOMWindowOnwebkitanimationstartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitanimationstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitanimationstartGetter>(state, thisValue, "onwebkitanimationstart");
}

static inline JSValue jsDOMWindowOnwebkitanimationstartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitAnimationStartEvent);
}

static inline JSValue jsDOMWindowOnwebkittransitionendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkittransitionend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkittransitionendGetter>(state, thisValue, "onwebkittransitionend");
}

static inline JSValue jsDOMWindowOnwebkittransitionendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitTransitionEndEvent);
}

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindowOngesturechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOngesturechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOngesturechangeGetter>(state, thisValue, "ongesturechange");
}

static inline JSValue jsDOMWindowOngesturechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().gesturechangeEvent);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindowOngestureendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOngestureend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOngestureendGetter>(state, thisValue, "ongestureend");
}

static inline JSValue jsDOMWindowOngestureendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().gestureendEvent);
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline JSValue jsDOMWindowOngesturestartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOngesturestart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOngesturestartGetter>(state, thisValue, "ongesturestart");
}

static inline JSValue jsDOMWindowOngesturestartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().gesturestartEvent);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindowOndevicemotionGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndevicemotion(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndevicemotionGetter>(state, thisValue, "ondevicemotion");
}

static inline JSValue jsDOMWindowOndevicemotionGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().devicemotionEvent);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindowOndeviceorientationGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndeviceorientation(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndeviceorientationGetter>(state, thisValue, "ondeviceorientation");
}

static inline JSValue jsDOMWindowOndeviceorientationGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().deviceorientationEvent);
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
static inline JSValue jsDOMWindowOnwebkitdeviceproximityGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitdeviceproximity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitdeviceproximityGetter>(state, thisValue, "onwebkitdeviceproximity");
}

static inline JSValue jsDOMWindowOnwebkitdeviceproximityGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitdeviceproximityEvent);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIndexedDBGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIndexedDB(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIndexedDBGetter>(state, thisValue, "indexedDB");
}

static inline JSValue jsDOMWindowIndexedDBGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<IDBFactory>>(state, *thisObject.globalObject(), WebCore::DOMWindowIndexedDatabase::indexedDB(impl));
    return result;
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowWebkitIndexedDBGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebkitIndexedDB(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebkitIndexedDBGetter>(state, thisValue, "webkitIndexedDB");
}

static inline JSValue jsDOMWindowWebkitIndexedDBGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<IDBFactory>>(state, *thisObject.globalObject(), WebCore::DOMWindowIndexedDatabase::indexedDB(impl));
    return result;
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindowSpeechSynthesisGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSpeechSynthesis(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSpeechSynthesisGetter>(state, thisValue, "speechSynthesis");
}

static inline JSValue jsDOMWindowSpeechSynthesisGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SpeechSynthesis>>(state, *thisObject.globalObject(), WebCore::DOMWindowSpeechSynthesis::speechSynthesis(impl));
    return result;
}

#endif

static inline JSValue jsDOMWindowOnabortGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnabort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnabortGetter>(state, thisValue, "onabort");
}

static inline JSValue jsDOMWindowOnabortGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().abortEvent);
}

#if ENABLE(REQUEST_AUTOCOMPLETE)
static inline JSValue jsDOMWindowOnautocompleteGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnautocomplete(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnautocompleteGetter>(state, thisValue, "onautocomplete");
}

static inline JSValue jsDOMWindowOnautocompleteGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().autocompleteEvent);
}

#endif

#if ENABLE(REQUEST_AUTOCOMPLETE)
static inline JSValue jsDOMWindowOnautocompleteerrorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnautocompleteerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnautocompleteerrorGetter>(state, thisValue, "onautocompleteerror");
}

static inline JSValue jsDOMWindowOnautocompleteerrorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().autocompleteerrorEvent);
}

#endif

static inline JSValue jsDOMWindowOnblurGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnblur(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnblurGetter>(state, thisValue, "onblur");
}

static inline JSValue jsDOMWindowOnblurGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().blurEvent);
}

static inline JSValue jsDOMWindowOncanplayGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOncanplay(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOncanplayGetter>(state, thisValue, "oncanplay");
}

static inline JSValue jsDOMWindowOncanplayGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().canplayEvent);
}

static inline JSValue jsDOMWindowOncanplaythroughGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOncanplaythrough(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOncanplaythroughGetter>(state, thisValue, "oncanplaythrough");
}

static inline JSValue jsDOMWindowOncanplaythroughGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().canplaythroughEvent);
}

static inline JSValue jsDOMWindowOnchangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnchangeGetter>(state, thisValue, "onchange");
}

static inline JSValue jsDOMWindowOnchangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().changeEvent);
}

static inline JSValue jsDOMWindowOnclickGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnclick(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnclickGetter>(state, thisValue, "onclick");
}

static inline JSValue jsDOMWindowOnclickGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().clickEvent);
}

static inline JSValue jsDOMWindowOncontextmenuGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOncontextmenu(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOncontextmenuGetter>(state, thisValue, "oncontextmenu");
}

static inline JSValue jsDOMWindowOncontextmenuGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().contextmenuEvent);
}

static inline JSValue jsDOMWindowOncuechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOncuechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOncuechangeGetter>(state, thisValue, "oncuechange");
}

static inline JSValue jsDOMWindowOncuechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().cuechangeEvent);
}

static inline JSValue jsDOMWindowOndblclickGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndblclick(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndblclickGetter>(state, thisValue, "ondblclick");
}

static inline JSValue jsDOMWindowOndblclickGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dblclickEvent);
}

static inline JSValue jsDOMWindowOndragGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndrag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragGetter>(state, thisValue, "ondrag");
}

static inline JSValue jsDOMWindowOndragGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragEvent);
}

static inline JSValue jsDOMWindowOndragendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndragend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragendGetter>(state, thisValue, "ondragend");
}

static inline JSValue jsDOMWindowOndragendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragendEvent);
}

static inline JSValue jsDOMWindowOndragenterGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndragenter(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragenterGetter>(state, thisValue, "ondragenter");
}

static inline JSValue jsDOMWindowOndragenterGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragenterEvent);
}

static inline JSValue jsDOMWindowOndragleaveGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndragleave(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragleaveGetter>(state, thisValue, "ondragleave");
}

static inline JSValue jsDOMWindowOndragleaveGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragleaveEvent);
}

static inline JSValue jsDOMWindowOndragoverGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndragover(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragoverGetter>(state, thisValue, "ondragover");
}

static inline JSValue jsDOMWindowOndragoverGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragoverEvent);
}

static inline JSValue jsDOMWindowOndragstartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndragstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndragstartGetter>(state, thisValue, "ondragstart");
}

static inline JSValue jsDOMWindowOndragstartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dragstartEvent);
}

static inline JSValue jsDOMWindowOndropGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndrop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndropGetter>(state, thisValue, "ondrop");
}

static inline JSValue jsDOMWindowOndropGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().dropEvent);
}

static inline JSValue jsDOMWindowOndurationchangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOndurationchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOndurationchangeGetter>(state, thisValue, "ondurationchange");
}

static inline JSValue jsDOMWindowOndurationchangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().durationchangeEvent);
}

static inline JSValue jsDOMWindowOnemptiedGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnemptied(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnemptiedGetter>(state, thisValue, "onemptied");
}

static inline JSValue jsDOMWindowOnemptiedGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().emptiedEvent);
}

static inline JSValue jsDOMWindowOnendedGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnended(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnendedGetter>(state, thisValue, "onended");
}

static inline JSValue jsDOMWindowOnendedGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().endedEvent);
}

static inline JSValue jsDOMWindowOnerrorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsDOMWindowOnerrorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsDOMWindowOnfocusGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnfocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnfocusGetter>(state, thisValue, "onfocus");
}

static inline JSValue jsDOMWindowOnfocusGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().focusEvent);
}

static inline JSValue jsDOMWindowOninputGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOninput(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOninputGetter>(state, thisValue, "oninput");
}

static inline JSValue jsDOMWindowOninputGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().inputEvent);
}

static inline JSValue jsDOMWindowOninvalidGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOninvalid(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOninvalidGetter>(state, thisValue, "oninvalid");
}

static inline JSValue jsDOMWindowOninvalidGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().invalidEvent);
}

static inline JSValue jsDOMWindowOnkeydownGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnkeydown(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnkeydownGetter>(state, thisValue, "onkeydown");
}

static inline JSValue jsDOMWindowOnkeydownGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().keydownEvent);
}

static inline JSValue jsDOMWindowOnkeypressGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnkeypress(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnkeypressGetter>(state, thisValue, "onkeypress");
}

static inline JSValue jsDOMWindowOnkeypressGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().keypressEvent);
}

static inline JSValue jsDOMWindowOnkeyupGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnkeyup(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnkeyupGetter>(state, thisValue, "onkeyup");
}

static inline JSValue jsDOMWindowOnkeyupGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().keyupEvent);
}

static inline JSValue jsDOMWindowOnloadGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnloadGetter>(state, thisValue, "onload");
}

static inline JSValue jsDOMWindowOnloadGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadEvent);
}

static inline JSValue jsDOMWindowOnloadeddataGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnloadeddata(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnloadeddataGetter>(state, thisValue, "onloadeddata");
}

static inline JSValue jsDOMWindowOnloadeddataGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadeddataEvent);
}

static inline JSValue jsDOMWindowOnloadedmetadataGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnloadedmetadata(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnloadedmetadataGetter>(state, thisValue, "onloadedmetadata");
}

static inline JSValue jsDOMWindowOnloadedmetadataGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadedmetadataEvent);
}

static inline JSValue jsDOMWindowOnloadstartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnloadstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnloadstartGetter>(state, thisValue, "onloadstart");
}

static inline JSValue jsDOMWindowOnloadstartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadstartEvent);
}

static inline JSValue jsDOMWindowOnmousedownGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmousedown(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmousedownGetter>(state, thisValue, "onmousedown");
}

static inline JSValue jsDOMWindowOnmousedownGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mousedownEvent);
}

static inline JSValue jsDOMWindowOnmouseenterGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmouseenter(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmouseenterGetter, CastedThisErrorBehavior::ReturnEarly>(state, thisValue, "onmouseenter");
}

static inline JSValue jsDOMWindowOnmouseenterGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mouseenterEvent);
}

static inline JSValue jsDOMWindowOnmouseleaveGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmouseleave(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmouseleaveGetter, CastedThisErrorBehavior::ReturnEarly>(state, thisValue, "onmouseleave");
}

static inline JSValue jsDOMWindowOnmouseleaveGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mouseleaveEvent);
}

static inline JSValue jsDOMWindowOnmousemoveGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmousemove(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmousemoveGetter>(state, thisValue, "onmousemove");
}

static inline JSValue jsDOMWindowOnmousemoveGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mousemoveEvent);
}

static inline JSValue jsDOMWindowOnmouseoutGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmouseout(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmouseoutGetter>(state, thisValue, "onmouseout");
}

static inline JSValue jsDOMWindowOnmouseoutGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mouseoutEvent);
}

static inline JSValue jsDOMWindowOnmouseoverGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmouseover(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmouseoverGetter>(state, thisValue, "onmouseover");
}

static inline JSValue jsDOMWindowOnmouseoverGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mouseoverEvent);
}

static inline JSValue jsDOMWindowOnmouseupGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmouseup(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmouseupGetter>(state, thisValue, "onmouseup");
}

static inline JSValue jsDOMWindowOnmouseupGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mouseupEvent);
}

static inline JSValue jsDOMWindowOnmousewheelGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmousewheel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmousewheelGetter>(state, thisValue, "onmousewheel");
}

static inline JSValue jsDOMWindowOnmousewheelGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().mousewheelEvent);
}

static inline JSValue jsDOMWindowOnpauseGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnpause(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnpauseGetter>(state, thisValue, "onpause");
}

static inline JSValue jsDOMWindowOnpauseGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().pauseEvent);
}

static inline JSValue jsDOMWindowOnplayGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnplay(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnplayGetter>(state, thisValue, "onplay");
}

static inline JSValue jsDOMWindowOnplayGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().playEvent);
}

static inline JSValue jsDOMWindowOnplayingGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnplaying(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnplayingGetter>(state, thisValue, "onplaying");
}

static inline JSValue jsDOMWindowOnplayingGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().playingEvent);
}

static inline JSValue jsDOMWindowOnprogressGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnprogress(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnprogressGetter>(state, thisValue, "onprogress");
}

static inline JSValue jsDOMWindowOnprogressGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().progressEvent);
}

static inline JSValue jsDOMWindowOnratechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnratechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnratechangeGetter>(state, thisValue, "onratechange");
}

static inline JSValue jsDOMWindowOnratechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().ratechangeEvent);
}

static inline JSValue jsDOMWindowOnresetGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnreset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnresetGetter>(state, thisValue, "onreset");
}

static inline JSValue jsDOMWindowOnresetGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().resetEvent);
}

static inline JSValue jsDOMWindowOnresizeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnresize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnresizeGetter>(state, thisValue, "onresize");
}

static inline JSValue jsDOMWindowOnresizeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().resizeEvent);
}

static inline JSValue jsDOMWindowOnscrollGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnscroll(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnscrollGetter>(state, thisValue, "onscroll");
}

static inline JSValue jsDOMWindowOnscrollGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().scrollEvent);
}

static inline JSValue jsDOMWindowOnseekedGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnseeked(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnseekedGetter>(state, thisValue, "onseeked");
}

static inline JSValue jsDOMWindowOnseekedGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().seekedEvent);
}

static inline JSValue jsDOMWindowOnseekingGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnseeking(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnseekingGetter>(state, thisValue, "onseeking");
}

static inline JSValue jsDOMWindowOnseekingGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().seekingEvent);
}

static inline JSValue jsDOMWindowOnselectGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnselect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnselectGetter>(state, thisValue, "onselect");
}

static inline JSValue jsDOMWindowOnselectGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().selectEvent);
}

static inline JSValue jsDOMWindowOnstalledGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnstalled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnstalledGetter>(state, thisValue, "onstalled");
}

static inline JSValue jsDOMWindowOnstalledGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().stalledEvent);
}

static inline JSValue jsDOMWindowOnsubmitGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnsubmit(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnsubmitGetter>(state, thisValue, "onsubmit");
}

static inline JSValue jsDOMWindowOnsubmitGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().submitEvent);
}

static inline JSValue jsDOMWindowOnsuspendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnsuspend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnsuspendGetter>(state, thisValue, "onsuspend");
}

static inline JSValue jsDOMWindowOnsuspendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().suspendEvent);
}

static inline JSValue jsDOMWindowOntimeupdateGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntimeupdate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntimeupdateGetter>(state, thisValue, "ontimeupdate");
}

static inline JSValue jsDOMWindowOntimeupdateGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().timeupdateEvent);
}

static inline JSValue jsDOMWindowOntoggleGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntoggle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntoggleGetter>(state, thisValue, "ontoggle");
}

static inline JSValue jsDOMWindowOntoggleGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().toggleEvent);
}

static inline JSValue jsDOMWindowOnvolumechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnvolumechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnvolumechangeGetter>(state, thisValue, "onvolumechange");
}

static inline JSValue jsDOMWindowOnvolumechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().volumechangeEvent);
}

static inline JSValue jsDOMWindowOnwaitingGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwaiting(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwaitingGetter>(state, thisValue, "onwaiting");
}

static inline JSValue jsDOMWindowOnwaitingGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().waitingEvent);
}

static inline JSValue jsDOMWindowOnsearchGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnsearch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnsearchGetter>(state, thisValue, "onsearch");
}

static inline JSValue jsDOMWindowOnsearchGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().searchEvent);
}

static inline JSValue jsDOMWindowOnwheelGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwheel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwheelGetter>(state, thisValue, "onwheel");
}

static inline JSValue jsDOMWindowOnwheelGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().wheelEvent);
}

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowOntouchcancelGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntouchcancel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntouchcancelGetter>(state, thisValue, "ontouchcancel");
}

static inline JSValue jsDOMWindowOntouchcancelGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().touchcancelEvent);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowOntouchendGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntouchend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntouchendGetter>(state, thisValue, "ontouchend");
}

static inline JSValue jsDOMWindowOntouchendGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().touchendEvent);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowOntouchmoveGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntouchmove(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntouchmoveGetter>(state, thisValue, "ontouchmove");
}

static inline JSValue jsDOMWindowOntouchmoveGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().touchmoveEvent);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowOntouchstartGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntouchstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntouchstartGetter>(state, thisValue, "ontouchstart");
}

static inline JSValue jsDOMWindowOntouchstartGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().touchstartEvent);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowOntouchforcechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOntouchforcechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOntouchforcechangeGetter>(state, thisValue, "ontouchforcechange");
}

static inline JSValue jsDOMWindowOntouchforcechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().touchforcechangeEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitmouseforcechangedGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitmouseforcechanged(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitmouseforcechangedGetter>(state, thisValue, "onwebkitmouseforcechanged");
}

static inline JSValue jsDOMWindowOnwebkitmouseforcechangedGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcechangedEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitmouseforcedownGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitmouseforcedown(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitmouseforcedownGetter>(state, thisValue, "onwebkitmouseforcedown");
}

static inline JSValue jsDOMWindowOnwebkitmouseforcedownGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcedownEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitmouseforcewillbeginGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitmouseforcewillbegin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitmouseforcewillbeginGetter>(state, thisValue, "onwebkitmouseforcewillbegin");
}

static inline JSValue jsDOMWindowOnwebkitmouseforcewillbeginGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcewillbeginEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitmouseforceupGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitmouseforceup(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitmouseforceupGetter>(state, thisValue, "onwebkitmouseforceup");
}

static inline JSValue jsDOMWindowOnwebkitmouseforceupGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforceupEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitwillrevealbottomGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitwillrevealbottom(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitwillrevealbottomGetter>(state, thisValue, "onwebkitwillrevealbottom");
}

static inline JSValue jsDOMWindowOnwebkitwillrevealbottomGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealbottomEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitwillrevealleftGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitwillrevealleft(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitwillrevealleftGetter>(state, thisValue, "onwebkitwillrevealleft");
}

static inline JSValue jsDOMWindowOnwebkitwillrevealleftGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealleftEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitwillrevealrightGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitwillrevealright(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitwillrevealrightGetter>(state, thisValue, "onwebkitwillrevealright");
}

static inline JSValue jsDOMWindowOnwebkitwillrevealrightGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealrightEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsDOMWindowOnwebkitwillrevealtopGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnwebkitwillrevealtop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnwebkitwillrevealtopGetter>(state, thisValue, "onwebkitwillrevealtop");
}

static inline JSValue jsDOMWindowOnwebkitwillrevealtopGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealtopEvent);
}

#endif

static inline JSValue jsDOMWindowCryptoGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCrypto(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCryptoGetter>(state, thisValue, "crypto");
}

static inline JSValue jsDOMWindowCryptoGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Crypto>>(state, *thisObject.globalObject(), impl.crypto());
    return result;
}

static inline JSValue jsDOMWindowOnbeforeunloadGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnbeforeunload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnbeforeunloadGetter>(state, thisValue, "onbeforeunload");
}

static inline JSValue jsDOMWindowOnbeforeunloadGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().beforeunloadEvent);
}

static inline JSValue jsDOMWindowOnhashchangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnhashchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnhashchangeGetter>(state, thisValue, "onhashchange");
}

static inline JSValue jsDOMWindowOnhashchangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().hashchangeEvent);
}

static inline JSValue jsDOMWindowOnlanguagechangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnlanguagechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnlanguagechangeGetter>(state, thisValue, "onlanguagechange");
}

static inline JSValue jsDOMWindowOnlanguagechangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().languagechangeEvent);
}

static inline JSValue jsDOMWindowOnmessageGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnmessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnmessageGetter>(state, thisValue, "onmessage");
}

static inline JSValue jsDOMWindowOnmessageGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().messageEvent);
}

static inline JSValue jsDOMWindowOnofflineGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnoffline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnofflineGetter>(state, thisValue, "onoffline");
}

static inline JSValue jsDOMWindowOnofflineGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().offlineEvent);
}

static inline JSValue jsDOMWindowOnonlineGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnonline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnonlineGetter>(state, thisValue, "ononline");
}

static inline JSValue jsDOMWindowOnonlineGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().onlineEvent);
}

static inline JSValue jsDOMWindowOnpagehideGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnpagehide(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnpagehideGetter>(state, thisValue, "onpagehide");
}

static inline JSValue jsDOMWindowOnpagehideGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().pagehideEvent);
}

static inline JSValue jsDOMWindowOnpageshowGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnpageshow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnpageshowGetter>(state, thisValue, "onpageshow");
}

static inline JSValue jsDOMWindowOnpageshowGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().pageshowEvent);
}

static inline JSValue jsDOMWindowOnpopstateGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnpopstate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnpopstateGetter>(state, thisValue, "onpopstate");
}

static inline JSValue jsDOMWindowOnpopstateGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().popstateEvent);
}

static inline JSValue jsDOMWindowOnstorageGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnstorage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnstorageGetter>(state, thisValue, "onstorage");
}

static inline JSValue jsDOMWindowOnstorageGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().storageEvent);
}

static inline JSValue jsDOMWindowOnunloadGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnunload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnunloadGetter>(state, thisValue, "onunload");
}

static inline JSValue jsDOMWindowOnunloadGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().unloadEvent);
}

#if ENABLE(ORIENTATION_EVENTS)
static inline JSValue jsDOMWindowOnorientationchangeGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOnorientationchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOnorientationchangeGetter>(state, thisValue, "onorientationchange");
}

static inline JSValue jsDOMWindowOnorientationchangeGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().orientationchangeEvent);
}

#endif

#if ENABLE(WIRELESS_PLAYBACK_TARGET)
static inline JSValue jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorGetter>(state, thisValue, "WebKitPlaybackTargetAvailabilityEvent");
}

static inline JSValue jsDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitPlaybackTargetAvailabilityEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(FETCH_API)
static inline JSValue jsDOMWindowHeadersConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHeadersConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHeadersConstructorGetter>(state, thisValue, "Headers");
}

static inline JSValue jsDOMWindowHeadersConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFetchHeaders::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(FETCH_API)
static inline JSValue jsDOMWindowRequestConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRequestConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRequestConstructorGetter>(state, thisValue, "Request");
}

static inline JSValue jsDOMWindowRequestConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFetchRequest::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(FETCH_API)
static inline JSValue jsDOMWindowResponseConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowResponseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowResponseConstructorGetter>(state, thisValue, "Response");
}

static inline JSValue jsDOMWindowResponseConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFetchResponse::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBCursorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBCursorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBCursorConstructorGetter>(state, thisValue, "IDBCursor");
}

static inline JSValue jsDOMWindowIDBCursorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBCursor::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBCursorWithValueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBCursorWithValueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBCursorWithValueConstructorGetter>(state, thisValue, "IDBCursorWithValue");
}

static inline JSValue jsDOMWindowIDBCursorWithValueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBCursorWithValue::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBDatabaseConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBDatabaseConstructorGetter>(state, thisValue, "IDBDatabase");
}

static inline JSValue jsDOMWindowIDBDatabaseConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBDatabase::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBFactoryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBFactoryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBFactoryConstructorGetter>(state, thisValue, "IDBFactory");
}

static inline JSValue jsDOMWindowIDBFactoryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBFactory::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBIndexConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBIndexConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBIndexConstructorGetter>(state, thisValue, "IDBIndex");
}

static inline JSValue jsDOMWindowIDBIndexConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBIndex::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBKeyRangeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBKeyRangeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBKeyRangeConstructorGetter>(state, thisValue, "IDBKeyRange");
}

static inline JSValue jsDOMWindowIDBKeyRangeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBKeyRange::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBObjectStoreConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBObjectStoreConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBObjectStoreConstructorGetter>(state, thisValue, "IDBObjectStore");
}

static inline JSValue jsDOMWindowIDBObjectStoreConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBObjectStore::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBOpenDBRequestConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBOpenDBRequestConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBOpenDBRequestConstructorGetter>(state, thisValue, "IDBOpenDBRequest");
}

static inline JSValue jsDOMWindowIDBOpenDBRequestConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBOpenDBRequest::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBRequestConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBRequestConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBRequestConstructorGetter>(state, thisValue, "IDBRequest");
}

static inline JSValue jsDOMWindowIDBRequestConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBRequest::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBTransactionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBTransactionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBTransactionConstructorGetter>(state, thisValue, "IDBTransaction");
}

static inline JSValue jsDOMWindowIDBTransactionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBTransaction::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline JSValue jsDOMWindowIDBVersionChangeEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIDBVersionChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIDBVersionChangeEventConstructorGetter>(state, thisValue, "IDBVersionChangeEvent");
}

static inline JSValue jsDOMWindowIDBVersionChangeEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIDBVersionChangeEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline JSValue jsDOMWindowMediaRemoteControlsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaRemoteControlsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaRemoteControlsConstructorGetter>(state, thisValue, "MediaRemoteControls");
}

static inline JSValue jsDOMWindowMediaRemoteControlsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaRemoteControls::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline JSValue jsDOMWindowMediaSessionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaSessionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaSessionConstructorGetter>(state, thisValue, "MediaSession");
}

static inline JSValue jsDOMWindowMediaSessionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaSession::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindowMediaSourceConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaSourceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaSourceConstructorGetter>(state, thisValue, "MediaSource");
}

static inline JSValue jsDOMWindowMediaSourceConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (UNLIKELY(!thisObject.wrapped().frame()))
        return jsUndefined();
    Settings& settings = thisObject.wrapped().frame()->settings();
    if (!settings.mediaSourceEnabled())
        return jsUndefined();
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaSource::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindowSourceBufferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSourceBufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSourceBufferConstructorGetter>(state, thisValue, "SourceBuffer");
}

static inline JSValue jsDOMWindowSourceBufferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSourceBuffer::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline JSValue jsDOMWindowSourceBufferListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSourceBufferListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSourceBufferListConstructorGetter>(state, thisValue, "SourceBufferList");
}

static inline JSValue jsDOMWindowSourceBufferListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSourceBufferList::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindowMediaStreamConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamConstructorGetter>(state, thisValue, "MediaStream");
}

static inline JSValue jsDOMWindowMediaStreamConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStream::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowMediaStreamEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamEventConstructorGetter>(state, thisValue, "MediaStreamEvent");
}

static inline JSValue jsDOMWindowMediaStreamEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStreamEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindowMediaStreamTrackConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamTrackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamTrackConstructorGetter>(state, thisValue, "MediaStreamTrack");
}

static inline JSValue jsDOMWindowMediaStreamTrackConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStreamTrack::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindowMediaStreamTrackEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamTrackEventConstructorGetter>(state, thisValue, "MediaStreamTrackEvent");
}

static inline JSValue jsDOMWindowMediaStreamTrackEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStreamTrackEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindowOverconstrainedErrorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOverconstrainedErrorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOverconstrainedErrorConstructorGetter>(state, thisValue, "OverconstrainedError");
}

static inline JSValue jsDOMWindowOverconstrainedErrorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOverconstrainedError::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline JSValue jsDOMWindowOverconstrainedErrorEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOverconstrainedErrorEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOverconstrainedErrorEventConstructorGetter>(state, thisValue, "OverconstrainedErrorEvent");
}

static inline JSValue jsDOMWindowOverconstrainedErrorEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOverconstrainedErrorEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCDTMFToneChangeEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCDTMFToneChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCDTMFToneChangeEventConstructorGetter>(state, thisValue, "RTCDTMFToneChangeEvent");
}

static inline JSValue jsDOMWindowRTCDTMFToneChangeEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCDTMFToneChangeEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCIceCandidateConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCIceCandidateConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCIceCandidateConstructorGetter>(state, thisValue, "RTCIceCandidate");
}

static inline JSValue jsDOMWindowRTCIceCandidateConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCIceCandidate::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCPeerConnectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCPeerConnectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCPeerConnectionConstructorGetter>(state, thisValue, "RTCPeerConnection");
}

static inline JSValue jsDOMWindowRTCPeerConnectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCPeerConnection::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCRtpReceiverConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCRtpReceiverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCRtpReceiverConstructorGetter>(state, thisValue, "RTCRtpReceiver");
}

static inline JSValue jsDOMWindowRTCRtpReceiverConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCRtpReceiver::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCRtpSenderConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCRtpSenderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCRtpSenderConstructorGetter>(state, thisValue, "RTCRtpSender");
}

static inline JSValue jsDOMWindowRTCRtpSenderConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCRtpSender::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCRtpTransceiverConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCRtpTransceiverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCRtpTransceiverConstructorGetter>(state, thisValue, "RTCRtpTransceiver");
}

static inline JSValue jsDOMWindowRTCRtpTransceiverConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCRtpTransceiver::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCSessionDescriptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCSessionDescriptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCSessionDescriptionConstructorGetter>(state, thisValue, "RTCSessionDescription");
}

static inline JSValue jsDOMWindowRTCSessionDescriptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCSessionDescription::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_RTC)
static inline JSValue jsDOMWindowRTCTrackEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRTCTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRTCTrackEventConstructorGetter>(state, thisValue, "RTCTrackEvent");
}

static inline JSValue jsDOMWindowRTCTrackEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRTCTrackEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
static inline JSValue jsDOMWindowNotificationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNotificationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNotificationConstructorGetter>(state, thisValue, "Notification");
}

static inline JSValue jsDOMWindowNotificationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNotification::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
static inline JSValue jsDOMWindowDeviceProximityEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDeviceProximityEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDeviceProximityEventConstructorGetter>(state, thisValue, "DeviceProximityEvent");
}

static inline JSValue jsDOMWindowDeviceProximityEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeviceProximityEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindowSpeechSynthesisEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSpeechSynthesisEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSpeechSynthesisEventConstructorGetter>(state, thisValue, "SpeechSynthesisEvent");
}

static inline JSValue jsDOMWindowSpeechSynthesisEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSpeechSynthesisEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline JSValue jsDOMWindowSpeechSynthesisUtteranceConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSpeechSynthesisUtteranceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSpeechSynthesisUtteranceConstructorGetter>(state, thisValue, "SpeechSynthesisUtterance");
}

static inline JSValue jsDOMWindowSpeechSynthesisUtteranceConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSpeechSynthesisUtterance::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
static inline JSValue jsDOMWindowByteLengthQueuingStrategyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowByteLengthQueuingStrategyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowByteLengthQueuingStrategyConstructorGetter>(state, thisValue, "ByteLengthQueuingStrategy");
}

static inline JSValue jsDOMWindowByteLengthQueuingStrategyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSByteLengthQueuingStrategy::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
static inline JSValue jsDOMWindowCountQueuingStrategyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCountQueuingStrategyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCountQueuingStrategyConstructorGetter>(state, thisValue, "CountQueuingStrategy");
}

static inline JSValue jsDOMWindowCountQueuingStrategyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCountQueuingStrategy::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(READABLE_STREAM_API)
static inline JSValue jsDOMWindowReadableStreamConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowReadableStreamConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowReadableStreamConstructorGetter>(state, thisValue, "ReadableStream");
}

static inline JSValue jsDOMWindowReadableStreamConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSReadableStream::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WRITABLE_STREAM_API)
static inline JSValue jsDOMWindowWritableStreamConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWritableStreamConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWritableStreamConstructorGetter>(state, thisValue, "WritableStream");
}

static inline JSValue jsDOMWindowWritableStreamConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWritableStream::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAnalyserNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAnalyserNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAnalyserNodeConstructorGetter>(state, thisValue, "AnalyserNode");
}

static inline JSValue jsDOMWindowAnalyserNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAnalyserNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioBufferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioBufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioBufferConstructorGetter>(state, thisValue, "AudioBuffer");
}

static inline JSValue jsDOMWindowAudioBufferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioBuffer::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioBufferSourceNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioBufferSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioBufferSourceNodeConstructorGetter>(state, thisValue, "AudioBufferSourceNode");
}

static inline JSValue jsDOMWindowAudioBufferSourceNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioBufferSourceNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowWebkitAudioContextConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebkitAudioContextConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebkitAudioContextConstructorGetter>(state, thisValue, "webkitAudioContext");
}

static inline JSValue jsDOMWindowWebkitAudioContextConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (UNLIKELY(!thisObject.wrapped().frame()))
        return jsUndefined();
    Settings& settings = thisObject.wrapped().frame()->settings();
    if (!settings.webAudioEnabled())
        return jsUndefined();
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioContext::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioDestinationNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioDestinationNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioDestinationNodeConstructorGetter>(state, thisValue, "AudioDestinationNode");
}

static inline JSValue jsDOMWindowAudioDestinationNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioDestinationNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioListenerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioListenerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioListenerConstructorGetter>(state, thisValue, "AudioListener");
}

static inline JSValue jsDOMWindowAudioListenerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioListener::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioNodeConstructorGetter>(state, thisValue, "AudioNode");
}

static inline JSValue jsDOMWindowAudioNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioParamConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioParamConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioParamConstructorGetter>(state, thisValue, "AudioParam");
}

static inline JSValue jsDOMWindowAudioParamConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioParam::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowAudioProcessingEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioProcessingEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioProcessingEventConstructorGetter>(state, thisValue, "AudioProcessingEvent");
}

static inline JSValue jsDOMWindowAudioProcessingEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioProcessingEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowBiquadFilterNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowBiquadFilterNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowBiquadFilterNodeConstructorGetter>(state, thisValue, "BiquadFilterNode");
}

static inline JSValue jsDOMWindowBiquadFilterNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSBiquadFilterNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowChannelMergerNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowChannelMergerNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowChannelMergerNodeConstructorGetter>(state, thisValue, "ChannelMergerNode");
}

static inline JSValue jsDOMWindowChannelMergerNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSChannelMergerNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowChannelSplitterNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowChannelSplitterNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowChannelSplitterNodeConstructorGetter>(state, thisValue, "ChannelSplitterNode");
}

static inline JSValue jsDOMWindowChannelSplitterNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSChannelSplitterNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowConvolverNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowConvolverNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowConvolverNodeConstructorGetter>(state, thisValue, "ConvolverNode");
}

static inline JSValue jsDOMWindowConvolverNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSConvolverNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowDelayNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDelayNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDelayNodeConstructorGetter>(state, thisValue, "DelayNode");
}

static inline JSValue jsDOMWindowDelayNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDelayNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowDynamicsCompressorNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDynamicsCompressorNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDynamicsCompressorNodeConstructorGetter>(state, thisValue, "DynamicsCompressorNode");
}

static inline JSValue jsDOMWindowDynamicsCompressorNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDynamicsCompressorNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowGainNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowGainNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowGainNodeConstructorGetter>(state, thisValue, "GainNode");
}

static inline JSValue jsDOMWindowGainNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSGainNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowMediaElementAudioSourceNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaElementAudioSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaElementAudioSourceNodeConstructorGetter>(state, thisValue, "MediaElementAudioSourceNode");
}

static inline JSValue jsDOMWindowMediaElementAudioSourceNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaElementAudioSourceNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowMediaStreamAudioDestinationNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamAudioDestinationNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamAudioDestinationNodeConstructorGetter>(state, thisValue, "MediaStreamAudioDestinationNode");
}

static inline JSValue jsDOMWindowMediaStreamAudioDestinationNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStreamAudioDestinationNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowMediaStreamAudioSourceNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaStreamAudioSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaStreamAudioSourceNodeConstructorGetter>(state, thisValue, "MediaStreamAudioSourceNode");
}

static inline JSValue jsDOMWindowMediaStreamAudioSourceNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaStreamAudioSourceNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowOfflineAudioCompletionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOfflineAudioCompletionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOfflineAudioCompletionEventConstructorGetter>(state, thisValue, "OfflineAudioCompletionEvent");
}

static inline JSValue jsDOMWindowOfflineAudioCompletionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOfflineAudioCompletionEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowWebkitOfflineAudioContextConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebkitOfflineAudioContextConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebkitOfflineAudioContextConstructorGetter>(state, thisValue, "webkitOfflineAudioContext");
}

static inline JSValue jsDOMWindowWebkitOfflineAudioContextConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOfflineAudioContext::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowOscillatorNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOscillatorNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOscillatorNodeConstructorGetter>(state, thisValue, "OscillatorNode");
}

static inline JSValue jsDOMWindowOscillatorNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOscillatorNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowWebkitAudioPannerNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebkitAudioPannerNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebkitAudioPannerNodeConstructorGetter>(state, thisValue, "webkitAudioPannerNode");
}

static inline JSValue jsDOMWindowWebkitAudioPannerNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPannerNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowPeriodicWaveConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPeriodicWaveConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPeriodicWaveConstructorGetter>(state, thisValue, "PeriodicWave");
}

static inline JSValue jsDOMWindowPeriodicWaveConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPeriodicWave::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowScriptProcessorNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScriptProcessorNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScriptProcessorNodeConstructorGetter>(state, thisValue, "ScriptProcessorNode");
}

static inline JSValue jsDOMWindowScriptProcessorNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSScriptProcessorNode::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline JSValue jsDOMWindowWaveShaperNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWaveShaperNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWaveShaperNodeConstructorGetter>(state, thisValue, "WaveShaperNode");
}

static inline JSValue jsDOMWindowWaveShaperNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWaveShaperNode::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowDatabaseConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDatabaseConstructorGetter>(state, thisValue, "Database");
}

static inline JSValue jsDOMWindowDatabaseConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDatabase::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSQLErrorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSQLErrorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSQLErrorConstructorGetter>(state, thisValue, "SQLError");
}

static inline JSValue jsDOMWindowSQLErrorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSQLError::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSQLExceptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSQLExceptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSQLExceptionConstructorGetter>(state, thisValue, "SQLException");
}

static inline JSValue jsDOMWindowSQLExceptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSQLException::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSQLResultSetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSQLResultSetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSQLResultSetConstructorGetter>(state, thisValue, "SQLResultSet");
}

static inline JSValue jsDOMWindowSQLResultSetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSQLResultSet::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSQLResultSetRowListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSQLResultSetRowListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSQLResultSetRowListConstructorGetter>(state, thisValue, "SQLResultSetRowList");
}

static inline JSValue jsDOMWindowSQLResultSetRowListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSQLResultSetRowList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSQLTransactionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSQLTransactionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSQLTransactionConstructorGetter>(state, thisValue, "SQLTransaction");
}

static inline JSValue jsDOMWindowSQLTransactionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSQLTransaction::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCloseEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCloseEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCloseEventConstructorGetter>(state, thisValue, "CloseEvent");
}

static inline JSValue jsDOMWindowCloseEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCloseEvent::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(WEB_SOCKETS)
static inline JSValue jsDOMWindowWebSocketConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebSocketConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebSocketConstructorGetter>(state, thisValue, "WebSocket");
}

static inline JSValue jsDOMWindowWebSocketConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebSocket::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline JSValue jsDOMWindowAnimationEffectReadOnlyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAnimationEffectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAnimationEffectReadOnlyConstructorGetter>(state, thisValue, "AnimationEffectReadOnly");
}

static inline JSValue jsDOMWindowAnimationEffectReadOnlyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAnimationEffect::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline JSValue jsDOMWindowAnimationTimelineConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAnimationTimelineConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAnimationTimelineConstructorGetter>(state, thisValue, "AnimationTimeline");
}

static inline JSValue jsDOMWindowAnimationTimelineConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAnimationTimeline::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline JSValue jsDOMWindowDocumentTimelineConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDocumentTimelineConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDocumentTimelineConstructorGetter>(state, thisValue, "DocumentTimeline");
}

static inline JSValue jsDOMWindowDocumentTimelineConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDocumentTimeline::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline JSValue jsDOMWindowKeyframeEffectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowKeyframeEffectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowKeyframeEffectConstructorGetter>(state, thisValue, "KeyframeEffect");
}

static inline JSValue jsDOMWindowKeyframeEffectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSKeyframeEffect::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline JSValue jsDOMWindowAnimationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAnimationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAnimationConstructorGetter>(state, thisValue, "Animation");
}

static inline JSValue jsDOMWindowAnimationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebAnimation::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SUBTLE_CRYPTO)
static inline JSValue jsDOMWindowCryptoKeyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCryptoKeyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCryptoKeyConstructorGetter>(state, thisValue, "CryptoKey");
}

static inline JSValue jsDOMWindowCryptoKeyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCryptoKey::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SUBTLE_CRYPTO)
static inline JSValue jsDOMWindowSubtleCryptoConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSubtleCryptoConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSubtleCryptoConstructorGetter>(state, thisValue, "SubtleCrypto");
}

static inline JSValue jsDOMWindowSubtleCryptoConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSubtleCrypto::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(FONT_LOAD_EVENTS)
static inline JSValue jsDOMWindowCSSFontFaceLoadEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSFontFaceLoadEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSFontFaceLoadEventConstructorGetter>(state, thisValue, "CSSFontFaceLoadEvent");
}

static inline JSValue jsDOMWindowCSSFontFaceLoadEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSFontFaceLoadEvent::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowCSSFontFaceRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSFontFaceRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSFontFaceRuleConstructorGetter>(state, thisValue, "CSSFontFaceRule");
}

static inline JSValue jsDOMWindowCSSFontFaceRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSFontFaceRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSImportRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSImportRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSImportRuleConstructorGetter>(state, thisValue, "CSSImportRule");
}

static inline JSValue jsDOMWindowCSSImportRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSImportRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSKeyframeRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSKeyframeRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSKeyframeRuleConstructorGetter>(state, thisValue, "CSSKeyframeRule");
}

static inline JSValue jsDOMWindowCSSKeyframeRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSKeyframeRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSKeyframesRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSKeyframesRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSKeyframesRuleConstructorGetter>(state, thisValue, "CSSKeyframesRule");
}

static inline JSValue jsDOMWindowCSSKeyframesRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSKeyframesRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSMediaRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSMediaRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSMediaRuleConstructorGetter>(state, thisValue, "CSSMediaRule");
}

static inline JSValue jsDOMWindowCSSMediaRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSMediaRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSNamespaceRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSNamespaceRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSNamespaceRuleConstructorGetter>(state, thisValue, "CSSNamespaceRule");
}

static inline JSValue jsDOMWindowCSSNamespaceRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSNamespaceRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSPageRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSPageRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSPageRuleConstructorGetter>(state, thisValue, "CSSPageRule");
}

static inline JSValue jsDOMWindowCSSPageRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSPageRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSRuleConstructorGetter>(state, thisValue, "CSSRule");
}

static inline JSValue jsDOMWindowCSSRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSRuleListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSRuleListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSRuleListConstructorGetter>(state, thisValue, "CSSRuleList");
}

static inline JSValue jsDOMWindowCSSRuleListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSRuleList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSStyleDeclarationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSStyleDeclarationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSStyleDeclarationConstructorGetter>(state, thisValue, "CSSStyleDeclaration");
}

static inline JSValue jsDOMWindowCSSStyleDeclarationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSStyleDeclaration::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSStyleRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSStyleRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSStyleRuleConstructorGetter>(state, thisValue, "CSSStyleRule");
}

static inline JSValue jsDOMWindowCSSStyleRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSStyleRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSStyleSheetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSStyleSheetConstructorGetter>(state, thisValue, "CSSStyleSheet");
}

static inline JSValue jsDOMWindowCSSStyleSheetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSStyleSheet::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSSupportsRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSSupportsRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSSupportsRuleConstructorGetter>(state, thisValue, "CSSSupportsRule");
}

static inline JSValue jsDOMWindowCSSSupportsRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCSSSupportsRule::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSConstructorGetter>(state, thisValue, "CSS");
}

static inline JSValue jsDOMWindowCSSConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMCSSNamespace::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCounterConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCounterConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCounterConstructorGetter>(state, thisValue, "Counter");
}

static inline JSValue jsDOMWindowCounterConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMCounter::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSPrimitiveValueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSPrimitiveValueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSPrimitiveValueConstructorGetter>(state, thisValue, "CSSPrimitiveValue");
}

static inline JSValue jsDOMWindowCSSPrimitiveValueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMPrimitiveValue::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowRGBColorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRGBColorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRGBColorConstructorGetter>(state, thisValue, "RGBColor");
}

static inline JSValue jsDOMWindowRGBColorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMRGBColor::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowRectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRectConstructorGetter>(state, thisValue, "Rect");
}

static inline JSValue jsDOMWindowRectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMRect::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSValueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSValueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSValueConstructorGetter>(state, thisValue, "CSSValue");
}

static inline JSValue jsDOMWindowCSSValueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMValue::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCSSValueListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCSSValueListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCSSValueListConstructorGetter>(state, thisValue, "CSSValueList");
}

static inline JSValue jsDOMWindowCSSValueListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeprecatedCSSOMValueList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFontFaceConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFontFaceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFontFaceConstructorGetter>(state, thisValue, "FontFace");
}

static inline JSValue jsDOMWindowFontFaceConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFontFace::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFontFaceSetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFontFaceSetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFontFaceSetConstructorGetter>(state, thisValue, "FontFaceSet");
}

static inline JSValue jsDOMWindowFontFaceSetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFontFaceSet::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMediaListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaListConstructorGetter>(state, thisValue, "MediaList");
}

static inline JSValue jsDOMWindowMediaListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowStyleSheetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStyleSheetConstructorGetter>(state, thisValue, "StyleSheet");
}

static inline JSValue jsDOMWindowStyleSheetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSStyleSheet::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowStyleSheetListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStyleSheetListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStyleSheetListConstructorGetter>(state, thisValue, "StyleSheetList");
}

static inline JSValue jsDOMWindowStyleSheetListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSStyleSheetList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebKitCSSMatrixConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitCSSMatrixConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitCSSMatrixConstructorGetter>(state, thisValue, "WebKitCSSMatrix");
}

static inline JSValue jsDOMWindowWebKitCSSMatrixConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitCSSMatrix::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(CSS_REGIONS)
static inline JSValue jsDOMWindowWebKitCSSRegionRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitCSSRegionRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitCSSRegionRuleConstructorGetter>(state, thisValue, "WebKitCSSRegionRule");
}

static inline JSValue jsDOMWindowWebKitCSSRegionRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitCSSRegionRule::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(CSS_DEVICE_ADAPTATION)
static inline JSValue jsDOMWindowWebKitCSSViewportRuleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitCSSViewportRuleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitCSSViewportRuleConstructorGetter>(state, thisValue, "WebKitCSSViewportRule");
}

static inline JSValue jsDOMWindowWebKitCSSViewportRuleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitCSSViewportRule::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowAnimationEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAnimationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAnimationEventConstructorGetter>(state, thisValue, "AnimationEvent");
}

static inline JSValue jsDOMWindowAnimationEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAnimationEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowAttrConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAttrConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAttrConstructorGetter>(state, thisValue, "Attr");
}

static inline JSValue jsDOMWindowAttrConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAttr::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowBeforeLoadEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowBeforeLoadEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowBeforeLoadEventConstructorGetter>(state, thisValue, "BeforeLoadEvent");
}

static inline JSValue jsDOMWindowBeforeLoadEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSBeforeLoadEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowBeforeUnloadEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowBeforeUnloadEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowBeforeUnloadEventConstructorGetter>(state, thisValue, "BeforeUnloadEvent");
}

static inline JSValue jsDOMWindowBeforeUnloadEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSBeforeUnloadEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCDATASectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCDATASectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCDATASectionConstructorGetter>(state, thisValue, "CDATASection");
}

static inline JSValue jsDOMWindowCDATASectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCDATASection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCharacterDataConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCharacterDataConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCharacterDataConstructorGetter>(state, thisValue, "CharacterData");
}

static inline JSValue jsDOMWindowCharacterDataConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCharacterData::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowClientRectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowClientRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowClientRectConstructorGetter>(state, thisValue, "ClientRect");
}

static inline JSValue jsDOMWindowClientRectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSClientRect::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowClientRectListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowClientRectListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowClientRectListConstructorGetter>(state, thisValue, "ClientRectList");
}

static inline JSValue jsDOMWindowClientRectListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSClientRectList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowClipboardEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowClipboardEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowClipboardEventConstructorGetter>(state, thisValue, "ClipboardEvent");
}

static inline JSValue jsDOMWindowClipboardEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSClipboardEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCommentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCommentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCommentConstructorGetter>(state, thisValue, "Comment");
}

static inline JSValue jsDOMWindowCommentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSComment::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCompositionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCompositionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCompositionEventConstructorGetter>(state, thisValue, "CompositionEvent");
}

static inline JSValue jsDOMWindowCompositionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCompositionEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCustomElementRegistryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCustomElementRegistryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCustomElementRegistryConstructorGetter>(state, thisValue, "CustomElementRegistry");
}

static inline JSValue jsDOMWindowCustomElementRegistryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCustomElementRegistry::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCustomEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCustomEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCustomEventConstructorGetter>(state, thisValue, "CustomEvent");
}

static inline JSValue jsDOMWindowCustomEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCustomEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMExceptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMExceptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMExceptionConstructorGetter>(state, thisValue, "DOMException");
}

static inline JSValue jsDOMWindowDOMExceptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMCoreException::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMImplementationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMImplementationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMImplementationConstructorGetter>(state, thisValue, "DOMImplementation");
}

static inline JSValue jsDOMWindowDOMImplementationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMImplementation::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMPointConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMPointConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMPointConstructorGetter>(state, thisValue, "DOMPoint");
}

static inline JSValue jsDOMWindowDOMPointConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMPoint::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMPointReadOnlyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMPointReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMPointReadOnlyConstructorGetter>(state, thisValue, "DOMPointReadOnly");
}

static inline JSValue jsDOMWindowDOMPointReadOnlyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMPointReadOnly::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMRectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMRectConstructorGetter>(state, thisValue, "DOMRect");
}

static inline JSValue jsDOMWindowDOMRectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMRect::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMRectReadOnlyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMRectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMRectReadOnlyConstructorGetter>(state, thisValue, "DOMRectReadOnly");
}

static inline JSValue jsDOMWindowDOMRectReadOnlyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMRectReadOnly::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMStringListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMStringListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMStringListConstructorGetter>(state, thisValue, "DOMStringList");
}

static inline JSValue jsDOMWindowDOMStringListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMStringList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMStringMapConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMStringMapConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMStringMapConstructorGetter>(state, thisValue, "DOMStringMap");
}

static inline JSValue jsDOMWindowDOMStringMapConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMStringMap::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDataTransferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDataTransferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDataTransferConstructorGetter>(state, thisValue, "DataTransfer");
}

static inline JSValue jsDOMWindowDataTransferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDataTransfer::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindowDeviceMotionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDeviceMotionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDeviceMotionEventConstructorGetter>(state, thisValue, "DeviceMotionEvent");
}

static inline JSValue jsDOMWindowDeviceMotionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeviceMotionEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline JSValue jsDOMWindowDeviceOrientationEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDeviceOrientationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDeviceOrientationEventConstructorGetter>(state, thisValue, "DeviceOrientationEvent");
}

static inline JSValue jsDOMWindowDeviceOrientationEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDeviceOrientationEvent::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowDocumentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDocumentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDocumentConstructorGetter>(state, thisValue, "Document");
}

static inline JSValue jsDOMWindowDocumentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDocument::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDocumentFragmentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDocumentFragmentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDocumentFragmentConstructorGetter>(state, thisValue, "DocumentFragment");
}

static inline JSValue jsDOMWindowDocumentFragmentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDocumentFragment::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDocumentTypeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDocumentTypeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDocumentTypeConstructorGetter>(state, thisValue, "DocumentType");
}

static inline JSValue jsDOMWindowDocumentTypeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDocumentType::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowElementConstructorGetter>(state, thisValue, "Element");
}

static inline JSValue jsDOMWindowElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowErrorEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowErrorEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowErrorEventConstructorGetter>(state, thisValue, "ErrorEvent");
}

static inline JSValue jsDOMWindowErrorEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSErrorEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowEventConstructorGetter>(state, thisValue, "Event");
}

static inline JSValue jsDOMWindowEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowEventTargetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowEventTargetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowEventTargetConstructorGetter>(state, thisValue, "EventTarget");
}

static inline JSValue jsDOMWindowEventTargetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSEventTarget::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFocusEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFocusEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFocusEventConstructorGetter>(state, thisValue, "FocusEvent");
}

static inline JSValue jsDOMWindowFocusEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFocusEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHashChangeEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHashChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHashChangeEventConstructorGetter>(state, thisValue, "HashChangeEvent");
}

static inline JSValue jsDOMWindowHashChangeEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHashChangeEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowInputEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowInputEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowInputEventConstructorGetter>(state, thisValue, "InputEvent");
}

static inline JSValue jsDOMWindowInputEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSInputEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowKeyboardEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowKeyboardEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowKeyboardEventConstructorGetter>(state, thisValue, "KeyboardEvent");
}

static inline JSValue jsDOMWindowKeyboardEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSKeyboardEvent::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(CHANNEL_MESSAGING)
static inline JSValue jsDOMWindowMessageChannelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMessageChannelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMessageChannelConstructorGetter>(state, thisValue, "MessageChannel");
}

static inline JSValue jsDOMWindowMessageChannelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMessageChannel::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowMessageEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMessageEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMessageEventConstructorGetter>(state, thisValue, "MessageEvent");
}

static inline JSValue jsDOMWindowMessageEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMessageEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMessagePortConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMessagePortConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMessagePortConstructorGetter>(state, thisValue, "MessagePort");
}

static inline JSValue jsDOMWindowMessagePortConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMessagePort::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMouseEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMouseEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMouseEventConstructorGetter>(state, thisValue, "MouseEvent");
}

static inline JSValue jsDOMWindowMouseEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMouseEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMutationEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMutationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMutationEventConstructorGetter>(state, thisValue, "MutationEvent");
}

static inline JSValue jsDOMWindowMutationEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMutationEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMutationObserverConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMutationObserverConstructorGetter>(state, thisValue, "MutationObserver");
}

static inline JSValue jsDOMWindowMutationObserverConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMutationObserver::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMutationRecordConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMutationRecordConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMutationRecordConstructorGetter>(state, thisValue, "MutationRecord");
}

static inline JSValue jsDOMWindowMutationRecordConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMutationRecord::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNamedNodeMapConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNamedNodeMapConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNamedNodeMapConstructorGetter>(state, thisValue, "NamedNodeMap");
}

static inline JSValue jsDOMWindowNamedNodeMapConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNamedNodeMap::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNodeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNodeConstructorGetter>(state, thisValue, "Node");
}

static inline JSValue jsDOMWindowNodeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNode::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNodeFilterConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNodeFilterConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNodeFilterConstructorGetter>(state, thisValue, "NodeFilter");
}

static inline JSValue jsDOMWindowNodeFilterConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNodeFilter::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNodeIteratorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNodeIteratorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNodeIteratorConstructorGetter>(state, thisValue, "NodeIterator");
}

static inline JSValue jsDOMWindowNodeIteratorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNodeIterator::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNodeListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNodeListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNodeListConstructorGetter>(state, thisValue, "NodeList");
}

static inline JSValue jsDOMWindowNodeListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNodeList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowOverflowEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOverflowEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOverflowEventConstructorGetter>(state, thisValue, "OverflowEvent");
}

static inline JSValue jsDOMWindowOverflowEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSOverflowEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowPageTransitionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPageTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPageTransitionEventConstructorGetter>(state, thisValue, "PageTransitionEvent");
}

static inline JSValue jsDOMWindowPageTransitionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPageTransitionEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowPopStateEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPopStateEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPopStateEventConstructorGetter>(state, thisValue, "PopStateEvent");
}

static inline JSValue jsDOMWindowPopStateEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPopStateEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowProcessingInstructionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowProcessingInstructionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowProcessingInstructionConstructorGetter>(state, thisValue, "ProcessingInstruction");
}

static inline JSValue jsDOMWindowProcessingInstructionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSProcessingInstruction::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowProgressEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowProgressEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowProgressEventConstructorGetter>(state, thisValue, "ProgressEvent");
}

static inline JSValue jsDOMWindowProgressEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSProgressEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowRangeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRangeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRangeConstructorGetter>(state, thisValue, "Range");
}

static inline JSValue jsDOMWindowRangeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRange::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSecurityPolicyViolationEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSecurityPolicyViolationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSecurityPolicyViolationEventConstructorGetter>(state, thisValue, "SecurityPolicyViolationEvent");
}

static inline JSValue jsDOMWindowSecurityPolicyViolationEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSecurityPolicyViolationEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowShadowRootConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowShadowRootConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowShadowRootConstructorGetter>(state, thisValue, "ShadowRoot");
}

static inline JSValue jsDOMWindowShadowRootConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSShadowRoot::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowStaticRangeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStaticRangeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStaticRangeConstructorGetter>(state, thisValue, "StaticRange");
}

static inline JSValue jsDOMWindowStaticRangeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSStaticRange::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTextConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextConstructorGetter>(state, thisValue, "Text");
}

static inline JSValue jsDOMWindowTextConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSText::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTextDecoderConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextDecoderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextDecoderConstructorGetter>(state, thisValue, "TextDecoder");
}

static inline JSValue jsDOMWindowTextDecoderConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextDecoder::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTextEncoderConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextEncoderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextEncoderConstructorGetter>(state, thisValue, "TextEncoder");
}

static inline JSValue jsDOMWindowTextEncoderConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextEncoder::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTextEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextEventConstructorGetter>(state, thisValue, "TextEvent");
}

static inline JSValue jsDOMWindowTextEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextEvent::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowTouchConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTouchConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTouchConstructorGetter>(state, thisValue, "Touch");
}

static inline JSValue jsDOMWindowTouchConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTouch::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowTouchEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTouchEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTouchEventConstructorGetter>(state, thisValue, "TouchEvent");
}

static inline JSValue jsDOMWindowTouchEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTouchEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline JSValue jsDOMWindowTouchListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTouchListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTouchListConstructorGetter>(state, thisValue, "TouchList");
}

static inline JSValue jsDOMWindowTouchListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTouchList::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowTransitionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTransitionEventConstructorGetter>(state, thisValue, "TransitionEvent");
}

static inline JSValue jsDOMWindowTransitionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTransitionEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTreeWalkerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTreeWalkerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTreeWalkerConstructorGetter>(state, thisValue, "TreeWalker");
}

static inline JSValue jsDOMWindowTreeWalkerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTreeWalker::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowUIEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowUIEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowUIEventConstructorGetter>(state, thisValue, "UIEvent");
}

static inline JSValue jsDOMWindowUIEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSUIEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebKitAnimationEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitAnimationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitAnimationEventConstructorGetter>(state, thisValue, "WebKitAnimationEvent");
}

static inline JSValue jsDOMWindowWebKitAnimationEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitAnimationEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebKitTransitionEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitTransitionEventConstructorGetter>(state, thisValue, "WebKitTransitionEvent");
}

static inline JSValue jsDOMWindowWebKitTransitionEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitTransitionEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWheelEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWheelEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWheelEventConstructorGetter>(state, thisValue, "WheelEvent");
}

static inline JSValue jsDOMWindowWheelEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWheelEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLDocumentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLDocumentConstructorGetter>(state, thisValue, "XMLDocument");
}

static inline JSValue jsDOMWindowXMLDocumentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLDocument::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowBlobConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowBlobConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowBlobConstructorGetter>(state, thisValue, "Blob");
}

static inline JSValue jsDOMWindowBlobConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSBlob::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFileConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFileConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFileConstructorGetter>(state, thisValue, "File");
}

static inline JSValue jsDOMWindowFileConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFile::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFileErrorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFileErrorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFileErrorConstructorGetter>(state, thisValue, "FileError");
}

static inline JSValue jsDOMWindowFileErrorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFileError::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFileListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFileListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFileListConstructorGetter>(state, thisValue, "FileList");
}

static inline JSValue jsDOMWindowFileListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFileList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFileReaderConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFileReaderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFileReaderConstructorGetter>(state, thisValue, "FileReader");
}

static inline JSValue jsDOMWindowFileReaderConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSFileReader::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowFormDataConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowFormDataConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowFormDataConstructorGetter>(state, thisValue, "FormData");
}

static inline JSValue jsDOMWindowFormDataConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMFormData::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMTokenListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMTokenListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMTokenListConstructorGetter>(state, thisValue, "DOMTokenList");
}

static inline JSValue jsDOMWindowDOMTokenListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMTokenList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowURLConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowURLConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowURLConstructorGetter>(state, thisValue, "URL");
}

static inline JSValue jsDOMWindowURLConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMURL::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLAllCollectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAllCollectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAllCollectionConstructorGetter>(state, thisValue, "HTMLAllCollection");
}

static inline JSValue jsDOMWindowHTMLAllCollectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAllCollection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLAnchorElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAnchorElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAnchorElementConstructorGetter>(state, thisValue, "HTMLAnchorElement");
}

static inline JSValue jsDOMWindowHTMLAnchorElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAnchorElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLAppletElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAppletElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAppletElementConstructorGetter>(state, thisValue, "HTMLAppletElement");
}

static inline JSValue jsDOMWindowHTMLAppletElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAppletElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLAreaElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAreaElementConstructorGetter>(state, thisValue, "HTMLAreaElement");
}

static inline JSValue jsDOMWindowHTMLAreaElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAreaElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(ATTACHMENT_ELEMENT)
static inline JSValue jsDOMWindowHTMLAttachmentElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAttachmentElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAttachmentElementConstructorGetter>(state, thisValue, "HTMLAttachmentElement");
}

static inline JSValue jsDOMWindowHTMLAttachmentElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAttachmentElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowHTMLAudioElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLAudioElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLAudioElementConstructorGetter>(state, thisValue, "HTMLAudioElement");
}

static inline JSValue jsDOMWindowHTMLAudioElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAudioElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowAudioConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioConstructorGetter>(state, thisValue, "Audio");
}

static inline JSValue jsDOMWindowAudioConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLAudioElement::getNamedConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowHTMLBRElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLBRElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLBRElementConstructorGetter>(state, thisValue, "HTMLBRElement");
}

static inline JSValue jsDOMWindowHTMLBRElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLBRElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLBaseElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLBaseElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLBaseElementConstructorGetter>(state, thisValue, "HTMLBaseElement");
}

static inline JSValue jsDOMWindowHTMLBaseElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLBaseElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLBodyElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLBodyElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLBodyElementConstructorGetter>(state, thisValue, "HTMLBodyElement");
}

static inline JSValue jsDOMWindowHTMLBodyElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLBodyElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLButtonElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLButtonElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLButtonElementConstructorGetter>(state, thisValue, "HTMLButtonElement");
}

static inline JSValue jsDOMWindowHTMLButtonElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLButtonElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLCanvasElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLCanvasElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLCanvasElementConstructorGetter>(state, thisValue, "HTMLCanvasElement");
}

static inline JSValue jsDOMWindowHTMLCanvasElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLCanvasElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLCollectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLCollectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLCollectionConstructorGetter>(state, thisValue, "HTMLCollection");
}

static inline JSValue jsDOMWindowHTMLCollectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLCollection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLDListElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDListElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDListElementConstructorGetter>(state, thisValue, "HTMLDListElement");
}

static inline JSValue jsDOMWindowHTMLDListElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDListElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLDataElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDataElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDataElementConstructorGetter>(state, thisValue, "HTMLDataElement");
}

static inline JSValue jsDOMWindowHTMLDataElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDataElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(DATALIST_ELEMENT)
static inline JSValue jsDOMWindowHTMLDataListElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDataListElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDataListElementConstructorGetter>(state, thisValue, "HTMLDataListElement");
}

static inline JSValue jsDOMWindowHTMLDataListElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDataListElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowHTMLDetailsElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDetailsElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDetailsElementConstructorGetter>(state, thisValue, "HTMLDetailsElement");
}

static inline JSValue jsDOMWindowHTMLDetailsElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDetailsElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLDirectoryElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDirectoryElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDirectoryElementConstructorGetter>(state, thisValue, "HTMLDirectoryElement");
}

static inline JSValue jsDOMWindowHTMLDirectoryElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDirectoryElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLDivElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDivElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDivElementConstructorGetter>(state, thisValue, "HTMLDivElement");
}

static inline JSValue jsDOMWindowHTMLDivElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDivElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLDocumentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLDocumentConstructorGetter>(state, thisValue, "HTMLDocument");
}

static inline JSValue jsDOMWindowHTMLDocumentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLDocument::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLElementConstructorGetter>(state, thisValue, "HTMLElement");
}

static inline JSValue jsDOMWindowHTMLElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLEmbedElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLEmbedElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLEmbedElementConstructorGetter>(state, thisValue, "HTMLEmbedElement");
}

static inline JSValue jsDOMWindowHTMLEmbedElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLEmbedElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFieldSetElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFieldSetElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFieldSetElementConstructorGetter>(state, thisValue, "HTMLFieldSetElement");
}

static inline JSValue jsDOMWindowHTMLFieldSetElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFieldSetElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFontElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFontElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFontElementConstructorGetter>(state, thisValue, "HTMLFontElement");
}

static inline JSValue jsDOMWindowHTMLFontElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFontElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFormControlsCollectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFormControlsCollectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFormControlsCollectionConstructorGetter>(state, thisValue, "HTMLFormControlsCollection");
}

static inline JSValue jsDOMWindowHTMLFormControlsCollectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFormControlsCollection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFormElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFormElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFormElementConstructorGetter>(state, thisValue, "HTMLFormElement");
}

static inline JSValue jsDOMWindowHTMLFormElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFormElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFrameElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFrameElementConstructorGetter>(state, thisValue, "HTMLFrameElement");
}

static inline JSValue jsDOMWindowHTMLFrameElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFrameElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLFrameSetElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLFrameSetElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLFrameSetElementConstructorGetter>(state, thisValue, "HTMLFrameSetElement");
}

static inline JSValue jsDOMWindowHTMLFrameSetElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLFrameSetElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLHRElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLHRElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLHRElementConstructorGetter>(state, thisValue, "HTMLHRElement");
}

static inline JSValue jsDOMWindowHTMLHRElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLHRElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLHeadElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLHeadElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLHeadElementConstructorGetter>(state, thisValue, "HTMLHeadElement");
}

static inline JSValue jsDOMWindowHTMLHeadElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLHeadElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLHeadingElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLHeadingElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLHeadingElementConstructorGetter>(state, thisValue, "HTMLHeadingElement");
}

static inline JSValue jsDOMWindowHTMLHeadingElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLHeadingElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLHtmlElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLHtmlElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLHtmlElementConstructorGetter>(state, thisValue, "HTMLHtmlElement");
}

static inline JSValue jsDOMWindowHTMLHtmlElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLHtmlElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLIFrameElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLIFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLIFrameElementConstructorGetter>(state, thisValue, "HTMLIFrameElement");
}

static inline JSValue jsDOMWindowHTMLIFrameElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLIFrameElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLImageElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLImageElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLImageElementConstructorGetter>(state, thisValue, "HTMLImageElement");
}

static inline JSValue jsDOMWindowHTMLImageElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLImageElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowImageConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowImageConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowImageConstructorGetter>(state, thisValue, "Image");
}

static inline JSValue jsDOMWindowImageConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLImageElement::getNamedConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLInputElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLInputElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLInputElementConstructorGetter>(state, thisValue, "HTMLInputElement");
}

static inline JSValue jsDOMWindowHTMLInputElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLInputElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLKeygenElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLKeygenElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLKeygenElementConstructorGetter>(state, thisValue, "HTMLKeygenElement");
}

static inline JSValue jsDOMWindowHTMLKeygenElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLKeygenElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLLIElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLLIElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLLIElementConstructorGetter>(state, thisValue, "HTMLLIElement");
}

static inline JSValue jsDOMWindowHTMLLIElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLLIElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLLabelElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLLabelElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLLabelElementConstructorGetter>(state, thisValue, "HTMLLabelElement");
}

static inline JSValue jsDOMWindowHTMLLabelElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLLabelElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLLegendElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLLegendElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLLegendElementConstructorGetter>(state, thisValue, "HTMLLegendElement");
}

static inline JSValue jsDOMWindowHTMLLegendElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLLegendElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLLinkElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLLinkElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLLinkElementConstructorGetter>(state, thisValue, "HTMLLinkElement");
}

static inline JSValue jsDOMWindowHTMLLinkElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLLinkElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLMapElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMapElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMapElementConstructorGetter>(state, thisValue, "HTMLMapElement");
}

static inline JSValue jsDOMWindowHTMLMapElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMapElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLMarqueeElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMarqueeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMarqueeElementConstructorGetter>(state, thisValue, "HTMLMarqueeElement");
}

static inline JSValue jsDOMWindowHTMLMarqueeElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMarqueeElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowHTMLMediaElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMediaElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMediaElementConstructorGetter>(state, thisValue, "HTMLMediaElement");
}

static inline JSValue jsDOMWindowHTMLMediaElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMediaElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowHTMLMenuElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMenuElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMenuElementConstructorGetter>(state, thisValue, "HTMLMenuElement");
}

static inline JSValue jsDOMWindowHTMLMenuElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMenuElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLMetaElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMetaElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMetaElementConstructorGetter>(state, thisValue, "HTMLMetaElement");
}

static inline JSValue jsDOMWindowHTMLMetaElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMetaElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(METER_ELEMENT)
static inline JSValue jsDOMWindowHTMLMeterElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLMeterElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLMeterElementConstructorGetter>(state, thisValue, "HTMLMeterElement");
}

static inline JSValue jsDOMWindowHTMLMeterElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLMeterElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowHTMLModElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLModElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLModElementConstructorGetter>(state, thisValue, "HTMLModElement");
}

static inline JSValue jsDOMWindowHTMLModElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLModElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLOListElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLOListElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLOListElementConstructorGetter>(state, thisValue, "HTMLOListElement");
}

static inline JSValue jsDOMWindowHTMLOListElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOListElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLObjectElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLObjectElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLObjectElementConstructorGetter>(state, thisValue, "HTMLObjectElement");
}

static inline JSValue jsDOMWindowHTMLObjectElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLObjectElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLOptGroupElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLOptGroupElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLOptGroupElementConstructorGetter>(state, thisValue, "HTMLOptGroupElement");
}

static inline JSValue jsDOMWindowHTMLOptGroupElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOptGroupElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLOptionElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLOptionElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLOptionElementConstructorGetter>(state, thisValue, "HTMLOptionElement");
}

static inline JSValue jsDOMWindowHTMLOptionElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOptionElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowOptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowOptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowOptionConstructorGetter>(state, thisValue, "Option");
}

static inline JSValue jsDOMWindowOptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOptionElement::getNamedConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLOptionsCollectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLOptionsCollectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLOptionsCollectionConstructorGetter>(state, thisValue, "HTMLOptionsCollection");
}

static inline JSValue jsDOMWindowHTMLOptionsCollectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOptionsCollection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLOutputElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLOutputElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLOutputElementConstructorGetter>(state, thisValue, "HTMLOutputElement");
}

static inline JSValue jsDOMWindowHTMLOutputElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLOutputElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLParagraphElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLParagraphElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLParagraphElementConstructorGetter>(state, thisValue, "HTMLParagraphElement");
}

static inline JSValue jsDOMWindowHTMLParagraphElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLParagraphElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLParamElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLParamElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLParamElementConstructorGetter>(state, thisValue, "HTMLParamElement");
}

static inline JSValue jsDOMWindowHTMLParamElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLParamElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLPictureElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLPictureElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLPictureElementConstructorGetter>(state, thisValue, "HTMLPictureElement");
}

static inline JSValue jsDOMWindowHTMLPictureElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLPictureElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLPreElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLPreElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLPreElementConstructorGetter>(state, thisValue, "HTMLPreElement");
}

static inline JSValue jsDOMWindowHTMLPreElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLPreElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLProgressElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLProgressElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLProgressElementConstructorGetter>(state, thisValue, "HTMLProgressElement");
}

static inline JSValue jsDOMWindowHTMLProgressElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLProgressElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLQuoteElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLQuoteElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLQuoteElementConstructorGetter>(state, thisValue, "HTMLQuoteElement");
}

static inline JSValue jsDOMWindowHTMLQuoteElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLQuoteElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLScriptElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLScriptElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLScriptElementConstructorGetter>(state, thisValue, "HTMLScriptElement");
}

static inline JSValue jsDOMWindowHTMLScriptElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLScriptElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLSelectElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLSelectElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLSelectElementConstructorGetter>(state, thisValue, "HTMLSelectElement");
}

static inline JSValue jsDOMWindowHTMLSelectElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLSelectElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLSlotElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLSlotElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLSlotElementConstructorGetter>(state, thisValue, "HTMLSlotElement");
}

static inline JSValue jsDOMWindowHTMLSlotElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLSlotElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLSourceElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLSourceElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLSourceElementConstructorGetter>(state, thisValue, "HTMLSourceElement");
}

static inline JSValue jsDOMWindowHTMLSourceElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLSourceElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLSpanElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLSpanElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLSpanElementConstructorGetter>(state, thisValue, "HTMLSpanElement");
}

static inline JSValue jsDOMWindowHTMLSpanElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLSpanElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLStyleElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLStyleElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLStyleElementConstructorGetter>(state, thisValue, "HTMLStyleElement");
}

static inline JSValue jsDOMWindowHTMLStyleElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLStyleElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableCaptionElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableCaptionElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableCaptionElementConstructorGetter>(state, thisValue, "HTMLTableCaptionElement");
}

static inline JSValue jsDOMWindowHTMLTableCaptionElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableCaptionElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableCellElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableCellElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableCellElementConstructorGetter>(state, thisValue, "HTMLTableCellElement");
}

static inline JSValue jsDOMWindowHTMLTableCellElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableCellElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableColElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableColElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableColElementConstructorGetter>(state, thisValue, "HTMLTableColElement");
}

static inline JSValue jsDOMWindowHTMLTableColElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableColElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableElementConstructorGetter>(state, thisValue, "HTMLTableElement");
}

static inline JSValue jsDOMWindowHTMLTableElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableRowElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableRowElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableRowElementConstructorGetter>(state, thisValue, "HTMLTableRowElement");
}

static inline JSValue jsDOMWindowHTMLTableRowElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableRowElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTableSectionElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTableSectionElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTableSectionElementConstructorGetter>(state, thisValue, "HTMLTableSectionElement");
}

static inline JSValue jsDOMWindowHTMLTableSectionElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTableSectionElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTemplateElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTemplateElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTemplateElementConstructorGetter>(state, thisValue, "HTMLTemplateElement");
}

static inline JSValue jsDOMWindowHTMLTemplateElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTemplateElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTextAreaElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTextAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTextAreaElementConstructorGetter>(state, thisValue, "HTMLTextAreaElement");
}

static inline JSValue jsDOMWindowHTMLTextAreaElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTextAreaElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTimeElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTimeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTimeElementConstructorGetter>(state, thisValue, "HTMLTimeElement");
}

static inline JSValue jsDOMWindowHTMLTimeElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTimeElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLTitleElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTitleElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTitleElementConstructorGetter>(state, thisValue, "HTMLTitleElement");
}

static inline JSValue jsDOMWindowHTMLTitleElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTitleElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowHTMLTrackElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLTrackElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLTrackElementConstructorGetter>(state, thisValue, "HTMLTrackElement");
}

static inline JSValue jsDOMWindowHTMLTrackElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLTrackElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowHTMLUListElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLUListElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLUListElementConstructorGetter>(state, thisValue, "HTMLUListElement");
}

static inline JSValue jsDOMWindowHTMLUListElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLUListElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHTMLUnknownElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLUnknownElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLUnknownElementConstructorGetter>(state, thisValue, "HTMLUnknownElement");
}

static inline JSValue jsDOMWindowHTMLUnknownElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLUnknownElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowHTMLVideoElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHTMLVideoElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHTMLVideoElementConstructorGetter>(state, thisValue, "HTMLVideoElement");
}

static inline JSValue jsDOMWindowHTMLVideoElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHTMLVideoElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowImageDataConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowImageDataConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowImageDataConstructorGetter>(state, thisValue, "ImageData");
}

static inline JSValue jsDOMWindowImageDataConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSImageData::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowMediaControllerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaControllerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaControllerConstructorGetter>(state, thisValue, "MediaController");
}

static inline JSValue jsDOMWindowMediaControllerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaController::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowMediaErrorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMediaErrorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMediaErrorConstructorGetter>(state, thisValue, "MediaError");
}

static inline JSValue jsDOMWindowMediaErrorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSMediaError::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowRadioNodeListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowRadioNodeListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowRadioNodeListConstructorGetter>(state, thisValue, "RadioNodeList");
}

static inline JSValue jsDOMWindowRadioNodeListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSRadioNodeList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowTextMetricsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextMetricsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextMetricsConstructorGetter>(state, thisValue, "TextMetrics");
}

static inline JSValue jsDOMWindowTextMetricsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextMetrics::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(VIDEO)
static inline JSValue jsDOMWindowTimeRangesConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTimeRangesConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTimeRangesConstructorGetter>(state, thisValue, "TimeRanges");
}

static inline JSValue jsDOMWindowTimeRangesConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTimeRanges::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowURLSearchParamsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowURLSearchParamsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowURLSearchParamsConstructorGetter>(state, thisValue, "URLSearchParams");
}

static inline JSValue jsDOMWindowURLSearchParamsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSURLSearchParams::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowValidityStateConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowValidityStateConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowValidityStateConstructorGetter>(state, thisValue, "ValidityState");
}

static inline JSValue jsDOMWindowValidityStateConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSValidityState::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCanvasGradientConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCanvasGradientConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCanvasGradientConstructorGetter>(state, thisValue, "CanvasGradient");
}

static inline JSValue jsDOMWindowCanvasGradientConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCanvasGradient::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCanvasPatternConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCanvasPatternConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCanvasPatternConstructorGetter>(state, thisValue, "CanvasPattern");
}

static inline JSValue jsDOMWindowCanvasPatternConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCanvasPattern::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(CANVAS_PROXY)
static inline JSValue jsDOMWindowCanvasProxyConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCanvasProxyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCanvasProxyConstructorGetter>(state, thisValue, "CanvasProxy");
}

static inline JSValue jsDOMWindowCanvasProxyConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCanvasProxy::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowCanvasRenderingContext2DConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCanvasRenderingContext2DConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCanvasRenderingContext2DConstructorGetter>(state, thisValue, "CanvasRenderingContext2D");
}

static inline JSValue jsDOMWindowCanvasRenderingContext2DConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCanvasRenderingContext2D::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowPath2DConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPath2DConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPath2DConstructorGetter>(state, thisValue, "Path2D");
}

static inline JSValue jsDOMWindowPath2DConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMPath::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(WEBGL2)
static inline JSValue jsDOMWindowWebGL2RenderingContextConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGL2RenderingContextConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGL2RenderingContextConstructorGetter>(state, thisValue, "WebGL2RenderingContext");
}

static inline JSValue jsDOMWindowWebGL2RenderingContextConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGL2RenderingContext::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLActiveInfoConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLActiveInfoConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLActiveInfoConstructorGetter>(state, thisValue, "WebGLActiveInfo");
}

static inline JSValue jsDOMWindowWebGLActiveInfoConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLActiveInfo::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLBufferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLBufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLBufferConstructorGetter>(state, thisValue, "WebGLBuffer");
}

static inline JSValue jsDOMWindowWebGLBufferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLBuffer::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLContextEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLContextEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLContextEventConstructorGetter>(state, thisValue, "WebGLContextEvent");
}

static inline JSValue jsDOMWindowWebGLContextEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLContextEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLFramebufferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLFramebufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLFramebufferConstructorGetter>(state, thisValue, "WebGLFramebuffer");
}

static inline JSValue jsDOMWindowWebGLFramebufferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLFramebuffer::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLProgramConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLProgramConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLProgramConstructorGetter>(state, thisValue, "WebGLProgram");
}

static inline JSValue jsDOMWindowWebGLProgramConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLProgram::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLQueryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLQueryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLQueryConstructorGetter>(state, thisValue, "WebGLQuery");
}

static inline JSValue jsDOMWindowWebGLQueryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLQuery::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLRenderbufferConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLRenderbufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLRenderbufferConstructorGetter>(state, thisValue, "WebGLRenderbuffer");
}

static inline JSValue jsDOMWindowWebGLRenderbufferConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLRenderbuffer::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLRenderingContextConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLRenderingContextConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLRenderingContextConstructorGetter>(state, thisValue, "WebGLRenderingContext");
}

static inline JSValue jsDOMWindowWebGLRenderingContextConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLRenderingContext::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLSamplerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLSamplerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLSamplerConstructorGetter>(state, thisValue, "WebGLSampler");
}

static inline JSValue jsDOMWindowWebGLSamplerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLSampler::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLShaderConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLShaderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLShaderConstructorGetter>(state, thisValue, "WebGLShader");
}

static inline JSValue jsDOMWindowWebGLShaderConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLShader::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLShaderPrecisionFormatConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLShaderPrecisionFormatConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLShaderPrecisionFormatConstructorGetter>(state, thisValue, "WebGLShaderPrecisionFormat");
}

static inline JSValue jsDOMWindowWebGLShaderPrecisionFormatConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLShaderPrecisionFormat::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLSyncConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLSyncConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLSyncConstructorGetter>(state, thisValue, "WebGLSync");
}

static inline JSValue jsDOMWindowWebGLSyncConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLSync::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLTextureConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLTextureConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLTextureConstructorGetter>(state, thisValue, "WebGLTexture");
}

static inline JSValue jsDOMWindowWebGLTextureConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLTexture::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLTransformFeedbackConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLTransformFeedbackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLTransformFeedbackConstructorGetter>(state, thisValue, "WebGLTransformFeedback");
}

static inline JSValue jsDOMWindowWebGLTransformFeedbackConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLTransformFeedback::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL)
static inline JSValue jsDOMWindowWebGLUniformLocationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLUniformLocationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLUniformLocationConstructorGetter>(state, thisValue, "WebGLUniformLocation");
}

static inline JSValue jsDOMWindowWebGLUniformLocationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLUniformLocation::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEBGL2)
static inline JSValue jsDOMWindowWebGLVertexArrayObjectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebGLVertexArrayObjectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebGLVertexArrayObjectConstructorGetter>(state, thisValue, "WebGLVertexArrayObject");
}

static inline JSValue jsDOMWindowWebGLVertexArrayObjectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebGLVertexArrayObject::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowAudioTrackConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioTrackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioTrackConstructorGetter>(state, thisValue, "AudioTrack");
}

static inline JSValue jsDOMWindowAudioTrackConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioTrack::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowAudioTrackListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowAudioTrackListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowAudioTrackListConstructorGetter>(state, thisValue, "AudioTrackList");
}

static inline JSValue jsDOMWindowAudioTrackListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSAudioTrackList::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowDataCueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDataCueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDataCueConstructorGetter>(state, thisValue, "DataCue");
}

static inline JSValue jsDOMWindowDataCueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDataCue::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowTextTrackConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextTrackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextTrackConstructorGetter>(state, thisValue, "TextTrack");
}

static inline JSValue jsDOMWindowTextTrackConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextTrack::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowTextTrackCueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextTrackCueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextTrackCueConstructorGetter>(state, thisValue, "TextTrackCue");
}

static inline JSValue jsDOMWindowTextTrackCueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextTrackCue::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowTextTrackCueListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextTrackCueListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextTrackCueListConstructorGetter>(state, thisValue, "TextTrackCueList");
}

static inline JSValue jsDOMWindowTextTrackCueListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextTrackCueList::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowTextTrackListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTextTrackListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTextTrackListConstructorGetter>(state, thisValue, "TextTrackList");
}

static inline JSValue jsDOMWindowTextTrackListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTextTrackList::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowTrackEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowTrackEventConstructorGetter>(state, thisValue, "TrackEvent");
}

static inline JSValue jsDOMWindowTrackEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSTrackEvent::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowVTTCueConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowVTTCueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowVTTCueConstructorGetter>(state, thisValue, "VTTCue");
}

static inline JSValue jsDOMWindowVTTCueConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSVTTCue::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowVTTRegionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowVTTRegionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowVTTRegionConstructorGetter>(state, thisValue, "VTTRegion");
}

static inline JSValue jsDOMWindowVTTRegionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSVTTRegion::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowVideoTrackConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowVideoTrackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowVideoTrackConstructorGetter>(state, thisValue, "VideoTrack");
}

static inline JSValue jsDOMWindowVideoTrackConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSVideoTrack::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsDOMWindowVideoTrackListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowVideoTrackListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowVideoTrackListConstructorGetter>(state, thisValue, "VideoTrackList");
}

static inline JSValue jsDOMWindowVideoTrackListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSVideoTrackList::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowApplicationCacheConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowApplicationCacheConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowApplicationCacheConstructorGetter>(state, thisValue, "ApplicationCache");
}

static inline JSValue jsDOMWindowApplicationCacheConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMApplicationCache::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowBarPropConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowBarPropConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowBarPropConstructorGetter>(state, thisValue, "BarProp");
}

static inline JSValue jsDOMWindowBarPropConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSBarProp::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowCryptoConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowCryptoConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowCryptoConstructorGetter>(state, thisValue, "Crypto");
}

static inline JSValue jsDOMWindowCryptoConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSCrypto::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSelectionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSelectionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSelectionConstructorGetter>(state, thisValue, "Selection");
}

static inline JSValue jsDOMWindowSelectionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMSelection::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWindowConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWindowConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWindowConstructorGetter>(state, thisValue, "Window");
}

static inline JSValue jsDOMWindowWindowConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMWindow::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowEventSourceConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowEventSourceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowEventSourceConstructorGetter>(state, thisValue, "EventSource");
}

static inline JSValue jsDOMWindowEventSourceConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSEventSource::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowHistoryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowHistoryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowHistoryConstructorGetter>(state, thisValue, "History");
}

static inline JSValue jsDOMWindowHistoryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSHistory::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(INTERSECTION_OBSERVER)
static inline JSValue jsDOMWindowIntersectionObserverConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIntersectionObserverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIntersectionObserverConstructorGetter>(state, thisValue, "IntersectionObserver");
}

static inline JSValue jsDOMWindowIntersectionObserverConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIntersectionObserver::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(INTERSECTION_OBSERVER)
static inline JSValue jsDOMWindowIntersectionObserverEntryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowIntersectionObserverEntryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowIntersectionObserverEntryConstructorGetter>(state, thisValue, "IntersectionObserverEntry");
}

static inline JSValue jsDOMWindowIntersectionObserverEntryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSIntersectionObserverEntry::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowLocationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowLocationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowLocationConstructorGetter>(state, thisValue, "Location");
}

static inline JSValue jsDOMWindowLocationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSLocation::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowNavigatorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowNavigatorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowNavigatorConstructorGetter>(state, thisValue, "Navigator");
}

static inline JSValue jsDOMWindowNavigatorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSNavigator::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceConstructorGetter>(state, thisValue, "Performance");
}

static inline JSValue jsDOMWindowPerformanceConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformance::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceEntryConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceEntryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceEntryConstructorGetter>(state, thisValue, "PerformanceEntry");
}

static inline JSValue jsDOMWindowPerformanceEntryConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceEntry::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceMarkConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceMarkConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceMarkConstructorGetter>(state, thisValue, "PerformanceMark");
}

static inline JSValue jsDOMWindowPerformanceMarkConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceMark::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceMeasureConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceMeasureConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceMeasureConstructorGetter>(state, thisValue, "PerformanceMeasure");
}

static inline JSValue jsDOMWindowPerformanceMeasureConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceMeasure::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceNavigationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceNavigationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceNavigationConstructorGetter>(state, thisValue, "PerformanceNavigation");
}

static inline JSValue jsDOMWindowPerformanceNavigationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceNavigation::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceResourceTimingConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceResourceTimingConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceResourceTimingConstructorGetter>(state, thisValue, "PerformanceResourceTiming");
}

static inline JSValue jsDOMWindowPerformanceResourceTimingConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceResourceTiming::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(WEB_TIMING)
static inline JSValue jsDOMWindowPerformanceTimingConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPerformanceTimingConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPerformanceTimingConstructorGetter>(state, thisValue, "PerformanceTiming");
}

static inline JSValue jsDOMWindowPerformanceTimingConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSPerformanceTiming::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowScreenConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowScreenConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowScreenConstructorGetter>(state, thisValue, "Screen");
}

static inline JSValue jsDOMWindowScreenConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSScreen::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWebKitPointConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWebKitPointConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWebKitPointConstructorGetter>(state, thisValue, "WebKitPoint");
}

static inline JSValue jsDOMWindowWebKitPointConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWebKitPoint::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMimeTypeConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMimeTypeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMimeTypeConstructorGetter>(state, thisValue, "MimeType");
}

static inline JSValue jsDOMWindowMimeTypeConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMMimeType::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowMimeTypeArrayConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowMimeTypeArrayConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowMimeTypeArrayConstructorGetter>(state, thisValue, "MimeTypeArray");
}

static inline JSValue jsDOMWindowMimeTypeArrayConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMMimeTypeArray::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowPluginConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPluginConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPluginConstructorGetter>(state, thisValue, "Plugin");
}

static inline JSValue jsDOMWindowPluginConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMPlugin::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowPluginArrayConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowPluginArrayConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowPluginArrayConstructorGetter>(state, thisValue, "PluginArray");
}

static inline JSValue jsDOMWindowPluginArrayConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMPluginArray::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowStorageConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStorageConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStorageConstructorGetter>(state, thisValue, "Storage");
}

static inline JSValue jsDOMWindowStorageConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSStorage::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowStorageEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowStorageEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowStorageEventConstructorGetter>(state, thisValue, "StorageEvent");
}

static inline JSValue jsDOMWindowStorageEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSStorageEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAElementConstructorGetter>(state, thisValue, "SVGAElement");
}

static inline JSValue jsDOMWindowSVGAElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGAltGlyphDefElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAltGlyphDefElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAltGlyphDefElementConstructorGetter>(state, thisValue, "SVGAltGlyphDefElement");
}

static inline JSValue jsDOMWindowSVGAltGlyphDefElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAltGlyphDefElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGAltGlyphElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAltGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAltGlyphElementConstructorGetter>(state, thisValue, "SVGAltGlyphElement");
}

static inline JSValue jsDOMWindowSVGAltGlyphElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAltGlyphElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGAltGlyphItemElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAltGlyphItemElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAltGlyphItemElementConstructorGetter>(state, thisValue, "SVGAltGlyphItemElement");
}

static inline JSValue jsDOMWindowSVGAltGlyphItemElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAltGlyphItemElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGAngleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAngleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAngleConstructorGetter>(state, thisValue, "SVGAngle");
}

static inline JSValue jsDOMWindowSVGAngleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAngle::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimateColorElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimateColorElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimateColorElementConstructorGetter>(state, thisValue, "SVGAnimateColorElement");
}

static inline JSValue jsDOMWindowSVGAnimateColorElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimateColorElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimateElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimateElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimateElementConstructorGetter>(state, thisValue, "SVGAnimateElement");
}

static inline JSValue jsDOMWindowSVGAnimateElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimateElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimateMotionElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimateMotionElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimateMotionElementConstructorGetter>(state, thisValue, "SVGAnimateMotionElement");
}

static inline JSValue jsDOMWindowSVGAnimateMotionElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimateMotionElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimateTransformElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimateTransformElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimateTransformElementConstructorGetter>(state, thisValue, "SVGAnimateTransformElement");
}

static inline JSValue jsDOMWindowSVGAnimateTransformElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimateTransformElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedAngleConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedAngleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedAngleConstructorGetter>(state, thisValue, "SVGAnimatedAngle");
}

static inline JSValue jsDOMWindowSVGAnimatedAngleConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedAngle::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedBooleanConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedBooleanConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedBooleanConstructorGetter>(state, thisValue, "SVGAnimatedBoolean");
}

static inline JSValue jsDOMWindowSVGAnimatedBooleanConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedBoolean::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedEnumerationConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedEnumerationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedEnumerationConstructorGetter>(state, thisValue, "SVGAnimatedEnumeration");
}

static inline JSValue jsDOMWindowSVGAnimatedEnumerationConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedEnumeration::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedIntegerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedIntegerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedIntegerConstructorGetter>(state, thisValue, "SVGAnimatedInteger");
}

static inline JSValue jsDOMWindowSVGAnimatedIntegerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedInteger::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedLengthConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedLengthConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedLengthConstructorGetter>(state, thisValue, "SVGAnimatedLength");
}

static inline JSValue jsDOMWindowSVGAnimatedLengthConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedLength::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedLengthListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedLengthListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedLengthListConstructorGetter>(state, thisValue, "SVGAnimatedLengthList");
}

static inline JSValue jsDOMWindowSVGAnimatedLengthListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedLengthList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedNumberConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedNumberConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedNumberConstructorGetter>(state, thisValue, "SVGAnimatedNumber");
}

static inline JSValue jsDOMWindowSVGAnimatedNumberConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedNumber::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedNumberListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedNumberListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedNumberListConstructorGetter>(state, thisValue, "SVGAnimatedNumberList");
}

static inline JSValue jsDOMWindowSVGAnimatedNumberListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedNumberList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedPreserveAspectRatioConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedPreserveAspectRatioConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedPreserveAspectRatioConstructorGetter>(state, thisValue, "SVGAnimatedPreserveAspectRatio");
}

static inline JSValue jsDOMWindowSVGAnimatedPreserveAspectRatioConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedPreserveAspectRatio::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedRectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedRectConstructorGetter>(state, thisValue, "SVGAnimatedRect");
}

static inline JSValue jsDOMWindowSVGAnimatedRectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedRect::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedStringConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedStringConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedStringConstructorGetter>(state, thisValue, "SVGAnimatedString");
}

static inline JSValue jsDOMWindowSVGAnimatedStringConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedString::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimatedTransformListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimatedTransformListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimatedTransformListConstructorGetter>(state, thisValue, "SVGAnimatedTransformList");
}

static inline JSValue jsDOMWindowSVGAnimatedTransformListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimatedTransformList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGAnimationElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGAnimationElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGAnimationElementConstructorGetter>(state, thisValue, "SVGAnimationElement");
}

static inline JSValue jsDOMWindowSVGAnimationElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGAnimationElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGCircleElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGCircleElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGCircleElementConstructorGetter>(state, thisValue, "SVGCircleElement");
}

static inline JSValue jsDOMWindowSVGCircleElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGCircleElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGClipPathElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGClipPathElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGClipPathElementConstructorGetter>(state, thisValue, "SVGClipPathElement");
}

static inline JSValue jsDOMWindowSVGClipPathElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGClipPathElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGComponentTransferFunctionElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGComponentTransferFunctionElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGComponentTransferFunctionElementConstructorGetter>(state, thisValue, "SVGComponentTransferFunctionElement");
}

static inline JSValue jsDOMWindowSVGComponentTransferFunctionElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGComponentTransferFunctionElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGCursorElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGCursorElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGCursorElementConstructorGetter>(state, thisValue, "SVGCursorElement");
}

static inline JSValue jsDOMWindowSVGCursorElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGCursorElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGDefsElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGDefsElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGDefsElementConstructorGetter>(state, thisValue, "SVGDefsElement");
}

static inline JSValue jsDOMWindowSVGDefsElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGDefsElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGDescElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGDescElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGDescElementConstructorGetter>(state, thisValue, "SVGDescElement");
}

static inline JSValue jsDOMWindowSVGDescElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGDescElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGElementConstructorGetter>(state, thisValue, "SVGElement");
}

static inline JSValue jsDOMWindowSVGElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGEllipseElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGEllipseElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGEllipseElementConstructorGetter>(state, thisValue, "SVGEllipseElement");
}

static inline JSValue jsDOMWindowSVGEllipseElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGEllipseElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGExceptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGExceptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGExceptionConstructorGetter>(state, thisValue, "SVGException");
}

static inline JSValue jsDOMWindowSVGExceptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGException::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEBlendElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEBlendElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEBlendElementConstructorGetter>(state, thisValue, "SVGFEBlendElement");
}

static inline JSValue jsDOMWindowSVGFEBlendElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEBlendElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEColorMatrixElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEColorMatrixElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEColorMatrixElementConstructorGetter>(state, thisValue, "SVGFEColorMatrixElement");
}

static inline JSValue jsDOMWindowSVGFEColorMatrixElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEColorMatrixElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEComponentTransferElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEComponentTransferElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEComponentTransferElementConstructorGetter>(state, thisValue, "SVGFEComponentTransferElement");
}

static inline JSValue jsDOMWindowSVGFEComponentTransferElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEComponentTransferElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFECompositeElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFECompositeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFECompositeElementConstructorGetter>(state, thisValue, "SVGFECompositeElement");
}

static inline JSValue jsDOMWindowSVGFECompositeElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFECompositeElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEConvolveMatrixElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEConvolveMatrixElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEConvolveMatrixElementConstructorGetter>(state, thisValue, "SVGFEConvolveMatrixElement");
}

static inline JSValue jsDOMWindowSVGFEConvolveMatrixElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEConvolveMatrixElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEDiffuseLightingElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEDiffuseLightingElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEDiffuseLightingElementConstructorGetter>(state, thisValue, "SVGFEDiffuseLightingElement");
}

static inline JSValue jsDOMWindowSVGFEDiffuseLightingElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEDiffuseLightingElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEDisplacementMapElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEDisplacementMapElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEDisplacementMapElementConstructorGetter>(state, thisValue, "SVGFEDisplacementMapElement");
}

static inline JSValue jsDOMWindowSVGFEDisplacementMapElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEDisplacementMapElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEDistantLightElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEDistantLightElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEDistantLightElementConstructorGetter>(state, thisValue, "SVGFEDistantLightElement");
}

static inline JSValue jsDOMWindowSVGFEDistantLightElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEDistantLightElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEDropShadowElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEDropShadowElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEDropShadowElementConstructorGetter>(state, thisValue, "SVGFEDropShadowElement");
}

static inline JSValue jsDOMWindowSVGFEDropShadowElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEDropShadowElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEFloodElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEFloodElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEFloodElementConstructorGetter>(state, thisValue, "SVGFEFloodElement");
}

static inline JSValue jsDOMWindowSVGFEFloodElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEFloodElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEFuncAElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEFuncAElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEFuncAElementConstructorGetter>(state, thisValue, "SVGFEFuncAElement");
}

static inline JSValue jsDOMWindowSVGFEFuncAElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEFuncAElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEFuncBElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEFuncBElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEFuncBElementConstructorGetter>(state, thisValue, "SVGFEFuncBElement");
}

static inline JSValue jsDOMWindowSVGFEFuncBElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEFuncBElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEFuncGElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEFuncGElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEFuncGElementConstructorGetter>(state, thisValue, "SVGFEFuncGElement");
}

static inline JSValue jsDOMWindowSVGFEFuncGElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEFuncGElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEFuncRElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEFuncRElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEFuncRElementConstructorGetter>(state, thisValue, "SVGFEFuncRElement");
}

static inline JSValue jsDOMWindowSVGFEFuncRElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEFuncRElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEGaussianBlurElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEGaussianBlurElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEGaussianBlurElementConstructorGetter>(state, thisValue, "SVGFEGaussianBlurElement");
}

static inline JSValue jsDOMWindowSVGFEGaussianBlurElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEGaussianBlurElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEImageElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEImageElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEImageElementConstructorGetter>(state, thisValue, "SVGFEImageElement");
}

static inline JSValue jsDOMWindowSVGFEImageElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEImageElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEMergeElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEMergeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEMergeElementConstructorGetter>(state, thisValue, "SVGFEMergeElement");
}

static inline JSValue jsDOMWindowSVGFEMergeElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEMergeElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEMergeNodeElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEMergeNodeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEMergeNodeElementConstructorGetter>(state, thisValue, "SVGFEMergeNodeElement");
}

static inline JSValue jsDOMWindowSVGFEMergeNodeElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEMergeNodeElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEMorphologyElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEMorphologyElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEMorphologyElementConstructorGetter>(state, thisValue, "SVGFEMorphologyElement");
}

static inline JSValue jsDOMWindowSVGFEMorphologyElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEMorphologyElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEOffsetElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEOffsetElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEOffsetElementConstructorGetter>(state, thisValue, "SVGFEOffsetElement");
}

static inline JSValue jsDOMWindowSVGFEOffsetElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEOffsetElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFEPointLightElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFEPointLightElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFEPointLightElementConstructorGetter>(state, thisValue, "SVGFEPointLightElement");
}

static inline JSValue jsDOMWindowSVGFEPointLightElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFEPointLightElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFESpecularLightingElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFESpecularLightingElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFESpecularLightingElementConstructorGetter>(state, thisValue, "SVGFESpecularLightingElement");
}

static inline JSValue jsDOMWindowSVGFESpecularLightingElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFESpecularLightingElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFESpotLightElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFESpotLightElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFESpotLightElementConstructorGetter>(state, thisValue, "SVGFESpotLightElement");
}

static inline JSValue jsDOMWindowSVGFESpotLightElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFESpotLightElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFETileElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFETileElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFETileElementConstructorGetter>(state, thisValue, "SVGFETileElement");
}

static inline JSValue jsDOMWindowSVGFETileElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFETileElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFETurbulenceElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFETurbulenceElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFETurbulenceElementConstructorGetter>(state, thisValue, "SVGFETurbulenceElement");
}

static inline JSValue jsDOMWindowSVGFETurbulenceElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFETurbulenceElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGFilterElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFilterElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFilterElementConstructorGetter>(state, thisValue, "SVGFilterElement");
}

static inline JSValue jsDOMWindowSVGFilterElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFilterElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontElementConstructorGetter>(state, thisValue, "SVGFontElement");
}

static inline JSValue jsDOMWindowSVGFontElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontFaceElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontFaceElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontFaceElementConstructorGetter>(state, thisValue, "SVGFontFaceElement");
}

static inline JSValue jsDOMWindowSVGFontFaceElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontFaceElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontFaceFormatElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontFaceFormatElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontFaceFormatElementConstructorGetter>(state, thisValue, "SVGFontFaceFormatElement");
}

static inline JSValue jsDOMWindowSVGFontFaceFormatElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontFaceFormatElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontFaceNameElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontFaceNameElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontFaceNameElementConstructorGetter>(state, thisValue, "SVGFontFaceNameElement");
}

static inline JSValue jsDOMWindowSVGFontFaceNameElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontFaceNameElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontFaceSrcElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontFaceSrcElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontFaceSrcElementConstructorGetter>(state, thisValue, "SVGFontFaceSrcElement");
}

static inline JSValue jsDOMWindowSVGFontFaceSrcElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontFaceSrcElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGFontFaceUriElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGFontFaceUriElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGFontFaceUriElementConstructorGetter>(state, thisValue, "SVGFontFaceUriElement");
}

static inline JSValue jsDOMWindowSVGFontFaceUriElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGFontFaceUriElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGForeignObjectElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGForeignObjectElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGForeignObjectElementConstructorGetter>(state, thisValue, "SVGForeignObjectElement");
}

static inline JSValue jsDOMWindowSVGForeignObjectElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGForeignObjectElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGGElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGGElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGGElementConstructorGetter>(state, thisValue, "SVGGElement");
}

static inline JSValue jsDOMWindowSVGGElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGGElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGGlyphElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGGlyphElementConstructorGetter>(state, thisValue, "SVGGlyphElement");
}

static inline JSValue jsDOMWindowSVGGlyphElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGGlyphElement::getConstructor(state.vm(), &thisObject);
}

#endif

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGGlyphRefElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGGlyphRefElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGGlyphRefElementConstructorGetter>(state, thisValue, "SVGGlyphRefElement");
}

static inline JSValue jsDOMWindowSVGGlyphRefElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGGlyphRefElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGGradientElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGGradientElementConstructorGetter>(state, thisValue, "SVGGradientElement");
}

static inline JSValue jsDOMWindowSVGGradientElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGGradientElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGGraphicsElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGGraphicsElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGGraphicsElementConstructorGetter>(state, thisValue, "SVGGraphicsElement");
}

static inline JSValue jsDOMWindowSVGGraphicsElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGGraphicsElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGHKernElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGHKernElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGHKernElementConstructorGetter>(state, thisValue, "SVGHKernElement");
}

static inline JSValue jsDOMWindowSVGHKernElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGHKernElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGImageElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGImageElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGImageElementConstructorGetter>(state, thisValue, "SVGImageElement");
}

static inline JSValue jsDOMWindowSVGImageElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGImageElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGLengthConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGLengthConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGLengthConstructorGetter>(state, thisValue, "SVGLength");
}

static inline JSValue jsDOMWindowSVGLengthConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGLength::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGLengthListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGLengthListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGLengthListConstructorGetter>(state, thisValue, "SVGLengthList");
}

static inline JSValue jsDOMWindowSVGLengthListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGLengthList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGLineElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGLineElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGLineElementConstructorGetter>(state, thisValue, "SVGLineElement");
}

static inline JSValue jsDOMWindowSVGLineElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGLineElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGLinearGradientElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGLinearGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGLinearGradientElementConstructorGetter>(state, thisValue, "SVGLinearGradientElement");
}

static inline JSValue jsDOMWindowSVGLinearGradientElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGLinearGradientElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGMPathElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMPathElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMPathElementConstructorGetter>(state, thisValue, "SVGMPathElement");
}

static inline JSValue jsDOMWindowSVGMPathElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMPathElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGMarkerElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMarkerElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMarkerElementConstructorGetter>(state, thisValue, "SVGMarkerElement");
}

static inline JSValue jsDOMWindowSVGMarkerElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMarkerElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGMaskElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMaskElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMaskElementConstructorGetter>(state, thisValue, "SVGMaskElement");
}

static inline JSValue jsDOMWindowSVGMaskElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMaskElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGMatrixConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMatrixConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMatrixConstructorGetter>(state, thisValue, "SVGMatrix");
}

static inline JSValue jsDOMWindowSVGMatrixConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMatrix::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGMetadataElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMetadataElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMetadataElementConstructorGetter>(state, thisValue, "SVGMetadataElement");
}

static inline JSValue jsDOMWindowSVGMetadataElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMetadataElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGMissingGlyphElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGMissingGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGMissingGlyphElementConstructorGetter>(state, thisValue, "SVGMissingGlyphElement");
}

static inline JSValue jsDOMWindowSVGMissingGlyphElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGMissingGlyphElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGNumberConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGNumberConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGNumberConstructorGetter>(state, thisValue, "SVGNumber");
}

static inline JSValue jsDOMWindowSVGNumberConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGNumber::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGNumberListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGNumberListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGNumberListConstructorGetter>(state, thisValue, "SVGNumberList");
}

static inline JSValue jsDOMWindowSVGNumberListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGNumberList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathElementConstructorGetter>(state, thisValue, "SVGPathElement");
}

static inline JSValue jsDOMWindowSVGPathElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegConstructorGetter>(state, thisValue, "SVGPathSeg");
}

static inline JSValue jsDOMWindowSVGPathSegConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSeg::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegArcAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegArcAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegArcAbsConstructorGetter>(state, thisValue, "SVGPathSegArcAbs");
}

static inline JSValue jsDOMWindowSVGPathSegArcAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegArcAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegArcRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegArcRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegArcRelConstructorGetter>(state, thisValue, "SVGPathSegArcRel");
}

static inline JSValue jsDOMWindowSVGPathSegArcRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegArcRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegClosePathConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegClosePathConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegClosePathConstructorGetter>(state, thisValue, "SVGPathSegClosePath");
}

static inline JSValue jsDOMWindowSVGPathSegClosePathConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegClosePath::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoCubicAbsConstructorGetter>(state, thisValue, "SVGPathSegCurvetoCubicAbs");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoCubicRelConstructorGetter>(state, thisValue, "SVGPathSegCurvetoCubicRel");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorGetter>(state, thisValue, "SVGPathSegCurvetoCubicSmoothAbs");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicSmoothAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorGetter>(state, thisValue, "SVGPathSegCurvetoCubicSmoothRel");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoCubicSmoothRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorGetter>(state, thisValue, "SVGPathSegCurvetoQuadraticAbs");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructorGetter>(state, thisValue, "SVGPathSegCurvetoQuadraticRel");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorGetter>(state, thisValue, "SVGPathSegCurvetoQuadraticSmoothAbs");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticSmoothAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorGetter>(state, thisValue, "SVGPathSegCurvetoQuadraticSmoothRel");
}

static inline JSValue jsDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegCurvetoQuadraticSmoothRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoAbsConstructorGetter>(state, thisValue, "SVGPathSegLinetoAbs");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructorGetter>(state, thisValue, "SVGPathSegLinetoHorizontalAbs");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoHorizontalAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoHorizontalAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoHorizontalRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoHorizontalRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoHorizontalRelConstructorGetter>(state, thisValue, "SVGPathSegLinetoHorizontalRel");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoHorizontalRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoHorizontalRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoRelConstructorGetter>(state, thisValue, "SVGPathSegLinetoRel");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoVerticalAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoVerticalAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoVerticalAbsConstructorGetter>(state, thisValue, "SVGPathSegLinetoVerticalAbs");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoVerticalAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoVerticalAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegLinetoVerticalRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegLinetoVerticalRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegLinetoVerticalRelConstructorGetter>(state, thisValue, "SVGPathSegLinetoVerticalRel");
}

static inline JSValue jsDOMWindowSVGPathSegLinetoVerticalRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegLinetoVerticalRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegListConstructorGetter>(state, thisValue, "SVGPathSegList");
}

static inline JSValue jsDOMWindowSVGPathSegListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegMovetoAbsConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegMovetoAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegMovetoAbsConstructorGetter>(state, thisValue, "SVGPathSegMovetoAbs");
}

static inline JSValue jsDOMWindowSVGPathSegMovetoAbsConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegMovetoAbs::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPathSegMovetoRelConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPathSegMovetoRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPathSegMovetoRelConstructorGetter>(state, thisValue, "SVGPathSegMovetoRel");
}

static inline JSValue jsDOMWindowSVGPathSegMovetoRelConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPathSegMovetoRel::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPatternElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPatternElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPatternElementConstructorGetter>(state, thisValue, "SVGPatternElement");
}

static inline JSValue jsDOMWindowSVGPatternElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPatternElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPointConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPointConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPointConstructorGetter>(state, thisValue, "SVGPoint");
}

static inline JSValue jsDOMWindowSVGPointConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPoint::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPointListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPointListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPointListConstructorGetter>(state, thisValue, "SVGPointList");
}

static inline JSValue jsDOMWindowSVGPointListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPointList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPolygonElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPolygonElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPolygonElementConstructorGetter>(state, thisValue, "SVGPolygonElement");
}

static inline JSValue jsDOMWindowSVGPolygonElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPolygonElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPolylineElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPolylineElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPolylineElementConstructorGetter>(state, thisValue, "SVGPolylineElement");
}

static inline JSValue jsDOMWindowSVGPolylineElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPolylineElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGPreserveAspectRatioConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGPreserveAspectRatioConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGPreserveAspectRatioConstructorGetter>(state, thisValue, "SVGPreserveAspectRatio");
}

static inline JSValue jsDOMWindowSVGPreserveAspectRatioConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGPreserveAspectRatio::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGRadialGradientElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGRadialGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGRadialGradientElementConstructorGetter>(state, thisValue, "SVGRadialGradientElement");
}

static inline JSValue jsDOMWindowSVGRadialGradientElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGRadialGradientElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGRectConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGRectConstructorGetter>(state, thisValue, "SVGRect");
}

static inline JSValue jsDOMWindowSVGRectConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGRect::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGRectElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGRectElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGRectElementConstructorGetter>(state, thisValue, "SVGRectElement");
}

static inline JSValue jsDOMWindowSVGRectElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGRectElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGRenderingIntentConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGRenderingIntentConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGRenderingIntentConstructorGetter>(state, thisValue, "SVGRenderingIntent");
}

static inline JSValue jsDOMWindowSVGRenderingIntentConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGRenderingIntent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGSVGElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGSVGElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGSVGElementConstructorGetter>(state, thisValue, "SVGSVGElement");
}

static inline JSValue jsDOMWindowSVGSVGElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGSVGElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGScriptElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGScriptElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGScriptElementConstructorGetter>(state, thisValue, "SVGScriptElement");
}

static inline JSValue jsDOMWindowSVGScriptElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGScriptElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGSetElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGSetElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGSetElementConstructorGetter>(state, thisValue, "SVGSetElement");
}

static inline JSValue jsDOMWindowSVGSetElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGSetElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGStopElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGStopElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGStopElementConstructorGetter>(state, thisValue, "SVGStopElement");
}

static inline JSValue jsDOMWindowSVGStopElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGStopElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGStringListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGStringListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGStringListConstructorGetter>(state, thisValue, "SVGStringList");
}

static inline JSValue jsDOMWindowSVGStringListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGStringList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGStyleElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGStyleElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGStyleElementConstructorGetter>(state, thisValue, "SVGStyleElement");
}

static inline JSValue jsDOMWindowSVGStyleElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGStyleElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGSwitchElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGSwitchElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGSwitchElementConstructorGetter>(state, thisValue, "SVGSwitchElement");
}

static inline JSValue jsDOMWindowSVGSwitchElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGSwitchElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGSymbolElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGSymbolElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGSymbolElementConstructorGetter>(state, thisValue, "SVGSymbolElement");
}

static inline JSValue jsDOMWindowSVGSymbolElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGSymbolElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTRefElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTRefElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTRefElementConstructorGetter>(state, thisValue, "SVGTRefElement");
}

static inline JSValue jsDOMWindowSVGTRefElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTRefElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTSpanElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTSpanElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTSpanElementConstructorGetter>(state, thisValue, "SVGTSpanElement");
}

static inline JSValue jsDOMWindowSVGTSpanElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTSpanElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTextContentElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTextContentElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTextContentElementConstructorGetter>(state, thisValue, "SVGTextContentElement");
}

static inline JSValue jsDOMWindowSVGTextContentElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTextContentElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTextElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTextElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTextElementConstructorGetter>(state, thisValue, "SVGTextElement");
}

static inline JSValue jsDOMWindowSVGTextElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTextElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTextPathElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTextPathElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTextPathElementConstructorGetter>(state, thisValue, "SVGTextPathElement");
}

static inline JSValue jsDOMWindowSVGTextPathElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTextPathElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTextPositioningElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTextPositioningElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTextPositioningElementConstructorGetter>(state, thisValue, "SVGTextPositioningElement");
}

static inline JSValue jsDOMWindowSVGTextPositioningElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTextPositioningElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTitleElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTitleElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTitleElementConstructorGetter>(state, thisValue, "SVGTitleElement");
}

static inline JSValue jsDOMWindowSVGTitleElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTitleElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTransformConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTransformConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTransformConstructorGetter>(state, thisValue, "SVGTransform");
}

static inline JSValue jsDOMWindowSVGTransformConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTransform::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGTransformListConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGTransformListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGTransformListConstructorGetter>(state, thisValue, "SVGTransformList");
}

static inline JSValue jsDOMWindowSVGTransformListConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGTransformList::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGUnitTypesConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGUnitTypesConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGUnitTypesConstructorGetter>(state, thisValue, "SVGUnitTypes");
}

static inline JSValue jsDOMWindowSVGUnitTypesConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGUnitTypes::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGUseElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGUseElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGUseElementConstructorGetter>(state, thisValue, "SVGUseElement");
}

static inline JSValue jsDOMWindowSVGUseElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGUseElement::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(SVG_FONTS)
static inline JSValue jsDOMWindowSVGVKernElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGVKernElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGVKernElementConstructorGetter>(state, thisValue, "SVGVKernElement");
}

static inline JSValue jsDOMWindowSVGVKernElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGVKernElement::getConstructor(state.vm(), &thisObject);
}

#endif

static inline JSValue jsDOMWindowSVGViewElementConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGViewElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGViewElementConstructorGetter>(state, thisValue, "SVGViewElement");
}

static inline JSValue jsDOMWindowSVGViewElementConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGViewElement::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGViewSpecConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGViewSpecConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGViewSpecConstructorGetter>(state, thisValue, "SVGViewSpec");
}

static inline JSValue jsDOMWindowSVGViewSpecConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGViewSpec::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowSVGZoomEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowSVGZoomEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowSVGZoomEventConstructorGetter>(state, thisValue, "SVGZoomEvent");
}

static inline JSValue jsDOMWindowSVGZoomEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSSVGZoomEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowWorkerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowWorkerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowWorkerConstructorGetter>(state, thisValue, "Worker");
}

static inline JSValue jsDOMWindowWorkerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSWorker::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowDOMParserConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowDOMParserConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowDOMParserConstructorGetter>(state, thisValue, "DOMParser");
}

static inline JSValue jsDOMWindowDOMParserConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSDOMParser::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLHttpRequestConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLHttpRequestConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLHttpRequestConstructorGetter>(state, thisValue, "XMLHttpRequest");
}

static inline JSValue jsDOMWindowXMLHttpRequestConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLHttpRequest::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLHttpRequestEventTargetConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLHttpRequestEventTargetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLHttpRequestEventTargetConstructorGetter>(state, thisValue, "XMLHttpRequestEventTarget");
}

static inline JSValue jsDOMWindowXMLHttpRequestEventTargetConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLHttpRequestEventTarget::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLHttpRequestProgressEventConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLHttpRequestProgressEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLHttpRequestProgressEventConstructorGetter>(state, thisValue, "XMLHttpRequestProgressEvent");
}

static inline JSValue jsDOMWindowXMLHttpRequestProgressEventConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLHttpRequestProgressEvent::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLHttpRequestUploadConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLHttpRequestUploadConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLHttpRequestUploadConstructorGetter>(state, thisValue, "XMLHttpRequestUpload");
}

static inline JSValue jsDOMWindowXMLHttpRequestUploadConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLHttpRequestUpload::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXMLSerializerConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXMLSerializerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXMLSerializerConstructorGetter>(state, thisValue, "XMLSerializer");
}

static inline JSValue jsDOMWindowXMLSerializerConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXMLSerializer::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXPathEvaluatorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXPathEvaluatorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXPathEvaluatorConstructorGetter>(state, thisValue, "XPathEvaluator");
}

static inline JSValue jsDOMWindowXPathEvaluatorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXPathEvaluator::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXPathExceptionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXPathExceptionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXPathExceptionConstructorGetter>(state, thisValue, "XPathException");
}

static inline JSValue jsDOMWindowXPathExceptionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXPathException::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXPathExpressionConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXPathExpressionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXPathExpressionConstructorGetter>(state, thisValue, "XPathExpression");
}

static inline JSValue jsDOMWindowXPathExpressionConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXPathExpression::getConstructor(state.vm(), &thisObject);
}

static inline JSValue jsDOMWindowXPathResultConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXPathResultConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXPathResultConstructorGetter>(state, thisValue, "XPathResult");
}

static inline JSValue jsDOMWindowXPathResultConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXPathResult::getConstructor(state.vm(), &thisObject);
}

#if ENABLE(XSLT)
static inline JSValue jsDOMWindowXSLTProcessorConstructorGetter(ExecState&, JSDOMWindow&, ThrowScope& throwScope);

EncodedJSValue jsDOMWindowXSLTProcessorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMWindow>::attribute<jsDOMWindowXSLTProcessorConstructorGetter>(state, thisValue, "XSLTProcessor");
}

static inline JSValue jsDOMWindowXSLTProcessorConstructorGetter(ExecState& state, JSDOMWindow& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return jsUndefined();
    return JSXSLTProcessor::getConstructor(state.vm(), &thisObject);
}

#endif

EncodedJSValue jsDOMWindowConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMWindowPrototype* domObject = jsDynamicDowncast<JSDOMWindowPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMWindow::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMWindowConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMWindowPrototype* domObject = jsDynamicDowncast<JSDOMWindowPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSDOMWindowScreenFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreen(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenFunction>(state, thisValue, encodedValue, "screen");
}

static inline bool setJSDOMWindowScreenFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "screen"), value);
}


static inline bool setJSDOMWindowLocationbarFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowLocationbar(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowLocationbarFunction>(state, thisValue, encodedValue, "locationbar");
}

static inline bool setJSDOMWindowLocationbarFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "locationbar"), value);
}


static inline bool setJSDOMWindowMenubarFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMenubar(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMenubarFunction>(state, thisValue, encodedValue, "menubar");
}

static inline bool setJSDOMWindowMenubarFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "menubar"), value);
}


static inline bool setJSDOMWindowPersonalbarFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPersonalbar(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPersonalbarFunction>(state, thisValue, encodedValue, "personalbar");
}

static inline bool setJSDOMWindowPersonalbarFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "personalbar"), value);
}


static inline bool setJSDOMWindowScrollbarsFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScrollbars(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScrollbarsFunction>(state, thisValue, encodedValue, "scrollbars");
}

static inline bool setJSDOMWindowScrollbarsFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "scrollbars"), value);
}


static inline bool setJSDOMWindowStatusbarFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStatusbar(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStatusbarFunction>(state, thisValue, encodedValue, "statusbar");
}

static inline bool setJSDOMWindowStatusbarFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "statusbar"), value);
}


static inline bool setJSDOMWindowToolbarFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowToolbar(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowToolbarFunction>(state, thisValue, encodedValue, "toolbar");
}

static inline bool setJSDOMWindowToolbarFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "toolbar"), value);
}


static inline bool setJSDOMWindowClientInformationFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowClientInformation(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowClientInformationFunction>(state, thisValue, encodedValue, "clientInformation");
}

static inline bool setJSDOMWindowClientInformationFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "clientInformation"), value);
}


static inline bool setJSDOMWindowLocationFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowLocation(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowLocationFunction>(state, thisValue, encodedValue, "location");
}

static inline bool setJSDOMWindowLocationFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    thisObject.setLocation(state, value);
    return true;
}


static inline bool setJSDOMWindowEventFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowEvent(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowEventFunction>(state, thisValue, encodedValue, "event");
}

static inline bool setJSDOMWindowEventFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "event"), value);
}


static inline bool setJSDOMWindowOffscreenBufferingFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOffscreenBuffering(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOffscreenBufferingFunction>(state, thisValue, encodedValue, "offscreenBuffering");
}

static inline bool setJSDOMWindowOffscreenBufferingFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "offscreenBuffering"), value);
}


static inline bool setJSDOMWindowOuterHeightFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOuterHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOuterHeightFunction>(state, thisValue, encodedValue, "outerHeight");
}

static inline bool setJSDOMWindowOuterHeightFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "outerHeight"), value);
}


static inline bool setJSDOMWindowOuterWidthFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOuterWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOuterWidthFunction>(state, thisValue, encodedValue, "outerWidth");
}

static inline bool setJSDOMWindowOuterWidthFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "outerWidth"), value);
}


static inline bool setJSDOMWindowInnerHeightFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowInnerHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowInnerHeightFunction>(state, thisValue, encodedValue, "innerHeight");
}

static inline bool setJSDOMWindowInnerHeightFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "innerHeight"), value);
}


static inline bool setJSDOMWindowInnerWidthFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowInnerWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowInnerWidthFunction>(state, thisValue, encodedValue, "innerWidth");
}

static inline bool setJSDOMWindowInnerWidthFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "innerWidth"), value);
}


static inline bool setJSDOMWindowScreenXFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreenX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenXFunction>(state, thisValue, encodedValue, "screenX");
}

static inline bool setJSDOMWindowScreenXFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "screenX"), value);
}


static inline bool setJSDOMWindowScreenYFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreenY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenYFunction>(state, thisValue, encodedValue, "screenY");
}

static inline bool setJSDOMWindowScreenYFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "screenY"), value);
}


static inline bool setJSDOMWindowScreenLeftFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreenLeft(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenLeftFunction>(state, thisValue, encodedValue, "screenLeft");
}

static inline bool setJSDOMWindowScreenLeftFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "screenLeft"), value);
}


static inline bool setJSDOMWindowScreenTopFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreenTop(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenTopFunction>(state, thisValue, encodedValue, "screenTop");
}

static inline bool setJSDOMWindowScreenTopFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "screenTop"), value);
}


static inline bool setJSDOMWindowScrollXFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScrollX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScrollXFunction>(state, thisValue, encodedValue, "scrollX");
}

static inline bool setJSDOMWindowScrollXFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "scrollX"), value);
}


static inline bool setJSDOMWindowScrollYFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScrollY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScrollYFunction>(state, thisValue, encodedValue, "scrollY");
}

static inline bool setJSDOMWindowScrollYFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "scrollY"), value);
}


static inline bool setJSDOMWindowPageXOffsetFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPageXOffset(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPageXOffsetFunction>(state, thisValue, encodedValue, "pageXOffset");
}

static inline bool setJSDOMWindowPageXOffsetFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "pageXOffset"), value);
}


static inline bool setJSDOMWindowPageYOffsetFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPageYOffset(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPageYOffsetFunction>(state, thisValue, encodedValue, "pageYOffset");
}

static inline bool setJSDOMWindowPageYOffsetFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "pageYOffset"), value);
}


static inline bool setJSDOMWindowLengthFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowLengthFunction>(state, thisValue, encodedValue, "length");
}

static inline bool setJSDOMWindowLengthFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "length"), value);
}


static inline bool setJSDOMWindowNameFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSDOMWindowNameFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setName(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMWindowStatusFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStatus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStatusFunction>(state, thisValue, encodedValue, "status");
}

static inline bool setJSDOMWindowStatusFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setStatus(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMWindowDefaultStatusFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDefaultStatus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDefaultStatusFunction>(state, thisValue, encodedValue, "defaultStatus");
}

static inline bool setJSDOMWindowDefaultStatusFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDefaultStatus(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMWindowDefaultstatusFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDefaultstatus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDefaultstatusFunction>(state, thisValue, encodedValue, "defaultstatus");
}

static inline bool setJSDOMWindowDefaultstatusFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDefaultStatus(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDOMWindowSelfFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSelf(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSelfFunction>(state, thisValue, encodedValue, "self");
}

static inline bool setJSDOMWindowSelfFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "self"), value);
}


static inline bool setJSDOMWindowFramesFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFrames(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFramesFunction>(state, thisValue, encodedValue, "frames");
}

static inline bool setJSDOMWindowFramesFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "frames"), value);
}


static inline bool setJSDOMWindowOpenerFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOpener(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOpenerFunction>(state, thisValue, encodedValue, "opener");
}

static inline bool setJSDOMWindowOpenerFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "opener"), value);
}


static inline bool setJSDOMWindowParentFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowParent(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowParentFunction>(state, thisValue, encodedValue, "parent");
}

static inline bool setJSDOMWindowParentFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "parent"), value);
}


static inline bool setJSDOMWindowDevicePixelRatioFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDevicePixelRatio(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDevicePixelRatioFunction>(state, thisValue, encodedValue, "devicePixelRatio");
}

static inline bool setJSDOMWindowDevicePixelRatioFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "devicePixelRatio"), value);
}


#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformance(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceFunction>(state, thisValue, encodedValue, "performance");
}

static inline bool setJSDOMWindowPerformanceFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in property.
    return replaceStaticPropertySlot(state.vm(), &thisObject, Identifier::fromString(&state, "performance"), value);
}

#endif

static inline bool setJSDOMWindowSVGDocumentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGDocumentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGDocumentConstructorFunction>(state, thisValue, encodedValue, "SVGDocument");
}

static inline bool setJSDOMWindowSVGDocumentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGDocument"), value);
}


static inline bool setJSDOMWindowWebkitURLConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebkitURLConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebkitURLConstructorFunction>(state, thisValue, encodedValue, "webkitURL");
}

static inline bool setJSDOMWindowWebkitURLConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "webkitURL"), value);
}


static inline bool setJSDOMWindowWebKitMutationObserverConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitMutationObserverConstructorFunction>(state, thisValue, encodedValue, "WebKitMutationObserver");
}

static inline bool setJSDOMWindowWebKitMutationObserverConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitMutationObserver"), value);
}


static inline bool setJSDOMWindowOnanimationendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnanimationend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnanimationendFunction>(state, thisValue, encodedValue, "onanimationend");
}

static inline bool setJSDOMWindowOnanimationendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().animationendEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnanimationiterationFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnanimationiteration(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnanimationiterationFunction>(state, thisValue, encodedValue, "onanimationiteration");
}

static inline bool setJSDOMWindowOnanimationiterationFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().animationiterationEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnanimationstartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnanimationstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnanimationstartFunction>(state, thisValue, encodedValue, "onanimationstart");
}

static inline bool setJSDOMWindowOnanimationstartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().animationstartEvent, value);
    return true;
}


static inline bool setJSDOMWindowOntransitionendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntransitionend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntransitionendFunction>(state, thisValue, encodedValue, "ontransitionend");
}

static inline bool setJSDOMWindowOntransitionendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().transitionendEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwebkitanimationendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitanimationend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitanimationendFunction>(state, thisValue, encodedValue, "onwebkitanimationend");
}

static inline bool setJSDOMWindowOnwebkitanimationendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitAnimationEndEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwebkitanimationiterationFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitanimationiteration(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitanimationiterationFunction>(state, thisValue, encodedValue, "onwebkitanimationiteration");
}

static inline bool setJSDOMWindowOnwebkitanimationiterationFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitAnimationIterationEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwebkitanimationstartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitanimationstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitanimationstartFunction>(state, thisValue, encodedValue, "onwebkitanimationstart");
}

static inline bool setJSDOMWindowOnwebkitanimationstartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitAnimationStartEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwebkittransitionendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkittransitionend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkittransitionendFunction>(state, thisValue, encodedValue, "onwebkittransitionend");
}

static inline bool setJSDOMWindowOnwebkittransitionendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitTransitionEndEvent, value);
    return true;
}


#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindowOngesturechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOngesturechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOngesturechangeFunction>(state, thisValue, encodedValue, "ongesturechange");
}

static inline bool setJSDOMWindowOngesturechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().gesturechangeEvent, value);
    return true;
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindowOngestureendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOngestureend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOngestureendFunction>(state, thisValue, encodedValue, "ongestureend");
}

static inline bool setJSDOMWindowOngestureendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().gestureendEvent, value);
    return true;
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
static inline bool setJSDOMWindowOngesturestartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOngesturestart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOngesturestartFunction>(state, thisValue, encodedValue, "ongesturestart");
}

static inline bool setJSDOMWindowOngesturestartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().gesturestartEvent, value);
    return true;
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindowOndevicemotionFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndevicemotion(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndevicemotionFunction>(state, thisValue, encodedValue, "ondevicemotion");
}

static inline bool setJSDOMWindowOndevicemotionFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().devicemotionEvent, value);
    return true;
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindowOndeviceorientationFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndeviceorientation(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndeviceorientationFunction>(state, thisValue, encodedValue, "ondeviceorientation");
}

static inline bool setJSDOMWindowOndeviceorientationFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().deviceorientationEvent, value);
    return true;
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
static inline bool setJSDOMWindowOnwebkitdeviceproximityFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitdeviceproximity(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitdeviceproximityFunction>(state, thisValue, encodedValue, "onwebkitdeviceproximity");
}

static inline bool setJSDOMWindowOnwebkitdeviceproximityFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitdeviceproximityEvent, value);
    return true;
}

#endif

static inline bool setJSDOMWindowOnabortFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnabort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnabortFunction>(state, thisValue, encodedValue, "onabort");
}

static inline bool setJSDOMWindowOnabortFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().abortEvent, value);
    return true;
}


#if ENABLE(REQUEST_AUTOCOMPLETE)
static inline bool setJSDOMWindowOnautocompleteFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnautocomplete(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnautocompleteFunction>(state, thisValue, encodedValue, "onautocomplete");
}

static inline bool setJSDOMWindowOnautocompleteFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().autocompleteEvent, value);
    return true;
}

#endif

#if ENABLE(REQUEST_AUTOCOMPLETE)
static inline bool setJSDOMWindowOnautocompleteerrorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnautocompleteerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnautocompleteerrorFunction>(state, thisValue, encodedValue, "onautocompleteerror");
}

static inline bool setJSDOMWindowOnautocompleteerrorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().autocompleteerrorEvent, value);
    return true;
}

#endif

static inline bool setJSDOMWindowOnblurFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnblur(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnblurFunction>(state, thisValue, encodedValue, "onblur");
}

static inline bool setJSDOMWindowOnblurFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().blurEvent, value);
    return true;
}


static inline bool setJSDOMWindowOncanplayFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOncanplay(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOncanplayFunction>(state, thisValue, encodedValue, "oncanplay");
}

static inline bool setJSDOMWindowOncanplayFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().canplayEvent, value);
    return true;
}


static inline bool setJSDOMWindowOncanplaythroughFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOncanplaythrough(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOncanplaythroughFunction>(state, thisValue, encodedValue, "oncanplaythrough");
}

static inline bool setJSDOMWindowOncanplaythroughFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().canplaythroughEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnchangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnchangeFunction>(state, thisValue, encodedValue, "onchange");
}

static inline bool setJSDOMWindowOnchangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().changeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnclickFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnclick(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnclickFunction>(state, thisValue, encodedValue, "onclick");
}

static inline bool setJSDOMWindowOnclickFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().clickEvent, value);
    return true;
}


static inline bool setJSDOMWindowOncontextmenuFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOncontextmenu(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOncontextmenuFunction>(state, thisValue, encodedValue, "oncontextmenu");
}

static inline bool setJSDOMWindowOncontextmenuFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().contextmenuEvent, value);
    return true;
}


static inline bool setJSDOMWindowOncuechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOncuechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOncuechangeFunction>(state, thisValue, encodedValue, "oncuechange");
}

static inline bool setJSDOMWindowOncuechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().cuechangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndblclickFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndblclick(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndblclickFunction>(state, thisValue, encodedValue, "ondblclick");
}

static inline bool setJSDOMWindowOndblclickFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dblclickEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndrag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragFunction>(state, thisValue, encodedValue, "ondrag");
}

static inline bool setJSDOMWindowOndragFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndragend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragendFunction>(state, thisValue, encodedValue, "ondragend");
}

static inline bool setJSDOMWindowOndragendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragendEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragenterFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndragenter(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragenterFunction>(state, thisValue, encodedValue, "ondragenter");
}

static inline bool setJSDOMWindowOndragenterFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragenterEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragleaveFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndragleave(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragleaveFunction>(state, thisValue, encodedValue, "ondragleave");
}

static inline bool setJSDOMWindowOndragleaveFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragleaveEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragoverFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndragover(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragoverFunction>(state, thisValue, encodedValue, "ondragover");
}

static inline bool setJSDOMWindowOndragoverFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragoverEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndragstartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndragstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndragstartFunction>(state, thisValue, encodedValue, "ondragstart");
}

static inline bool setJSDOMWindowOndragstartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dragstartEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndropFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndrop(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndropFunction>(state, thisValue, encodedValue, "ondrop");
}

static inline bool setJSDOMWindowOndropFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().dropEvent, value);
    return true;
}


static inline bool setJSDOMWindowOndurationchangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOndurationchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOndurationchangeFunction>(state, thisValue, encodedValue, "ondurationchange");
}

static inline bool setJSDOMWindowOndurationchangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().durationchangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnemptiedFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnemptied(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnemptiedFunction>(state, thisValue, encodedValue, "onemptied");
}

static inline bool setJSDOMWindowOnemptiedFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().emptiedEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnendedFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnended(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnendedFunction>(state, thisValue, encodedValue, "onended");
}

static inline bool setJSDOMWindowOnendedFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().endedEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnerrorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSDOMWindowOnerrorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    thisObject.wrapped().setAttributeEventListener(eventNames().errorEvent, createJSErrorHandler(&state, value, &thisObject));
    return true;
}


static inline bool setJSDOMWindowOnfocusFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnfocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnfocusFunction>(state, thisValue, encodedValue, "onfocus");
}

static inline bool setJSDOMWindowOnfocusFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().focusEvent, value);
    return true;
}


static inline bool setJSDOMWindowOninputFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOninput(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOninputFunction>(state, thisValue, encodedValue, "oninput");
}

static inline bool setJSDOMWindowOninputFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().inputEvent, value);
    return true;
}


static inline bool setJSDOMWindowOninvalidFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOninvalid(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOninvalidFunction>(state, thisValue, encodedValue, "oninvalid");
}

static inline bool setJSDOMWindowOninvalidFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().invalidEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnkeydownFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnkeydown(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnkeydownFunction>(state, thisValue, encodedValue, "onkeydown");
}

static inline bool setJSDOMWindowOnkeydownFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().keydownEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnkeypressFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnkeypress(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnkeypressFunction>(state, thisValue, encodedValue, "onkeypress");
}

static inline bool setJSDOMWindowOnkeypressFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().keypressEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnkeyupFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnkeyup(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnkeyupFunction>(state, thisValue, encodedValue, "onkeyup");
}

static inline bool setJSDOMWindowOnkeyupFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().keyupEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnloadFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnloadFunction>(state, thisValue, encodedValue, "onload");
}

static inline bool setJSDOMWindowOnloadFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnloadeddataFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnloadeddata(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnloadeddataFunction>(state, thisValue, encodedValue, "onloadeddata");
}

static inline bool setJSDOMWindowOnloadeddataFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadeddataEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnloadedmetadataFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnloadedmetadata(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnloadedmetadataFunction>(state, thisValue, encodedValue, "onloadedmetadata");
}

static inline bool setJSDOMWindowOnloadedmetadataFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadedmetadataEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnloadstartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnloadstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnloadstartFunction>(state, thisValue, encodedValue, "onloadstart");
}

static inline bool setJSDOMWindowOnloadstartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadstartEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmousedownFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmousedown(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmousedownFunction>(state, thisValue, encodedValue, "onmousedown");
}

static inline bool setJSDOMWindowOnmousedownFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mousedownEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmouseenterFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmouseenter(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmouseenterFunction, CastedThisErrorBehavior::ReturnEarly>(state, thisValue, encodedValue, "onmouseenter");
}

static inline bool setJSDOMWindowOnmouseenterFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mouseenterEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmouseleaveFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmouseleave(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmouseleaveFunction, CastedThisErrorBehavior::ReturnEarly>(state, thisValue, encodedValue, "onmouseleave");
}

static inline bool setJSDOMWindowOnmouseleaveFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mouseleaveEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmousemoveFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmousemove(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmousemoveFunction>(state, thisValue, encodedValue, "onmousemove");
}

static inline bool setJSDOMWindowOnmousemoveFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mousemoveEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmouseoutFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmouseout(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmouseoutFunction>(state, thisValue, encodedValue, "onmouseout");
}

static inline bool setJSDOMWindowOnmouseoutFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mouseoutEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmouseoverFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmouseover(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmouseoverFunction>(state, thisValue, encodedValue, "onmouseover");
}

static inline bool setJSDOMWindowOnmouseoverFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mouseoverEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmouseupFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmouseup(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmouseupFunction>(state, thisValue, encodedValue, "onmouseup");
}

static inline bool setJSDOMWindowOnmouseupFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mouseupEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmousewheelFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmousewheel(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmousewheelFunction>(state, thisValue, encodedValue, "onmousewheel");
}

static inline bool setJSDOMWindowOnmousewheelFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().mousewheelEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnpauseFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnpause(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnpauseFunction>(state, thisValue, encodedValue, "onpause");
}

static inline bool setJSDOMWindowOnpauseFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pauseEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnplayFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnplay(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnplayFunction>(state, thisValue, encodedValue, "onplay");
}

static inline bool setJSDOMWindowOnplayFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().playEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnplayingFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnplaying(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnplayingFunction>(state, thisValue, encodedValue, "onplaying");
}

static inline bool setJSDOMWindowOnplayingFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().playingEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnprogressFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnprogress(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnprogressFunction>(state, thisValue, encodedValue, "onprogress");
}

static inline bool setJSDOMWindowOnprogressFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().progressEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnratechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnratechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnratechangeFunction>(state, thisValue, encodedValue, "onratechange");
}

static inline bool setJSDOMWindowOnratechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().ratechangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnresetFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnreset(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnresetFunction>(state, thisValue, encodedValue, "onreset");
}

static inline bool setJSDOMWindowOnresetFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().resetEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnresizeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnresize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnresizeFunction>(state, thisValue, encodedValue, "onresize");
}

static inline bool setJSDOMWindowOnresizeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().resizeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnscrollFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnscroll(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnscrollFunction>(state, thisValue, encodedValue, "onscroll");
}

static inline bool setJSDOMWindowOnscrollFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().scrollEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnseekedFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnseeked(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnseekedFunction>(state, thisValue, encodedValue, "onseeked");
}

static inline bool setJSDOMWindowOnseekedFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().seekedEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnseekingFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnseeking(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnseekingFunction>(state, thisValue, encodedValue, "onseeking");
}

static inline bool setJSDOMWindowOnseekingFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().seekingEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnselectFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnselect(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnselectFunction>(state, thisValue, encodedValue, "onselect");
}

static inline bool setJSDOMWindowOnselectFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().selectEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnstalledFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnstalled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnstalledFunction>(state, thisValue, encodedValue, "onstalled");
}

static inline bool setJSDOMWindowOnstalledFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().stalledEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnsubmitFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnsubmit(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnsubmitFunction>(state, thisValue, encodedValue, "onsubmit");
}

static inline bool setJSDOMWindowOnsubmitFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().submitEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnsuspendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnsuspend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnsuspendFunction>(state, thisValue, encodedValue, "onsuspend");
}

static inline bool setJSDOMWindowOnsuspendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().suspendEvent, value);
    return true;
}


static inline bool setJSDOMWindowOntimeupdateFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntimeupdate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntimeupdateFunction>(state, thisValue, encodedValue, "ontimeupdate");
}

static inline bool setJSDOMWindowOntimeupdateFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().timeupdateEvent, value);
    return true;
}


static inline bool setJSDOMWindowOntoggleFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntoggle(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntoggleFunction>(state, thisValue, encodedValue, "ontoggle");
}

static inline bool setJSDOMWindowOntoggleFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().toggleEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnvolumechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnvolumechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnvolumechangeFunction>(state, thisValue, encodedValue, "onvolumechange");
}

static inline bool setJSDOMWindowOnvolumechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().volumechangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwaitingFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwaiting(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwaitingFunction>(state, thisValue, encodedValue, "onwaiting");
}

static inline bool setJSDOMWindowOnwaitingFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().waitingEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnsearchFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnsearch(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnsearchFunction>(state, thisValue, encodedValue, "onsearch");
}

static inline bool setJSDOMWindowOnsearchFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().searchEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnwheelFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwheel(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwheelFunction>(state, thisValue, encodedValue, "onwheel");
}

static inline bool setJSDOMWindowOnwheelFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().wheelEvent, value);
    return true;
}


#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowOntouchcancelFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntouchcancel(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntouchcancelFunction>(state, thisValue, encodedValue, "ontouchcancel");
}

static inline bool setJSDOMWindowOntouchcancelFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().touchcancelEvent, value);
    return true;
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowOntouchendFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntouchend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntouchendFunction>(state, thisValue, encodedValue, "ontouchend");
}

static inline bool setJSDOMWindowOntouchendFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().touchendEvent, value);
    return true;
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowOntouchmoveFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntouchmove(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntouchmoveFunction>(state, thisValue, encodedValue, "ontouchmove");
}

static inline bool setJSDOMWindowOntouchmoveFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().touchmoveEvent, value);
    return true;
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowOntouchstartFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntouchstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntouchstartFunction>(state, thisValue, encodedValue, "ontouchstart");
}

static inline bool setJSDOMWindowOntouchstartFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().touchstartEvent, value);
    return true;
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowOntouchforcechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOntouchforcechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOntouchforcechangeFunction>(state, thisValue, encodedValue, "ontouchforcechange");
}

static inline bool setJSDOMWindowOntouchforcechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().touchforcechangeEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSDOMWindowOnwebkitmouseforcechangedFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitmouseforcechanged(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitmouseforcechangedFunction>(state, thisValue, encodedValue, "onwebkitmouseforcechanged");
}

static inline bool setJSDOMWindowOnwebkitmouseforcechangedFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcechangedEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSDOMWindowOnwebkitmouseforcedownFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitmouseforcedown(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitmouseforcedownFunction>(state, thisValue, encodedValue, "onwebkitmouseforcedown");
}

static inline bool setJSDOMWindowOnwebkitmouseforcedownFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcedownEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSDOMWindowOnwebkitmouseforcewillbeginFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitmouseforcewillbegin(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitmouseforcewillbeginFunction>(state, thisValue, encodedValue, "onwebkitmouseforcewillbegin");
}

static inline bool setJSDOMWindowOnwebkitmouseforcewillbeginFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcewillbeginEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSDOMWindowOnwebkitmouseforceupFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitmouseforceup(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitmouseforceupFunction>(state, thisValue, encodedValue, "onwebkitmouseforceup");
}

static inline bool setJSDOMWindowOnwebkitmouseforceupFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforceupEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSDOMWindowOnwebkitwillrevealbottomFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitwillrevealbottom(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitwillrevealbottomFunction>(state, thisValue, encodedValue, "onwebkitwillrevealbottom");
}

static inline bool setJSDOMWindowOnwebkitwillrevealbottomFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealbottomEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSDOMWindowOnwebkitwillrevealleftFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitwillrevealleft(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitwillrevealleftFunction>(state, thisValue, encodedValue, "onwebkitwillrevealleft");
}

static inline bool setJSDOMWindowOnwebkitwillrevealleftFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealleftEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSDOMWindowOnwebkitwillrevealrightFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitwillrevealright(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitwillrevealrightFunction>(state, thisValue, encodedValue, "onwebkitwillrevealright");
}

static inline bool setJSDOMWindowOnwebkitwillrevealrightFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealrightEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSDOMWindowOnwebkitwillrevealtopFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnwebkitwillrevealtop(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnwebkitwillrevealtopFunction>(state, thisValue, encodedValue, "onwebkitwillrevealtop");
}

static inline bool setJSDOMWindowOnwebkitwillrevealtopFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealtopEvent, value);
    return true;
}

#endif

static inline bool setJSDOMWindowOnbeforeunloadFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnbeforeunload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnbeforeunloadFunction>(state, thisValue, encodedValue, "onbeforeunload");
}

static inline bool setJSDOMWindowOnbeforeunloadFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().beforeunloadEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnhashchangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnhashchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnhashchangeFunction>(state, thisValue, encodedValue, "onhashchange");
}

static inline bool setJSDOMWindowOnhashchangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().hashchangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnlanguagechangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnlanguagechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnlanguagechangeFunction>(state, thisValue, encodedValue, "onlanguagechange");
}

static inline bool setJSDOMWindowOnlanguagechangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().languagechangeEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnmessageFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnmessage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnmessageFunction>(state, thisValue, encodedValue, "onmessage");
}

static inline bool setJSDOMWindowOnmessageFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().messageEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnofflineFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnoffline(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnofflineFunction>(state, thisValue, encodedValue, "onoffline");
}

static inline bool setJSDOMWindowOnofflineFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().offlineEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnonlineFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnonline(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnonlineFunction>(state, thisValue, encodedValue, "ononline");
}

static inline bool setJSDOMWindowOnonlineFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().onlineEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnpagehideFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnpagehide(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnpagehideFunction>(state, thisValue, encodedValue, "onpagehide");
}

static inline bool setJSDOMWindowOnpagehideFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pagehideEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnpageshowFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnpageshow(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnpageshowFunction>(state, thisValue, encodedValue, "onpageshow");
}

static inline bool setJSDOMWindowOnpageshowFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pageshowEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnpopstateFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnpopstate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnpopstateFunction>(state, thisValue, encodedValue, "onpopstate");
}

static inline bool setJSDOMWindowOnpopstateFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().popstateEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnstorageFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnstorage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnstorageFunction>(state, thisValue, encodedValue, "onstorage");
}

static inline bool setJSDOMWindowOnstorageFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().storageEvent, value);
    return true;
}


static inline bool setJSDOMWindowOnunloadFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnunload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnunloadFunction>(state, thisValue, encodedValue, "onunload");
}

static inline bool setJSDOMWindowOnunloadFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().unloadEvent, value);
    return true;
}


#if ENABLE(ORIENTATION_EVENTS)
static inline bool setJSDOMWindowOnorientationchangeFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOnorientationchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOnorientationchangeFunction>(state, thisValue, encodedValue, "onorientationchange");
}

static inline bool setJSDOMWindowOnorientationchangeFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().orientationchangeEvent, value);
    return true;
}

#endif

#if ENABLE(WIRELESS_PLAYBACK_TARGET)
static inline bool setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorFunction>(state, thisValue, encodedValue, "WebKitPlaybackTargetAvailabilityEvent");
}

static inline bool setJSDOMWindowWebKitPlaybackTargetAvailabilityEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitPlaybackTargetAvailabilityEvent"), value);
}

#endif

#if ENABLE(FETCH_API)
static inline bool setJSDOMWindowHeadersConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHeadersConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHeadersConstructorFunction>(state, thisValue, encodedValue, "Headers");
}

static inline bool setJSDOMWindowHeadersConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Headers"), value);
}

#endif

#if ENABLE(FETCH_API)
static inline bool setJSDOMWindowRequestConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRequestConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRequestConstructorFunction>(state, thisValue, encodedValue, "Request");
}

static inline bool setJSDOMWindowRequestConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Request"), value);
}

#endif

#if ENABLE(FETCH_API)
static inline bool setJSDOMWindowResponseConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowResponseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowResponseConstructorFunction>(state, thisValue, encodedValue, "Response");
}

static inline bool setJSDOMWindowResponseConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Response"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBCursorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBCursorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBCursorConstructorFunction>(state, thisValue, encodedValue, "IDBCursor");
}

static inline bool setJSDOMWindowIDBCursorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBCursor"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBCursorWithValueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBCursorWithValueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBCursorWithValueConstructorFunction>(state, thisValue, encodedValue, "IDBCursorWithValue");
}

static inline bool setJSDOMWindowIDBCursorWithValueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBCursorWithValue"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBDatabaseConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBDatabaseConstructorFunction>(state, thisValue, encodedValue, "IDBDatabase");
}

static inline bool setJSDOMWindowIDBDatabaseConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBDatabase"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBFactoryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBFactoryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBFactoryConstructorFunction>(state, thisValue, encodedValue, "IDBFactory");
}

static inline bool setJSDOMWindowIDBFactoryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBFactory"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBIndexConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBIndexConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBIndexConstructorFunction>(state, thisValue, encodedValue, "IDBIndex");
}

static inline bool setJSDOMWindowIDBIndexConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBIndex"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBKeyRangeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBKeyRangeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBKeyRangeConstructorFunction>(state, thisValue, encodedValue, "IDBKeyRange");
}

static inline bool setJSDOMWindowIDBKeyRangeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBKeyRange"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBObjectStoreConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBObjectStoreConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBObjectStoreConstructorFunction>(state, thisValue, encodedValue, "IDBObjectStore");
}

static inline bool setJSDOMWindowIDBObjectStoreConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBObjectStore"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBOpenDBRequestConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBOpenDBRequestConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBOpenDBRequestConstructorFunction>(state, thisValue, encodedValue, "IDBOpenDBRequest");
}

static inline bool setJSDOMWindowIDBOpenDBRequestConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBOpenDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBRequestConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBRequestConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBRequestConstructorFunction>(state, thisValue, encodedValue, "IDBRequest");
}

static inline bool setJSDOMWindowIDBRequestConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBTransactionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBTransactionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBTransactionConstructorFunction>(state, thisValue, encodedValue, "IDBTransaction");
}

static inline bool setJSDOMWindowIDBTransactionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBTransaction"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
static inline bool setJSDOMWindowIDBVersionChangeEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIDBVersionChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIDBVersionChangeEventConstructorFunction>(state, thisValue, encodedValue, "IDBVersionChangeEvent");
}

static inline bool setJSDOMWindowIDBVersionChangeEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IDBVersionChangeEvent"), value);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline bool setJSDOMWindowMediaRemoteControlsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaRemoteControlsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaRemoteControlsConstructorFunction>(state, thisValue, encodedValue, "MediaRemoteControls");
}

static inline bool setJSDOMWindowMediaRemoteControlsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaRemoteControls"), value);
}

#endif

#if ENABLE(MEDIA_SESSION)
static inline bool setJSDOMWindowMediaSessionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaSessionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaSessionConstructorFunction>(state, thisValue, encodedValue, "MediaSession");
}

static inline bool setJSDOMWindowMediaSessionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaSession"), value);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline bool setJSDOMWindowMediaSourceConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaSourceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaSourceConstructorFunction>(state, thisValue, encodedValue, "MediaSource");
}

static inline bool setJSDOMWindowMediaSourceConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaSource"), value);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline bool setJSDOMWindowSourceBufferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSourceBufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSourceBufferConstructorFunction>(state, thisValue, encodedValue, "SourceBuffer");
}

static inline bool setJSDOMWindowSourceBufferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SourceBuffer"), value);
}

#endif

#if ENABLE(MEDIA_SOURCE)
static inline bool setJSDOMWindowSourceBufferListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSourceBufferListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSourceBufferListConstructorFunction>(state, thisValue, encodedValue, "SourceBufferList");
}

static inline bool setJSDOMWindowSourceBufferListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SourceBufferList"), value);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline bool setJSDOMWindowMediaStreamConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamConstructorFunction>(state, thisValue, encodedValue, "MediaStream");
}

static inline bool setJSDOMWindowMediaStreamConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStream"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowMediaStreamEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamEventConstructorFunction>(state, thisValue, encodedValue, "MediaStreamEvent");
}

static inline bool setJSDOMWindowMediaStreamEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStreamEvent"), value);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline bool setJSDOMWindowMediaStreamTrackConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamTrackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamTrackConstructorFunction>(state, thisValue, encodedValue, "MediaStreamTrack");
}

static inline bool setJSDOMWindowMediaStreamTrackConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStreamTrack"), value);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline bool setJSDOMWindowMediaStreamTrackEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamTrackEventConstructorFunction>(state, thisValue, encodedValue, "MediaStreamTrackEvent");
}

static inline bool setJSDOMWindowMediaStreamTrackEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStreamTrackEvent"), value);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline bool setJSDOMWindowOverconstrainedErrorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOverconstrainedErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOverconstrainedErrorConstructorFunction>(state, thisValue, encodedValue, "OverconstrainedError");
}

static inline bool setJSDOMWindowOverconstrainedErrorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "OverconstrainedError"), value);
}

#endif

#if ENABLE(MEDIA_STREAM)
static inline bool setJSDOMWindowOverconstrainedErrorEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOverconstrainedErrorEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOverconstrainedErrorEventConstructorFunction>(state, thisValue, encodedValue, "OverconstrainedErrorEvent");
}

static inline bool setJSDOMWindowOverconstrainedErrorEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "OverconstrainedErrorEvent"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCDTMFToneChangeEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCDTMFToneChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCDTMFToneChangeEventConstructorFunction>(state, thisValue, encodedValue, "RTCDTMFToneChangeEvent");
}

static inline bool setJSDOMWindowRTCDTMFToneChangeEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCDTMFToneChangeEvent"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCIceCandidateConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCIceCandidateConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCIceCandidateConstructorFunction>(state, thisValue, encodedValue, "RTCIceCandidate");
}

static inline bool setJSDOMWindowRTCIceCandidateConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCIceCandidate"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCPeerConnectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCPeerConnectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCPeerConnectionConstructorFunction>(state, thisValue, encodedValue, "RTCPeerConnection");
}

static inline bool setJSDOMWindowRTCPeerConnectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCPeerConnection"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCRtpReceiverConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCRtpReceiverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCRtpReceiverConstructorFunction>(state, thisValue, encodedValue, "RTCRtpReceiver");
}

static inline bool setJSDOMWindowRTCRtpReceiverConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCRtpReceiver"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCRtpSenderConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCRtpSenderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCRtpSenderConstructorFunction>(state, thisValue, encodedValue, "RTCRtpSender");
}

static inline bool setJSDOMWindowRTCRtpSenderConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCRtpSender"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCRtpTransceiverConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCRtpTransceiverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCRtpTransceiverConstructorFunction>(state, thisValue, encodedValue, "RTCRtpTransceiver");
}

static inline bool setJSDOMWindowRTCRtpTransceiverConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCRtpTransceiver"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCSessionDescriptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCSessionDescriptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCSessionDescriptionConstructorFunction>(state, thisValue, encodedValue, "RTCSessionDescription");
}

static inline bool setJSDOMWindowRTCSessionDescriptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCSessionDescription"), value);
}

#endif

#if ENABLE(WEB_RTC)
static inline bool setJSDOMWindowRTCTrackEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRTCTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRTCTrackEventConstructorFunction>(state, thisValue, encodedValue, "RTCTrackEvent");
}

static inline bool setJSDOMWindowRTCTrackEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RTCTrackEvent"), value);
}

#endif

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
static inline bool setJSDOMWindowNotificationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNotificationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNotificationConstructorFunction>(state, thisValue, encodedValue, "Notification");
}

static inline bool setJSDOMWindowNotificationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Notification"), value);
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
static inline bool setJSDOMWindowDeviceProximityEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDeviceProximityEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDeviceProximityEventConstructorFunction>(state, thisValue, encodedValue, "DeviceProximityEvent");
}

static inline bool setJSDOMWindowDeviceProximityEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DeviceProximityEvent"), value);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline bool setJSDOMWindowSpeechSynthesisEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSpeechSynthesisEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSpeechSynthesisEventConstructorFunction>(state, thisValue, encodedValue, "SpeechSynthesisEvent");
}

static inline bool setJSDOMWindowSpeechSynthesisEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SpeechSynthesisEvent"), value);
}

#endif

#if ENABLE(SPEECH_SYNTHESIS)
static inline bool setJSDOMWindowSpeechSynthesisUtteranceConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSpeechSynthesisUtteranceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSpeechSynthesisUtteranceConstructorFunction>(state, thisValue, encodedValue, "SpeechSynthesisUtterance");
}

static inline bool setJSDOMWindowSpeechSynthesisUtteranceConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SpeechSynthesisUtterance"), value);
}

#endif

#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
static inline bool setJSDOMWindowByteLengthQueuingStrategyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowByteLengthQueuingStrategyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowByteLengthQueuingStrategyConstructorFunction>(state, thisValue, encodedValue, "ByteLengthQueuingStrategy");
}

static inline bool setJSDOMWindowByteLengthQueuingStrategyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ByteLengthQueuingStrategy"), value);
}

#endif

#if ENABLE(READABLE_STREAM_API) || ENABLE(WRITABLE_STREAM_API)
static inline bool setJSDOMWindowCountQueuingStrategyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCountQueuingStrategyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCountQueuingStrategyConstructorFunction>(state, thisValue, encodedValue, "CountQueuingStrategy");
}

static inline bool setJSDOMWindowCountQueuingStrategyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CountQueuingStrategy"), value);
}

#endif

#if ENABLE(READABLE_STREAM_API)
static inline bool setJSDOMWindowReadableStreamConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowReadableStreamConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowReadableStreamConstructorFunction>(state, thisValue, encodedValue, "ReadableStream");
}

static inline bool setJSDOMWindowReadableStreamConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ReadableStream"), value);
}

#endif

#if ENABLE(WRITABLE_STREAM_API)
static inline bool setJSDOMWindowWritableStreamConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWritableStreamConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWritableStreamConstructorFunction>(state, thisValue, encodedValue, "WritableStream");
}

static inline bool setJSDOMWindowWritableStreamConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WritableStream"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAnalyserNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAnalyserNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAnalyserNodeConstructorFunction>(state, thisValue, encodedValue, "AnalyserNode");
}

static inline bool setJSDOMWindowAnalyserNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AnalyserNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioBufferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioBufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioBufferConstructorFunction>(state, thisValue, encodedValue, "AudioBuffer");
}

static inline bool setJSDOMWindowAudioBufferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioBuffer"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioBufferSourceNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioBufferSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioBufferSourceNodeConstructorFunction>(state, thisValue, encodedValue, "AudioBufferSourceNode");
}

static inline bool setJSDOMWindowAudioBufferSourceNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioBufferSourceNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowWebkitAudioContextConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebkitAudioContextConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebkitAudioContextConstructorFunction>(state, thisValue, encodedValue, "webkitAudioContext");
}

static inline bool setJSDOMWindowWebkitAudioContextConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "webkitAudioContext"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioDestinationNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioDestinationNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioDestinationNodeConstructorFunction>(state, thisValue, encodedValue, "AudioDestinationNode");
}

static inline bool setJSDOMWindowAudioDestinationNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioDestinationNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioListenerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioListenerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioListenerConstructorFunction>(state, thisValue, encodedValue, "AudioListener");
}

static inline bool setJSDOMWindowAudioListenerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioListener"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioNodeConstructorFunction>(state, thisValue, encodedValue, "AudioNode");
}

static inline bool setJSDOMWindowAudioNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioParamConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioParamConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioParamConstructorFunction>(state, thisValue, encodedValue, "AudioParam");
}

static inline bool setJSDOMWindowAudioParamConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioParam"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowAudioProcessingEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioProcessingEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioProcessingEventConstructorFunction>(state, thisValue, encodedValue, "AudioProcessingEvent");
}

static inline bool setJSDOMWindowAudioProcessingEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioProcessingEvent"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowBiquadFilterNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowBiquadFilterNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowBiquadFilterNodeConstructorFunction>(state, thisValue, encodedValue, "BiquadFilterNode");
}

static inline bool setJSDOMWindowBiquadFilterNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "BiquadFilterNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowChannelMergerNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowChannelMergerNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowChannelMergerNodeConstructorFunction>(state, thisValue, encodedValue, "ChannelMergerNode");
}

static inline bool setJSDOMWindowChannelMergerNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ChannelMergerNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowChannelSplitterNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowChannelSplitterNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowChannelSplitterNodeConstructorFunction>(state, thisValue, encodedValue, "ChannelSplitterNode");
}

static inline bool setJSDOMWindowChannelSplitterNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ChannelSplitterNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowConvolverNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowConvolverNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowConvolverNodeConstructorFunction>(state, thisValue, encodedValue, "ConvolverNode");
}

static inline bool setJSDOMWindowConvolverNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ConvolverNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowDelayNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDelayNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDelayNodeConstructorFunction>(state, thisValue, encodedValue, "DelayNode");
}

static inline bool setJSDOMWindowDelayNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DelayNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowDynamicsCompressorNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDynamicsCompressorNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDynamicsCompressorNodeConstructorFunction>(state, thisValue, encodedValue, "DynamicsCompressorNode");
}

static inline bool setJSDOMWindowDynamicsCompressorNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DynamicsCompressorNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowGainNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowGainNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowGainNodeConstructorFunction>(state, thisValue, encodedValue, "GainNode");
}

static inline bool setJSDOMWindowGainNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "GainNode"), value);
}

#endif

#if ENABLE(VIDEO) && ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowMediaElementAudioSourceNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaElementAudioSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaElementAudioSourceNodeConstructorFunction>(state, thisValue, encodedValue, "MediaElementAudioSourceNode");
}

static inline bool setJSDOMWindowMediaElementAudioSourceNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaElementAudioSourceNode"), value);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowMediaStreamAudioDestinationNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamAudioDestinationNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamAudioDestinationNodeConstructorFunction>(state, thisValue, encodedValue, "MediaStreamAudioDestinationNode");
}

static inline bool setJSDOMWindowMediaStreamAudioDestinationNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStreamAudioDestinationNode"), value);
}

#endif

#if ENABLE(MEDIA_STREAM) && ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowMediaStreamAudioSourceNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaStreamAudioSourceNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaStreamAudioSourceNodeConstructorFunction>(state, thisValue, encodedValue, "MediaStreamAudioSourceNode");
}

static inline bool setJSDOMWindowMediaStreamAudioSourceNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaStreamAudioSourceNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowOfflineAudioCompletionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOfflineAudioCompletionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOfflineAudioCompletionEventConstructorFunction>(state, thisValue, encodedValue, "OfflineAudioCompletionEvent");
}

static inline bool setJSDOMWindowOfflineAudioCompletionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "OfflineAudioCompletionEvent"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowWebkitOfflineAudioContextConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebkitOfflineAudioContextConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebkitOfflineAudioContextConstructorFunction>(state, thisValue, encodedValue, "webkitOfflineAudioContext");
}

static inline bool setJSDOMWindowWebkitOfflineAudioContextConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "webkitOfflineAudioContext"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowOscillatorNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOscillatorNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOscillatorNodeConstructorFunction>(state, thisValue, encodedValue, "OscillatorNode");
}

static inline bool setJSDOMWindowOscillatorNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "OscillatorNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowWebkitAudioPannerNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebkitAudioPannerNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebkitAudioPannerNodeConstructorFunction>(state, thisValue, encodedValue, "webkitAudioPannerNode");
}

static inline bool setJSDOMWindowWebkitAudioPannerNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "webkitAudioPannerNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowPeriodicWaveConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPeriodicWaveConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPeriodicWaveConstructorFunction>(state, thisValue, encodedValue, "PeriodicWave");
}

static inline bool setJSDOMWindowPeriodicWaveConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PeriodicWave"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowScriptProcessorNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScriptProcessorNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScriptProcessorNodeConstructorFunction>(state, thisValue, encodedValue, "ScriptProcessorNode");
}

static inline bool setJSDOMWindowScriptProcessorNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ScriptProcessorNode"), value);
}

#endif

#if ENABLE(WEB_AUDIO)
static inline bool setJSDOMWindowWaveShaperNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWaveShaperNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWaveShaperNodeConstructorFunction>(state, thisValue, encodedValue, "WaveShaperNode");
}

static inline bool setJSDOMWindowWaveShaperNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WaveShaperNode"), value);
}

#endif

static inline bool setJSDOMWindowDatabaseConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDatabaseConstructorFunction>(state, thisValue, encodedValue, "Database");
}

static inline bool setJSDOMWindowDatabaseConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Database"), value);
}


static inline bool setJSDOMWindowSQLErrorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSQLErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSQLErrorConstructorFunction>(state, thisValue, encodedValue, "SQLError");
}

static inline bool setJSDOMWindowSQLErrorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SQLError"), value);
}


static inline bool setJSDOMWindowSQLExceptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSQLExceptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSQLExceptionConstructorFunction>(state, thisValue, encodedValue, "SQLException");
}

static inline bool setJSDOMWindowSQLExceptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SQLException"), value);
}


static inline bool setJSDOMWindowSQLResultSetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSQLResultSetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSQLResultSetConstructorFunction>(state, thisValue, encodedValue, "SQLResultSet");
}

static inline bool setJSDOMWindowSQLResultSetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SQLResultSet"), value);
}


static inline bool setJSDOMWindowSQLResultSetRowListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSQLResultSetRowListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSQLResultSetRowListConstructorFunction>(state, thisValue, encodedValue, "SQLResultSetRowList");
}

static inline bool setJSDOMWindowSQLResultSetRowListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SQLResultSetRowList"), value);
}


static inline bool setJSDOMWindowSQLTransactionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSQLTransactionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSQLTransactionConstructorFunction>(state, thisValue, encodedValue, "SQLTransaction");
}

static inline bool setJSDOMWindowSQLTransactionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SQLTransaction"), value);
}


static inline bool setJSDOMWindowCloseEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCloseEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCloseEventConstructorFunction>(state, thisValue, encodedValue, "CloseEvent");
}

static inline bool setJSDOMWindowCloseEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CloseEvent"), value);
}


#if ENABLE(WEB_SOCKETS)
static inline bool setJSDOMWindowWebSocketConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebSocketConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebSocketConstructorFunction>(state, thisValue, encodedValue, "WebSocket");
}

static inline bool setJSDOMWindowWebSocketConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebSocket"), value);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline bool setJSDOMWindowAnimationEffectReadOnlyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAnimationEffectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAnimationEffectReadOnlyConstructorFunction>(state, thisValue, encodedValue, "AnimationEffectReadOnly");
}

static inline bool setJSDOMWindowAnimationEffectReadOnlyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AnimationEffectReadOnly"), value);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline bool setJSDOMWindowAnimationTimelineConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAnimationTimelineConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAnimationTimelineConstructorFunction>(state, thisValue, encodedValue, "AnimationTimeline");
}

static inline bool setJSDOMWindowAnimationTimelineConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AnimationTimeline"), value);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline bool setJSDOMWindowDocumentTimelineConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDocumentTimelineConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDocumentTimelineConstructorFunction>(state, thisValue, encodedValue, "DocumentTimeline");
}

static inline bool setJSDOMWindowDocumentTimelineConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DocumentTimeline"), value);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline bool setJSDOMWindowKeyframeEffectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowKeyframeEffectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowKeyframeEffectConstructorFunction>(state, thisValue, encodedValue, "KeyframeEffect");
}

static inline bool setJSDOMWindowKeyframeEffectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "KeyframeEffect"), value);
}

#endif

#if ENABLE(WEB_ANIMATIONS)
static inline bool setJSDOMWindowAnimationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAnimationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAnimationConstructorFunction>(state, thisValue, encodedValue, "Animation");
}

static inline bool setJSDOMWindowAnimationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Animation"), value);
}

#endif

#if ENABLE(SUBTLE_CRYPTO)
static inline bool setJSDOMWindowCryptoKeyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCryptoKeyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCryptoKeyConstructorFunction>(state, thisValue, encodedValue, "CryptoKey");
}

static inline bool setJSDOMWindowCryptoKeyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CryptoKey"), value);
}

#endif

#if ENABLE(SUBTLE_CRYPTO)
static inline bool setJSDOMWindowSubtleCryptoConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSubtleCryptoConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSubtleCryptoConstructorFunction>(state, thisValue, encodedValue, "SubtleCrypto");
}

static inline bool setJSDOMWindowSubtleCryptoConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SubtleCrypto"), value);
}

#endif

#if ENABLE(FONT_LOAD_EVENTS)
static inline bool setJSDOMWindowCSSFontFaceLoadEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSFontFaceLoadEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSFontFaceLoadEventConstructorFunction>(state, thisValue, encodedValue, "CSSFontFaceLoadEvent");
}

static inline bool setJSDOMWindowCSSFontFaceLoadEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSFontFaceLoadEvent"), value);
}

#endif

static inline bool setJSDOMWindowCSSFontFaceRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSFontFaceRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSFontFaceRuleConstructorFunction>(state, thisValue, encodedValue, "CSSFontFaceRule");
}

static inline bool setJSDOMWindowCSSFontFaceRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSFontFaceRule"), value);
}


static inline bool setJSDOMWindowCSSImportRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSImportRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSImportRuleConstructorFunction>(state, thisValue, encodedValue, "CSSImportRule");
}

static inline bool setJSDOMWindowCSSImportRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSImportRule"), value);
}


static inline bool setJSDOMWindowCSSKeyframeRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSKeyframeRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSKeyframeRuleConstructorFunction>(state, thisValue, encodedValue, "CSSKeyframeRule");
}

static inline bool setJSDOMWindowCSSKeyframeRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSKeyframeRule"), value);
}


static inline bool setJSDOMWindowCSSKeyframesRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSKeyframesRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSKeyframesRuleConstructorFunction>(state, thisValue, encodedValue, "CSSKeyframesRule");
}

static inline bool setJSDOMWindowCSSKeyframesRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSKeyframesRule"), value);
}


static inline bool setJSDOMWindowCSSMediaRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSMediaRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSMediaRuleConstructorFunction>(state, thisValue, encodedValue, "CSSMediaRule");
}

static inline bool setJSDOMWindowCSSMediaRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSMediaRule"), value);
}


static inline bool setJSDOMWindowCSSNamespaceRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSNamespaceRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSNamespaceRuleConstructorFunction>(state, thisValue, encodedValue, "CSSNamespaceRule");
}

static inline bool setJSDOMWindowCSSNamespaceRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSNamespaceRule"), value);
}


static inline bool setJSDOMWindowCSSPageRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSPageRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSPageRuleConstructorFunction>(state, thisValue, encodedValue, "CSSPageRule");
}

static inline bool setJSDOMWindowCSSPageRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSPageRule"), value);
}


static inline bool setJSDOMWindowCSSRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSRuleConstructorFunction>(state, thisValue, encodedValue, "CSSRule");
}

static inline bool setJSDOMWindowCSSRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSRule"), value);
}


static inline bool setJSDOMWindowCSSRuleListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSRuleListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSRuleListConstructorFunction>(state, thisValue, encodedValue, "CSSRuleList");
}

static inline bool setJSDOMWindowCSSRuleListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSRuleList"), value);
}


static inline bool setJSDOMWindowCSSStyleDeclarationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSStyleDeclarationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSStyleDeclarationConstructorFunction>(state, thisValue, encodedValue, "CSSStyleDeclaration");
}

static inline bool setJSDOMWindowCSSStyleDeclarationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSStyleDeclaration"), value);
}


static inline bool setJSDOMWindowCSSStyleRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSStyleRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSStyleRuleConstructorFunction>(state, thisValue, encodedValue, "CSSStyleRule");
}

static inline bool setJSDOMWindowCSSStyleRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSStyleRule"), value);
}


static inline bool setJSDOMWindowCSSStyleSheetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSStyleSheetConstructorFunction>(state, thisValue, encodedValue, "CSSStyleSheet");
}

static inline bool setJSDOMWindowCSSStyleSheetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSStyleSheet"), value);
}


static inline bool setJSDOMWindowCSSSupportsRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSSupportsRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSSupportsRuleConstructorFunction>(state, thisValue, encodedValue, "CSSSupportsRule");
}

static inline bool setJSDOMWindowCSSSupportsRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSSupportsRule"), value);
}


static inline bool setJSDOMWindowCSSConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSConstructorFunction>(state, thisValue, encodedValue, "CSS");
}

static inline bool setJSDOMWindowCSSConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSS"), value);
}


static inline bool setJSDOMWindowCounterConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCounterConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCounterConstructorFunction>(state, thisValue, encodedValue, "Counter");
}

static inline bool setJSDOMWindowCounterConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Counter"), value);
}


static inline bool setJSDOMWindowCSSPrimitiveValueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSPrimitiveValueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSPrimitiveValueConstructorFunction>(state, thisValue, encodedValue, "CSSPrimitiveValue");
}

static inline bool setJSDOMWindowCSSPrimitiveValueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSPrimitiveValue"), value);
}


static inline bool setJSDOMWindowRGBColorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRGBColorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRGBColorConstructorFunction>(state, thisValue, encodedValue, "RGBColor");
}

static inline bool setJSDOMWindowRGBColorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RGBColor"), value);
}


static inline bool setJSDOMWindowRectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRectConstructorFunction>(state, thisValue, encodedValue, "Rect");
}

static inline bool setJSDOMWindowRectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Rect"), value);
}


static inline bool setJSDOMWindowCSSValueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSValueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSValueConstructorFunction>(state, thisValue, encodedValue, "CSSValue");
}

static inline bool setJSDOMWindowCSSValueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSValue"), value);
}


static inline bool setJSDOMWindowCSSValueListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCSSValueListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCSSValueListConstructorFunction>(state, thisValue, encodedValue, "CSSValueList");
}

static inline bool setJSDOMWindowCSSValueListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CSSValueList"), value);
}


static inline bool setJSDOMWindowFontFaceConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFontFaceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFontFaceConstructorFunction>(state, thisValue, encodedValue, "FontFace");
}

static inline bool setJSDOMWindowFontFaceConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FontFace"), value);
}


static inline bool setJSDOMWindowFontFaceSetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFontFaceSetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFontFaceSetConstructorFunction>(state, thisValue, encodedValue, "FontFaceSet");
}

static inline bool setJSDOMWindowFontFaceSetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FontFaceSet"), value);
}


static inline bool setJSDOMWindowMediaListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaListConstructorFunction>(state, thisValue, encodedValue, "MediaList");
}

static inline bool setJSDOMWindowMediaListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaList"), value);
}


static inline bool setJSDOMWindowStyleSheetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStyleSheetConstructorFunction>(state, thisValue, encodedValue, "StyleSheet");
}

static inline bool setJSDOMWindowStyleSheetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "StyleSheet"), value);
}


static inline bool setJSDOMWindowStyleSheetListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStyleSheetListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStyleSheetListConstructorFunction>(state, thisValue, encodedValue, "StyleSheetList");
}

static inline bool setJSDOMWindowStyleSheetListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "StyleSheetList"), value);
}


static inline bool setJSDOMWindowWebKitCSSMatrixConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitCSSMatrixConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitCSSMatrixConstructorFunction>(state, thisValue, encodedValue, "WebKitCSSMatrix");
}

static inline bool setJSDOMWindowWebKitCSSMatrixConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitCSSMatrix"), value);
}


#if ENABLE(CSS_REGIONS)
static inline bool setJSDOMWindowWebKitCSSRegionRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitCSSRegionRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitCSSRegionRuleConstructorFunction>(state, thisValue, encodedValue, "WebKitCSSRegionRule");
}

static inline bool setJSDOMWindowWebKitCSSRegionRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitCSSRegionRule"), value);
}

#endif

#if ENABLE(CSS_DEVICE_ADAPTATION)
static inline bool setJSDOMWindowWebKitCSSViewportRuleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitCSSViewportRuleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitCSSViewportRuleConstructorFunction>(state, thisValue, encodedValue, "WebKitCSSViewportRule");
}

static inline bool setJSDOMWindowWebKitCSSViewportRuleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitCSSViewportRule"), value);
}

#endif

static inline bool setJSDOMWindowAnimationEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAnimationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAnimationEventConstructorFunction>(state, thisValue, encodedValue, "AnimationEvent");
}

static inline bool setJSDOMWindowAnimationEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AnimationEvent"), value);
}


static inline bool setJSDOMWindowAttrConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAttrConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAttrConstructorFunction>(state, thisValue, encodedValue, "Attr");
}

static inline bool setJSDOMWindowAttrConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Attr"), value);
}


static inline bool setJSDOMWindowBeforeLoadEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowBeforeLoadEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowBeforeLoadEventConstructorFunction>(state, thisValue, encodedValue, "BeforeLoadEvent");
}

static inline bool setJSDOMWindowBeforeLoadEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "BeforeLoadEvent"), value);
}


static inline bool setJSDOMWindowBeforeUnloadEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowBeforeUnloadEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowBeforeUnloadEventConstructorFunction>(state, thisValue, encodedValue, "BeforeUnloadEvent");
}

static inline bool setJSDOMWindowBeforeUnloadEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "BeforeUnloadEvent"), value);
}


static inline bool setJSDOMWindowCDATASectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCDATASectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCDATASectionConstructorFunction>(state, thisValue, encodedValue, "CDATASection");
}

static inline bool setJSDOMWindowCDATASectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CDATASection"), value);
}


static inline bool setJSDOMWindowCharacterDataConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCharacterDataConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCharacterDataConstructorFunction>(state, thisValue, encodedValue, "CharacterData");
}

static inline bool setJSDOMWindowCharacterDataConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CharacterData"), value);
}


static inline bool setJSDOMWindowClientRectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowClientRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowClientRectConstructorFunction>(state, thisValue, encodedValue, "ClientRect");
}

static inline bool setJSDOMWindowClientRectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ClientRect"), value);
}


static inline bool setJSDOMWindowClientRectListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowClientRectListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowClientRectListConstructorFunction>(state, thisValue, encodedValue, "ClientRectList");
}

static inline bool setJSDOMWindowClientRectListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ClientRectList"), value);
}


static inline bool setJSDOMWindowClipboardEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowClipboardEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowClipboardEventConstructorFunction>(state, thisValue, encodedValue, "ClipboardEvent");
}

static inline bool setJSDOMWindowClipboardEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ClipboardEvent"), value);
}


static inline bool setJSDOMWindowCommentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCommentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCommentConstructorFunction>(state, thisValue, encodedValue, "Comment");
}

static inline bool setJSDOMWindowCommentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Comment"), value);
}


static inline bool setJSDOMWindowCompositionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCompositionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCompositionEventConstructorFunction>(state, thisValue, encodedValue, "CompositionEvent");
}

static inline bool setJSDOMWindowCompositionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CompositionEvent"), value);
}


static inline bool setJSDOMWindowCustomElementRegistryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCustomElementRegistryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCustomElementRegistryConstructorFunction>(state, thisValue, encodedValue, "CustomElementRegistry");
}

static inline bool setJSDOMWindowCustomElementRegistryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CustomElementRegistry"), value);
}


static inline bool setJSDOMWindowCustomEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCustomEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCustomEventConstructorFunction>(state, thisValue, encodedValue, "CustomEvent");
}

static inline bool setJSDOMWindowCustomEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CustomEvent"), value);
}


static inline bool setJSDOMWindowDOMExceptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMExceptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMExceptionConstructorFunction>(state, thisValue, encodedValue, "DOMException");
}

static inline bool setJSDOMWindowDOMExceptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMException"), value);
}


static inline bool setJSDOMWindowDOMImplementationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMImplementationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMImplementationConstructorFunction>(state, thisValue, encodedValue, "DOMImplementation");
}

static inline bool setJSDOMWindowDOMImplementationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMImplementation"), value);
}


static inline bool setJSDOMWindowDOMPointConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMPointConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMPointConstructorFunction>(state, thisValue, encodedValue, "DOMPoint");
}

static inline bool setJSDOMWindowDOMPointConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMPoint"), value);
}


static inline bool setJSDOMWindowDOMPointReadOnlyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMPointReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMPointReadOnlyConstructorFunction>(state, thisValue, encodedValue, "DOMPointReadOnly");
}

static inline bool setJSDOMWindowDOMPointReadOnlyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMPointReadOnly"), value);
}


static inline bool setJSDOMWindowDOMRectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMRectConstructorFunction>(state, thisValue, encodedValue, "DOMRect");
}

static inline bool setJSDOMWindowDOMRectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMRect"), value);
}


static inline bool setJSDOMWindowDOMRectReadOnlyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMRectReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMRectReadOnlyConstructorFunction>(state, thisValue, encodedValue, "DOMRectReadOnly");
}

static inline bool setJSDOMWindowDOMRectReadOnlyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMRectReadOnly"), value);
}


static inline bool setJSDOMWindowDOMStringListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMStringListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMStringListConstructorFunction>(state, thisValue, encodedValue, "DOMStringList");
}

static inline bool setJSDOMWindowDOMStringListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMStringList"), value);
}


static inline bool setJSDOMWindowDOMStringMapConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMStringMapConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMStringMapConstructorFunction>(state, thisValue, encodedValue, "DOMStringMap");
}

static inline bool setJSDOMWindowDOMStringMapConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMStringMap"), value);
}


static inline bool setJSDOMWindowDataTransferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDataTransferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDataTransferConstructorFunction>(state, thisValue, encodedValue, "DataTransfer");
}

static inline bool setJSDOMWindowDataTransferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DataTransfer"), value);
}


#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindowDeviceMotionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDeviceMotionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDeviceMotionEventConstructorFunction>(state, thisValue, encodedValue, "DeviceMotionEvent");
}

static inline bool setJSDOMWindowDeviceMotionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DeviceMotionEvent"), value);
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
static inline bool setJSDOMWindowDeviceOrientationEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDeviceOrientationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDeviceOrientationEventConstructorFunction>(state, thisValue, encodedValue, "DeviceOrientationEvent");
}

static inline bool setJSDOMWindowDeviceOrientationEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DeviceOrientationEvent"), value);
}

#endif

static inline bool setJSDOMWindowDocumentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDocumentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDocumentConstructorFunction>(state, thisValue, encodedValue, "Document");
}

static inline bool setJSDOMWindowDocumentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Document"), value);
}


static inline bool setJSDOMWindowDocumentFragmentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDocumentFragmentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDocumentFragmentConstructorFunction>(state, thisValue, encodedValue, "DocumentFragment");
}

static inline bool setJSDOMWindowDocumentFragmentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DocumentFragment"), value);
}


static inline bool setJSDOMWindowDocumentTypeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDocumentTypeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDocumentTypeConstructorFunction>(state, thisValue, encodedValue, "DocumentType");
}

static inline bool setJSDOMWindowDocumentTypeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DocumentType"), value);
}


static inline bool setJSDOMWindowElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowElementConstructorFunction>(state, thisValue, encodedValue, "Element");
}

static inline bool setJSDOMWindowElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Element"), value);
}


static inline bool setJSDOMWindowErrorEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowErrorEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowErrorEventConstructorFunction>(state, thisValue, encodedValue, "ErrorEvent");
}

static inline bool setJSDOMWindowErrorEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ErrorEvent"), value);
}


static inline bool setJSDOMWindowEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowEventConstructorFunction>(state, thisValue, encodedValue, "Event");
}

static inline bool setJSDOMWindowEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Event"), value);
}


static inline bool setJSDOMWindowEventTargetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowEventTargetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowEventTargetConstructorFunction>(state, thisValue, encodedValue, "EventTarget");
}

static inline bool setJSDOMWindowEventTargetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "EventTarget"), value);
}


static inline bool setJSDOMWindowFocusEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFocusEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFocusEventConstructorFunction>(state, thisValue, encodedValue, "FocusEvent");
}

static inline bool setJSDOMWindowFocusEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FocusEvent"), value);
}


static inline bool setJSDOMWindowHashChangeEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHashChangeEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHashChangeEventConstructorFunction>(state, thisValue, encodedValue, "HashChangeEvent");
}

static inline bool setJSDOMWindowHashChangeEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HashChangeEvent"), value);
}


static inline bool setJSDOMWindowInputEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowInputEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowInputEventConstructorFunction>(state, thisValue, encodedValue, "InputEvent");
}

static inline bool setJSDOMWindowInputEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "InputEvent"), value);
}


static inline bool setJSDOMWindowKeyboardEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowKeyboardEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowKeyboardEventConstructorFunction>(state, thisValue, encodedValue, "KeyboardEvent");
}

static inline bool setJSDOMWindowKeyboardEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "KeyboardEvent"), value);
}


#if ENABLE(CHANNEL_MESSAGING)
static inline bool setJSDOMWindowMessageChannelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMessageChannelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMessageChannelConstructorFunction>(state, thisValue, encodedValue, "MessageChannel");
}

static inline bool setJSDOMWindowMessageChannelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MessageChannel"), value);
}

#endif

static inline bool setJSDOMWindowMessageEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMessageEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMessageEventConstructorFunction>(state, thisValue, encodedValue, "MessageEvent");
}

static inline bool setJSDOMWindowMessageEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MessageEvent"), value);
}


static inline bool setJSDOMWindowMessagePortConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMessagePortConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMessagePortConstructorFunction>(state, thisValue, encodedValue, "MessagePort");
}

static inline bool setJSDOMWindowMessagePortConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MessagePort"), value);
}


static inline bool setJSDOMWindowMouseEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMouseEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMouseEventConstructorFunction>(state, thisValue, encodedValue, "MouseEvent");
}

static inline bool setJSDOMWindowMouseEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MouseEvent"), value);
}


static inline bool setJSDOMWindowMutationEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMutationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMutationEventConstructorFunction>(state, thisValue, encodedValue, "MutationEvent");
}

static inline bool setJSDOMWindowMutationEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MutationEvent"), value);
}


static inline bool setJSDOMWindowMutationObserverConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMutationObserverConstructorFunction>(state, thisValue, encodedValue, "MutationObserver");
}

static inline bool setJSDOMWindowMutationObserverConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MutationObserver"), value);
}


static inline bool setJSDOMWindowMutationRecordConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMutationRecordConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMutationRecordConstructorFunction>(state, thisValue, encodedValue, "MutationRecord");
}

static inline bool setJSDOMWindowMutationRecordConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MutationRecord"), value);
}


static inline bool setJSDOMWindowNamedNodeMapConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNamedNodeMapConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNamedNodeMapConstructorFunction>(state, thisValue, encodedValue, "NamedNodeMap");
}

static inline bool setJSDOMWindowNamedNodeMapConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "NamedNodeMap"), value);
}


static inline bool setJSDOMWindowNodeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNodeConstructorFunction>(state, thisValue, encodedValue, "Node");
}

static inline bool setJSDOMWindowNodeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Node"), value);
}


static inline bool setJSDOMWindowNodeFilterConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNodeFilterConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNodeFilterConstructorFunction>(state, thisValue, encodedValue, "NodeFilter");
}

static inline bool setJSDOMWindowNodeFilterConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "NodeFilter"), value);
}


static inline bool setJSDOMWindowNodeIteratorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNodeIteratorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNodeIteratorConstructorFunction>(state, thisValue, encodedValue, "NodeIterator");
}

static inline bool setJSDOMWindowNodeIteratorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "NodeIterator"), value);
}


static inline bool setJSDOMWindowNodeListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNodeListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNodeListConstructorFunction>(state, thisValue, encodedValue, "NodeList");
}

static inline bool setJSDOMWindowNodeListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "NodeList"), value);
}


static inline bool setJSDOMWindowOverflowEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOverflowEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOverflowEventConstructorFunction>(state, thisValue, encodedValue, "OverflowEvent");
}

static inline bool setJSDOMWindowOverflowEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "OverflowEvent"), value);
}


static inline bool setJSDOMWindowPageTransitionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPageTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPageTransitionEventConstructorFunction>(state, thisValue, encodedValue, "PageTransitionEvent");
}

static inline bool setJSDOMWindowPageTransitionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PageTransitionEvent"), value);
}


static inline bool setJSDOMWindowPopStateEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPopStateEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPopStateEventConstructorFunction>(state, thisValue, encodedValue, "PopStateEvent");
}

static inline bool setJSDOMWindowPopStateEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PopStateEvent"), value);
}


static inline bool setJSDOMWindowProcessingInstructionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowProcessingInstructionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowProcessingInstructionConstructorFunction>(state, thisValue, encodedValue, "ProcessingInstruction");
}

static inline bool setJSDOMWindowProcessingInstructionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ProcessingInstruction"), value);
}


static inline bool setJSDOMWindowProgressEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowProgressEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowProgressEventConstructorFunction>(state, thisValue, encodedValue, "ProgressEvent");
}

static inline bool setJSDOMWindowProgressEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ProgressEvent"), value);
}


static inline bool setJSDOMWindowRangeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRangeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRangeConstructorFunction>(state, thisValue, encodedValue, "Range");
}

static inline bool setJSDOMWindowRangeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Range"), value);
}


static inline bool setJSDOMWindowSecurityPolicyViolationEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSecurityPolicyViolationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSecurityPolicyViolationEventConstructorFunction>(state, thisValue, encodedValue, "SecurityPolicyViolationEvent");
}

static inline bool setJSDOMWindowSecurityPolicyViolationEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SecurityPolicyViolationEvent"), value);
}


static inline bool setJSDOMWindowShadowRootConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowShadowRootConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowShadowRootConstructorFunction>(state, thisValue, encodedValue, "ShadowRoot");
}

static inline bool setJSDOMWindowShadowRootConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ShadowRoot"), value);
}


static inline bool setJSDOMWindowStaticRangeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStaticRangeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStaticRangeConstructorFunction>(state, thisValue, encodedValue, "StaticRange");
}

static inline bool setJSDOMWindowStaticRangeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "StaticRange"), value);
}


static inline bool setJSDOMWindowTextConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextConstructorFunction>(state, thisValue, encodedValue, "Text");
}

static inline bool setJSDOMWindowTextConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Text"), value);
}


static inline bool setJSDOMWindowTextDecoderConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextDecoderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextDecoderConstructorFunction>(state, thisValue, encodedValue, "TextDecoder");
}

static inline bool setJSDOMWindowTextDecoderConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextDecoder"), value);
}


static inline bool setJSDOMWindowTextEncoderConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextEncoderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextEncoderConstructorFunction>(state, thisValue, encodedValue, "TextEncoder");
}

static inline bool setJSDOMWindowTextEncoderConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextEncoder"), value);
}


static inline bool setJSDOMWindowTextEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextEventConstructorFunction>(state, thisValue, encodedValue, "TextEvent");
}

static inline bool setJSDOMWindowTextEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextEvent"), value);
}


#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowTouchConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTouchConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTouchConstructorFunction>(state, thisValue, encodedValue, "Touch");
}

static inline bool setJSDOMWindowTouchConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Touch"), value);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowTouchEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTouchEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTouchEventConstructorFunction>(state, thisValue, encodedValue, "TouchEvent");
}

static inline bool setJSDOMWindowTouchEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TouchEvent"), value);
}

#endif

#if ENABLE(TOUCH_EVENTS)
static inline bool setJSDOMWindowTouchListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTouchListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTouchListConstructorFunction>(state, thisValue, encodedValue, "TouchList");
}

static inline bool setJSDOMWindowTouchListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TouchList"), value);
}

#endif

static inline bool setJSDOMWindowTransitionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTransitionEventConstructorFunction>(state, thisValue, encodedValue, "TransitionEvent");
}

static inline bool setJSDOMWindowTransitionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TransitionEvent"), value);
}


static inline bool setJSDOMWindowTreeWalkerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTreeWalkerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTreeWalkerConstructorFunction>(state, thisValue, encodedValue, "TreeWalker");
}

static inline bool setJSDOMWindowTreeWalkerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TreeWalker"), value);
}


static inline bool setJSDOMWindowUIEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowUIEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowUIEventConstructorFunction>(state, thisValue, encodedValue, "UIEvent");
}

static inline bool setJSDOMWindowUIEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "UIEvent"), value);
}


static inline bool setJSDOMWindowWebKitAnimationEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitAnimationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitAnimationEventConstructorFunction>(state, thisValue, encodedValue, "WebKitAnimationEvent");
}

static inline bool setJSDOMWindowWebKitAnimationEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitAnimationEvent"), value);
}


static inline bool setJSDOMWindowWebKitTransitionEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitTransitionEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitTransitionEventConstructorFunction>(state, thisValue, encodedValue, "WebKitTransitionEvent");
}

static inline bool setJSDOMWindowWebKitTransitionEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitTransitionEvent"), value);
}


static inline bool setJSDOMWindowWheelEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWheelEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWheelEventConstructorFunction>(state, thisValue, encodedValue, "WheelEvent");
}

static inline bool setJSDOMWindowWheelEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WheelEvent"), value);
}


static inline bool setJSDOMWindowXMLDocumentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLDocumentConstructorFunction>(state, thisValue, encodedValue, "XMLDocument");
}

static inline bool setJSDOMWindowXMLDocumentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLDocument"), value);
}


static inline bool setJSDOMWindowBlobConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowBlobConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowBlobConstructorFunction>(state, thisValue, encodedValue, "Blob");
}

static inline bool setJSDOMWindowBlobConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Blob"), value);
}


static inline bool setJSDOMWindowFileConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFileConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFileConstructorFunction>(state, thisValue, encodedValue, "File");
}

static inline bool setJSDOMWindowFileConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "File"), value);
}


static inline bool setJSDOMWindowFileErrorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFileErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFileErrorConstructorFunction>(state, thisValue, encodedValue, "FileError");
}

static inline bool setJSDOMWindowFileErrorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FileError"), value);
}


static inline bool setJSDOMWindowFileListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFileListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFileListConstructorFunction>(state, thisValue, encodedValue, "FileList");
}

static inline bool setJSDOMWindowFileListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FileList"), value);
}


static inline bool setJSDOMWindowFileReaderConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFileReaderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFileReaderConstructorFunction>(state, thisValue, encodedValue, "FileReader");
}

static inline bool setJSDOMWindowFileReaderConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FileReader"), value);
}


static inline bool setJSDOMWindowFormDataConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowFormDataConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowFormDataConstructorFunction>(state, thisValue, encodedValue, "FormData");
}

static inline bool setJSDOMWindowFormDataConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "FormData"), value);
}


static inline bool setJSDOMWindowDOMTokenListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMTokenListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMTokenListConstructorFunction>(state, thisValue, encodedValue, "DOMTokenList");
}

static inline bool setJSDOMWindowDOMTokenListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMTokenList"), value);
}


static inline bool setJSDOMWindowURLConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowURLConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowURLConstructorFunction>(state, thisValue, encodedValue, "URL");
}

static inline bool setJSDOMWindowURLConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "URL"), value);
}


static inline bool setJSDOMWindowHTMLAllCollectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAllCollectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAllCollectionConstructorFunction>(state, thisValue, encodedValue, "HTMLAllCollection");
}

static inline bool setJSDOMWindowHTMLAllCollectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAllCollection"), value);
}


static inline bool setJSDOMWindowHTMLAnchorElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAnchorElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAnchorElementConstructorFunction>(state, thisValue, encodedValue, "HTMLAnchorElement");
}

static inline bool setJSDOMWindowHTMLAnchorElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAnchorElement"), value);
}


static inline bool setJSDOMWindowHTMLAppletElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAppletElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAppletElementConstructorFunction>(state, thisValue, encodedValue, "HTMLAppletElement");
}

static inline bool setJSDOMWindowHTMLAppletElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAppletElement"), value);
}


static inline bool setJSDOMWindowHTMLAreaElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAreaElementConstructorFunction>(state, thisValue, encodedValue, "HTMLAreaElement");
}

static inline bool setJSDOMWindowHTMLAreaElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAreaElement"), value);
}


#if ENABLE(ATTACHMENT_ELEMENT)
static inline bool setJSDOMWindowHTMLAttachmentElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAttachmentElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAttachmentElementConstructorFunction>(state, thisValue, encodedValue, "HTMLAttachmentElement");
}

static inline bool setJSDOMWindowHTMLAttachmentElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAttachmentElement"), value);
}

#endif

#if ENABLE(VIDEO)
static inline bool setJSDOMWindowHTMLAudioElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLAudioElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLAudioElementConstructorFunction>(state, thisValue, encodedValue, "HTMLAudioElement");
}

static inline bool setJSDOMWindowHTMLAudioElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLAudioElement"), value);
}

#endif

#if ENABLE(VIDEO)
static inline bool setJSDOMWindowAudioConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioConstructorFunction>(state, thisValue, encodedValue, "Audio");
}

static inline bool setJSDOMWindowAudioConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Audio"), value);
}

#endif

static inline bool setJSDOMWindowHTMLBRElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLBRElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLBRElementConstructorFunction>(state, thisValue, encodedValue, "HTMLBRElement");
}

static inline bool setJSDOMWindowHTMLBRElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLBRElement"), value);
}


static inline bool setJSDOMWindowHTMLBaseElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLBaseElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLBaseElementConstructorFunction>(state, thisValue, encodedValue, "HTMLBaseElement");
}

static inline bool setJSDOMWindowHTMLBaseElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLBaseElement"), value);
}


static inline bool setJSDOMWindowHTMLBodyElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLBodyElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLBodyElementConstructorFunction>(state, thisValue, encodedValue, "HTMLBodyElement");
}

static inline bool setJSDOMWindowHTMLBodyElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLBodyElement"), value);
}


static inline bool setJSDOMWindowHTMLButtonElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLButtonElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLButtonElementConstructorFunction>(state, thisValue, encodedValue, "HTMLButtonElement");
}

static inline bool setJSDOMWindowHTMLButtonElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLButtonElement"), value);
}


static inline bool setJSDOMWindowHTMLCanvasElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLCanvasElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLCanvasElementConstructorFunction>(state, thisValue, encodedValue, "HTMLCanvasElement");
}

static inline bool setJSDOMWindowHTMLCanvasElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLCanvasElement"), value);
}


static inline bool setJSDOMWindowHTMLCollectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLCollectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLCollectionConstructorFunction>(state, thisValue, encodedValue, "HTMLCollection");
}

static inline bool setJSDOMWindowHTMLCollectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLCollection"), value);
}


static inline bool setJSDOMWindowHTMLDListElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDListElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDListElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDListElement");
}

static inline bool setJSDOMWindowHTMLDListElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDListElement"), value);
}


static inline bool setJSDOMWindowHTMLDataElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDataElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDataElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDataElement");
}

static inline bool setJSDOMWindowHTMLDataElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDataElement"), value);
}


#if ENABLE(DATALIST_ELEMENT)
static inline bool setJSDOMWindowHTMLDataListElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDataListElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDataListElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDataListElement");
}

static inline bool setJSDOMWindowHTMLDataListElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDataListElement"), value);
}

#endif

static inline bool setJSDOMWindowHTMLDetailsElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDetailsElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDetailsElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDetailsElement");
}

static inline bool setJSDOMWindowHTMLDetailsElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDetailsElement"), value);
}


static inline bool setJSDOMWindowHTMLDirectoryElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDirectoryElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDirectoryElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDirectoryElement");
}

static inline bool setJSDOMWindowHTMLDirectoryElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDirectoryElement"), value);
}


static inline bool setJSDOMWindowHTMLDivElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDivElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDivElementConstructorFunction>(state, thisValue, encodedValue, "HTMLDivElement");
}

static inline bool setJSDOMWindowHTMLDivElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDivElement"), value);
}


static inline bool setJSDOMWindowHTMLDocumentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLDocumentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLDocumentConstructorFunction>(state, thisValue, encodedValue, "HTMLDocument");
}

static inline bool setJSDOMWindowHTMLDocumentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLDocument"), value);
}


static inline bool setJSDOMWindowHTMLElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLElementConstructorFunction>(state, thisValue, encodedValue, "HTMLElement");
}

static inline bool setJSDOMWindowHTMLElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLElement"), value);
}


static inline bool setJSDOMWindowHTMLEmbedElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLEmbedElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLEmbedElementConstructorFunction>(state, thisValue, encodedValue, "HTMLEmbedElement");
}

static inline bool setJSDOMWindowHTMLEmbedElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLEmbedElement"), value);
}


static inline bool setJSDOMWindowHTMLFieldSetElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFieldSetElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFieldSetElementConstructorFunction>(state, thisValue, encodedValue, "HTMLFieldSetElement");
}

static inline bool setJSDOMWindowHTMLFieldSetElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFieldSetElement"), value);
}


static inline bool setJSDOMWindowHTMLFontElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFontElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFontElementConstructorFunction>(state, thisValue, encodedValue, "HTMLFontElement");
}

static inline bool setJSDOMWindowHTMLFontElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFontElement"), value);
}


static inline bool setJSDOMWindowHTMLFormControlsCollectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFormControlsCollectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFormControlsCollectionConstructorFunction>(state, thisValue, encodedValue, "HTMLFormControlsCollection");
}

static inline bool setJSDOMWindowHTMLFormControlsCollectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFormControlsCollection"), value);
}


static inline bool setJSDOMWindowHTMLFormElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFormElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFormElementConstructorFunction>(state, thisValue, encodedValue, "HTMLFormElement");
}

static inline bool setJSDOMWindowHTMLFormElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFormElement"), value);
}


static inline bool setJSDOMWindowHTMLFrameElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFrameElementConstructorFunction>(state, thisValue, encodedValue, "HTMLFrameElement");
}

static inline bool setJSDOMWindowHTMLFrameElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFrameElement"), value);
}


static inline bool setJSDOMWindowHTMLFrameSetElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLFrameSetElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLFrameSetElementConstructorFunction>(state, thisValue, encodedValue, "HTMLFrameSetElement");
}

static inline bool setJSDOMWindowHTMLFrameSetElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLFrameSetElement"), value);
}


static inline bool setJSDOMWindowHTMLHRElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLHRElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLHRElementConstructorFunction>(state, thisValue, encodedValue, "HTMLHRElement");
}

static inline bool setJSDOMWindowHTMLHRElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLHRElement"), value);
}


static inline bool setJSDOMWindowHTMLHeadElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLHeadElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLHeadElementConstructorFunction>(state, thisValue, encodedValue, "HTMLHeadElement");
}

static inline bool setJSDOMWindowHTMLHeadElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLHeadElement"), value);
}


static inline bool setJSDOMWindowHTMLHeadingElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLHeadingElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLHeadingElementConstructorFunction>(state, thisValue, encodedValue, "HTMLHeadingElement");
}

static inline bool setJSDOMWindowHTMLHeadingElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLHeadingElement"), value);
}


static inline bool setJSDOMWindowHTMLHtmlElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLHtmlElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLHtmlElementConstructorFunction>(state, thisValue, encodedValue, "HTMLHtmlElement");
}

static inline bool setJSDOMWindowHTMLHtmlElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLHtmlElement"), value);
}


static inline bool setJSDOMWindowHTMLIFrameElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLIFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLIFrameElementConstructorFunction>(state, thisValue, encodedValue, "HTMLIFrameElement");
}

static inline bool setJSDOMWindowHTMLIFrameElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLIFrameElement"), value);
}


static inline bool setJSDOMWindowHTMLImageElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLImageElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLImageElementConstructorFunction>(state, thisValue, encodedValue, "HTMLImageElement");
}

static inline bool setJSDOMWindowHTMLImageElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLImageElement"), value);
}


static inline bool setJSDOMWindowImageConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowImageConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowImageConstructorFunction>(state, thisValue, encodedValue, "Image");
}

static inline bool setJSDOMWindowImageConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Image"), value);
}


static inline bool setJSDOMWindowHTMLInputElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLInputElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLInputElementConstructorFunction>(state, thisValue, encodedValue, "HTMLInputElement");
}

static inline bool setJSDOMWindowHTMLInputElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLInputElement"), value);
}


static inline bool setJSDOMWindowHTMLKeygenElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLKeygenElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLKeygenElementConstructorFunction>(state, thisValue, encodedValue, "HTMLKeygenElement");
}

static inline bool setJSDOMWindowHTMLKeygenElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLKeygenElement"), value);
}


static inline bool setJSDOMWindowHTMLLIElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLLIElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLLIElementConstructorFunction>(state, thisValue, encodedValue, "HTMLLIElement");
}

static inline bool setJSDOMWindowHTMLLIElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLLIElement"), value);
}


static inline bool setJSDOMWindowHTMLLabelElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLLabelElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLLabelElementConstructorFunction>(state, thisValue, encodedValue, "HTMLLabelElement");
}

static inline bool setJSDOMWindowHTMLLabelElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLLabelElement"), value);
}


static inline bool setJSDOMWindowHTMLLegendElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLLegendElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLLegendElementConstructorFunction>(state, thisValue, encodedValue, "HTMLLegendElement");
}

static inline bool setJSDOMWindowHTMLLegendElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLLegendElement"), value);
}


static inline bool setJSDOMWindowHTMLLinkElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLLinkElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLLinkElementConstructorFunction>(state, thisValue, encodedValue, "HTMLLinkElement");
}

static inline bool setJSDOMWindowHTMLLinkElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLLinkElement"), value);
}


static inline bool setJSDOMWindowHTMLMapElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMapElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMapElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMapElement");
}

static inline bool setJSDOMWindowHTMLMapElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMapElement"), value);
}


static inline bool setJSDOMWindowHTMLMarqueeElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMarqueeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMarqueeElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMarqueeElement");
}

static inline bool setJSDOMWindowHTMLMarqueeElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMarqueeElement"), value);
}


#if ENABLE(VIDEO)
static inline bool setJSDOMWindowHTMLMediaElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMediaElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMediaElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMediaElement");
}

static inline bool setJSDOMWindowHTMLMediaElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMediaElement"), value);
}

#endif

static inline bool setJSDOMWindowHTMLMenuElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMenuElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMenuElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMenuElement");
}

static inline bool setJSDOMWindowHTMLMenuElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMenuElement"), value);
}


static inline bool setJSDOMWindowHTMLMetaElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMetaElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMetaElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMetaElement");
}

static inline bool setJSDOMWindowHTMLMetaElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMetaElement"), value);
}


#if ENABLE(METER_ELEMENT)
static inline bool setJSDOMWindowHTMLMeterElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLMeterElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLMeterElementConstructorFunction>(state, thisValue, encodedValue, "HTMLMeterElement");
}

static inline bool setJSDOMWindowHTMLMeterElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLMeterElement"), value);
}

#endif

static inline bool setJSDOMWindowHTMLModElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLModElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLModElementConstructorFunction>(state, thisValue, encodedValue, "HTMLModElement");
}

static inline bool setJSDOMWindowHTMLModElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLModElement"), value);
}


static inline bool setJSDOMWindowHTMLOListElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLOListElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLOListElementConstructorFunction>(state, thisValue, encodedValue, "HTMLOListElement");
}

static inline bool setJSDOMWindowHTMLOListElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLOListElement"), value);
}


static inline bool setJSDOMWindowHTMLObjectElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLObjectElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLObjectElementConstructorFunction>(state, thisValue, encodedValue, "HTMLObjectElement");
}

static inline bool setJSDOMWindowHTMLObjectElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLObjectElement"), value);
}


static inline bool setJSDOMWindowHTMLOptGroupElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLOptGroupElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLOptGroupElementConstructorFunction>(state, thisValue, encodedValue, "HTMLOptGroupElement");
}

static inline bool setJSDOMWindowHTMLOptGroupElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLOptGroupElement"), value);
}


static inline bool setJSDOMWindowHTMLOptionElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLOptionElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLOptionElementConstructorFunction>(state, thisValue, encodedValue, "HTMLOptionElement");
}

static inline bool setJSDOMWindowHTMLOptionElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLOptionElement"), value);
}


static inline bool setJSDOMWindowOptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowOptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowOptionConstructorFunction>(state, thisValue, encodedValue, "Option");
}

static inline bool setJSDOMWindowOptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Option"), value);
}


static inline bool setJSDOMWindowHTMLOptionsCollectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLOptionsCollectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLOptionsCollectionConstructorFunction>(state, thisValue, encodedValue, "HTMLOptionsCollection");
}

static inline bool setJSDOMWindowHTMLOptionsCollectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLOptionsCollection"), value);
}


static inline bool setJSDOMWindowHTMLOutputElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLOutputElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLOutputElementConstructorFunction>(state, thisValue, encodedValue, "HTMLOutputElement");
}

static inline bool setJSDOMWindowHTMLOutputElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLOutputElement"), value);
}


static inline bool setJSDOMWindowHTMLParagraphElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLParagraphElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLParagraphElementConstructorFunction>(state, thisValue, encodedValue, "HTMLParagraphElement");
}

static inline bool setJSDOMWindowHTMLParagraphElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLParagraphElement"), value);
}


static inline bool setJSDOMWindowHTMLParamElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLParamElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLParamElementConstructorFunction>(state, thisValue, encodedValue, "HTMLParamElement");
}

static inline bool setJSDOMWindowHTMLParamElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLParamElement"), value);
}


static inline bool setJSDOMWindowHTMLPictureElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLPictureElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLPictureElementConstructorFunction>(state, thisValue, encodedValue, "HTMLPictureElement");
}

static inline bool setJSDOMWindowHTMLPictureElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLPictureElement"), value);
}


static inline bool setJSDOMWindowHTMLPreElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLPreElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLPreElementConstructorFunction>(state, thisValue, encodedValue, "HTMLPreElement");
}

static inline bool setJSDOMWindowHTMLPreElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLPreElement"), value);
}


static inline bool setJSDOMWindowHTMLProgressElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLProgressElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLProgressElementConstructorFunction>(state, thisValue, encodedValue, "HTMLProgressElement");
}

static inline bool setJSDOMWindowHTMLProgressElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLProgressElement"), value);
}


static inline bool setJSDOMWindowHTMLQuoteElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLQuoteElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLQuoteElementConstructorFunction>(state, thisValue, encodedValue, "HTMLQuoteElement");
}

static inline bool setJSDOMWindowHTMLQuoteElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLQuoteElement"), value);
}


static inline bool setJSDOMWindowHTMLScriptElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLScriptElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLScriptElementConstructorFunction>(state, thisValue, encodedValue, "HTMLScriptElement");
}

static inline bool setJSDOMWindowHTMLScriptElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLScriptElement"), value);
}


static inline bool setJSDOMWindowHTMLSelectElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLSelectElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLSelectElementConstructorFunction>(state, thisValue, encodedValue, "HTMLSelectElement");
}

static inline bool setJSDOMWindowHTMLSelectElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLSelectElement"), value);
}


static inline bool setJSDOMWindowHTMLSlotElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLSlotElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLSlotElementConstructorFunction>(state, thisValue, encodedValue, "HTMLSlotElement");
}

static inline bool setJSDOMWindowHTMLSlotElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLSlotElement"), value);
}


static inline bool setJSDOMWindowHTMLSourceElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLSourceElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLSourceElementConstructorFunction>(state, thisValue, encodedValue, "HTMLSourceElement");
}

static inline bool setJSDOMWindowHTMLSourceElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLSourceElement"), value);
}


static inline bool setJSDOMWindowHTMLSpanElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLSpanElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLSpanElementConstructorFunction>(state, thisValue, encodedValue, "HTMLSpanElement");
}

static inline bool setJSDOMWindowHTMLSpanElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLSpanElement"), value);
}


static inline bool setJSDOMWindowHTMLStyleElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLStyleElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLStyleElementConstructorFunction>(state, thisValue, encodedValue, "HTMLStyleElement");
}

static inline bool setJSDOMWindowHTMLStyleElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLStyleElement"), value);
}


static inline bool setJSDOMWindowHTMLTableCaptionElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableCaptionElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableCaptionElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableCaptionElement");
}

static inline bool setJSDOMWindowHTMLTableCaptionElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableCaptionElement"), value);
}


static inline bool setJSDOMWindowHTMLTableCellElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableCellElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableCellElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableCellElement");
}

static inline bool setJSDOMWindowHTMLTableCellElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableCellElement"), value);
}


static inline bool setJSDOMWindowHTMLTableColElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableColElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableColElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableColElement");
}

static inline bool setJSDOMWindowHTMLTableColElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableColElement"), value);
}


static inline bool setJSDOMWindowHTMLTableElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableElement");
}

static inline bool setJSDOMWindowHTMLTableElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableElement"), value);
}


static inline bool setJSDOMWindowHTMLTableRowElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableRowElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableRowElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableRowElement");
}

static inline bool setJSDOMWindowHTMLTableRowElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableRowElement"), value);
}


static inline bool setJSDOMWindowHTMLTableSectionElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTableSectionElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTableSectionElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTableSectionElement");
}

static inline bool setJSDOMWindowHTMLTableSectionElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTableSectionElement"), value);
}


static inline bool setJSDOMWindowHTMLTemplateElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTemplateElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTemplateElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTemplateElement");
}

static inline bool setJSDOMWindowHTMLTemplateElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTemplateElement"), value);
}


static inline bool setJSDOMWindowHTMLTextAreaElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTextAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTextAreaElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTextAreaElement");
}

static inline bool setJSDOMWindowHTMLTextAreaElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTextAreaElement"), value);
}


static inline bool setJSDOMWindowHTMLTimeElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTimeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTimeElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTimeElement");
}

static inline bool setJSDOMWindowHTMLTimeElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTimeElement"), value);
}


static inline bool setJSDOMWindowHTMLTitleElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTitleElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTitleElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTitleElement");
}

static inline bool setJSDOMWindowHTMLTitleElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTitleElement"), value);
}


#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowHTMLTrackElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLTrackElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLTrackElementConstructorFunction>(state, thisValue, encodedValue, "HTMLTrackElement");
}

static inline bool setJSDOMWindowHTMLTrackElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLTrackElement"), value);
}

#endif

static inline bool setJSDOMWindowHTMLUListElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLUListElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLUListElementConstructorFunction>(state, thisValue, encodedValue, "HTMLUListElement");
}

static inline bool setJSDOMWindowHTMLUListElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLUListElement"), value);
}


static inline bool setJSDOMWindowHTMLUnknownElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLUnknownElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLUnknownElementConstructorFunction>(state, thisValue, encodedValue, "HTMLUnknownElement");
}

static inline bool setJSDOMWindowHTMLUnknownElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLUnknownElement"), value);
}


#if ENABLE(VIDEO)
static inline bool setJSDOMWindowHTMLVideoElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHTMLVideoElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHTMLVideoElementConstructorFunction>(state, thisValue, encodedValue, "HTMLVideoElement");
}

static inline bool setJSDOMWindowHTMLVideoElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "HTMLVideoElement"), value);
}

#endif

static inline bool setJSDOMWindowImageDataConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowImageDataConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowImageDataConstructorFunction>(state, thisValue, encodedValue, "ImageData");
}

static inline bool setJSDOMWindowImageDataConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ImageData"), value);
}


#if ENABLE(VIDEO)
static inline bool setJSDOMWindowMediaControllerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaControllerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaControllerConstructorFunction>(state, thisValue, encodedValue, "MediaController");
}

static inline bool setJSDOMWindowMediaControllerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaController"), value);
}

#endif

#if ENABLE(VIDEO)
static inline bool setJSDOMWindowMediaErrorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMediaErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMediaErrorConstructorFunction>(state, thisValue, encodedValue, "MediaError");
}

static inline bool setJSDOMWindowMediaErrorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MediaError"), value);
}

#endif

static inline bool setJSDOMWindowRadioNodeListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowRadioNodeListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowRadioNodeListConstructorFunction>(state, thisValue, encodedValue, "RadioNodeList");
}

static inline bool setJSDOMWindowRadioNodeListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "RadioNodeList"), value);
}


static inline bool setJSDOMWindowTextMetricsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextMetricsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextMetricsConstructorFunction>(state, thisValue, encodedValue, "TextMetrics");
}

static inline bool setJSDOMWindowTextMetricsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextMetrics"), value);
}


#if ENABLE(VIDEO)
static inline bool setJSDOMWindowTimeRangesConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTimeRangesConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTimeRangesConstructorFunction>(state, thisValue, encodedValue, "TimeRanges");
}

static inline bool setJSDOMWindowTimeRangesConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TimeRanges"), value);
}

#endif

static inline bool setJSDOMWindowURLSearchParamsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowURLSearchParamsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowURLSearchParamsConstructorFunction>(state, thisValue, encodedValue, "URLSearchParams");
}

static inline bool setJSDOMWindowURLSearchParamsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "URLSearchParams"), value);
}


static inline bool setJSDOMWindowValidityStateConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowValidityStateConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowValidityStateConstructorFunction>(state, thisValue, encodedValue, "ValidityState");
}

static inline bool setJSDOMWindowValidityStateConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ValidityState"), value);
}


static inline bool setJSDOMWindowCanvasGradientConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCanvasGradientConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCanvasGradientConstructorFunction>(state, thisValue, encodedValue, "CanvasGradient");
}

static inline bool setJSDOMWindowCanvasGradientConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CanvasGradient"), value);
}


static inline bool setJSDOMWindowCanvasPatternConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCanvasPatternConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCanvasPatternConstructorFunction>(state, thisValue, encodedValue, "CanvasPattern");
}

static inline bool setJSDOMWindowCanvasPatternConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CanvasPattern"), value);
}


#if ENABLE(CANVAS_PROXY)
static inline bool setJSDOMWindowCanvasProxyConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCanvasProxyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCanvasProxyConstructorFunction>(state, thisValue, encodedValue, "CanvasProxy");
}

static inline bool setJSDOMWindowCanvasProxyConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CanvasProxy"), value);
}

#endif

static inline bool setJSDOMWindowCanvasRenderingContext2DConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCanvasRenderingContext2DConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCanvasRenderingContext2DConstructorFunction>(state, thisValue, encodedValue, "CanvasRenderingContext2D");
}

static inline bool setJSDOMWindowCanvasRenderingContext2DConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "CanvasRenderingContext2D"), value);
}


static inline bool setJSDOMWindowPath2DConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPath2DConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPath2DConstructorFunction>(state, thisValue, encodedValue, "Path2D");
}

static inline bool setJSDOMWindowPath2DConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Path2D"), value);
}


#if ENABLE(WEBGL2)
static inline bool setJSDOMWindowWebGL2RenderingContextConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGL2RenderingContextConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGL2RenderingContextConstructorFunction>(state, thisValue, encodedValue, "WebGL2RenderingContext");
}

static inline bool setJSDOMWindowWebGL2RenderingContextConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGL2RenderingContext"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLActiveInfoConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLActiveInfoConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLActiveInfoConstructorFunction>(state, thisValue, encodedValue, "WebGLActiveInfo");
}

static inline bool setJSDOMWindowWebGLActiveInfoConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLActiveInfo"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLBufferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLBufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLBufferConstructorFunction>(state, thisValue, encodedValue, "WebGLBuffer");
}

static inline bool setJSDOMWindowWebGLBufferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLBuffer"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLContextEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLContextEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLContextEventConstructorFunction>(state, thisValue, encodedValue, "WebGLContextEvent");
}

static inline bool setJSDOMWindowWebGLContextEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLContextEvent"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLFramebufferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLFramebufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLFramebufferConstructorFunction>(state, thisValue, encodedValue, "WebGLFramebuffer");
}

static inline bool setJSDOMWindowWebGLFramebufferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLFramebuffer"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLProgramConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLProgramConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLProgramConstructorFunction>(state, thisValue, encodedValue, "WebGLProgram");
}

static inline bool setJSDOMWindowWebGLProgramConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLProgram"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLQueryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLQueryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLQueryConstructorFunction>(state, thisValue, encodedValue, "WebGLQuery");
}

static inline bool setJSDOMWindowWebGLQueryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLQuery"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLRenderbufferConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLRenderbufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLRenderbufferConstructorFunction>(state, thisValue, encodedValue, "WebGLRenderbuffer");
}

static inline bool setJSDOMWindowWebGLRenderbufferConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLRenderbuffer"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLRenderingContextConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLRenderingContextConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLRenderingContextConstructorFunction>(state, thisValue, encodedValue, "WebGLRenderingContext");
}

static inline bool setJSDOMWindowWebGLRenderingContextConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLRenderingContext"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLSamplerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLSamplerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLSamplerConstructorFunction>(state, thisValue, encodedValue, "WebGLSampler");
}

static inline bool setJSDOMWindowWebGLSamplerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLSampler"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLShaderConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLShaderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLShaderConstructorFunction>(state, thisValue, encodedValue, "WebGLShader");
}

static inline bool setJSDOMWindowWebGLShaderConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLShader"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLShaderPrecisionFormatConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLShaderPrecisionFormatConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLShaderPrecisionFormatConstructorFunction>(state, thisValue, encodedValue, "WebGLShaderPrecisionFormat");
}

static inline bool setJSDOMWindowWebGLShaderPrecisionFormatConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLShaderPrecisionFormat"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLSyncConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLSyncConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLSyncConstructorFunction>(state, thisValue, encodedValue, "WebGLSync");
}

static inline bool setJSDOMWindowWebGLSyncConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLSync"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLTextureConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLTextureConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLTextureConstructorFunction>(state, thisValue, encodedValue, "WebGLTexture");
}

static inline bool setJSDOMWindowWebGLTextureConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLTexture"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLTransformFeedbackConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLTransformFeedbackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLTransformFeedbackConstructorFunction>(state, thisValue, encodedValue, "WebGLTransformFeedback");
}

static inline bool setJSDOMWindowWebGLTransformFeedbackConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLTransformFeedback"), value);
}

#endif

#if ENABLE(WEBGL)
static inline bool setJSDOMWindowWebGLUniformLocationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLUniformLocationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLUniformLocationConstructorFunction>(state, thisValue, encodedValue, "WebGLUniformLocation");
}

static inline bool setJSDOMWindowWebGLUniformLocationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLUniformLocation"), value);
}

#endif

#if ENABLE(WEBGL2)
static inline bool setJSDOMWindowWebGLVertexArrayObjectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebGLVertexArrayObjectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebGLVertexArrayObjectConstructorFunction>(state, thisValue, encodedValue, "WebGLVertexArrayObject");
}

static inline bool setJSDOMWindowWebGLVertexArrayObjectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebGLVertexArrayObject"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowAudioTrackConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioTrackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioTrackConstructorFunction>(state, thisValue, encodedValue, "AudioTrack");
}

static inline bool setJSDOMWindowAudioTrackConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioTrack"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowAudioTrackListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowAudioTrackListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowAudioTrackListConstructorFunction>(state, thisValue, encodedValue, "AudioTrackList");
}

static inline bool setJSDOMWindowAudioTrackListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "AudioTrackList"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowDataCueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDataCueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDataCueConstructorFunction>(state, thisValue, encodedValue, "DataCue");
}

static inline bool setJSDOMWindowDataCueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DataCue"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowTextTrackConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextTrackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextTrackConstructorFunction>(state, thisValue, encodedValue, "TextTrack");
}

static inline bool setJSDOMWindowTextTrackConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextTrack"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowTextTrackCueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextTrackCueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextTrackCueConstructorFunction>(state, thisValue, encodedValue, "TextTrackCue");
}

static inline bool setJSDOMWindowTextTrackCueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextTrackCue"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowTextTrackCueListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextTrackCueListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextTrackCueListConstructorFunction>(state, thisValue, encodedValue, "TextTrackCueList");
}

static inline bool setJSDOMWindowTextTrackCueListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextTrackCueList"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowTextTrackListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTextTrackListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTextTrackListConstructorFunction>(state, thisValue, encodedValue, "TextTrackList");
}

static inline bool setJSDOMWindowTextTrackListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TextTrackList"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowTrackEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowTrackEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowTrackEventConstructorFunction>(state, thisValue, encodedValue, "TrackEvent");
}

static inline bool setJSDOMWindowTrackEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "TrackEvent"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowVTTCueConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowVTTCueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowVTTCueConstructorFunction>(state, thisValue, encodedValue, "VTTCue");
}

static inline bool setJSDOMWindowVTTCueConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "VTTCue"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowVTTRegionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowVTTRegionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowVTTRegionConstructorFunction>(state, thisValue, encodedValue, "VTTRegion");
}

static inline bool setJSDOMWindowVTTRegionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "VTTRegion"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowVideoTrackConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowVideoTrackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowVideoTrackConstructorFunction>(state, thisValue, encodedValue, "VideoTrack");
}

static inline bool setJSDOMWindowVideoTrackConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "VideoTrack"), value);
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline bool setJSDOMWindowVideoTrackListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowVideoTrackListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowVideoTrackListConstructorFunction>(state, thisValue, encodedValue, "VideoTrackList");
}

static inline bool setJSDOMWindowVideoTrackListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "VideoTrackList"), value);
}

#endif

static inline bool setJSDOMWindowApplicationCacheConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowApplicationCacheConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowApplicationCacheConstructorFunction>(state, thisValue, encodedValue, "ApplicationCache");
}

static inline bool setJSDOMWindowApplicationCacheConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "ApplicationCache"), value);
}


static inline bool setJSDOMWindowBarPropConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowBarPropConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowBarPropConstructorFunction>(state, thisValue, encodedValue, "BarProp");
}

static inline bool setJSDOMWindowBarPropConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "BarProp"), value);
}


static inline bool setJSDOMWindowCryptoConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowCryptoConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowCryptoConstructorFunction>(state, thisValue, encodedValue, "Crypto");
}

static inline bool setJSDOMWindowCryptoConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Crypto"), value);
}


static inline bool setJSDOMWindowSelectionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSelectionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSelectionConstructorFunction>(state, thisValue, encodedValue, "Selection");
}

static inline bool setJSDOMWindowSelectionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Selection"), value);
}


static inline bool setJSDOMWindowWindowConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWindowConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWindowConstructorFunction>(state, thisValue, encodedValue, "Window");
}

static inline bool setJSDOMWindowWindowConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Window"), value);
}


static inline bool setJSDOMWindowEventSourceConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowEventSourceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowEventSourceConstructorFunction>(state, thisValue, encodedValue, "EventSource");
}

static inline bool setJSDOMWindowEventSourceConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "EventSource"), value);
}


static inline bool setJSDOMWindowHistoryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowHistoryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowHistoryConstructorFunction>(state, thisValue, encodedValue, "History");
}

static inline bool setJSDOMWindowHistoryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "History"), value);
}


#if ENABLE(INTERSECTION_OBSERVER)
static inline bool setJSDOMWindowIntersectionObserverConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIntersectionObserverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIntersectionObserverConstructorFunction>(state, thisValue, encodedValue, "IntersectionObserver");
}

static inline bool setJSDOMWindowIntersectionObserverConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IntersectionObserver"), value);
}

#endif

#if ENABLE(INTERSECTION_OBSERVER)
static inline bool setJSDOMWindowIntersectionObserverEntryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowIntersectionObserverEntryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowIntersectionObserverEntryConstructorFunction>(state, thisValue, encodedValue, "IntersectionObserverEntry");
}

static inline bool setJSDOMWindowIntersectionObserverEntryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "IntersectionObserverEntry"), value);
}

#endif

static inline bool setJSDOMWindowLocationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowLocationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowLocationConstructorFunction>(state, thisValue, encodedValue, "Location");
}

static inline bool setJSDOMWindowLocationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Location"), value);
}


static inline bool setJSDOMWindowNavigatorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowNavigatorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowNavigatorConstructorFunction>(state, thisValue, encodedValue, "Navigator");
}

static inline bool setJSDOMWindowNavigatorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Navigator"), value);
}


#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceConstructorFunction>(state, thisValue, encodedValue, "Performance");
}

static inline bool setJSDOMWindowPerformanceConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Performance"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceEntryConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceEntryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceEntryConstructorFunction>(state, thisValue, encodedValue, "PerformanceEntry");
}

static inline bool setJSDOMWindowPerformanceEntryConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceEntry"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceMarkConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceMarkConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceMarkConstructorFunction>(state, thisValue, encodedValue, "PerformanceMark");
}

static inline bool setJSDOMWindowPerformanceMarkConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceMark"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceMeasureConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceMeasureConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceMeasureConstructorFunction>(state, thisValue, encodedValue, "PerformanceMeasure");
}

static inline bool setJSDOMWindowPerformanceMeasureConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceMeasure"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceNavigationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceNavigationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceNavigationConstructorFunction>(state, thisValue, encodedValue, "PerformanceNavigation");
}

static inline bool setJSDOMWindowPerformanceNavigationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceNavigation"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceResourceTimingConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceResourceTimingConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceResourceTimingConstructorFunction>(state, thisValue, encodedValue, "PerformanceResourceTiming");
}

static inline bool setJSDOMWindowPerformanceResourceTimingConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceResourceTiming"), value);
}

#endif

#if ENABLE(WEB_TIMING)
static inline bool setJSDOMWindowPerformanceTimingConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPerformanceTimingConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPerformanceTimingConstructorFunction>(state, thisValue, encodedValue, "PerformanceTiming");
}

static inline bool setJSDOMWindowPerformanceTimingConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PerformanceTiming"), value);
}

#endif

static inline bool setJSDOMWindowScreenConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowScreenConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowScreenConstructorFunction>(state, thisValue, encodedValue, "Screen");
}

static inline bool setJSDOMWindowScreenConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Screen"), value);
}


static inline bool setJSDOMWindowWebKitPointConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWebKitPointConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWebKitPointConstructorFunction>(state, thisValue, encodedValue, "WebKitPoint");
}

static inline bool setJSDOMWindowWebKitPointConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "WebKitPoint"), value);
}


static inline bool setJSDOMWindowMimeTypeConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMimeTypeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMimeTypeConstructorFunction>(state, thisValue, encodedValue, "MimeType");
}

static inline bool setJSDOMWindowMimeTypeConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MimeType"), value);
}


static inline bool setJSDOMWindowMimeTypeArrayConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowMimeTypeArrayConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowMimeTypeArrayConstructorFunction>(state, thisValue, encodedValue, "MimeTypeArray");
}

static inline bool setJSDOMWindowMimeTypeArrayConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "MimeTypeArray"), value);
}


static inline bool setJSDOMWindowPluginConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPluginConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPluginConstructorFunction>(state, thisValue, encodedValue, "Plugin");
}

static inline bool setJSDOMWindowPluginConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Plugin"), value);
}


static inline bool setJSDOMWindowPluginArrayConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowPluginArrayConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowPluginArrayConstructorFunction>(state, thisValue, encodedValue, "PluginArray");
}

static inline bool setJSDOMWindowPluginArrayConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "PluginArray"), value);
}


static inline bool setJSDOMWindowStorageConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStorageConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStorageConstructorFunction>(state, thisValue, encodedValue, "Storage");
}

static inline bool setJSDOMWindowStorageConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Storage"), value);
}


static inline bool setJSDOMWindowStorageEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowStorageEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowStorageEventConstructorFunction>(state, thisValue, encodedValue, "StorageEvent");
}

static inline bool setJSDOMWindowStorageEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "StorageEvent"), value);
}


static inline bool setJSDOMWindowSVGAElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAElementConstructorFunction>(state, thisValue, encodedValue, "SVGAElement");
}

static inline bool setJSDOMWindowSVGAElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGAltGlyphDefElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAltGlyphDefElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAltGlyphDefElementConstructorFunction>(state, thisValue, encodedValue, "SVGAltGlyphDefElement");
}

static inline bool setJSDOMWindowSVGAltGlyphDefElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAltGlyphDefElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGAltGlyphElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAltGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAltGlyphElementConstructorFunction>(state, thisValue, encodedValue, "SVGAltGlyphElement");
}

static inline bool setJSDOMWindowSVGAltGlyphElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAltGlyphElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGAltGlyphItemElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAltGlyphItemElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAltGlyphItemElementConstructorFunction>(state, thisValue, encodedValue, "SVGAltGlyphItemElement");
}

static inline bool setJSDOMWindowSVGAltGlyphItemElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAltGlyphItemElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGAngleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAngleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAngleConstructorFunction>(state, thisValue, encodedValue, "SVGAngle");
}

static inline bool setJSDOMWindowSVGAngleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAngle"), value);
}


static inline bool setJSDOMWindowSVGAnimateColorElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimateColorElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimateColorElementConstructorFunction>(state, thisValue, encodedValue, "SVGAnimateColorElement");
}

static inline bool setJSDOMWindowSVGAnimateColorElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimateColorElement"), value);
}


static inline bool setJSDOMWindowSVGAnimateElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimateElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimateElementConstructorFunction>(state, thisValue, encodedValue, "SVGAnimateElement");
}

static inline bool setJSDOMWindowSVGAnimateElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimateElement"), value);
}


static inline bool setJSDOMWindowSVGAnimateMotionElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimateMotionElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimateMotionElementConstructorFunction>(state, thisValue, encodedValue, "SVGAnimateMotionElement");
}

static inline bool setJSDOMWindowSVGAnimateMotionElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimateMotionElement"), value);
}


static inline bool setJSDOMWindowSVGAnimateTransformElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimateTransformElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimateTransformElementConstructorFunction>(state, thisValue, encodedValue, "SVGAnimateTransformElement");
}

static inline bool setJSDOMWindowSVGAnimateTransformElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimateTransformElement"), value);
}


static inline bool setJSDOMWindowSVGAnimatedAngleConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedAngleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedAngleConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedAngle");
}

static inline bool setJSDOMWindowSVGAnimatedAngleConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedAngle"), value);
}


static inline bool setJSDOMWindowSVGAnimatedBooleanConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedBooleanConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedBooleanConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedBoolean");
}

static inline bool setJSDOMWindowSVGAnimatedBooleanConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedBoolean"), value);
}


static inline bool setJSDOMWindowSVGAnimatedEnumerationConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedEnumerationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedEnumerationConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedEnumeration");
}

static inline bool setJSDOMWindowSVGAnimatedEnumerationConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedEnumeration"), value);
}


static inline bool setJSDOMWindowSVGAnimatedIntegerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedIntegerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedIntegerConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedInteger");
}

static inline bool setJSDOMWindowSVGAnimatedIntegerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedInteger"), value);
}


static inline bool setJSDOMWindowSVGAnimatedLengthConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedLengthConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedLengthConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedLength");
}

static inline bool setJSDOMWindowSVGAnimatedLengthConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedLength"), value);
}


static inline bool setJSDOMWindowSVGAnimatedLengthListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedLengthListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedLengthListConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedLengthList");
}

static inline bool setJSDOMWindowSVGAnimatedLengthListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedLengthList"), value);
}


static inline bool setJSDOMWindowSVGAnimatedNumberConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedNumberConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedNumberConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedNumber");
}

static inline bool setJSDOMWindowSVGAnimatedNumberConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedNumber"), value);
}


static inline bool setJSDOMWindowSVGAnimatedNumberListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedNumberListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedNumberListConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedNumberList");
}

static inline bool setJSDOMWindowSVGAnimatedNumberListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedNumberList"), value);
}


static inline bool setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedPreserveAspectRatio");
}

static inline bool setJSDOMWindowSVGAnimatedPreserveAspectRatioConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedPreserveAspectRatio"), value);
}


static inline bool setJSDOMWindowSVGAnimatedRectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedRectConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedRect");
}

static inline bool setJSDOMWindowSVGAnimatedRectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedRect"), value);
}


static inline bool setJSDOMWindowSVGAnimatedStringConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedStringConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedStringConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedString");
}

static inline bool setJSDOMWindowSVGAnimatedStringConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedString"), value);
}


static inline bool setJSDOMWindowSVGAnimatedTransformListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimatedTransformListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimatedTransformListConstructorFunction>(state, thisValue, encodedValue, "SVGAnimatedTransformList");
}

static inline bool setJSDOMWindowSVGAnimatedTransformListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimatedTransformList"), value);
}


static inline bool setJSDOMWindowSVGAnimationElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGAnimationElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGAnimationElementConstructorFunction>(state, thisValue, encodedValue, "SVGAnimationElement");
}

static inline bool setJSDOMWindowSVGAnimationElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGAnimationElement"), value);
}


static inline bool setJSDOMWindowSVGCircleElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGCircleElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGCircleElementConstructorFunction>(state, thisValue, encodedValue, "SVGCircleElement");
}

static inline bool setJSDOMWindowSVGCircleElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGCircleElement"), value);
}


static inline bool setJSDOMWindowSVGClipPathElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGClipPathElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGClipPathElementConstructorFunction>(state, thisValue, encodedValue, "SVGClipPathElement");
}

static inline bool setJSDOMWindowSVGClipPathElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGClipPathElement"), value);
}


static inline bool setJSDOMWindowSVGComponentTransferFunctionElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGComponentTransferFunctionElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGComponentTransferFunctionElementConstructorFunction>(state, thisValue, encodedValue, "SVGComponentTransferFunctionElement");
}

static inline bool setJSDOMWindowSVGComponentTransferFunctionElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGComponentTransferFunctionElement"), value);
}


static inline bool setJSDOMWindowSVGCursorElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGCursorElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGCursorElementConstructorFunction>(state, thisValue, encodedValue, "SVGCursorElement");
}

static inline bool setJSDOMWindowSVGCursorElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGCursorElement"), value);
}


static inline bool setJSDOMWindowSVGDefsElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGDefsElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGDefsElementConstructorFunction>(state, thisValue, encodedValue, "SVGDefsElement");
}

static inline bool setJSDOMWindowSVGDefsElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGDefsElement"), value);
}


static inline bool setJSDOMWindowSVGDescElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGDescElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGDescElementConstructorFunction>(state, thisValue, encodedValue, "SVGDescElement");
}

static inline bool setJSDOMWindowSVGDescElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGDescElement"), value);
}


static inline bool setJSDOMWindowSVGElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGElementConstructorFunction>(state, thisValue, encodedValue, "SVGElement");
}

static inline bool setJSDOMWindowSVGElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGElement"), value);
}


static inline bool setJSDOMWindowSVGEllipseElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGEllipseElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGEllipseElementConstructorFunction>(state, thisValue, encodedValue, "SVGEllipseElement");
}

static inline bool setJSDOMWindowSVGEllipseElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGEllipseElement"), value);
}


static inline bool setJSDOMWindowSVGExceptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGExceptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGExceptionConstructorFunction>(state, thisValue, encodedValue, "SVGException");
}

static inline bool setJSDOMWindowSVGExceptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGException"), value);
}


static inline bool setJSDOMWindowSVGFEBlendElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEBlendElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEBlendElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEBlendElement");
}

static inline bool setJSDOMWindowSVGFEBlendElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEBlendElement"), value);
}


static inline bool setJSDOMWindowSVGFEColorMatrixElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEColorMatrixElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEColorMatrixElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEColorMatrixElement");
}

static inline bool setJSDOMWindowSVGFEColorMatrixElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEColorMatrixElement"), value);
}


static inline bool setJSDOMWindowSVGFEComponentTransferElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEComponentTransferElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEComponentTransferElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEComponentTransferElement");
}

static inline bool setJSDOMWindowSVGFEComponentTransferElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEComponentTransferElement"), value);
}


static inline bool setJSDOMWindowSVGFECompositeElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFECompositeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFECompositeElementConstructorFunction>(state, thisValue, encodedValue, "SVGFECompositeElement");
}

static inline bool setJSDOMWindowSVGFECompositeElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFECompositeElement"), value);
}


static inline bool setJSDOMWindowSVGFEConvolveMatrixElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEConvolveMatrixElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEConvolveMatrixElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEConvolveMatrixElement");
}

static inline bool setJSDOMWindowSVGFEConvolveMatrixElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEConvolveMatrixElement"), value);
}


static inline bool setJSDOMWindowSVGFEDiffuseLightingElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEDiffuseLightingElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEDiffuseLightingElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEDiffuseLightingElement");
}

static inline bool setJSDOMWindowSVGFEDiffuseLightingElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEDiffuseLightingElement"), value);
}


static inline bool setJSDOMWindowSVGFEDisplacementMapElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEDisplacementMapElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEDisplacementMapElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEDisplacementMapElement");
}

static inline bool setJSDOMWindowSVGFEDisplacementMapElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEDisplacementMapElement"), value);
}


static inline bool setJSDOMWindowSVGFEDistantLightElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEDistantLightElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEDistantLightElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEDistantLightElement");
}

static inline bool setJSDOMWindowSVGFEDistantLightElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEDistantLightElement"), value);
}


static inline bool setJSDOMWindowSVGFEDropShadowElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEDropShadowElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEDropShadowElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEDropShadowElement");
}

static inline bool setJSDOMWindowSVGFEDropShadowElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEDropShadowElement"), value);
}


static inline bool setJSDOMWindowSVGFEFloodElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEFloodElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEFloodElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEFloodElement");
}

static inline bool setJSDOMWindowSVGFEFloodElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEFloodElement"), value);
}


static inline bool setJSDOMWindowSVGFEFuncAElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEFuncAElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEFuncAElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEFuncAElement");
}

static inline bool setJSDOMWindowSVGFEFuncAElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEFuncAElement"), value);
}


static inline bool setJSDOMWindowSVGFEFuncBElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEFuncBElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEFuncBElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEFuncBElement");
}

static inline bool setJSDOMWindowSVGFEFuncBElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEFuncBElement"), value);
}


static inline bool setJSDOMWindowSVGFEFuncGElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEFuncGElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEFuncGElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEFuncGElement");
}

static inline bool setJSDOMWindowSVGFEFuncGElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEFuncGElement"), value);
}


static inline bool setJSDOMWindowSVGFEFuncRElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEFuncRElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEFuncRElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEFuncRElement");
}

static inline bool setJSDOMWindowSVGFEFuncRElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEFuncRElement"), value);
}


static inline bool setJSDOMWindowSVGFEGaussianBlurElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEGaussianBlurElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEGaussianBlurElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEGaussianBlurElement");
}

static inline bool setJSDOMWindowSVGFEGaussianBlurElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEGaussianBlurElement"), value);
}


static inline bool setJSDOMWindowSVGFEImageElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEImageElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEImageElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEImageElement");
}

static inline bool setJSDOMWindowSVGFEImageElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEImageElement"), value);
}


static inline bool setJSDOMWindowSVGFEMergeElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEMergeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEMergeElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEMergeElement");
}

static inline bool setJSDOMWindowSVGFEMergeElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEMergeElement"), value);
}


static inline bool setJSDOMWindowSVGFEMergeNodeElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEMergeNodeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEMergeNodeElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEMergeNodeElement");
}

static inline bool setJSDOMWindowSVGFEMergeNodeElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEMergeNodeElement"), value);
}


static inline bool setJSDOMWindowSVGFEMorphologyElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEMorphologyElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEMorphologyElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEMorphologyElement");
}

static inline bool setJSDOMWindowSVGFEMorphologyElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEMorphologyElement"), value);
}


static inline bool setJSDOMWindowSVGFEOffsetElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEOffsetElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEOffsetElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEOffsetElement");
}

static inline bool setJSDOMWindowSVGFEOffsetElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEOffsetElement"), value);
}


static inline bool setJSDOMWindowSVGFEPointLightElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFEPointLightElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFEPointLightElementConstructorFunction>(state, thisValue, encodedValue, "SVGFEPointLightElement");
}

static inline bool setJSDOMWindowSVGFEPointLightElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFEPointLightElement"), value);
}


static inline bool setJSDOMWindowSVGFESpecularLightingElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFESpecularLightingElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFESpecularLightingElementConstructorFunction>(state, thisValue, encodedValue, "SVGFESpecularLightingElement");
}

static inline bool setJSDOMWindowSVGFESpecularLightingElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFESpecularLightingElement"), value);
}


static inline bool setJSDOMWindowSVGFESpotLightElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFESpotLightElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFESpotLightElementConstructorFunction>(state, thisValue, encodedValue, "SVGFESpotLightElement");
}

static inline bool setJSDOMWindowSVGFESpotLightElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFESpotLightElement"), value);
}


static inline bool setJSDOMWindowSVGFETileElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFETileElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFETileElementConstructorFunction>(state, thisValue, encodedValue, "SVGFETileElement");
}

static inline bool setJSDOMWindowSVGFETileElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFETileElement"), value);
}


static inline bool setJSDOMWindowSVGFETurbulenceElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFETurbulenceElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFETurbulenceElementConstructorFunction>(state, thisValue, encodedValue, "SVGFETurbulenceElement");
}

static inline bool setJSDOMWindowSVGFETurbulenceElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFETurbulenceElement"), value);
}


static inline bool setJSDOMWindowSVGFilterElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFilterElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFilterElementConstructorFunction>(state, thisValue, encodedValue, "SVGFilterElement");
}

static inline bool setJSDOMWindowSVGFilterElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFilterElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontElement");
}

static inline bool setJSDOMWindowSVGFontElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontFaceElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontFaceElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontFaceElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontFaceElement");
}

static inline bool setJSDOMWindowSVGFontFaceElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontFaceElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontFaceFormatElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontFaceFormatElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontFaceFormatElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontFaceFormatElement");
}

static inline bool setJSDOMWindowSVGFontFaceFormatElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontFaceFormatElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontFaceNameElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontFaceNameElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontFaceNameElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontFaceNameElement");
}

static inline bool setJSDOMWindowSVGFontFaceNameElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontFaceNameElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontFaceSrcElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontFaceSrcElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontFaceSrcElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontFaceSrcElement");
}

static inline bool setJSDOMWindowSVGFontFaceSrcElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontFaceSrcElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGFontFaceUriElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGFontFaceUriElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGFontFaceUriElementConstructorFunction>(state, thisValue, encodedValue, "SVGFontFaceUriElement");
}

static inline bool setJSDOMWindowSVGFontFaceUriElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGFontFaceUriElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGForeignObjectElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGForeignObjectElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGForeignObjectElementConstructorFunction>(state, thisValue, encodedValue, "SVGForeignObjectElement");
}

static inline bool setJSDOMWindowSVGForeignObjectElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGForeignObjectElement"), value);
}


static inline bool setJSDOMWindowSVGGElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGGElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGGElementConstructorFunction>(state, thisValue, encodedValue, "SVGGElement");
}

static inline bool setJSDOMWindowSVGGElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGGElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGGlyphElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGGlyphElementConstructorFunction>(state, thisValue, encodedValue, "SVGGlyphElement");
}

static inline bool setJSDOMWindowSVGGlyphElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGGlyphElement"), value);
}

#endif

#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGGlyphRefElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGGlyphRefElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGGlyphRefElementConstructorFunction>(state, thisValue, encodedValue, "SVGGlyphRefElement");
}

static inline bool setJSDOMWindowSVGGlyphRefElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGGlyphRefElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGGradientElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGGradientElementConstructorFunction>(state, thisValue, encodedValue, "SVGGradientElement");
}

static inline bool setJSDOMWindowSVGGradientElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGGradientElement"), value);
}


static inline bool setJSDOMWindowSVGGraphicsElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGGraphicsElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGGraphicsElementConstructorFunction>(state, thisValue, encodedValue, "SVGGraphicsElement");
}

static inline bool setJSDOMWindowSVGGraphicsElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGGraphicsElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGHKernElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGHKernElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGHKernElementConstructorFunction>(state, thisValue, encodedValue, "SVGHKernElement");
}

static inline bool setJSDOMWindowSVGHKernElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGHKernElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGImageElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGImageElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGImageElementConstructorFunction>(state, thisValue, encodedValue, "SVGImageElement");
}

static inline bool setJSDOMWindowSVGImageElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGImageElement"), value);
}


static inline bool setJSDOMWindowSVGLengthConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGLengthConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGLengthConstructorFunction>(state, thisValue, encodedValue, "SVGLength");
}

static inline bool setJSDOMWindowSVGLengthConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGLength"), value);
}


static inline bool setJSDOMWindowSVGLengthListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGLengthListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGLengthListConstructorFunction>(state, thisValue, encodedValue, "SVGLengthList");
}

static inline bool setJSDOMWindowSVGLengthListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGLengthList"), value);
}


static inline bool setJSDOMWindowSVGLineElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGLineElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGLineElementConstructorFunction>(state, thisValue, encodedValue, "SVGLineElement");
}

static inline bool setJSDOMWindowSVGLineElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGLineElement"), value);
}


static inline bool setJSDOMWindowSVGLinearGradientElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGLinearGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGLinearGradientElementConstructorFunction>(state, thisValue, encodedValue, "SVGLinearGradientElement");
}

static inline bool setJSDOMWindowSVGLinearGradientElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGLinearGradientElement"), value);
}


static inline bool setJSDOMWindowSVGMPathElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMPathElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMPathElementConstructorFunction>(state, thisValue, encodedValue, "SVGMPathElement");
}

static inline bool setJSDOMWindowSVGMPathElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMPathElement"), value);
}


static inline bool setJSDOMWindowSVGMarkerElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMarkerElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMarkerElementConstructorFunction>(state, thisValue, encodedValue, "SVGMarkerElement");
}

static inline bool setJSDOMWindowSVGMarkerElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMarkerElement"), value);
}


static inline bool setJSDOMWindowSVGMaskElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMaskElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMaskElementConstructorFunction>(state, thisValue, encodedValue, "SVGMaskElement");
}

static inline bool setJSDOMWindowSVGMaskElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMaskElement"), value);
}


static inline bool setJSDOMWindowSVGMatrixConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMatrixConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMatrixConstructorFunction>(state, thisValue, encodedValue, "SVGMatrix");
}

static inline bool setJSDOMWindowSVGMatrixConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMatrix"), value);
}


static inline bool setJSDOMWindowSVGMetadataElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMetadataElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMetadataElementConstructorFunction>(state, thisValue, encodedValue, "SVGMetadataElement");
}

static inline bool setJSDOMWindowSVGMetadataElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMetadataElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGMissingGlyphElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGMissingGlyphElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGMissingGlyphElementConstructorFunction>(state, thisValue, encodedValue, "SVGMissingGlyphElement");
}

static inline bool setJSDOMWindowSVGMissingGlyphElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGMissingGlyphElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGNumberConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGNumberConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGNumberConstructorFunction>(state, thisValue, encodedValue, "SVGNumber");
}

static inline bool setJSDOMWindowSVGNumberConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGNumber"), value);
}


static inline bool setJSDOMWindowSVGNumberListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGNumberListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGNumberListConstructorFunction>(state, thisValue, encodedValue, "SVGNumberList");
}

static inline bool setJSDOMWindowSVGNumberListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGNumberList"), value);
}


static inline bool setJSDOMWindowSVGPathElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathElementConstructorFunction>(state, thisValue, encodedValue, "SVGPathElement");
}

static inline bool setJSDOMWindowSVGPathElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathElement"), value);
}


static inline bool setJSDOMWindowSVGPathSegConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegConstructorFunction>(state, thisValue, encodedValue, "SVGPathSeg");
}

static inline bool setJSDOMWindowSVGPathSegConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSeg"), value);
}


static inline bool setJSDOMWindowSVGPathSegArcAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegArcAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegArcAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegArcAbs");
}

static inline bool setJSDOMWindowSVGPathSegArcAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegArcAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegArcRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegArcRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegArcRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegArcRel");
}

static inline bool setJSDOMWindowSVGPathSegArcRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegArcRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegClosePathConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegClosePathConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegClosePathConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegClosePath");
}

static inline bool setJSDOMWindowSVGPathSegClosePathConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegClosePath"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoCubicAbs");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoCubicAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoCubicAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoCubicRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoCubicRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoCubicRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoCubicRel");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoCubicRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoCubicRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoCubicSmoothAbs");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoCubicSmoothAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoCubicSmoothRel");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoCubicSmoothRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoCubicSmoothRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoQuadraticAbs");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoQuadraticAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoQuadraticRel");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoQuadraticRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoQuadraticSmoothAbs");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoQuadraticSmoothAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegCurvetoQuadraticSmoothRel");
}

static inline bool setJSDOMWindowSVGPathSegCurvetoQuadraticSmoothRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegCurvetoQuadraticSmoothRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoAbs");
}

static inline bool setJSDOMWindowSVGPathSegLinetoAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoHorizontalAbs");
}

static inline bool setJSDOMWindowSVGPathSegLinetoHorizontalAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoHorizontalAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoHorizontalRel");
}

static inline bool setJSDOMWindowSVGPathSegLinetoHorizontalRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoHorizontalRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoRel");
}

static inline bool setJSDOMWindowSVGPathSegLinetoRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoVerticalAbs");
}

static inline bool setJSDOMWindowSVGPathSegLinetoVerticalAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoVerticalAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegLinetoVerticalRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegLinetoVerticalRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegLinetoVerticalRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegLinetoVerticalRel");
}

static inline bool setJSDOMWindowSVGPathSegLinetoVerticalRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegLinetoVerticalRel"), value);
}


static inline bool setJSDOMWindowSVGPathSegListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegListConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegList");
}

static inline bool setJSDOMWindowSVGPathSegListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegList"), value);
}


static inline bool setJSDOMWindowSVGPathSegMovetoAbsConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegMovetoAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegMovetoAbsConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegMovetoAbs");
}

static inline bool setJSDOMWindowSVGPathSegMovetoAbsConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegMovetoAbs"), value);
}


static inline bool setJSDOMWindowSVGPathSegMovetoRelConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPathSegMovetoRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPathSegMovetoRelConstructorFunction>(state, thisValue, encodedValue, "SVGPathSegMovetoRel");
}

static inline bool setJSDOMWindowSVGPathSegMovetoRelConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPathSegMovetoRel"), value);
}


static inline bool setJSDOMWindowSVGPatternElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPatternElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPatternElementConstructorFunction>(state, thisValue, encodedValue, "SVGPatternElement");
}

static inline bool setJSDOMWindowSVGPatternElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPatternElement"), value);
}


static inline bool setJSDOMWindowSVGPointConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPointConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPointConstructorFunction>(state, thisValue, encodedValue, "SVGPoint");
}

static inline bool setJSDOMWindowSVGPointConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPoint"), value);
}


static inline bool setJSDOMWindowSVGPointListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPointListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPointListConstructorFunction>(state, thisValue, encodedValue, "SVGPointList");
}

static inline bool setJSDOMWindowSVGPointListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPointList"), value);
}


static inline bool setJSDOMWindowSVGPolygonElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPolygonElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPolygonElementConstructorFunction>(state, thisValue, encodedValue, "SVGPolygonElement");
}

static inline bool setJSDOMWindowSVGPolygonElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPolygonElement"), value);
}


static inline bool setJSDOMWindowSVGPolylineElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPolylineElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPolylineElementConstructorFunction>(state, thisValue, encodedValue, "SVGPolylineElement");
}

static inline bool setJSDOMWindowSVGPolylineElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPolylineElement"), value);
}


static inline bool setJSDOMWindowSVGPreserveAspectRatioConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGPreserveAspectRatioConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGPreserveAspectRatioConstructorFunction>(state, thisValue, encodedValue, "SVGPreserveAspectRatio");
}

static inline bool setJSDOMWindowSVGPreserveAspectRatioConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGPreserveAspectRatio"), value);
}


static inline bool setJSDOMWindowSVGRadialGradientElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGRadialGradientElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGRadialGradientElementConstructorFunction>(state, thisValue, encodedValue, "SVGRadialGradientElement");
}

static inline bool setJSDOMWindowSVGRadialGradientElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGRadialGradientElement"), value);
}


static inline bool setJSDOMWindowSVGRectConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGRectConstructorFunction>(state, thisValue, encodedValue, "SVGRect");
}

static inline bool setJSDOMWindowSVGRectConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGRect"), value);
}


static inline bool setJSDOMWindowSVGRectElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGRectElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGRectElementConstructorFunction>(state, thisValue, encodedValue, "SVGRectElement");
}

static inline bool setJSDOMWindowSVGRectElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGRectElement"), value);
}


static inline bool setJSDOMWindowSVGRenderingIntentConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGRenderingIntentConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGRenderingIntentConstructorFunction>(state, thisValue, encodedValue, "SVGRenderingIntent");
}

static inline bool setJSDOMWindowSVGRenderingIntentConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGRenderingIntent"), value);
}


static inline bool setJSDOMWindowSVGSVGElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGSVGElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGSVGElementConstructorFunction>(state, thisValue, encodedValue, "SVGSVGElement");
}

static inline bool setJSDOMWindowSVGSVGElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGSVGElement"), value);
}


static inline bool setJSDOMWindowSVGScriptElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGScriptElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGScriptElementConstructorFunction>(state, thisValue, encodedValue, "SVGScriptElement");
}

static inline bool setJSDOMWindowSVGScriptElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGScriptElement"), value);
}


static inline bool setJSDOMWindowSVGSetElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGSetElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGSetElementConstructorFunction>(state, thisValue, encodedValue, "SVGSetElement");
}

static inline bool setJSDOMWindowSVGSetElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGSetElement"), value);
}


static inline bool setJSDOMWindowSVGStopElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGStopElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGStopElementConstructorFunction>(state, thisValue, encodedValue, "SVGStopElement");
}

static inline bool setJSDOMWindowSVGStopElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGStopElement"), value);
}


static inline bool setJSDOMWindowSVGStringListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGStringListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGStringListConstructorFunction>(state, thisValue, encodedValue, "SVGStringList");
}

static inline bool setJSDOMWindowSVGStringListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGStringList"), value);
}


static inline bool setJSDOMWindowSVGStyleElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGStyleElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGStyleElementConstructorFunction>(state, thisValue, encodedValue, "SVGStyleElement");
}

static inline bool setJSDOMWindowSVGStyleElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGStyleElement"), value);
}


static inline bool setJSDOMWindowSVGSwitchElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGSwitchElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGSwitchElementConstructorFunction>(state, thisValue, encodedValue, "SVGSwitchElement");
}

static inline bool setJSDOMWindowSVGSwitchElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGSwitchElement"), value);
}


static inline bool setJSDOMWindowSVGSymbolElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGSymbolElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGSymbolElementConstructorFunction>(state, thisValue, encodedValue, "SVGSymbolElement");
}

static inline bool setJSDOMWindowSVGSymbolElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGSymbolElement"), value);
}


static inline bool setJSDOMWindowSVGTRefElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTRefElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTRefElementConstructorFunction>(state, thisValue, encodedValue, "SVGTRefElement");
}

static inline bool setJSDOMWindowSVGTRefElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTRefElement"), value);
}


static inline bool setJSDOMWindowSVGTSpanElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTSpanElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTSpanElementConstructorFunction>(state, thisValue, encodedValue, "SVGTSpanElement");
}

static inline bool setJSDOMWindowSVGTSpanElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTSpanElement"), value);
}


static inline bool setJSDOMWindowSVGTextContentElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTextContentElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTextContentElementConstructorFunction>(state, thisValue, encodedValue, "SVGTextContentElement");
}

static inline bool setJSDOMWindowSVGTextContentElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTextContentElement"), value);
}


static inline bool setJSDOMWindowSVGTextElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTextElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTextElementConstructorFunction>(state, thisValue, encodedValue, "SVGTextElement");
}

static inline bool setJSDOMWindowSVGTextElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTextElement"), value);
}


static inline bool setJSDOMWindowSVGTextPathElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTextPathElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTextPathElementConstructorFunction>(state, thisValue, encodedValue, "SVGTextPathElement");
}

static inline bool setJSDOMWindowSVGTextPathElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTextPathElement"), value);
}


static inline bool setJSDOMWindowSVGTextPositioningElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTextPositioningElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTextPositioningElementConstructorFunction>(state, thisValue, encodedValue, "SVGTextPositioningElement");
}

static inline bool setJSDOMWindowSVGTextPositioningElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTextPositioningElement"), value);
}


static inline bool setJSDOMWindowSVGTitleElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTitleElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTitleElementConstructorFunction>(state, thisValue, encodedValue, "SVGTitleElement");
}

static inline bool setJSDOMWindowSVGTitleElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTitleElement"), value);
}


static inline bool setJSDOMWindowSVGTransformConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTransformConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTransformConstructorFunction>(state, thisValue, encodedValue, "SVGTransform");
}

static inline bool setJSDOMWindowSVGTransformConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTransform"), value);
}


static inline bool setJSDOMWindowSVGTransformListConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGTransformListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGTransformListConstructorFunction>(state, thisValue, encodedValue, "SVGTransformList");
}

static inline bool setJSDOMWindowSVGTransformListConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGTransformList"), value);
}


static inline bool setJSDOMWindowSVGUnitTypesConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGUnitTypesConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGUnitTypesConstructorFunction>(state, thisValue, encodedValue, "SVGUnitTypes");
}

static inline bool setJSDOMWindowSVGUnitTypesConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGUnitTypes"), value);
}


static inline bool setJSDOMWindowSVGUseElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGUseElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGUseElementConstructorFunction>(state, thisValue, encodedValue, "SVGUseElement");
}

static inline bool setJSDOMWindowSVGUseElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGUseElement"), value);
}


#if ENABLE(SVG_FONTS)
static inline bool setJSDOMWindowSVGVKernElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGVKernElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGVKernElementConstructorFunction>(state, thisValue, encodedValue, "SVGVKernElement");
}

static inline bool setJSDOMWindowSVGVKernElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGVKernElement"), value);
}

#endif

static inline bool setJSDOMWindowSVGViewElementConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGViewElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGViewElementConstructorFunction>(state, thisValue, encodedValue, "SVGViewElement");
}

static inline bool setJSDOMWindowSVGViewElementConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGViewElement"), value);
}


static inline bool setJSDOMWindowSVGViewSpecConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGViewSpecConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGViewSpecConstructorFunction>(state, thisValue, encodedValue, "SVGViewSpec");
}

static inline bool setJSDOMWindowSVGViewSpecConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGViewSpec"), value);
}


static inline bool setJSDOMWindowSVGZoomEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowSVGZoomEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowSVGZoomEventConstructorFunction>(state, thisValue, encodedValue, "SVGZoomEvent");
}

static inline bool setJSDOMWindowSVGZoomEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "SVGZoomEvent"), value);
}


static inline bool setJSDOMWindowWorkerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowWorkerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowWorkerConstructorFunction>(state, thisValue, encodedValue, "Worker");
}

static inline bool setJSDOMWindowWorkerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "Worker"), value);
}


static inline bool setJSDOMWindowDOMParserConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowDOMParserConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowDOMParserConstructorFunction>(state, thisValue, encodedValue, "DOMParser");
}

static inline bool setJSDOMWindowDOMParserConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "DOMParser"), value);
}


static inline bool setJSDOMWindowXMLHttpRequestConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLHttpRequestConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLHttpRequestConstructorFunction>(state, thisValue, encodedValue, "XMLHttpRequest");
}

static inline bool setJSDOMWindowXMLHttpRequestConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLHttpRequest"), value);
}


static inline bool setJSDOMWindowXMLHttpRequestEventTargetConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLHttpRequestEventTargetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLHttpRequestEventTargetConstructorFunction>(state, thisValue, encodedValue, "XMLHttpRequestEventTarget");
}

static inline bool setJSDOMWindowXMLHttpRequestEventTargetConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLHttpRequestEventTarget"), value);
}


static inline bool setJSDOMWindowXMLHttpRequestProgressEventConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLHttpRequestProgressEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLHttpRequestProgressEventConstructorFunction>(state, thisValue, encodedValue, "XMLHttpRequestProgressEvent");
}

static inline bool setJSDOMWindowXMLHttpRequestProgressEventConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLHttpRequestProgressEvent"), value);
}


static inline bool setJSDOMWindowXMLHttpRequestUploadConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLHttpRequestUploadConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLHttpRequestUploadConstructorFunction>(state, thisValue, encodedValue, "XMLHttpRequestUpload");
}

static inline bool setJSDOMWindowXMLHttpRequestUploadConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLHttpRequestUpload"), value);
}


static inline bool setJSDOMWindowXMLSerializerConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXMLSerializerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXMLSerializerConstructorFunction>(state, thisValue, encodedValue, "XMLSerializer");
}

static inline bool setJSDOMWindowXMLSerializerConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XMLSerializer"), value);
}


static inline bool setJSDOMWindowXPathEvaluatorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXPathEvaluatorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXPathEvaluatorConstructorFunction>(state, thisValue, encodedValue, "XPathEvaluator");
}

static inline bool setJSDOMWindowXPathEvaluatorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XPathEvaluator"), value);
}


static inline bool setJSDOMWindowXPathExceptionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXPathExceptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXPathExceptionConstructorFunction>(state, thisValue, encodedValue, "XPathException");
}

static inline bool setJSDOMWindowXPathExceptionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XPathException"), value);
}


static inline bool setJSDOMWindowXPathExpressionConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXPathExpressionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXPathExpressionConstructorFunction>(state, thisValue, encodedValue, "XPathExpression");
}

static inline bool setJSDOMWindowXPathExpressionConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XPathExpression"), value);
}


static inline bool setJSDOMWindowXPathResultConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXPathResultConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXPathResultConstructorFunction>(state, thisValue, encodedValue, "XPathResult");
}

static inline bool setJSDOMWindowXPathResultConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XPathResult"), value);
}


#if ENABLE(XSLT)
static inline bool setJSDOMWindowXSLTProcessorConstructorFunction(ExecState&, JSDOMWindow&, JSValue, ThrowScope&);

bool setJSDOMWindowXSLTProcessorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDOMWindow>::setAttribute<setJSDOMWindowXSLTProcessorConstructorFunction>(state, thisValue, encodedValue, "XSLTProcessor");
}

static inline bool setJSDOMWindowXSLTProcessorConstructorFunction(ExecState& state, JSDOMWindow& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(&state, thisObject.wrapped(), ThrowSecurityError))
        return false;
    // Shadowing a built-in constructor.
    return thisObject.putDirect(state.vm(), Identifier::fromString(&state, "XSLTProcessor"), value);
}

#endif

JSValue JSDOMWindow::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMWindowConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetSelectionCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetSelection(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionGetSelectionCaller>(state, "getSelection");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetSelectionCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<DOMSelection>>(*state, *castedThis->globalObject(), impl.getSelection()));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFocusCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionFocus(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionFocusCaller>(state, "focus");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFocusCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.focus(callerDOMWindow(state));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionBlurCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionBlur(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionBlurCaller>(state, "blur");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionBlurCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.blur();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCloseCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionClose(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCloseCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto* document = callerDOMWindow(state).document();
    if (!document)
        return JSValue::encode(jsUndefined());
    impl.close(*document);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPrintCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionPrint(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionPrintCaller>(state, "print");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPrintCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    impl.print();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionStopCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionStop(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionStopCaller>(state, "stop");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionStopCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    impl.stop();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionOpenCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionOpen(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionOpenCaller>(state, "open");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionOpenCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->open(*state));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionShowModalDialogCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionShowModalDialog(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionShowModalDialogCaller>(state, "showModalDialog");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionShowModalDialogCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->showModalDialog(*state));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAlert1Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionAlert1(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionAlert1Caller>(state, "alert");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAlert1Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    impl.alert();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAlert2Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionAlert2(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionAlert2Caller>(state, "alert");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAlert2Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto message = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.alert(WTFMove(message));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionAlert(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 0) {
        return jsDOMWindowInstanceFunctionAlert1(state);
    }
    if (argsCount == 1) {
        return jsDOMWindowInstanceFunctionAlert2(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionConfirmCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionConfirm(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionConfirmCaller>(state, "confirm");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionConfirmCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto message = state->argument(0).isUndefined() ? emptyString() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.confirm(WTFMove(message))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPromptCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionPrompt(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionPromptCaller>(state, "prompt");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPromptCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto message = state->argument(0).isUndefined() ? emptyString() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto defaultValue = state->argument(1).isUndefined() ? emptyString() : convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLDOMString>>(*state, impl.prompt(WTFMove(message), WTFMove(defaultValue))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFindCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionFind(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionFindCaller>(state, "find");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFindCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto string = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto caseSensitive = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto backwards = convert<IDLBoolean>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto wrap = convert<IDLBoolean>(*state, state->argument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto wholeWord = convert<IDLBoolean>(*state, state->argument(4));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto searchInFrames = convert<IDLBoolean>(*state, state->argument(5));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto showDialog = convert<IDLBoolean>(*state, state->argument(6));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.find(WTFMove(string), WTFMove(caseSensitive), WTFMove(backwards), WTFMove(wrap), WTFMove(wholeWord), WTFMove(searchInFrames), WTFMove(showDialog))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollBy1Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScrollBy1(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScrollBy1Caller>(state, "scrollBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollBy1Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto x = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollBy(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollTo1Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScrollTo1(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScrollTo1Caller>(state, "scrollTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollTo1Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto x = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollTo(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScroll1Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScroll1(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScroll1Caller>(state, "scroll");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScroll1Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto x = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollTo(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollBy2Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScrollBy2(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScrollBy2Caller>(state, "scrollBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollBy2Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto option = convert<IDLDictionary<ScrollToOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollBy(WTFMove(option));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScrollBy(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsDOMWindowInstanceFunctionScrollBy2(state);
    }
    if (argsCount == 1) {
        return jsDOMWindowInstanceFunctionScrollBy2(state);
    }
    if (argsCount == 2) {
        return jsDOMWindowInstanceFunctionScrollBy1(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollTo2Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScrollTo2(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScrollTo2Caller>(state, "scrollTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScrollTo2Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto options = convert<IDLDictionary<ScrollToOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollTo(WTFMove(options));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScrollTo(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsDOMWindowInstanceFunctionScrollTo2(state);
    }
    if (argsCount == 1) {
        return jsDOMWindowInstanceFunctionScrollTo2(state);
    }
    if (argsCount == 2) {
        return jsDOMWindowInstanceFunctionScrollTo1(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScroll2Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionScroll2(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionScroll2Caller>(state, "scroll");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionScroll2Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto options = convert<IDLDictionary<ScrollToOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.scrollTo(WTFMove(options));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionScroll(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 0) {
        return jsDOMWindowInstanceFunctionScroll2(state);
    }
    if (argsCount == 1) {
        return jsDOMWindowInstanceFunctionScroll2(state);
    }
    if (argsCount == 2) {
        return jsDOMWindowInstanceFunctionScroll1(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMoveByCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMoveBy(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionMoveByCaller>(state, "moveBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMoveByCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedFloat>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.moveBy(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMoveToCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMoveTo(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionMoveToCaller>(state, "moveTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMoveToCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedFloat>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.moveTo(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionResizeByCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionResizeBy(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionResizeByCaller>(state, "resizeBy");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionResizeByCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedFloat>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.resizeBy(WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionResizeToCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionResizeTo(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionResizeToCaller>(state, "resizeTo");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionResizeToCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto width = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto height = convert<IDLUnrestrictedFloat>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.resizeTo(WTFMove(width), WTFMove(height));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMatchMediaCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMatchMedia(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionMatchMediaCaller>(state, "matchMedia");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMatchMediaCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto query = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<MediaQueryList>>(*state, *castedThis->globalObject(), impl.matchMedia(WTFMove(query))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle1Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle1(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionGetComputedStyle1Caller>(state, "getComputedStyle");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle1Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto element = convert<IDLInterface<Element>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "element", "Window", "getComputedStyle", "Element"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto pseudoElement = state->argument(1).isUndefined() ? String() : convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<CSSStyleDeclaration>>(*state, *castedThis->globalObject(), impl.getComputedStyle(*element, WTFMove(pseudoElement))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle2Caller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

static inline EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle2(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionGetComputedStyle2Caller>(state, "getComputedStyle");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetComputedStyle2Caller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto document = convert<IDLInterface<Document>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "document", "Window", "getComputedStyle", "Document"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto pseudoElement = state->argument(1).isUndefined() ? String() : convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLNullable<IDLInterface<CSSStyleDeclaration>>>(*state, *castedThis->globalObject(), throwScope, impl.getComputedStyle(*document, WTFMove(pseudoElement))));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetComputedStyle(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSElement::info()))
            return jsDOMWindowInstanceFunctionGetComputedStyle1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSDocument::info()))
            return jsDOMWindowInstanceFunctionGetComputedStyle2(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSElement::info()))
            return jsDOMWindowInstanceFunctionGetComputedStyle1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSDocument::info()))
            return jsDOMWindowInstanceFunctionGetComputedStyle2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetMatchedCSSRulesCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionGetMatchedCSSRules(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionGetMatchedCSSRulesCaller>(state, "getMatchedCSSRules");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionGetMatchedCSSRulesCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto element = convert<IDLNullable<IDLInterface<Element>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "element", "Window", "getMatchedCSSRules", "Element"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto pseudoElement = state->argument(1).isUndefined() ? String() : convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<CSSRuleList>>(*state, *castedThis->globalObject(), impl.getMatchedCSSRules(WTFMove(element), WTFMove(pseudoElement))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNodeCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNode(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNodeCaller>(state, "webkitConvertPointFromPageToNode");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitConvertPointFromPageToNodeCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto node = convert<IDLNullable<IDLInterface<Node>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Window", "webkitConvertPointFromPageToNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto p = convert<IDLNullable<IDLInterface<WebKitPoint>>>(*state, state->argument(1), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 1, "p", "Window", "webkitConvertPointFromPageToNode", "WebKitPoint"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitPoint>>(*state, *castedThis->globalObject(), impl.webkitConvertPointFromPageToNode(WTFMove(node), WTFMove(p))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPageCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPage(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPageCaller>(state, "webkitConvertPointFromNodeToPage");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitConvertPointFromNodeToPageCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto node = convert<IDLNullable<IDLInterface<Node>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "node", "Window", "webkitConvertPointFromNodeToPage", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto p = convert<IDLNullable<IDLInterface<WebKitPoint>>>(*state, state->argument(1), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 1, "p", "Window", "webkitConvertPointFromNodeToPage", "WebKitPoint"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitPoint>>(*state, *castedThis->globalObject(), impl.webkitConvertPointFromNodeToPage(WTFMove(node), WTFMove(p))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPostMessageCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionPostMessage(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionPostMessageCaller>(state, "postMessage");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionPostMessageCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto message = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto targetOrigin = convert<IDLUSVString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto transfer = state->argument(2).isUndefined() ? Converter<IDLSequence<IDLObject>>::ReturnType{ } : convert<IDLSequence<IDLObject>>(*state, state->uncheckedArgument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.postMessage(*state, callerDOMWindow(state), WTFMove(message), WTFMove(targetOrigin), WTFMove(transfer)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionRequestAnimationFrameCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionRequestAnimationFrame(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionRequestAnimationFrameCaller>(state, "requestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionRequestAnimationFrameCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto callback = convert<IDLCallbackFunction<JSRequestAnimationFrameCallback>>(*state, state->uncheckedArgument(0), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "Window", "requestAnimationFrame"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLLong>(impl.requestAnimationFrame(callback.releaseNonNull())));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCancelAnimationFrameCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCancelAnimationFrame(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionCancelAnimationFrameCaller>(state, "cancelAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCancelAnimationFrameCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto id = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.cancelAnimationFrame(WTFMove(id));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitRequestAnimationFrameCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitRequestAnimationFrame(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionWebkitRequestAnimationFrameCaller>(state, "webkitRequestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitRequestAnimationFrameCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto callback = convert<IDLCallbackFunction<JSRequestAnimationFrameCallback>>(*state, state->uncheckedArgument(0), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "Window", "webkitRequestAnimationFrame"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLLong>(impl.webkitRequestAnimationFrame(callback.releaseNonNull())));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitCancelAnimationFrameCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitCancelAnimationFrame(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionWebkitCancelAnimationFrameCaller>(state, "webkitCancelAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitCancelAnimationFrameCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto id = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.cancelAnimationFrame(WTFMove(id));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrameCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrame(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrameCaller>(state, "webkitCancelRequestAnimationFrame");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionWebkitCancelRequestAnimationFrameCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto id = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.cancelAnimationFrame(WTFMove(id));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCaptureEventsCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCaptureEvents(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionCaptureEventsCaller>(state, "captureEvents");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCaptureEventsCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    impl.captureEvents();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionReleaseEventsCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionReleaseEvents(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionReleaseEventsCaller>(state, "releaseEvents");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionReleaseEventsCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    impl.releaseEvents();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTreeCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTree(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTreeCaller>(state, "collectMatchingElementsInFlatTree");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionCollectMatchingElementsInFlatTreeCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto scope = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "scope", "Window", "collectMatchingElementsInFlatTree", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto selectors = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<NodeList>>(*state, *castedThis->globalObject(), throwScope, impl.collectMatchingElementsInFlatTree(*scope, WTFMove(selectors))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMatchingElementInFlatTreeCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionMatchingElementInFlatTree(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionMatchingElementInFlatTreeCaller>(state, "matchingElementInFlatTree");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionMatchingElementInFlatTreeCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto scope = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "scope", "Window", "matchingElementInFlatTree", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto selectors = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLInterface<Element>>>(*state, *castedThis->globalObject(), throwScope, impl.matchingElementInFlatTree(*scope, WTFMove(selectors))));
}

#if ENABLE(FETCH_API)
static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFetchRequestCaller(JSC::ExecState*, JSDOMWindow*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsDOMWindowInstanceFunctionFetchRequestPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionFetchRequest(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsDOMWindowInstanceFunctionFetchRequestPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsDOMWindowInstanceFunctionFetchRequestPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSDOMWindow>::callPromiseOperation<jsDOMWindowInstanceFunctionFetchRequestCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "fetchRequest");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionFetchRequestCaller(JSC::ExecState* state, JSDOMWindow* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto request = convert<IDLInterface<FetchRequest>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "request", "Window", "fetchRequest", "FetchRequest"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    WebCore::DOMWindowFetch::fetch(impl, *request, WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionOpenDatabaseCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionOpenDatabase(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionOpenDatabaseCaller>(state, "openDatabase");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionOpenDatabaseCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 4))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto version = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto displayName = convert<IDLDOMString>(*state, state->uncheckedArgument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto estimatedSize = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(3), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto creationCallback = convert<IDLNullable<IDLCallbackFunction<JSDatabaseCallback>>>(*state, state->argument(4), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 4, "creationCallback", "Window", "openDatabase"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLInterface<Database>>>(*state, *castedThis->globalObject(), throwScope, WebCore::DOMWindowWebDatabase::openDatabase(impl, WTFMove(name), WTFMove(version), WTFMove(displayName), WTFMove(estimatedSize), WTFMove(creationCallback))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionSetTimeoutCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionSetTimeout(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionSetTimeoutCaller>(state, "setTimeout");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionSetTimeoutCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->setTimeout(*state));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionClearTimeoutCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionClearTimeout(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionClearTimeoutCaller>(state, "clearTimeout");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionClearTimeoutCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto handle = convert<IDLLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.clearTimeout(WTFMove(handle));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionSetIntervalCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionSetInterval(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionSetIntervalCaller>(state, "setInterval");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionSetIntervalCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->setInterval(*state));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionClearIntervalCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionClearInterval(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionClearIntervalCaller>(state, "clearInterval");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionClearIntervalCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    auto handle = convert<IDLLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.clearInterval(WTFMove(handle));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAtobCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionAtob(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionAtobCaller>(state, "atob");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionAtobCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto string = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, throwScope, impl.atob(WTFMove(string))));
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionBtoaCaller(JSC::ExecState*, JSDOMWindow*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDOMWindowInstanceFunctionBtoa(ExecState* state)
{
    return BindingCaller<JSDOMWindow>::callOperation<jsDOMWindowInstanceFunctionBtoaCaller>(state, "btoa");
}

static inline JSC::EncodedJSValue jsDOMWindowInstanceFunctionBtoaCaller(JSC::ExecState* state, JSDOMWindow* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(state, castedThis->wrapped(), ThrowSecurityError))
        return JSValue::encode(jsUndefined());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto string = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, throwScope, impl.btoa(WTFMove(string))));
}

void JSDOMWindow::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSDOMWindow*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSDOMWindow::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSDOMWindow*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}


}
