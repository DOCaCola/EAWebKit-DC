/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMPointReadOnly.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMPointInit.h"
#include "JSDOMPointReadOnly.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/ObjectConstructor.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMPointReadOnlyConstructorFunctionFromPoint(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMPointReadOnlyPrototypeFunctionToJSON(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMPointReadOnlyX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMPointReadOnlyY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMPointReadOnlyZ(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMPointReadOnlyW(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMPointReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMPointReadOnlyConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMPointReadOnlyPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMPointReadOnlyPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMPointReadOnlyPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMPointReadOnlyPrototype>(vm.heap)) JSDOMPointReadOnlyPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMPointReadOnlyPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMPointReadOnlyConstructor = JSDOMConstructor<JSDOMPointReadOnly>;

/* Hash table for constructor */

static const HashTableValue JSDOMPointReadOnlyConstructorTableValues[] =
{
    { "fromPoint", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMPointReadOnlyConstructorFunctionFromPoint), (intptr_t) (0) } },
};

static inline EncodedJSValue constructJSDOMPointReadOnly1(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMPointReadOnlyConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto point = convert<IDLDictionary<DOMPointInit>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMPointReadOnly::create(WTFMove(point));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPointReadOnly>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

static inline EncodedJSValue constructJSDOMPointReadOnly2(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDOMPointReadOnlyConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto x = state->argument(0).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = state->argument(1).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto z = state->argument(2).isUndefined() ? 0 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto w = state->argument(3).isUndefined() ? 1 : convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = DOMPointReadOnly::create(WTFMove(x), WTFMove(y), WTFMove(z), WTFMove(w));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPointReadOnly>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> EncodedJSValue JSC_HOST_CALL JSDOMPointReadOnlyConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(4, state->argumentCount());
    if (argsCount == 0) {
        return constructJSDOMPointReadOnly2(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isUndefined())
            return constructJSDOMPointReadOnly2(state);
        if (distinguishingArg.isUndefinedOrNull())
            return constructJSDOMPointReadOnly1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->type() != RegExpObjectType)
            return constructJSDOMPointReadOnly1(state);
        if (distinguishingArg.isNumber())
            return constructJSDOMPointReadOnly2(state);
        return constructJSDOMPointReadOnly2(state);
    }
    if (argsCount == 2) {
        return constructJSDOMPointReadOnly2(state);
    }
    if (argsCount == 3) {
        return constructJSDOMPointReadOnly2(state);
    }
    if (argsCount == 4) {
        return constructJSDOMPointReadOnly2(state);
    }
    return throwVMTypeError(state, throwScope);
}

template<> JSValue JSDOMPointReadOnlyConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDOMPointReadOnlyConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMPointReadOnly::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DOMPointReadOnly"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDOMPointReadOnlyConstructorTableValues, *this);
}

template<> const ClassInfo JSDOMPointReadOnlyConstructor::s_info = { "DOMPointReadOnly", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPointReadOnlyConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMPointReadOnlyPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointReadOnlyConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMPointReadOnlyConstructor) } },
    { "x", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointReadOnlyX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "y", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointReadOnlyY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "z", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointReadOnlyZ), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "w", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMPointReadOnlyW), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toJSON", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMPointReadOnlyPrototypeFunctionToJSON), (intptr_t) (0) } },
};

const ClassInfo JSDOMPointReadOnlyPrototype::s_info = { "DOMPointReadOnlyPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPointReadOnlyPrototype) };

void JSDOMPointReadOnlyPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMPointReadOnlyPrototypeTableValues, *this);
}

const ClassInfo JSDOMPointReadOnly::s_info = { "DOMPointReadOnly", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMPointReadOnly) };

JSDOMPointReadOnly::JSDOMPointReadOnly(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMPointReadOnly>&& impl)
    : JSDOMWrapper<DOMPointReadOnly>(structure, globalObject, WTFMove(impl))
{
}

void JSDOMPointReadOnly::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMPointReadOnly::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMPointReadOnlyPrototype::create(vm, globalObject, JSDOMPointReadOnlyPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDOMPointReadOnly::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMPointReadOnly>(vm, globalObject);
}

void JSDOMPointReadOnly::destroy(JSC::JSCell* cell)
{
    JSDOMPointReadOnly* thisObject = static_cast<JSDOMPointReadOnly*>(cell);
    thisObject->JSDOMPointReadOnly::~JSDOMPointReadOnly();
}

template<> inline JSDOMPointReadOnly* BindingCaller<JSDOMPointReadOnly>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMPointReadOnly*>(JSValue::decode(thisValue));
}

template<> inline JSDOMPointReadOnly* BindingCaller<JSDOMPointReadOnly>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMPointReadOnly*>(state.thisValue());
}

static inline JSValue jsDOMPointReadOnlyXGetter(ExecState&, JSDOMPointReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointReadOnlyX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPointReadOnly>::attribute<jsDOMPointReadOnlyXGetter>(state, thisValue, "x");
}

static inline JSValue jsDOMPointReadOnlyXGetter(ExecState& state, JSDOMPointReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.x());
    return result;
}

static inline JSValue jsDOMPointReadOnlyYGetter(ExecState&, JSDOMPointReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointReadOnlyY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPointReadOnly>::attribute<jsDOMPointReadOnlyYGetter>(state, thisValue, "y");
}

static inline JSValue jsDOMPointReadOnlyYGetter(ExecState& state, JSDOMPointReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.y());
    return result;
}

static inline JSValue jsDOMPointReadOnlyZGetter(ExecState&, JSDOMPointReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointReadOnlyZ(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPointReadOnly>::attribute<jsDOMPointReadOnlyZGetter>(state, thisValue, "z");
}

static inline JSValue jsDOMPointReadOnlyZGetter(ExecState& state, JSDOMPointReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.z());
    return result;
}

static inline JSValue jsDOMPointReadOnlyWGetter(ExecState&, JSDOMPointReadOnly&, ThrowScope& throwScope);

EncodedJSValue jsDOMPointReadOnlyW(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMPointReadOnly>::attribute<jsDOMPointReadOnlyWGetter>(state, thisValue, "w");
}

static inline JSValue jsDOMPointReadOnlyWGetter(ExecState& state, JSDOMPointReadOnly& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.w());
    return result;
}

EncodedJSValue jsDOMPointReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMPointReadOnlyPrototype* domObject = jsDynamicDowncast<JSDOMPointReadOnlyPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMPointReadOnly::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMPointReadOnlyConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMPointReadOnlyPrototype* domObject = jsDynamicDowncast<JSDOMPointReadOnlyPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDOMPointReadOnly::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMPointReadOnlyConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMPointReadOnlyConstructorFunctionFromPoint(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto other = convert<IDLDictionary<DOMPointInit>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DOMPointReadOnly>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), DOMPointReadOnly::fromPoint(WTFMove(other))));
}

static inline EncodedJSValue jsDOMPointReadOnlyPrototypeFunctionToJSONCaller(ExecState* state, JSDOMPointReadOnly* thisObject, JSC::ThrowScope& throwScope)
{
    auto& vm = state->vm();
    auto* result = constructEmptyObject(state);

    auto xValue = jsDOMPointReadOnlyXGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "x"), xValue);

    auto yValue = jsDOMPointReadOnlyYGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "y"), yValue);

    auto zValue = jsDOMPointReadOnlyZGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "z"), zValue);

    auto wValue = jsDOMPointReadOnlyWGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "w"), wValue);

    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMPointReadOnlyPrototypeFunctionToJSON(ExecState* state)
{
    return BindingCaller<JSDOMPointReadOnly>::callOperation<jsDOMPointReadOnlyPrototypeFunctionToJSONCaller>(state, "toJSON");
}

bool JSDOMPointReadOnlyOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMPointReadOnlyOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMPointReadOnly = static_cast<JSDOMPointReadOnly*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMPointReadOnly->wrapped(), jsDOMPointReadOnly);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMPointReadOnly>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMPointReadOnly.
    static_assert(!__is_polymorphic(DOMPointReadOnly), "DOMPointReadOnly is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DOMPointReadOnly>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMPointReadOnly& impl)
{
    return wrap(state, globalObject, impl);
}

DOMPointReadOnly* JSDOMPointReadOnly::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDOMPointReadOnly*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
