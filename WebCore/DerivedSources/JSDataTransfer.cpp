/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDataTransfer.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSElement.h"
#include "JSFileList.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

#if ENABLE(DATA_TRANSFER_ITEMS)
#include "JSDataTransferItemList.h"
#endif

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionSetDragImage(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionGetData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionSetData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionClearData(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDataTransferDropEffect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDataTransferDropEffect(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDataTransferEffectAllowed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDataTransferEffectAllowed(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(DATA_TRANSFER_ITEMS)
JSC::EncodedJSValue jsDataTransferItems(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsDataTransferTypes(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDataTransferFiles(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDataTransferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDataTransferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDataTransferPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDataTransferPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDataTransferPrototype* ptr = new (NotNull, JSC::allocateCell<JSDataTransferPrototype>(vm.heap)) JSDataTransferPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDataTransferPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDataTransferConstructor = JSDOMConstructorNotConstructable<JSDataTransfer>;

template<> JSValue JSDataTransferConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDataTransferConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDataTransfer::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DataTransfer"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDataTransferConstructor::s_info = { "DataTransfer", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDataTransferConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDataTransferPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDataTransferConstructor) } },
    { "dropEffect", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferDropEffect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDataTransferDropEffect) } },
    { "effectAllowed", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferEffectAllowed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDataTransferEffectAllowed) } },
#if ENABLE(DATA_TRANSFER_ITEMS)
    { "items", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferItems), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "types", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferTypes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "files", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferFiles), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "setDragImage", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferPrototypeFunctionSetDragImage), (intptr_t) (3) } },
    { "getData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferPrototypeFunctionGetData), (intptr_t) (1) } },
    { "setData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferPrototypeFunctionSetData), (intptr_t) (2) } },
    { "clearData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferPrototypeFunctionClearData), (intptr_t) (0) } },
};

const ClassInfo JSDataTransferPrototype::s_info = { "DataTransferPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDataTransferPrototype) };

void JSDataTransferPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDataTransferPrototypeTableValues, *this);
}

const ClassInfo JSDataTransfer::s_info = { "DataTransfer", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDataTransfer) };

JSDataTransfer::JSDataTransfer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DataTransfer>&& impl)
    : JSDOMWrapper<DataTransfer>(structure, globalObject, WTFMove(impl))
{
}

void JSDataTransfer::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDataTransfer::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDataTransferPrototype::create(vm, globalObject, JSDataTransferPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDataTransfer::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDataTransfer>(vm, globalObject);
}

void JSDataTransfer::destroy(JSC::JSCell* cell)
{
    JSDataTransfer* thisObject = static_cast<JSDataTransfer*>(cell);
    thisObject->JSDataTransfer::~JSDataTransfer();
}

template<> inline JSDataTransfer* BindingCaller<JSDataTransfer>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDataTransfer*>(JSValue::decode(thisValue));
}

template<> inline JSDataTransfer* BindingCaller<JSDataTransfer>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDataTransfer*>(state.thisValue());
}

static inline JSValue jsDataTransferDropEffectGetter(ExecState&, JSDataTransfer&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferDropEffect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransfer>::attribute<jsDataTransferDropEffectGetter>(state, thisValue, "dropEffect");
}

static inline JSValue jsDataTransferDropEffectGetter(ExecState& state, JSDataTransfer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.dropEffect());
    return result;
}

static inline JSValue jsDataTransferEffectAllowedGetter(ExecState&, JSDataTransfer&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferEffectAllowed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransfer>::attribute<jsDataTransferEffectAllowedGetter>(state, thisValue, "effectAllowed");
}

static inline JSValue jsDataTransferEffectAllowedGetter(ExecState& state, JSDataTransfer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.effectAllowed());
    return result;
}

#if ENABLE(DATA_TRANSFER_ITEMS)
static inline JSValue jsDataTransferItemsGetter(ExecState&, JSDataTransfer&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferItems(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransfer>::attribute<jsDataTransferItemsGetter>(state, thisValue, "items");
}

static inline JSValue jsDataTransferItemsGetter(ExecState& state, JSDataTransfer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DataTransferItemList>>(state, *thisObject.globalObject(), impl.items());
    return result;
}

#endif

static inline JSValue jsDataTransferTypesGetter(ExecState&, JSDataTransfer&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferTypes(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransfer>::attribute<jsDataTransferTypesGetter>(state, thisValue, "types");
}

static inline JSValue jsDataTransferTypesGetter(ExecState& state, JSDataTransfer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLFrozenArray<IDLDOMString>>(state, *thisObject.globalObject(), impl.types());
    return result;
}

static inline JSValue jsDataTransferFilesGetter(ExecState&, JSDataTransfer&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferFiles(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransfer>::attribute<jsDataTransferFilesGetter>(state, thisValue, "files");
}

static inline JSValue jsDataTransferFilesGetter(ExecState& state, JSDataTransfer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<FileList>>(state, *thisObject.globalObject(), impl.files());
    return result;
}

EncodedJSValue jsDataTransferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDataTransferPrototype* domObject = jsDynamicDowncast<JSDataTransferPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDataTransfer::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDataTransferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDataTransferPrototype* domObject = jsDynamicDowncast<JSDataTransferPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSDataTransferDropEffectFunction(ExecState&, JSDataTransfer&, JSValue, ThrowScope&);

bool setJSDataTransferDropEffect(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDataTransfer>::setAttribute<setJSDataTransferDropEffectFunction>(state, thisValue, encodedValue, "dropEffect");
}

static inline bool setJSDataTransferDropEffectFunction(ExecState& state, JSDataTransfer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDropEffect(WTFMove(nativeValue));
    return true;
}


static inline bool setJSDataTransferEffectAllowedFunction(ExecState&, JSDataTransfer&, JSValue, ThrowScope&);

bool setJSDataTransferEffectAllowed(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDataTransfer>::setAttribute<setJSDataTransferEffectAllowedFunction>(state, thisValue, encodedValue, "effectAllowed");
}

static inline bool setJSDataTransferEffectAllowedFunction(ExecState& state, JSDataTransfer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setEffectAllowed(WTFMove(nativeValue));
    return true;
}


JSValue JSDataTransfer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDataTransferConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionSetDragImageCaller(JSC::ExecState*, JSDataTransfer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionSetDragImage(ExecState* state)
{
    return BindingCaller<JSDataTransfer>::callOperation<jsDataTransferPrototypeFunctionSetDragImageCaller>(state, "setDragImage");
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionSetDragImageCaller(JSC::ExecState* state, JSDataTransfer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 3))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto image = convert<IDLNullable<IDLInterface<Element>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "image", "DataTransfer", "setDragImage", "Element"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto x = convert<IDLLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setDragImage(WTFMove(image), WTFMove(x), WTFMove(y));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionGetDataCaller(JSC::ExecState*, JSDataTransfer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionGetData(ExecState* state)
{
    return BindingCaller<JSDataTransfer>::callOperation<jsDataTransferPrototypeFunctionGetDataCaller>(state, "getData");
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionGetDataCaller(JSC::ExecState* state, JSDataTransfer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto format = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.getData(WTFMove(format))));
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionSetDataCaller(JSC::ExecState*, JSDataTransfer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionSetData(ExecState* state)
{
    return BindingCaller<JSDataTransfer>::callOperation<jsDataTransferPrototypeFunctionSetDataCaller>(state, "setData");
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionSetDataCaller(JSC::ExecState* state, JSDataTransfer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto format = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto data = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setData(WTFMove(format), WTFMove(data));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionClearDataCaller(JSC::ExecState*, JSDataTransfer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferPrototypeFunctionClearData(ExecState* state)
{
    return BindingCaller<JSDataTransfer>::callOperation<jsDataTransferPrototypeFunctionClearDataCaller>(state, "clearData");
}

static inline JSC::EncodedJSValue jsDataTransferPrototypeFunctionClearDataCaller(JSC::ExecState* state, JSDataTransfer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto format = state->argument(0).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.clearData(WTFMove(format));
    return JSValue::encode(jsUndefined());
}

bool JSDataTransferOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDataTransferOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDataTransfer = static_cast<JSDataTransfer*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDataTransfer->wrapped(), jsDataTransfer);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DataTransfer>&& impl)
{
    return createWrapper<DataTransfer>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DataTransfer& impl)
{
    return wrap(state, globalObject, impl);
}

DataTransfer* JSDataTransfer::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDataTransfer*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
