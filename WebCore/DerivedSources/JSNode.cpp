/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSNode.h"

#include "CustomElementReactionQueue.h"
#include "DOMJITIDLTypeFilter.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDocument.h"
#include "JSElement.h"
#include "JSNode.h"
#include "JSNodeList.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> Node::GetRootNodeOptions convertDictionary<Node::GetRootNodeOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    Node::GetRootNodeOptions result;
    JSValue composedValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "composed"));
    if (!composedValue.isUndefined()) {
        result.composed = convert<IDLBoolean>(state, composedValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.composed = false;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionInsertBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionReplaceChild(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionRemoveChild(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionAppendChild(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionHasChildNodes(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionCloneNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionNormalize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsSameNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsEqualNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionLookupPrefix(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionLookupNamespaceURI(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsDefaultNamespace(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionCompareDocumentPosition(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionContains(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionGetRootNode(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsNodeNodeName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeNodeValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNodeNodeValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNodeNodeType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeParentNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeChildNodes(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeFirstChild(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeLastChild(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodePreviousSibling(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeNextSibling(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeOwnerDocument(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeBaseURI(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeTextContent(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNodeTextContent(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNodeIsConnected(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeParentElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSNodePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSNodePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSNodePrototype* ptr = new (NotNull, JSC::allocateCell<JSNodePrototype>(vm.heap)) JSNodePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSNodePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSNodeConstructor = JSDOMConstructorNotConstructable<JSNode>;

/* Hash table for constructor */

static const HashTableValue JSNodeConstructorTableValues[] =
{
    { "ELEMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "ATTRIBUTE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "TEXT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "CDATA_SECTION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "ENTITY_REFERENCE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "ENTITY_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(6) } },
    { "PROCESSING_INSTRUCTION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(7) } },
    { "COMMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8) } },
    { "DOCUMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(9) } },
    { "DOCUMENT_TYPE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(10) } },
    { "DOCUMENT_FRAGMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(11) } },
    { "NOTATION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(12) } },
    { "DOCUMENT_POSITION_DISCONNECTED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x01) } },
    { "DOCUMENT_POSITION_PRECEDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x02) } },
    { "DOCUMENT_POSITION_FOLLOWING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x04) } },
    { "DOCUMENT_POSITION_CONTAINS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x08) } },
    { "DOCUMENT_POSITION_CONTAINED_BY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x10) } },
    { "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x20) } },
};

static_assert(Node::ELEMENT_NODE == 1, "ELEMENT_NODE in Node does not match value from IDL");
static_assert(Node::ATTRIBUTE_NODE == 2, "ATTRIBUTE_NODE in Node does not match value from IDL");
static_assert(Node::TEXT_NODE == 3, "TEXT_NODE in Node does not match value from IDL");
static_assert(Node::CDATA_SECTION_NODE == 4, "CDATA_SECTION_NODE in Node does not match value from IDL");
static_assert(Node::ENTITY_REFERENCE_NODE == 5, "ENTITY_REFERENCE_NODE in Node does not match value from IDL");
static_assert(Node::ENTITY_NODE == 6, "ENTITY_NODE in Node does not match value from IDL");
static_assert(Node::PROCESSING_INSTRUCTION_NODE == 7, "PROCESSING_INSTRUCTION_NODE in Node does not match value from IDL");
static_assert(Node::COMMENT_NODE == 8, "COMMENT_NODE in Node does not match value from IDL");
static_assert(Node::DOCUMENT_NODE == 9, "DOCUMENT_NODE in Node does not match value from IDL");
static_assert(Node::DOCUMENT_TYPE_NODE == 10, "DOCUMENT_TYPE_NODE in Node does not match value from IDL");
static_assert(Node::DOCUMENT_FRAGMENT_NODE == 11, "DOCUMENT_FRAGMENT_NODE in Node does not match value from IDL");
static_assert(Node::NOTATION_NODE == 12, "NOTATION_NODE in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_DISCONNECTED == 0x01, "DOCUMENT_POSITION_DISCONNECTED in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_PRECEDING == 0x02, "DOCUMENT_POSITION_PRECEDING in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_FOLLOWING == 0x04, "DOCUMENT_POSITION_FOLLOWING in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_CONTAINS == 0x08, "DOCUMENT_POSITION_CONTAINS in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_CONTAINED_BY == 0x10, "DOCUMENT_POSITION_CONTAINED_BY in Node does not match value from IDL");
static_assert(Node::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC == 0x20, "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC in Node does not match value from IDL");

template<> JSValue JSNodeConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSNodeConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSNode::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Node"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSNodeConstructorTableValues, *this);
}

template<> const ClassInfo JSNodeConstructor::s_info = { "Node", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNodeConstructor) };

/* Hash table for prototype */

static const HashTableValue JSNodePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNodeConstructor) } },
    { "nodeName", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeNodeName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "nodeValue", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeNodeValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNodeNodeValue) } },
    { "nodeType", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeNodeType), (intptr_t) (0) } },
    { "parentNode", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeParentNode), (intptr_t) (0) } },
    { "childNodes", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeChildNodes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "firstChild", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeFirstChild), (intptr_t) (0) } },
    { "lastChild", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeLastChild), (intptr_t) (0) } },
    { "previousSibling", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodePreviousSibling), (intptr_t) (0) } },
    { "nextSibling", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeNextSibling), (intptr_t) (0) } },
    { "ownerDocument", ReadOnly | CustomAccessor | DOMJITAttribute, NoIntrinsic, { (intptr_t)static_cast<DOMJITGetterSetterGenerator>(domJITGetterSetterForNodeOwnerDocument), (intptr_t) (0) } },
    { "baseURI", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeBaseURI), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "textContent", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeTextContent), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNodeTextContent) } },
    { "isConnected", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeIsConnected), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "parentElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNodeParentElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "insertBefore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionInsertBefore), (intptr_t) (2) } },
    { "replaceChild", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionReplaceChild), (intptr_t) (2) } },
    { "removeChild", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionRemoveChild), (intptr_t) (1) } },
    { "appendChild", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionAppendChild), (intptr_t) (1) } },
    { "hasChildNodes", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionHasChildNodes), (intptr_t) (0) } },
    { "cloneNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionCloneNode), (intptr_t) (0) } },
    { "normalize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionNormalize), (intptr_t) (0) } },
    { "isSameNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionIsSameNode), (intptr_t) (1) } },
    { "isEqualNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionIsEqualNode), (intptr_t) (1) } },
    { "lookupPrefix", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionLookupPrefix), (intptr_t) (1) } },
    { "lookupNamespaceURI", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionLookupNamespaceURI), (intptr_t) (1) } },
    { "isDefaultNamespace", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionIsDefaultNamespace), (intptr_t) (1) } },
    { "compareDocumentPosition", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionCompareDocumentPosition), (intptr_t) (1) } },
    { "contains", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionContains), (intptr_t) (1) } },
    { "getRootNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNodePrototypeFunctionGetRootNode), (intptr_t) (0) } },
    { "ELEMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "ATTRIBUTE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "TEXT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "CDATA_SECTION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "ENTITY_REFERENCE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "ENTITY_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(6) } },
    { "PROCESSING_INSTRUCTION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(7) } },
    { "COMMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8) } },
    { "DOCUMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(9) } },
    { "DOCUMENT_TYPE_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(10) } },
    { "DOCUMENT_FRAGMENT_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(11) } },
    { "NOTATION_NODE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(12) } },
    { "DOCUMENT_POSITION_DISCONNECTED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x01) } },
    { "DOCUMENT_POSITION_PRECEDING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x02) } },
    { "DOCUMENT_POSITION_FOLLOWING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x04) } },
    { "DOCUMENT_POSITION_CONTAINS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x08) } },
    { "DOCUMENT_POSITION_CONTAINED_BY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x10) } },
    { "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0x20) } },
};

const ClassInfo JSNodePrototype::s_info = { "NodePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNodePrototype) };

void JSNodePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSNodePrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("getRootNode"), strlen("getRootNode"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
    if (!RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("isConnected"), strlen("isConnected"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSNode::s_info = { "Node", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNode) };

JSNode::JSNode(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Node>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSNode::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSNode::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSNodePrototype::create(vm, globalObject, JSNodePrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSNode::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNode>(vm, globalObject);
}

template<> inline JSNode* BindingCaller<JSNode>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSNode*>(JSValue::decode(thisValue));
}

template<> inline JSNode* BindingCaller<JSNode>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSNode*>(state.thisValue());
}

static inline JSValue jsNodeNodeNameGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeNodeName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeNodeNameGetter>(state, thisValue, "nodeName");
}

static inline JSValue jsNodeNodeNameGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.nodeName());
    return result;
}

static inline JSValue jsNodeNodeValueGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeNodeValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeNodeValueGetter>(state, thisValue, "nodeValue");
}

static inline JSValue jsNodeNodeValueGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.nodeValue());
    return result;
}

static inline JSValue jsNodeNodeTypeGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeNodeType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeNodeTypeGetter>(state, thisValue, "nodeType");
}

static inline JSValue jsNodeNodeTypeGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.nodeType(state);
}

NodeNodeTypeDOMJIT::NodeNodeTypeDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeNodeType, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLUnsignedShort>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeNodeType()
{
    static NeverDestroyed<NodeNodeTypeDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeParentNodeGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeParentNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeParentNodeGetter>(state, thisValue, "parentNode");
}

static inline JSValue jsNodeParentNodeGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.parentNode());
    return result;
}

NodeParentNodeDOMJIT::NodeParentNodeDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeParentNode, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Node>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeParentNode()
{
    static NeverDestroyed<NodeParentNodeDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeChildNodesGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeChildNodes(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeChildNodesGetter>(state, thisValue, "childNodes");
}

static inline JSValue jsNodeChildNodesGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.childNodes());
    return result;
}

static inline JSValue jsNodeFirstChildGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeFirstChild(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeFirstChildGetter>(state, thisValue, "firstChild");
}

static inline JSValue jsNodeFirstChildGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.firstChild());
    return result;
}

NodeFirstChildDOMJIT::NodeFirstChildDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeFirstChild, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Node>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeFirstChild()
{
    static NeverDestroyed<NodeFirstChildDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeLastChildGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeLastChild(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeLastChildGetter>(state, thisValue, "lastChild");
}

static inline JSValue jsNodeLastChildGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.lastChild());
    return result;
}

NodeLastChildDOMJIT::NodeLastChildDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeLastChild, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Node>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeLastChild()
{
    static NeverDestroyed<NodeLastChildDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodePreviousSiblingGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodePreviousSibling(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodePreviousSiblingGetter>(state, thisValue, "previousSibling");
}

static inline JSValue jsNodePreviousSiblingGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.previousSibling());
    return result;
}

NodePreviousSiblingDOMJIT::NodePreviousSiblingDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodePreviousSibling, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Node>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodePreviousSibling()
{
    static NeverDestroyed<NodePreviousSiblingDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeNextSiblingGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeNextSibling(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeNextSiblingGetter>(state, thisValue, "nextSibling");
}

static inline JSValue jsNodeNextSiblingGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.nextSibling());
    return result;
}

NodeNextSiblingDOMJIT::NodeNextSiblingDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeNextSibling, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Node>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeNextSibling()
{
    static NeverDestroyed<NodeNextSiblingDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeOwnerDocumentGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeOwnerDocument(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeOwnerDocumentGetter>(state, thisValue, "ownerDocument");
}

static inline JSValue jsNodeOwnerDocumentGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Document>>>(state, *thisObject.globalObject(), impl.ownerDocument());
    return result;
}

NodeOwnerDocumentDOMJIT::NodeOwnerDocumentDOMJIT()
    : JSC::DOMJIT::GetterSetter(jsNodeOwnerDocument, nullptr, JSNode::info(), DOMJIT::IDLResultTypeFilter<IDLNullable<IDLInterface<Document>>>::value)
{
}

JSC::DOMJIT::GetterSetter* domJITGetterSetterForNodeOwnerDocument()
{
    static NeverDestroyed<NodeOwnerDocumentDOMJIT> compiler;
    return &compiler.get();
}

static inline JSValue jsNodeBaseURIGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeBaseURI(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeBaseURIGetter>(state, thisValue, "baseURI");
}

static inline JSValue jsNodeBaseURIGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.baseURI());
    return result;
}

static inline JSValue jsNodeTextContentGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeTextContent(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeTextContentGetter>(state, thisValue, "textContent");
}

static inline JSValue jsNodeTextContentGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.textContent());
    return result;
}

static inline JSValue jsNodeIsConnectedGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeIsConnected(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeIsConnectedGetter>(state, thisValue, "isConnected");
}

static inline JSValue jsNodeIsConnectedGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.inDocument());
    return result;
}

static inline JSValue jsNodeParentElementGetter(ExecState&, JSNode&, ThrowScope& throwScope);

EncodedJSValue jsNodeParentElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNode>::attribute<jsNodeParentElementGetter>(state, thisValue, "parentElement");
}

static inline JSValue jsNodeParentElementGetter(ExecState& state, JSNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Element>>(state, *thisObject.globalObject(), impl.parentElement());
    return result;
}

EncodedJSValue jsNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSNodePrototype* domObject = jsDynamicDowncast<JSNodePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSNode::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSNodePrototype* domObject = jsDynamicDowncast<JSNodePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSNodeNodeValueFunction(ExecState&, JSNode&, JSValue, ThrowScope&);

bool setJSNodeNodeValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNode>::setAttribute<setJSNodeNodeValueFunction>(state, thisValue, encodedValue, "nodeValue");
}

static inline bool setJSNodeNodeValueFunction(ExecState& state, JSNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLDOMString>>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setNodeValue(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSNodeTextContentFunction(ExecState&, JSNode&, JSValue, ThrowScope&);

bool setJSNodeTextContent(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNode>::setAttribute<setJSNodeTextContentFunction>(state, thisValue, encodedValue, "textContent");
}

static inline bool setJSNodeTextContentFunction(ExecState& state, JSNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLDOMString>>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setTextContent(WTFMove(nativeValue)));
    return true;
}


JSValue JSNode::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNodeConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionInsertBeforeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionInsertBefore(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionInsertBeforeCaller>(state, "insertBefore");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionInsertBeforeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->insertBefore(*state));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionReplaceChildCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionReplaceChild(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionReplaceChildCaller>(state, "replaceChild");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionReplaceChildCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->replaceChild(*state));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionRemoveChildCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionRemoveChild(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionRemoveChildCaller>(state, "removeChild");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionRemoveChildCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->removeChild(*state));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionAppendChildCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionAppendChild(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionAppendChildCaller>(state, "appendChild");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionAppendChildCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->appendChild(*state));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionHasChildNodesCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionHasChildNodes(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionHasChildNodesCaller>(state, "hasChildNodes");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionHasChildNodesCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.hasChildNodes()));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionCloneNodeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionCloneNode(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionCloneNodeCaller>(state, "cloneNode");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionCloneNodeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto deep = convert<IDLBoolean>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<Node>>(*state, *castedThis->globalObject(), throwScope, impl.cloneNodeForBindings(WTFMove(deep))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionNormalizeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionNormalize(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionNormalizeCaller>(state, "normalize");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionNormalizeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.normalize();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsSameNodeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsSameNode(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionIsSameNodeCaller>(state, "isSameNode");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsSameNodeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto other = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "other", "Node", "isSameNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.isSameNode(WTFMove(other))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsEqualNodeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsEqualNode(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionIsEqualNodeCaller>(state, "isEqualNode");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsEqualNodeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto other = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "other", "Node", "isEqualNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.isEqualNode(WTFMove(other))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionLookupPrefixCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionLookupPrefix(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionLookupPrefixCaller>(state, "lookupPrefix");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionLookupPrefixCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto namespaceURI = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLDOMString>>(*state, impl.lookupPrefix(WTFMove(namespaceURI))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionLookupNamespaceURICaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionLookupNamespaceURI(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionLookupNamespaceURICaller>(state, "lookupNamespaceURI");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionLookupNamespaceURICaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto prefix = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLDOMString>>(*state, impl.lookupNamespaceURI(WTFMove(prefix))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsDefaultNamespaceCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionIsDefaultNamespace(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionIsDefaultNamespaceCaller>(state, "isDefaultNamespace");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionIsDefaultNamespaceCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto namespaceURI = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.isDefaultNamespace(WTFMove(namespaceURI))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionCompareDocumentPositionCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionCompareDocumentPosition(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionCompareDocumentPositionCaller>(state, "compareDocumentPosition");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionCompareDocumentPositionCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto other = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "other", "Node", "compareDocumentPosition", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUnsignedShort>(impl.compareDocumentPosition(*other)));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionContainsCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionContains(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionContainsCaller>(state, "contains");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionContainsCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto other = convert<IDLNullable<IDLInterface<Node>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "other", "Node", "contains", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.contains(WTFMove(other))));
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionGetRootNodeCaller(JSC::ExecState*, JSNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNodePrototypeFunctionGetRootNode(ExecState* state)
{
    return BindingCaller<JSNode>::callOperation<jsNodePrototypeFunctionGetRootNodeCaller>(state, "getRootNode");
}

static inline JSC::EncodedJSValue jsNodePrototypeFunctionGetRootNodeCaller(JSC::ExecState* state, JSNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto options = convert<IDLDictionary<Node::GetRootNodeOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.getRootNode(WTFMove(options))));
}

void JSNode::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSNode::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSNodeOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsNode = static_cast<JSNode*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsNode->wrapped(), jsNode);
}

Node* JSNode::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSNode*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
