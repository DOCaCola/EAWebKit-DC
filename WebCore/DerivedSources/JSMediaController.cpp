/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(VIDEO)

#include "JSMediaController.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSTimeRanges.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionPlay(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionPause(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionUnpause(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMediaControllerBuffered(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerSeekable(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerDuration(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerCurrentTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerCurrentTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControllerPaused(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerPlayed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerPlaybackState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControllerDefaultPlaybackRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerDefaultPlaybackRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControllerPlaybackRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerPlaybackRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControllerVolume(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerVolume(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControllerMuted(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerMuted(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMediaControllerPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaControllerPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaControllerPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaControllerPrototype>(vm.heap)) JSMediaControllerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaControllerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSMediaControllerConstructor = JSDOMConstructor<JSMediaController>;

template<> EncodedJSValue JSC_HOST_CALL JSMediaControllerConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSMediaControllerConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "MediaController");
    auto object = MediaController::create(*context);
    return JSValue::encode(toJSNewlyCreated<IDLInterface<MediaController>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSMediaControllerConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSMediaControllerConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMediaController::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("MediaController"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSMediaControllerConstructor::s_info = { "MediaController", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaControllerConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMediaControllerPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerConstructor) } },
    { "buffered", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerBuffered), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "seekable", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerSeekable), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "duration", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerDuration), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "currentTime", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerCurrentTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerCurrentTime) } },
    { "paused", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerPaused), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "played", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerPlayed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "playbackState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerPlaybackState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "defaultPlaybackRate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerDefaultPlaybackRate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerDefaultPlaybackRate) } },
    { "playbackRate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerPlaybackRate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerPlaybackRate) } },
    { "volume", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerVolume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerVolume) } },
    { "muted", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControllerMuted), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControllerMuted) } },
    { "play", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControllerPrototypeFunctionPlay), (intptr_t) (0) } },
    { "pause", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControllerPrototypeFunctionPause), (intptr_t) (0) } },
    { "unpause", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControllerPrototypeFunctionUnpause), (intptr_t) (0) } },
};

const ClassInfo JSMediaControllerPrototype::s_info = { "MediaControllerPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaControllerPrototype) };

void JSMediaControllerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaControllerPrototypeTableValues, *this);
}

const ClassInfo JSMediaController::s_info = { "MediaController", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaController) };

JSMediaController::JSMediaController(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaController>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSMediaController::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMediaController::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaControllerPrototype::create(vm, globalObject, JSMediaControllerPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSMediaController::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaController>(vm, globalObject);
}

template<> inline JSMediaController* BindingCaller<JSMediaController>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMediaController*>(JSValue::decode(thisValue));
}

template<> inline JSMediaController* BindingCaller<JSMediaController>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMediaController*>(state.thisValue());
}

static inline JSValue jsMediaControllerBufferedGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerBuffered(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerBufferedGetter>(state, thisValue, "buffered");
}

static inline JSValue jsMediaControllerBufferedGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TimeRanges>>(state, *thisObject.globalObject(), impl.buffered());
    return result;
}

static inline JSValue jsMediaControllerSeekableGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerSeekable(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerSeekableGetter>(state, thisValue, "seekable");
}

static inline JSValue jsMediaControllerSeekableGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TimeRanges>>(state, *thisObject.globalObject(), impl.seekable());
    return result;
}

static inline JSValue jsMediaControllerDurationGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerDuration(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerDurationGetter>(state, thisValue, "duration");
}

static inline JSValue jsMediaControllerDurationGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.duration());
    return result;
}

static inline JSValue jsMediaControllerCurrentTimeGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerCurrentTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerCurrentTimeGetter>(state, thisValue, "currentTime");
}

static inline JSValue jsMediaControllerCurrentTimeGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.currentTime());
    return result;
}

static inline JSValue jsMediaControllerPausedGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerPaused(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerPausedGetter>(state, thisValue, "paused");
}

static inline JSValue jsMediaControllerPausedGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.paused());
    return result;
}

static inline JSValue jsMediaControllerPlayedGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerPlayed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerPlayedGetter>(state, thisValue, "played");
}

static inline JSValue jsMediaControllerPlayedGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TimeRanges>>(state, *thisObject.globalObject(), impl.played());
    return result;
}

static inline JSValue jsMediaControllerPlaybackStateGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerPlaybackState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerPlaybackStateGetter>(state, thisValue, "playbackState");
}

static inline JSValue jsMediaControllerPlaybackStateGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.playbackState());
    return result;
}

static inline JSValue jsMediaControllerDefaultPlaybackRateGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerDefaultPlaybackRate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerDefaultPlaybackRateGetter>(state, thisValue, "defaultPlaybackRate");
}

static inline JSValue jsMediaControllerDefaultPlaybackRateGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.defaultPlaybackRate());
    return result;
}

static inline JSValue jsMediaControllerPlaybackRateGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerPlaybackRate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerPlaybackRateGetter>(state, thisValue, "playbackRate");
}

static inline JSValue jsMediaControllerPlaybackRateGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.playbackRate());
    return result;
}

static inline JSValue jsMediaControllerVolumeGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerVolume(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerVolumeGetter>(state, thisValue, "volume");
}

static inline JSValue jsMediaControllerVolumeGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.volume());
    return result;
}

static inline JSValue jsMediaControllerMutedGetter(ExecState&, JSMediaController&, ThrowScope& throwScope);

EncodedJSValue jsMediaControllerMuted(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaController>::attribute<jsMediaControllerMutedGetter>(state, thisValue, "muted");
}

static inline JSValue jsMediaControllerMutedGetter(ExecState& state, JSMediaController& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.muted());
    return result;
}

EncodedJSValue jsMediaControllerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSMediaControllerPrototype* domObject = jsDynamicDowncast<JSMediaControllerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSMediaController::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMediaControllerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMediaControllerPrototype* domObject = jsDynamicDowncast<JSMediaControllerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMediaControllerCurrentTimeFunction(ExecState&, JSMediaController&, JSValue, ThrowScope&);

bool setJSMediaControllerCurrentTime(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaController>::setAttribute<setJSMediaControllerCurrentTimeFunction>(state, thisValue, encodedValue, "currentTime");
}

static inline bool setJSMediaControllerCurrentTimeFunction(ExecState& state, JSMediaController& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setCurrentTime(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaControllerDefaultPlaybackRateFunction(ExecState&, JSMediaController&, JSValue, ThrowScope&);

bool setJSMediaControllerDefaultPlaybackRate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaController>::setAttribute<setJSMediaControllerDefaultPlaybackRateFunction>(state, thisValue, encodedValue, "defaultPlaybackRate");
}

static inline bool setJSMediaControllerDefaultPlaybackRateFunction(ExecState& state, JSMediaController& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDefaultPlaybackRate(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaControllerPlaybackRateFunction(ExecState&, JSMediaController&, JSValue, ThrowScope&);

bool setJSMediaControllerPlaybackRate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaController>::setAttribute<setJSMediaControllerPlaybackRateFunction>(state, thisValue, encodedValue, "playbackRate");
}

static inline bool setJSMediaControllerPlaybackRateFunction(ExecState& state, JSMediaController& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPlaybackRate(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaControllerVolumeFunction(ExecState&, JSMediaController&, JSValue, ThrowScope&);

bool setJSMediaControllerVolume(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaController>::setAttribute<setJSMediaControllerVolumeFunction>(state, thisValue, encodedValue, "volume");
}

static inline bool setJSMediaControllerVolumeFunction(ExecState& state, JSMediaController& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setVolume(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSMediaControllerMutedFunction(ExecState&, JSMediaController&, JSValue, ThrowScope&);

bool setJSMediaControllerMuted(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaController>::setAttribute<setJSMediaControllerMutedFunction>(state, thisValue, encodedValue, "muted");
}

static inline bool setJSMediaControllerMutedFunction(ExecState& state, JSMediaController& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setMuted(WTFMove(nativeValue));
    return true;
}


JSValue JSMediaController::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaControllerConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionPlayCaller(JSC::ExecState*, JSMediaController*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionPlay(ExecState* state)
{
    return BindingCaller<JSMediaController>::callOperation<jsMediaControllerPrototypeFunctionPlayCaller>(state, "play");
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionPlayCaller(JSC::ExecState* state, JSMediaController* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.play();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionPauseCaller(JSC::ExecState*, JSMediaController*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionPause(ExecState* state)
{
    return BindingCaller<JSMediaController>::callOperation<jsMediaControllerPrototypeFunctionPauseCaller>(state, "pause");
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionPauseCaller(JSC::ExecState* state, JSMediaController* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.pause();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionUnpauseCaller(JSC::ExecState*, JSMediaController*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControllerPrototypeFunctionUnpause(ExecState* state)
{
    return BindingCaller<JSMediaController>::callOperation<jsMediaControllerPrototypeFunctionUnpauseCaller>(state, "unpause");
}

static inline JSC::EncodedJSValue jsMediaControllerPrototypeFunctionUnpauseCaller(JSC::ExecState* state, JSMediaController* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.unpause();
    return JSValue::encode(jsUndefined());
}

void JSMediaController::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSMediaController*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaController@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore15MediaControllerE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MediaController>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaController@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore15MediaControllerE[2];
#if COMPILER(CLANG)
    // If this fails MediaController does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(MediaController), "MediaController is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaController has subclasses. If MediaController has subclasses that get passed
    // to toJS() we currently require MediaController you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<MediaController>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MediaController& impl)
{
    return wrap(state, globalObject, impl);
}

MediaController* JSMediaController::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMediaController*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(VIDEO)
