/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFile.h"

#include "JSBlobLineEndings.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

template<> File::PropertyBag convertDictionary<File::PropertyBag>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    File::PropertyBag result;
    JSValue endingsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "endings"));
    if (!endingsValue.isUndefined()) {
        result.endings = convert<IDLEnumeration<BlobLineEndings>>(state, endingsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.endings = BlobLineEndings::Transparent;
    JSValue typeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "type"));
    if (!typeValue.isUndefined()) {
        result.type = convert<IDLDOMString>(state, typeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.type = emptyString();
    JSValue lastModifiedValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "lastModified"));
    if (!lastModifiedValue.isUndefined()) {
        result.lastModified = convert<IDLLongLong>(state, lastModifiedValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

// Attributes

JSC::EncodedJSValue jsFileName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileLastModified(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFilePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFilePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFilePrototype* ptr = new (NotNull, JSC::allocateCell<JSFilePrototype>(vm.heap)) JSFilePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFilePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFileConstructor = JSDOMConstructor<JSFile>;

template<> EncodedJSValue JSC_HOST_CALL JSFileConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSFileConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto fileBits = convert<IDLSequence<IDLUnion<IDLInterface<ArrayBufferView>, IDLInterface<ArrayBuffer>, IDLInterface<Blob>, IDLUSVString>>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto fileName = convert<IDLUSVString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<File::PropertyBag>>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = File::create(WTFMove(fileBits), WTFMove(fileName), WTFMove(options));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<File>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSFileConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSBlob::getConstructor(vm, &globalObject);
}

template<> void JSFileConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFile::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("File"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(2), ReadOnly | DontEnum);
}

template<> const ClassInfo JSFileConstructor::s_info = { "File", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFileConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFilePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileConstructor) } },
    { "name", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "lastModified", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileLastModified), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSFilePrototype::s_info = { "FilePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFilePrototype) };

void JSFilePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFilePrototypeTableValues, *this);
}

const ClassInfo JSFile::s_info = { "File", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFile) };

JSFile::JSFile(Structure* structure, JSDOMGlobalObject& globalObject, Ref<File>&& impl)
    : JSBlob(structure, globalObject, WTFMove(impl))
{
}

void JSFile::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFile::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFilePrototype::create(vm, globalObject, JSFilePrototype::createStructure(vm, globalObject, JSBlob::prototype(vm, globalObject)));
}

JSObject* JSFile::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFile>(vm, globalObject);
}

template<> inline JSFile* BindingCaller<JSFile>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFile*>(JSValue::decode(thisValue));
}

static inline JSValue jsFileNameGetter(ExecState&, JSFile&, ThrowScope& throwScope);

EncodedJSValue jsFileName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFile>::attribute<jsFileNameGetter>(state, thisValue, "name");
}

static inline JSValue jsFileNameGetter(ExecState& state, JSFile& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsFileLastModifiedGetter(ExecState&, JSFile&, ThrowScope& throwScope);

EncodedJSValue jsFileLastModified(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFile>::attribute<jsFileLastModifiedGetter>(state, thisValue, "lastModified");
}

static inline JSValue jsFileLastModifiedGetter(ExecState& state, JSFile& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLongLong>(impl.lastModified());
    return result;
}

EncodedJSValue jsFileConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFilePrototype* domObject = jsDynamicDowncast<JSFilePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFile::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFileConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFilePrototype* domObject = jsDynamicDowncast<JSFilePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSFile::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7File@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore4FileE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<File>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7File@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore4FileE[2];
#if COMPILER(CLANG)
    // If this fails File does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(File), "File is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // File has subclasses. If File has subclasses that get passed
    // to toJS() we currently require File you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<File>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, File& impl)
{
    return wrap(state, globalObject, impl);
}

File* JSFile::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFile*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
