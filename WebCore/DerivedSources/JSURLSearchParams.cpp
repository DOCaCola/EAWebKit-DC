/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSURLSearchParams.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMIterator.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>
#include <wtf/Vector.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionAppend(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionDelete(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionGet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionGetAll(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionHas(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSort(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionToString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSymbolIterator(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionEntries(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionKeys(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionValues(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionForEach(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsURLSearchParamsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSURLSearchParamsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSURLSearchParamsPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSURLSearchParamsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSURLSearchParamsPrototype* ptr = new (NotNull, JSC::allocateCell<JSURLSearchParamsPrototype>(vm.heap)) JSURLSearchParamsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSURLSearchParamsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSURLSearchParamsConstructor = JSDOMConstructor<JSURLSearchParams>;

template<> EncodedJSValue JSC_HOST_CALL JSURLSearchParamsConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSURLSearchParamsConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto init = state->argument(0).isUndefined() ? "" : convert<IDLUnion<IDLSequence<IDLSequence<IDLUSVString>>, IDLRecord<IDLUSVString, IDLUSVString>, IDLUSVString>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = URLSearchParams::create(WTFMove(init));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<URLSearchParams>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSURLSearchParamsConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSURLSearchParamsConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSURLSearchParams::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("URLSearchParams"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSURLSearchParamsConstructor::s_info = { "URLSearchParams", &Base::s_info, 0, CREATE_METHOD_TABLE(JSURLSearchParamsConstructor) };

/* Hash table for prototype */

static const HashTableValue JSURLSearchParamsPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsURLSearchParamsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSURLSearchParamsConstructor) } },
    { "append", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionAppend), (intptr_t) (2) } },
    { "delete", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionDelete), (intptr_t) (1) } },
    { "get", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionGet), (intptr_t) (1) } },
    { "getAll", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionGetAll), (intptr_t) (1) } },
    { "has", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionHas), (intptr_t) (1) } },
    { "set", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionSet), (intptr_t) (2) } },
    { "sort", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionSort), (intptr_t) (0) } },
    { "toString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionToString), (intptr_t) (0) } },
    { "entries", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionEntries), (intptr_t) (0) } },
    { "keys", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionKeys), (intptr_t) (0) } },
    { "values", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionValues), (intptr_t) (0) } },
    { "forEach", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsURLSearchParamsPrototypeFunctionForEach), (intptr_t) (1) } },
};

const ClassInfo JSURLSearchParamsPrototype::s_info = { "URLSearchParamsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSURLSearchParamsPrototype) };

void JSURLSearchParamsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSURLSearchParamsPrototypeTableValues, *this);
    putDirect(vm, vm.propertyNames->iteratorSymbol, JSFunction::create(vm, globalObject(), 0, ASCIILiteral("[Symbol.Iterator]"), jsURLSearchParamsPrototypeFunctionSymbolIterator), DontEnum);
}

const ClassInfo JSURLSearchParams::s_info = { "URLSearchParams", &Base::s_info, 0, CREATE_METHOD_TABLE(JSURLSearchParams) };

JSURLSearchParams::JSURLSearchParams(Structure* structure, JSDOMGlobalObject& globalObject, Ref<URLSearchParams>&& impl)
    : JSDOMWrapper<URLSearchParams>(structure, globalObject, WTFMove(impl))
{
}

void JSURLSearchParams::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSURLSearchParams::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSURLSearchParamsPrototype::create(vm, globalObject, JSURLSearchParamsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSURLSearchParams::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSURLSearchParams>(vm, globalObject);
}

void JSURLSearchParams::destroy(JSC::JSCell* cell)
{
    JSURLSearchParams* thisObject = static_cast<JSURLSearchParams*>(cell);
    thisObject->JSURLSearchParams::~JSURLSearchParams();
}

template<> inline JSURLSearchParams* BindingCaller<JSURLSearchParams>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSURLSearchParams*>(state.thisValue());
}

EncodedJSValue jsURLSearchParamsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSURLSearchParamsPrototype* domObject = jsDynamicDowncast<JSURLSearchParamsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSURLSearchParams::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSURLSearchParamsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSURLSearchParamsPrototype* domObject = jsDynamicDowncast<JSURLSearchParamsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSURLSearchParams::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSURLSearchParamsConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionAppendCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionAppend(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionAppendCaller>(state, "append");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionAppendCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLUSVString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.append(WTFMove(name), WTFMove(value));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionDeleteCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionDelete(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionDeleteCaller>(state, "delete");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionDeleteCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.remove(WTFMove(name));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionGetCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionGet(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionGetCaller>(state, "get");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionGetCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLUSVString>>(*state, impl.get(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionGetAllCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionGetAll(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionGetAllCaller>(state, "getAll");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionGetAllCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLSequence<IDLUSVString>>(*state, *castedThis->globalObject(), impl.getAll(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionHasCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionHas(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionHasCaller>(state, "has");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionHasCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.has(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionSetCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSet(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionSetCaller>(state, "set");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionSetCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLUSVString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.set(WTFMove(name), WTFMove(value));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionSortCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSort(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionSortCaller>(state, "sort");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionSortCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.sort();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionToStringCaller(JSC::ExecState*, JSURLSearchParams*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsURLSearchParamsPrototypeFunctionToStringCaller(JSC::ExecState* state, JSURLSearchParams* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.toString()));
}

struct URLSearchParamsIteratorTraits {
    static constexpr JSDOMIteratorType type = JSDOMIteratorType::Map;
    using KeyType = IDLUSVString;
    using ValueType = IDLUSVString;
};

using URLSearchParamsIterator = JSDOMIterator<JSURLSearchParams, URLSearchParamsIteratorTraits>;
using URLSearchParamsIteratorPrototype = JSDOMIteratorPrototype<JSURLSearchParams, URLSearchParamsIteratorTraits>;

template<>
const JSC::ClassInfo URLSearchParamsIterator::s_info = { "URLSearchParams Iterator", &Base::s_info, 0, CREATE_METHOD_TABLE(URLSearchParamsIterator) };

template<>
const JSC::ClassInfo URLSearchParamsIteratorPrototype::s_info = { "URLSearchParams Iterator", &Base::s_info, 0, CREATE_METHOD_TABLE(URLSearchParamsIteratorPrototype) };

static inline EncodedJSValue jsURLSearchParamsPrototypeFunctionSymbolIteratorCaller(ExecState*, JSURLSearchParams* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<URLSearchParamsIterator>(*thisObject, IterationKind::KeyValue));
}

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionSymbolIterator(JSC::ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionSymbolIteratorCaller>(state, "[Symbol.Iterator]");
}

static inline EncodedJSValue jsURLSearchParamsPrototypeFunctionEntriesCaller(ExecState*, JSURLSearchParams* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<URLSearchParamsIterator>(*thisObject, IterationKind::KeyValue));
}

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionEntries(JSC::ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionEntriesCaller>(state, "entries");
}

static inline EncodedJSValue jsURLSearchParamsPrototypeFunctionKeysCaller(ExecState*, JSURLSearchParams* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<URLSearchParamsIterator>(*thisObject, IterationKind::Key));
}

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionKeys(JSC::ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionKeysCaller>(state, "keys");
}

static inline EncodedJSValue jsURLSearchParamsPrototypeFunctionValuesCaller(ExecState*, JSURLSearchParams* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<URLSearchParamsIterator>(*thisObject, IterationKind::Value));
}

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionValues(JSC::ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionValuesCaller>(state, "values");
}

static inline EncodedJSValue jsURLSearchParamsPrototypeFunctionForEachCaller(ExecState* state, JSURLSearchParams* thisObject, JSC::ThrowScope& throwScope)
{
    return JSValue::encode(iteratorForEach<URLSearchParamsIterator>(*state, *thisObject, throwScope));
}

JSC::EncodedJSValue JSC_HOST_CALL jsURLSearchParamsPrototypeFunctionForEach(JSC::ExecState* state)
{
    return BindingCaller<JSURLSearchParams>::callOperation<jsURLSearchParamsPrototypeFunctionForEachCaller>(state, "forEach");
}

bool JSURLSearchParamsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSURLSearchParamsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsURLSearchParams = static_cast<JSURLSearchParams*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsURLSearchParams->wrapped(), jsURLSearchParams);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<URLSearchParams>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to URLSearchParams.
    static_assert(!__is_polymorphic(URLSearchParams), "URLSearchParams is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<URLSearchParams>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, URLSearchParams& impl)
{
    return wrap(state, globalObject, impl);
}

URLSearchParams* JSURLSearchParams::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSURLSearchParams*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
