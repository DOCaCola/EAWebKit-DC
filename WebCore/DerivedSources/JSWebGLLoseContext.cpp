/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLLoseContext.h"

#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWebGLLoseContextPrototypeFunctionLoseContext(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebGLLoseContextPrototypeFunctionRestoreContext(JSC::ExecState*);

class JSWebGLLoseContextPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebGLLoseContextPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebGLLoseContextPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebGLLoseContextPrototype>(vm.heap)) JSWebGLLoseContextPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebGLLoseContextPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSWebGLLoseContextPrototypeTableValues[] =
{
    { "loseContext", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebGLLoseContextPrototypeFunctionLoseContext), (intptr_t) (0) } },
    { "restoreContext", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebGLLoseContextPrototypeFunctionRestoreContext), (intptr_t) (0) } },
};

const ClassInfo JSWebGLLoseContextPrototype::s_info = { "WebGLLoseContextPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGLLoseContextPrototype) };

void JSWebGLLoseContextPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebGLLoseContextPrototypeTableValues, *this);
}

const ClassInfo JSWebGLLoseContext::s_info = { "WebGLLoseContext", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGLLoseContext) };

JSWebGLLoseContext::JSWebGLLoseContext(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebGLLoseContext>&& impl)
    : JSDOMWrapper<WebGLLoseContext>(structure, globalObject, WTFMove(impl))
{
}

void JSWebGLLoseContext::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWebGLLoseContext::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebGLLoseContextPrototype::create(vm, globalObject, JSWebGLLoseContextPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWebGLLoseContext::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGLLoseContext>(vm, globalObject);
}

void JSWebGLLoseContext::destroy(JSC::JSCell* cell)
{
    JSWebGLLoseContext* thisObject = static_cast<JSWebGLLoseContext*>(cell);
    thisObject->JSWebGLLoseContext::~JSWebGLLoseContext();
}

template<> inline JSWebGLLoseContext* BindingCaller<JSWebGLLoseContext>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSWebGLLoseContext*>(state.thisValue());
}

static inline JSC::EncodedJSValue jsWebGLLoseContextPrototypeFunctionLoseContextCaller(JSC::ExecState*, JSWebGLLoseContext*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebGLLoseContextPrototypeFunctionLoseContext(ExecState* state)
{
    return BindingCaller<JSWebGLLoseContext>::callOperation<jsWebGLLoseContextPrototypeFunctionLoseContextCaller>(state, "loseContext");
}

static inline JSC::EncodedJSValue jsWebGLLoseContextPrototypeFunctionLoseContextCaller(JSC::ExecState* state, JSWebGLLoseContext* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.loseContext();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsWebGLLoseContextPrototypeFunctionRestoreContextCaller(JSC::ExecState*, JSWebGLLoseContext*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebGLLoseContextPrototypeFunctionRestoreContext(ExecState* state)
{
    return BindingCaller<JSWebGLLoseContext>::callOperation<jsWebGLLoseContextPrototypeFunctionRestoreContextCaller>(state, "restoreContext");
}

static inline JSC::EncodedJSValue jsWebGLLoseContextPrototypeFunctionRestoreContextCaller(JSC::ExecState* state, JSWebGLLoseContext* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.restoreContext();
    return JSValue::encode(jsUndefined());
}

bool JSWebGLLoseContextOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsWebGLLoseContext = jsCast<JSWebGLLoseContext*>(handle.slot()->asCell());
    WebGLRenderingContextBase* root = WTF::getPtr(jsWebGLLoseContext->wrapped().context());
    return visitor.containsOpaqueRoot(root);
}

void JSWebGLLoseContextOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebGLLoseContext = static_cast<JSWebGLLoseContext*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebGLLoseContext->wrapped(), jsWebGLLoseContext);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7WebGLLoseContext@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16WebGLLoseContextE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WebGLLoseContext>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7WebGLLoseContext@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16WebGLLoseContextE[2];
#if COMPILER(CLANG)
    // If this fails WebGLLoseContext does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(WebGLLoseContext), "WebGLLoseContext is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // WebGLLoseContext has subclasses. If WebGLLoseContext has subclasses that get passed
    // to toJS() we currently require WebGLLoseContext you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<WebGLLoseContext>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WebGLLoseContext& impl)
{
    return wrap(state, globalObject, impl);
}

WebGLLoseContext* JSWebGLLoseContext::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWebGLLoseContext*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBGL)
