/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(VIDEO_TRACK)

#include "JSTextTrackCue.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include "JSTextTrack.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsTextTrackCueTrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTextTrackCueId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueId(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCueStartTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueStartTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCueEndTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueEndTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCuePauseOnExit(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCuePauseOnExit(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCueOnenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueOnenter(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCueOnexit(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueOnexit(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTextTrackCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextTrackCueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSTextTrackCuePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTextTrackCuePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTextTrackCuePrototype* ptr = new (NotNull, JSC::allocateCell<JSTextTrackCuePrototype>(vm.heap)) JSTextTrackCuePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTextTrackCuePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSTextTrackCueConstructor = JSDOMConstructorNotConstructable<JSTextTrackCue>;

template<> JSValue JSTextTrackCueConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSTextTrackCueConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSTextTrackCue::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("TextTrackCue"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSTextTrackCueConstructor::s_info = { "TextTrackCue", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextTrackCueConstructor) };

/* Hash table for prototype */

static const HashTableValue JSTextTrackCuePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueConstructor) } },
    { "track", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueTrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "id", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueId) } },
    { "startTime", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueStartTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueStartTime) } },
    { "endTime", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueEndTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueEndTime) } },
    { "pauseOnExit", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCuePauseOnExit), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCuePauseOnExit) } },
    { "onenter", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueOnenter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueOnenter) } },
    { "onexit", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextTrackCueOnexit), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextTrackCueOnexit) } },
};

const ClassInfo JSTextTrackCuePrototype::s_info = { "TextTrackCuePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextTrackCuePrototype) };

void JSTextTrackCuePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTextTrackCuePrototypeTableValues, *this);
}

const ClassInfo JSTextTrackCue::s_info = { "TextTrackCue", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextTrackCue) };

JSTextTrackCue::JSTextTrackCue(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TextTrackCue>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSTextTrackCue::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSTextTrackCue::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTextTrackCuePrototype::create(vm, globalObject, JSTextTrackCuePrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSTextTrackCue::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTextTrackCue>(vm, globalObject);
}

template<> inline JSTextTrackCue* BindingCaller<JSTextTrackCue>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSTextTrackCue*>(JSValue::decode(thisValue));
}

static inline JSValue jsTextTrackCueTrackGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueTrack(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueTrackGetter>(state, thisValue, "track");
}

static inline JSValue jsTextTrackCueTrackGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TextTrack>>(state, *thisObject.globalObject(), impl.track());
    return result;
}

static inline JSValue jsTextTrackCueIdGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueIdGetter>(state, thisValue, "id");
}

static inline JSValue jsTextTrackCueIdGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.id());
    return result;
}

static inline JSValue jsTextTrackCueStartTimeGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueStartTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueStartTimeGetter>(state, thisValue, "startTime");
}

static inline JSValue jsTextTrackCueStartTimeGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.startTime());
    return result;
}

static inline JSValue jsTextTrackCueEndTimeGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueEndTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueEndTimeGetter>(state, thisValue, "endTime");
}

static inline JSValue jsTextTrackCueEndTimeGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.endTime());
    return result;
}

static inline JSValue jsTextTrackCuePauseOnExitGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCuePauseOnExit(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCuePauseOnExitGetter>(state, thisValue, "pauseOnExit");
}

static inline JSValue jsTextTrackCuePauseOnExitGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.pauseOnExit());
    return result;
}

static inline JSValue jsTextTrackCueOnenterGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueOnenter(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueOnenterGetter>(state, thisValue, "onenter");
}

static inline JSValue jsTextTrackCueOnenterGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().enterEvent);
}

static inline JSValue jsTextTrackCueOnexitGetter(ExecState&, JSTextTrackCue&, ThrowScope& throwScope);

EncodedJSValue jsTextTrackCueOnexit(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextTrackCue>::attribute<jsTextTrackCueOnexitGetter>(state, thisValue, "onexit");
}

static inline JSValue jsTextTrackCueOnexitGetter(ExecState& state, JSTextTrackCue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().exitEvent);
}

EncodedJSValue jsTextTrackCueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSTextTrackCuePrototype* domObject = jsDynamicDowncast<JSTextTrackCuePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSTextTrackCue::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSTextTrackCueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSTextTrackCuePrototype* domObject = jsDynamicDowncast<JSTextTrackCuePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSTextTrackCueIdFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCueId(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCueIdFunction>(state, thisValue, encodedValue, "id");
}

static inline bool setJSTextTrackCueIdFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setId(WTFMove(nativeValue));
    return true;
}


static inline bool setJSTextTrackCueStartTimeFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCueStartTime(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCueStartTimeFunction>(state, thisValue, encodedValue, "startTime");
}

static inline bool setJSTextTrackCueStartTimeFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setStartTime(WTFMove(nativeValue));
    return true;
}


static inline bool setJSTextTrackCueEndTimeFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCueEndTime(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCueEndTimeFunction>(state, thisValue, encodedValue, "endTime");
}

static inline bool setJSTextTrackCueEndTimeFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setEndTime(WTFMove(nativeValue));
    return true;
}


static inline bool setJSTextTrackCuePauseOnExitFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCuePauseOnExit(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCuePauseOnExitFunction>(state, thisValue, encodedValue, "pauseOnExit");
}

static inline bool setJSTextTrackCuePauseOnExitFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPauseOnExit(WTFMove(nativeValue));
    return true;
}


static inline bool setJSTextTrackCueOnenterFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCueOnenter(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCueOnenterFunction>(state, thisValue, encodedValue, "onenter");
}

static inline bool setJSTextTrackCueOnenterFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().enterEvent, value);
    return true;
}


static inline bool setJSTextTrackCueOnexitFunction(ExecState&, JSTextTrackCue&, JSValue, ThrowScope&);

bool setJSTextTrackCueOnexit(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTextTrackCue>::setAttribute<setJSTextTrackCueOnexitFunction>(state, thisValue, encodedValue, "onexit");
}

static inline bool setJSTextTrackCueOnexitFunction(ExecState& state, JSTextTrackCue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().exitEvent, value);
    return true;
}


JSValue JSTextTrackCue::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTextTrackCueConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSTextTrackCue::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSTextTrackCue*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSTextTrackCue::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSTextTrackCue*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSTextTrackCueOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTextTrackCue = static_cast<JSTextTrackCue*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsTextTrackCue->wrapped(), jsTextTrackCue);
}

TextTrackCue* JSTextTrackCue::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSTextTrackCue*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(VIDEO_TRACK)
