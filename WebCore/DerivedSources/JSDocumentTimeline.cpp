/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_ANIMATIONS)

#include "JSDocumentTimeline.h"

#include "Document.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDocumentTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDocumentTimelineConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDocumentTimelinePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDocumentTimelinePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDocumentTimelinePrototype* ptr = new (NotNull, JSC::allocateCell<JSDocumentTimelinePrototype>(vm.heap)) JSDocumentTimelinePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDocumentTimelinePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDocumentTimelineConstructor = JSDOMConstructor<JSDocumentTimeline>;

template<> EncodedJSValue JSC_HOST_CALL JSDocumentTimelineConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSDocumentTimelineConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto originTime = convert<IDLDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "DocumentTimeline");
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto object = DocumentTimeline::create(document, WTFMove(originTime));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DocumentTimeline>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSDocumentTimelineConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSAnimationTimeline::getConstructor(vm, &globalObject);
}

template<> void JSDocumentTimelineConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDocumentTimeline::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DocumentTimeline"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDocumentTimelineConstructor::s_info = { "DocumentTimeline", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDocumentTimelineConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDocumentTimelinePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDocumentTimelineConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDocumentTimelineConstructor) } },
};

const ClassInfo JSDocumentTimelinePrototype::s_info = { "DocumentTimelinePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDocumentTimelinePrototype) };

void JSDocumentTimelinePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDocumentTimelinePrototypeTableValues, *this);
}

const ClassInfo JSDocumentTimeline::s_info = { "DocumentTimeline", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDocumentTimeline) };

JSDocumentTimeline::JSDocumentTimeline(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DocumentTimeline>&& impl)
    : JSAnimationTimeline(structure, globalObject, WTFMove(impl))
{
}

void JSDocumentTimeline::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDocumentTimeline::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDocumentTimelinePrototype::create(vm, globalObject, JSDocumentTimelinePrototype::createStructure(vm, globalObject, JSAnimationTimeline::prototype(vm, globalObject)));
}

JSObject* JSDocumentTimeline::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDocumentTimeline>(vm, globalObject);
}

EncodedJSValue jsDocumentTimelineConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDocumentTimelinePrototype* domObject = jsDynamicDowncast<JSDocumentTimelinePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDocumentTimeline::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDocumentTimelineConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDocumentTimelinePrototype* domObject = jsDynamicDowncast<JSDocumentTimelinePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDocumentTimeline::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDocumentTimelineConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DocumentTimeline>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DocumentTimeline.
    static_assert(!__is_polymorphic(DocumentTimeline), "DocumentTimeline is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DocumentTimeline>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DocumentTimeline& impl)
{
    return wrap(state, globalObject, impl);
}


}

#endif // ENABLE(WEB_ANIMATIONS)
