/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSMutationObserver.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSMutationRecord.h"
#include "JSNode.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> MutationObserver::Init convertDictionary<MutationObserver::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    MutationObserver::Init result;
    JSValue attributeFilterValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "attributeFilter"));
    if (!attributeFilterValue.isUndefined()) {
        result.attributeFilter = convert<IDLSequence<IDLDOMString>>(state, attributeFilterValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue attributeOldValueValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "attributeOldValue"));
    if (!attributeOldValueValue.isUndefined()) {
        result.attributeOldValue = convert<IDLBoolean>(state, attributeOldValueValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue attributesValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "attributes"));
    if (!attributesValue.isUndefined()) {
        result.attributes = convert<IDLBoolean>(state, attributesValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue characterDataValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "characterData"));
    if (!characterDataValue.isUndefined()) {
        result.characterData = convert<IDLBoolean>(state, characterDataValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue characterDataOldValueValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "characterDataOldValue"));
    if (!characterDataOldValueValue.isUndefined()) {
        result.characterDataOldValue = convert<IDLBoolean>(state, characterDataOldValueValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue childListValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "childList"));
    if (!childListValue.isUndefined()) {
        result.childList = convert<IDLBoolean>(state, childListValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.childList = false;
    JSValue subtreeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "subtree"));
    if (!subtreeValue.isUndefined()) {
        result.subtree = convert<IDLBoolean>(state, subtreeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.subtree = false;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionObserve(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionTakeRecords(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionDisconnect(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMutationObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMutationObserverPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMutationObserverPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMutationObserverPrototype* ptr = new (NotNull, JSC::allocateCell<JSMutationObserverPrototype>(vm.heap)) JSMutationObserverPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMutationObserverPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSMutationObserverConstructor = JSDOMConstructor<JSMutationObserver>;

template<> JSC::EncodedJSValue JSC_HOST_CALL JSMutationObserverConstructor::construct(JSC::ExecState* exec)
{
    ASSERT(exec);
    return constructJSMutationObserver(*exec);
}

template<> JSValue JSMutationObserverConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSMutationObserverConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMutationObserver::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("MutationObserver"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSMutationObserverConstructor::s_info = { "MutationObserver", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationObserverConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMutationObserverPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationObserverConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMutationObserverConstructor) } },
    { "observe", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMutationObserverPrototypeFunctionObserve), (intptr_t) (1) } },
    { "takeRecords", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMutationObserverPrototypeFunctionTakeRecords), (intptr_t) (0) } },
    { "disconnect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMutationObserverPrototypeFunctionDisconnect), (intptr_t) (0) } },
};

const ClassInfo JSMutationObserverPrototype::s_info = { "MutationObserverPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationObserverPrototype) };

void JSMutationObserverPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMutationObserverPrototypeTableValues, *this);
}

const ClassInfo JSMutationObserver::s_info = { "MutationObserver", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationObserver) };

JSMutationObserver::JSMutationObserver(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MutationObserver>&& impl)
    : JSDOMWrapper<MutationObserver>(structure, globalObject, WTFMove(impl))
{
}

void JSMutationObserver::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMutationObserver::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMutationObserverPrototype::create(vm, globalObject, JSMutationObserverPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMutationObserver::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMutationObserver>(vm, globalObject);
}

void JSMutationObserver::destroy(JSC::JSCell* cell)
{
    JSMutationObserver* thisObject = static_cast<JSMutationObserver*>(cell);
    thisObject->JSMutationObserver::~JSMutationObserver();
}

template<> inline JSMutationObserver* BindingCaller<JSMutationObserver>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMutationObserver*>(state.thisValue());
}

EncodedJSValue jsMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSMutationObserverPrototype* domObject = jsDynamicDowncast<JSMutationObserverPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSMutationObserver::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMutationObserverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMutationObserverPrototype* domObject = jsDynamicDowncast<JSMutationObserverPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSMutationObserver::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMutationObserverConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionObserveCaller(JSC::ExecState*, JSMutationObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionObserve(ExecState* state)
{
    return BindingCaller<JSMutationObserver>::callOperation<jsMutationObserverPrototypeFunctionObserveCaller>(state, "observe");
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionObserveCaller(JSC::ExecState* state, JSMutationObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto target = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "target", "MutationObserver", "observe", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<MutationObserver::Init>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.observe(*target, WTFMove(options)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionTakeRecordsCaller(JSC::ExecState*, JSMutationObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionTakeRecords(ExecState* state)
{
    return BindingCaller<JSMutationObserver>::callOperation<jsMutationObserverPrototypeFunctionTakeRecordsCaller>(state, "takeRecords");
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionTakeRecordsCaller(JSC::ExecState* state, JSMutationObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<MutationRecord>>>(*state, *castedThis->globalObject(), impl.takeRecords()));
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionDisconnectCaller(JSC::ExecState*, JSMutationObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMutationObserverPrototypeFunctionDisconnect(ExecState* state)
{
    return BindingCaller<JSMutationObserver>::callOperation<jsMutationObserverPrototypeFunctionDisconnectCaller>(state, "disconnect");
}

static inline JSC::EncodedJSValue jsMutationObserverPrototypeFunctionDisconnectCaller(JSC::ExecState* state, JSMutationObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.disconnect();
    return JSValue::encode(jsUndefined());
}

void JSMutationObserverOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMutationObserver = static_cast<JSMutationObserver*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMutationObserver->wrapped(), jsMutationObserver);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MutationObserver>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to MutationObserver.
    static_assert(!__is_polymorphic(MutationObserver), "MutationObserver is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<MutationObserver>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MutationObserver& impl)
{
    return wrap(state, globalObject, impl);
}

MutationObserver* JSMutationObserver::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMutationObserver*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
