/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSWebKitCSSMatrix.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSWebKitCSSMatrix.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionMultiply(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionInverse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionTranslate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionScale(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewX(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewY(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsWebKitCSSMatrixA(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixA(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixB(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixB(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixC(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixC(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixD(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixD(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixE(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixE(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixF(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixF(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM11(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM11(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM12(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM12(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM13(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM13(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM14(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM14(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM21(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM21(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM22(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM22(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM23(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM23(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM24(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM24(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM31(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM31(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM32(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM32(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM33(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM33(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM34(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM34(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM41(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM41(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM42(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM42(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM43(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM43(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixM44(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixM44(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsWebKitCSSMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebKitCSSMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSWebKitCSSMatrixPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebKitCSSMatrixPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebKitCSSMatrixPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebKitCSSMatrixPrototype>(vm.heap)) JSWebKitCSSMatrixPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebKitCSSMatrixPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSWebKitCSSMatrixConstructor = JSDOMConstructor<JSWebKitCSSMatrix>;

template<> EncodedJSValue JSC_HOST_CALL JSWebKitCSSMatrixConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSWebKitCSSMatrixConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto cssValue = state->argument(0).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = WebKitCSSMatrix::create(WTFMove(cssValue));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSWebKitCSSMatrixConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebKitCSSMatrixConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSWebKitCSSMatrix::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebKitCSSMatrix"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSWebKitCSSMatrixConstructor::s_info = { "WebKitCSSMatrix", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrixConstructor) };

/* Hash table for prototype */

static const HashTableValue JSWebKitCSSMatrixPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixConstructor) } },
    { "a", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixA), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixA) } },
    { "b", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixB), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixB) } },
    { "c", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixC), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixC) } },
    { "d", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixD), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixD) } },
    { "e", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixE), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixE) } },
    { "f", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixF), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixF) } },
    { "m11", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM11), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM11) } },
    { "m12", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM12), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM12) } },
    { "m13", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM13), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM13) } },
    { "m14", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM14), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM14) } },
    { "m21", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM21), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM21) } },
    { "m22", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM22), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM22) } },
    { "m23", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM23), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM23) } },
    { "m24", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM24), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM24) } },
    { "m31", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM31), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM31) } },
    { "m32", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM32), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM32) } },
    { "m33", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM33), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM33) } },
    { "m34", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM34), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM34) } },
    { "m41", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM41), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM41) } },
    { "m42", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM42), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM42) } },
    { "m43", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM43), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM43) } },
    { "m44", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebKitCSSMatrixM44), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebKitCSSMatrixM44) } },
    { "setMatrixValue", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue), (intptr_t) (0) } },
    { "multiply", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionMultiply), (intptr_t) (0) } },
    { "inverse", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionInverse), (intptr_t) (0) } },
    { "translate", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionTranslate), (intptr_t) (0) } },
    { "scale", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionScale), (intptr_t) (0) } },
    { "rotate", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionRotate), (intptr_t) (0) } },
    { "rotateAxisAngle", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle), (intptr_t) (0) } },
    { "skewX", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSkewX), (intptr_t) (0) } },
    { "skewY", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionSkewY), (intptr_t) (0) } },
    { "toString", DontEnum | JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWebKitCSSMatrixPrototypeFunctionToString), (intptr_t) (0) } },
};

const ClassInfo JSWebKitCSSMatrixPrototype::s_info = { "WebKitCSSMatrixPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrixPrototype) };

void JSWebKitCSSMatrixPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebKitCSSMatrixPrototypeTableValues, *this);
}

const ClassInfo JSWebKitCSSMatrix::s_info = { "WebKitCSSMatrix", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebKitCSSMatrix) };

JSWebKitCSSMatrix::JSWebKitCSSMatrix(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebKitCSSMatrix>&& impl)
    : JSDOMWrapper<WebKitCSSMatrix>(structure, globalObject, WTFMove(impl))
{
}

void JSWebKitCSSMatrix::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWebKitCSSMatrix::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebKitCSSMatrixPrototype::create(vm, globalObject, JSWebKitCSSMatrixPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWebKitCSSMatrix::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebKitCSSMatrix>(vm, globalObject);
}

void JSWebKitCSSMatrix::destroy(JSC::JSCell* cell)
{
    JSWebKitCSSMatrix* thisObject = static_cast<JSWebKitCSSMatrix*>(cell);
    thisObject->JSWebKitCSSMatrix::~JSWebKitCSSMatrix();
}

template<> inline JSWebKitCSSMatrix* BindingCaller<JSWebKitCSSMatrix>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSWebKitCSSMatrix*>(JSValue::decode(thisValue));
}

template<> inline JSWebKitCSSMatrix* BindingCaller<JSWebKitCSSMatrix>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSWebKitCSSMatrix*>(state.thisValue());
}

static inline JSValue jsWebKitCSSMatrixAGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixA(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixAGetter>(state, thisValue, "a");
}

static inline JSValue jsWebKitCSSMatrixAGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.a());
    return result;
}

static inline JSValue jsWebKitCSSMatrixBGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixB(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixBGetter>(state, thisValue, "b");
}

static inline JSValue jsWebKitCSSMatrixBGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.b());
    return result;
}

static inline JSValue jsWebKitCSSMatrixCGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixC(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixCGetter>(state, thisValue, "c");
}

static inline JSValue jsWebKitCSSMatrixCGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.c());
    return result;
}

static inline JSValue jsWebKitCSSMatrixDGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixD(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixDGetter>(state, thisValue, "d");
}

static inline JSValue jsWebKitCSSMatrixDGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.d());
    return result;
}

static inline JSValue jsWebKitCSSMatrixEGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixE(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixEGetter>(state, thisValue, "e");
}

static inline JSValue jsWebKitCSSMatrixEGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.e());
    return result;
}

static inline JSValue jsWebKitCSSMatrixFGetter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixF(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixFGetter>(state, thisValue, "f");
}

static inline JSValue jsWebKitCSSMatrixFGetter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.f());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM11Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM11(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM11Getter>(state, thisValue, "m11");
}

static inline JSValue jsWebKitCSSMatrixM11Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m11());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM12Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM12(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM12Getter>(state, thisValue, "m12");
}

static inline JSValue jsWebKitCSSMatrixM12Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m12());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM13Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM13(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM13Getter>(state, thisValue, "m13");
}

static inline JSValue jsWebKitCSSMatrixM13Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m13());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM14Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM14(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM14Getter>(state, thisValue, "m14");
}

static inline JSValue jsWebKitCSSMatrixM14Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m14());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM21Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM21(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM21Getter>(state, thisValue, "m21");
}

static inline JSValue jsWebKitCSSMatrixM21Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m21());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM22Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM22(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM22Getter>(state, thisValue, "m22");
}

static inline JSValue jsWebKitCSSMatrixM22Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m22());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM23Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM23(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM23Getter>(state, thisValue, "m23");
}

static inline JSValue jsWebKitCSSMatrixM23Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m23());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM24Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM24(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM24Getter>(state, thisValue, "m24");
}

static inline JSValue jsWebKitCSSMatrixM24Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m24());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM31Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM31(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM31Getter>(state, thisValue, "m31");
}

static inline JSValue jsWebKitCSSMatrixM31Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m31());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM32Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM32(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM32Getter>(state, thisValue, "m32");
}

static inline JSValue jsWebKitCSSMatrixM32Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m32());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM33Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM33(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM33Getter>(state, thisValue, "m33");
}

static inline JSValue jsWebKitCSSMatrixM33Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m33());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM34Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM34(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM34Getter>(state, thisValue, "m34");
}

static inline JSValue jsWebKitCSSMatrixM34Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m34());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM41Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM41(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM41Getter>(state, thisValue, "m41");
}

static inline JSValue jsWebKitCSSMatrixM41Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m41());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM42Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM42(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM42Getter>(state, thisValue, "m42");
}

static inline JSValue jsWebKitCSSMatrixM42Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m42());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM43Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM43(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM43Getter>(state, thisValue, "m43");
}

static inline JSValue jsWebKitCSSMatrixM43Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m43());
    return result;
}

static inline JSValue jsWebKitCSSMatrixM44Getter(ExecState&, JSWebKitCSSMatrix&, ThrowScope& throwScope);

EncodedJSValue jsWebKitCSSMatrixM44(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebKitCSSMatrix>::attribute<jsWebKitCSSMatrixM44Getter>(state, thisValue, "m44");
}

static inline JSValue jsWebKitCSSMatrixM44Getter(ExecState& state, JSWebKitCSSMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.m44());
    return result;
}

EncodedJSValue jsWebKitCSSMatrixConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSWebKitCSSMatrixPrototype* domObject = jsDynamicDowncast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSWebKitCSSMatrix::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSWebKitCSSMatrixConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSWebKitCSSMatrixPrototype* domObject = jsDynamicDowncast<JSWebKitCSSMatrixPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSWebKitCSSMatrixAFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixA(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixAFunction>(state, thisValue, encodedValue, "a");
}

static inline bool setJSWebKitCSSMatrixAFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setA(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixBFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixB(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixBFunction>(state, thisValue, encodedValue, "b");
}

static inline bool setJSWebKitCSSMatrixBFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setB(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixCFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixC(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixCFunction>(state, thisValue, encodedValue, "c");
}

static inline bool setJSWebKitCSSMatrixCFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setC(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixDFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixD(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixDFunction>(state, thisValue, encodedValue, "d");
}

static inline bool setJSWebKitCSSMatrixDFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setD(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixEFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixE(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixEFunction>(state, thisValue, encodedValue, "e");
}

static inline bool setJSWebKitCSSMatrixEFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setE(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixFFunction(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixF(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixFFunction>(state, thisValue, encodedValue, "f");
}

static inline bool setJSWebKitCSSMatrixFFunction(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setF(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM11Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM11(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM11Function>(state, thisValue, encodedValue, "m11");
}

static inline bool setJSWebKitCSSMatrixM11Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM11(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM12Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM12(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM12Function>(state, thisValue, encodedValue, "m12");
}

static inline bool setJSWebKitCSSMatrixM12Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM12(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM13Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM13(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM13Function>(state, thisValue, encodedValue, "m13");
}

static inline bool setJSWebKitCSSMatrixM13Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM13(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM14Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM14(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM14Function>(state, thisValue, encodedValue, "m14");
}

static inline bool setJSWebKitCSSMatrixM14Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM14(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM21Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM21(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM21Function>(state, thisValue, encodedValue, "m21");
}

static inline bool setJSWebKitCSSMatrixM21Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM21(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM22Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM22(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM22Function>(state, thisValue, encodedValue, "m22");
}

static inline bool setJSWebKitCSSMatrixM22Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM22(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM23Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM23(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM23Function>(state, thisValue, encodedValue, "m23");
}

static inline bool setJSWebKitCSSMatrixM23Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM23(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM24Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM24(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM24Function>(state, thisValue, encodedValue, "m24");
}

static inline bool setJSWebKitCSSMatrixM24Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM24(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM31Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM31(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM31Function>(state, thisValue, encodedValue, "m31");
}

static inline bool setJSWebKitCSSMatrixM31Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM31(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM32Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM32(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM32Function>(state, thisValue, encodedValue, "m32");
}

static inline bool setJSWebKitCSSMatrixM32Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM32(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM33Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM33(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM33Function>(state, thisValue, encodedValue, "m33");
}

static inline bool setJSWebKitCSSMatrixM33Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM33(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM34Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM34(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM34Function>(state, thisValue, encodedValue, "m34");
}

static inline bool setJSWebKitCSSMatrixM34Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM34(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM41Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM41(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM41Function>(state, thisValue, encodedValue, "m41");
}

static inline bool setJSWebKitCSSMatrixM41Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM41(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM42Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM42(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM42Function>(state, thisValue, encodedValue, "m42");
}

static inline bool setJSWebKitCSSMatrixM42Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM42(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM43Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM43(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM43Function>(state, thisValue, encodedValue, "m43");
}

static inline bool setJSWebKitCSSMatrixM43Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM43(WTFMove(nativeValue));
    return true;
}


static inline bool setJSWebKitCSSMatrixM44Function(ExecState&, JSWebKitCSSMatrix&, JSValue, ThrowScope&);

bool setJSWebKitCSSMatrixM44(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSWebKitCSSMatrix>::setAttribute<setJSWebKitCSSMatrixM44Function>(state, thisValue, encodedValue, "m44");
}

static inline bool setJSWebKitCSSMatrixM44Function(ExecState& state, JSWebKitCSSMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setM44(WTFMove(nativeValue));
    return true;
}


JSValue JSWebKitCSSMatrix::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebKitCSSMatrixConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSetMatrixValueCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSetMatrixValue(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionSetMatrixValueCaller>(state, "setMatrixValue");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSetMatrixValueCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto string = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setMatrixValue(WTFMove(string)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionMultiplyCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionMultiply(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionMultiplyCaller>(state, "multiply");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionMultiplyCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto secondMatrix = convert<IDLNullable<IDLInterface<WebKitCSSMatrix>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "secondMatrix", "WebKitCSSMatrix", "multiply", "WebKitCSSMatrix"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.multiply(WTFMove(secondMatrix))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionInverseCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionInverse(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionInverseCaller>(state, "inverse");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionInverseCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.inverse()));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionTranslateCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionTranslate(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionTranslateCaller>(state, "translate");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionTranslateCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedDouble>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto z = convert<IDLUnrestrictedDouble>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.translate(WTFMove(x), WTFMove(y), WTFMove(z))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionScaleCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionScale(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionScaleCaller>(state, "scale");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionScaleCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto scaleX = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto scaleY = convert<IDLUnrestrictedDouble>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto scaleZ = convert<IDLUnrestrictedDouble>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.scale(WTFMove(scaleX), WTFMove(scaleY), WTFMove(scaleZ))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionRotateCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotate(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionRotateCaller>(state, "rotate");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionRotateCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto rotX = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto rotY = convert<IDLUnrestrictedDouble>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto rotZ = convert<IDLUnrestrictedDouble>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.rotate(WTFMove(rotX), WTFMove(rotY), WTFMove(rotZ))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngleCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngle(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngleCaller>(state, "rotateAxisAngle");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionRotateAxisAngleCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto x = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedDouble>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto z = convert<IDLUnrestrictedDouble>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto angle = convert<IDLUnrestrictedDouble>(*state, state->argument(3));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.rotateAxisAngle(WTFMove(x), WTFMove(y), WTFMove(z), WTFMove(angle))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSkewXCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewX(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionSkewXCaller>(state, "skewX");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSkewXCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto angle = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.skewX(WTFMove(angle))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSkewYCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionSkewY(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionSkewYCaller>(state, "skewY");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionSkewYCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto angle = convert<IDLUnrestrictedDouble>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<WebKitCSSMatrix>>(*state, *castedThis->globalObject(), impl.skewY(WTFMove(angle))));
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionToStringCaller(JSC::ExecState*, JSWebKitCSSMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWebKitCSSMatrixPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSWebKitCSSMatrix>::callOperation<jsWebKitCSSMatrixPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsWebKitCSSMatrixPrototypeFunctionToStringCaller(JSC::ExecState* state, JSWebKitCSSMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.toString()));
}

bool JSWebKitCSSMatrixOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebKitCSSMatrixOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebKitCSSMatrix = static_cast<JSWebKitCSSMatrix*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebKitCSSMatrix->wrapped(), jsWebKitCSSMatrix);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WebKitCSSMatrix>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WebKitCSSMatrix.
    static_assert(!__is_polymorphic(WebKitCSSMatrix), "WebKitCSSMatrix is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<WebKitCSSMatrix>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WebKitCSSMatrix& impl)
{
    return wrap(state, globalObject, impl);
}

WebKitCSSMatrix* JSWebKitCSSMatrix::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWebKitCSSMatrix*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
