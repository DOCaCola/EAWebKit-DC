/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDeprecatedCSSOMCounter.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDeprecatedCSSOMCounterIdentifier(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMCounterListStyle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMCounterSeparator(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMCounterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDeprecatedCSSOMCounterConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDeprecatedCSSOMCounterPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDeprecatedCSSOMCounterPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDeprecatedCSSOMCounterPrototype* ptr = new (NotNull, JSC::allocateCell<JSDeprecatedCSSOMCounterPrototype>(vm.heap)) JSDeprecatedCSSOMCounterPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDeprecatedCSSOMCounterPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDeprecatedCSSOMCounterConstructor = JSDOMConstructorNotConstructable<JSDeprecatedCSSOMCounter>;

template<> JSValue JSDeprecatedCSSOMCounterConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDeprecatedCSSOMCounterConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDeprecatedCSSOMCounter::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Counter"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDeprecatedCSSOMCounterConstructor::s_info = { "Counter", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMCounterConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDeprecatedCSSOMCounterPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMCounterConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDeprecatedCSSOMCounterConstructor) } },
    { "identifier", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMCounterIdentifier), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "listStyle", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMCounterListStyle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "separator", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMCounterSeparator), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSDeprecatedCSSOMCounterPrototype::s_info = { "CounterPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMCounterPrototype) };

void JSDeprecatedCSSOMCounterPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDeprecatedCSSOMCounterPrototypeTableValues, *this);
}

const ClassInfo JSDeprecatedCSSOMCounter::s_info = { "Counter", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMCounter) };

JSDeprecatedCSSOMCounter::JSDeprecatedCSSOMCounter(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DeprecatedCSSOMCounter>&& impl)
    : JSDOMWrapper<DeprecatedCSSOMCounter>(structure, globalObject, WTFMove(impl))
{
}

void JSDeprecatedCSSOMCounter::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDeprecatedCSSOMCounter::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDeprecatedCSSOMCounterPrototype::create(vm, globalObject, JSDeprecatedCSSOMCounterPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDeprecatedCSSOMCounter::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDeprecatedCSSOMCounter>(vm, globalObject);
}

void JSDeprecatedCSSOMCounter::destroy(JSC::JSCell* cell)
{
    JSDeprecatedCSSOMCounter* thisObject = static_cast<JSDeprecatedCSSOMCounter*>(cell);
    thisObject->JSDeprecatedCSSOMCounter::~JSDeprecatedCSSOMCounter();
}

template<> inline JSDeprecatedCSSOMCounter* BindingCaller<JSDeprecatedCSSOMCounter>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDeprecatedCSSOMCounter*>(JSValue::decode(thisValue));
}

static inline JSValue jsDeprecatedCSSOMCounterIdentifierGetter(ExecState&, JSDeprecatedCSSOMCounter&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMCounterIdentifier(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMCounter>::attribute<jsDeprecatedCSSOMCounterIdentifierGetter>(state, thisValue, "identifier");
}

static inline JSValue jsDeprecatedCSSOMCounterIdentifierGetter(ExecState& state, JSDeprecatedCSSOMCounter& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.identifier());
    return result;
}

static inline JSValue jsDeprecatedCSSOMCounterListStyleGetter(ExecState&, JSDeprecatedCSSOMCounter&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMCounterListStyle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMCounter>::attribute<jsDeprecatedCSSOMCounterListStyleGetter>(state, thisValue, "listStyle");
}

static inline JSValue jsDeprecatedCSSOMCounterListStyleGetter(ExecState& state, JSDeprecatedCSSOMCounter& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.listStyle());
    return result;
}

static inline JSValue jsDeprecatedCSSOMCounterSeparatorGetter(ExecState&, JSDeprecatedCSSOMCounter&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMCounterSeparator(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMCounter>::attribute<jsDeprecatedCSSOMCounterSeparatorGetter>(state, thisValue, "separator");
}

static inline JSValue jsDeprecatedCSSOMCounterSeparatorGetter(ExecState& state, JSDeprecatedCSSOMCounter& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.separator());
    return result;
}

EncodedJSValue jsDeprecatedCSSOMCounterConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDeprecatedCSSOMCounterPrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMCounterPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDeprecatedCSSOMCounter::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDeprecatedCSSOMCounterConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDeprecatedCSSOMCounterPrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMCounterPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDeprecatedCSSOMCounter::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeprecatedCSSOMCounterConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSDeprecatedCSSOMCounterOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDeprecatedCSSOMCounterOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDeprecatedCSSOMCounter = static_cast<JSDeprecatedCSSOMCounter*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDeprecatedCSSOMCounter->wrapped(), jsDeprecatedCSSOMCounter);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DeprecatedCSSOMCounter>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DeprecatedCSSOMCounter.
    static_assert(!__is_polymorphic(DeprecatedCSSOMCounter), "DeprecatedCSSOMCounter is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DeprecatedCSSOMCounter>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DeprecatedCSSOMCounter& impl)
{
    return wrap(state, globalObject, impl);
}

DeprecatedCSSOMCounter* JSDeprecatedCSSOMCounter::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDeprecatedCSSOMCounter*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
