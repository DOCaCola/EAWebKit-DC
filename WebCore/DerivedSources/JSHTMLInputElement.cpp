/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLInputElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSFileList.h"
#include "JSHTMLFormElement.h"
#include "JSNodeList.h"
#include "JSValidityState.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionStepUp(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionStepDown(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionCheckValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionReportValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetCustomValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSelect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetRangeText(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetSelectionRange(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLInputElementAccept(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementAccept(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementAlt(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementAlt(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementDefaultChecked(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementDefaultChecked(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementChecked(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementChecked(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementDirName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementDirName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementForm(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLInputElementFiles(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFiles(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementFormAction(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFormAction(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementFormEnctype(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFormEnctype(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementFormMethod(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFormMethod(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementFormNoValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFormNoValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementFormTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementFormTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementIndeterminate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementIndeterminate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(DATALIST_ELEMENT)
JSC::EncodedJSValue jsHTMLInputElementList(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsHTMLInputElementMax(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementMax(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementMinLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementMinLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementMaxLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementMaxLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementMin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementMin(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementMultiple(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementMultiple(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementPattern(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementPattern(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementPlaceholder(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementPlaceholder(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementReadOnly(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementReadOnly(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementSrc(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementSrc(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementStep(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementStep(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementDefaultValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementDefaultValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementValueAsDate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementValueAsDate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementValueAsNumber(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementValueAsNumber(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementWillValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLInputElementValidity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLInputElementValidationMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLInputElementLabels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLInputElementSelectionStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementSelectionStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementSelectionEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementSelectionEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementSelectionDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementSelectionDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementAlign(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementAlign(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementUseMap(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementUseMap(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLInputElementIncremental(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementIncremental(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(MEDIA_CAPTURE)
JSC::EncodedJSValue jsHTMLInputElementCapture(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementCapture(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsHTMLInputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLInputElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLInputElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLInputElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLInputElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLInputElementPrototype>(vm.heap)) JSHTMLInputElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLInputElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLInputElementConstructor = JSDOMConstructorNotConstructable<JSHTMLInputElement>;

template<> JSValue JSHTMLInputElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLInputElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLInputElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLInputElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLInputElementConstructor::s_info = { "HTMLInputElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLInputElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLInputElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementConstructor) } },
    { "accept", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementAccept), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementAccept) } },
    { "alt", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementAlt), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementAlt) } },
    { "autocomplete", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementAutocomplete), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementAutocomplete) } },
    { "autofocus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementAutofocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementAutofocus) } },
    { "defaultChecked", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementDefaultChecked), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementDefaultChecked) } },
    { "checked", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementChecked), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementChecked) } },
    { "dirName", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementDirName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementDirName) } },
    { "disabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementDisabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementDisabled) } },
    { "form", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementForm), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "files", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFiles), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFiles) } },
    { "formAction", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFormAction), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFormAction) } },
    { "formEnctype", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFormEnctype), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFormEnctype) } },
    { "formMethod", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFormMethod), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFormMethod) } },
    { "formNoValidate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFormNoValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFormNoValidate) } },
    { "formTarget", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementFormTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementFormTarget) } },
    { "height", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementHeight) } },
    { "indeterminate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementIndeterminate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementIndeterminate) } },
#if ENABLE(DATALIST_ELEMENT)
    { "list", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementList), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "max", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementMax), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementMax) } },
    { "minLength", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementMinLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementMinLength) } },
    { "maxLength", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementMaxLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementMaxLength) } },
    { "min", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementMin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementMin) } },
    { "multiple", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementMultiple), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementMultiple) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementName) } },
    { "pattern", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementPattern), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementPattern) } },
    { "placeholder", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementPlaceholder), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementPlaceholder) } },
    { "readOnly", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementReadOnly), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementReadOnly) } },
    { "required", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementRequired) } },
    { "size", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementSize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementSize) } },
    { "src", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementSrc), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementSrc) } },
    { "step", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementStep), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementStep) } },
    { "type", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementType) } },
    { "defaultValue", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementDefaultValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementDefaultValue) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementValue) } },
    { "valueAsDate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementValueAsDate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementValueAsDate) } },
    { "valueAsNumber", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementValueAsNumber), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementValueAsNumber) } },
    { "width", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementWidth) } },
    { "willValidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementWillValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validity", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementValidity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validationMessage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementValidationMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "labels", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementLabels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "selectionStart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementSelectionStart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementSelectionStart) } },
    { "selectionEnd", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementSelectionEnd), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementSelectionEnd) } },
    { "selectionDirection", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementSelectionDirection), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementSelectionDirection) } },
    { "align", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementAlign), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementAlign) } },
    { "useMap", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementUseMap), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementUseMap) } },
    { "incremental", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementIncremental), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementIncremental) } },
#if ENABLE(MEDIA_CAPTURE)
    { "capture", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLInputElementCapture), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLInputElementCapture) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "stepUp", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionStepUp), (intptr_t) (0) } },
    { "stepDown", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionStepDown), (intptr_t) (0) } },
    { "checkValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionCheckValidity), (intptr_t) (0) } },
    { "reportValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionReportValidity), (intptr_t) (0) } },
    { "setCustomValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionSetCustomValidity), (intptr_t) (1) } },
    { "select", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionSelect), (intptr_t) (0) } },
    { "setRangeText", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionSetRangeText), (intptr_t) (1) } },
    { "setSelectionRange", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLInputElementPrototypeFunctionSetSelectionRange), (intptr_t) (2) } },
};

const ClassInfo JSHTMLInputElementPrototype::s_info = { "HTMLInputElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLInputElementPrototype) };

void JSHTMLInputElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLInputElementPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().interactiveFormValidationEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("reportValidity"), strlen("reportValidity"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSHTMLInputElement::s_info = { "HTMLInputElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLInputElement) };

JSHTMLInputElement::JSHTMLInputElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLInputElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLInputElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLInputElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLInputElementPrototype::create(vm, globalObject, JSHTMLInputElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLInputElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLInputElement>(vm, globalObject);
}

template<> inline JSHTMLInputElement* BindingCaller<JSHTMLInputElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLInputElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLInputElement* BindingCaller<JSHTMLInputElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLInputElement*>(state.thisValue());
}

static inline JSValue jsHTMLInputElementAcceptGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementAccept(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementAcceptGetter>(state, thisValue, "accept");
}

static inline JSValue jsHTMLInputElementAcceptGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::acceptAttr));
    return result;
}

static inline JSValue jsHTMLInputElementAltGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementAlt(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementAltGetter>(state, thisValue, "alt");
}

static inline JSValue jsHTMLInputElementAltGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::altAttr));
    return result;
}

static inline JSValue jsHTMLInputElementAutocompleteGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementAutocomplete(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementAutocompleteGetter>(state, thisValue, "autocomplete");
}

static inline JSValue jsHTMLInputElementAutocompleteGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.autocomplete());
    return result;
}

static inline JSValue jsHTMLInputElementAutofocusGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementAutofocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementAutofocusGetter>(state, thisValue, "autofocus");
}

static inline JSValue jsHTMLInputElementAutofocusGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::autofocusAttr));
    return result;
}

static inline JSValue jsHTMLInputElementDefaultCheckedGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementDefaultChecked(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementDefaultCheckedGetter>(state, thisValue, "defaultChecked");
}

static inline JSValue jsHTMLInputElementDefaultCheckedGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::checkedAttr));
    return result;
}

static inline JSValue jsHTMLInputElementCheckedGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementChecked(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementCheckedGetter>(state, thisValue, "checked");
}

static inline JSValue jsHTMLInputElementCheckedGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.checked());
    return result;
}

static inline JSValue jsHTMLInputElementDirNameGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementDirName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementDirNameGetter>(state, thisValue, "dirName");
}

static inline JSValue jsHTMLInputElementDirNameGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::dirnameAttr));
    return result;
}

static inline JSValue jsHTMLInputElementDisabledGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementDisabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementDisabledGetter>(state, thisValue, "disabled");
}

static inline JSValue jsHTMLInputElementDisabledGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::disabledAttr));
    return result;
}

static inline JSValue jsHTMLInputElementFormGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementForm(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormGetter>(state, thisValue, "form");
}

static inline JSValue jsHTMLInputElementFormGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLFormElement>>(state, *thisObject.globalObject(), impl.form());
    return result;
}

static inline JSValue jsHTMLInputElementFilesGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFiles(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFilesGetter>(state, thisValue, "files");
}

static inline JSValue jsHTMLInputElementFilesGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<FileList>>>(state, *thisObject.globalObject(), impl.files());
    return result;
}

static inline JSValue jsHTMLInputElementFormActionGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFormAction(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormActionGetter>(state, thisValue, "formAction");
}

static inline JSValue jsHTMLInputElementFormActionGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.formAction());
    return result;
}

static inline JSValue jsHTMLInputElementFormEnctypeGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFormEnctype(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormEnctypeGetter>(state, thisValue, "formEnctype");
}

static inline JSValue jsHTMLInputElementFormEnctypeGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.formEnctype());
    return result;
}

static inline JSValue jsHTMLInputElementFormMethodGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFormMethod(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormMethodGetter>(state, thisValue, "formMethod");
}

static inline JSValue jsHTMLInputElementFormMethodGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.formMethod());
    return result;
}

static inline JSValue jsHTMLInputElementFormNoValidateGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFormNoValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormNoValidateGetter>(state, thisValue, "formNoValidate");
}

static inline JSValue jsHTMLInputElementFormNoValidateGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::formnovalidateAttr));
    return result;
}

static inline JSValue jsHTMLInputElementFormTargetGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementFormTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementFormTargetGetter>(state, thisValue, "formTarget");
}

static inline JSValue jsHTMLInputElementFormTargetGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::formtargetAttr));
    return result;
}

static inline JSValue jsHTMLInputElementHeightGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsHTMLInputElementHeightGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.height());
    return result;
}

static inline JSValue jsHTMLInputElementIndeterminateGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementIndeterminate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementIndeterminateGetter>(state, thisValue, "indeterminate");
}

static inline JSValue jsHTMLInputElementIndeterminateGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.indeterminate());
    return result;
}

#if ENABLE(DATALIST_ELEMENT)
static inline JSValue jsHTMLInputElementListGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementList(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementListGetter>(state, thisValue, "list");
}

static inline JSValue jsHTMLInputElementListGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLElement>>(state, *thisObject.globalObject(), impl.list());
    return result;
}

#endif

static inline JSValue jsHTMLInputElementMaxGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementMax(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementMaxGetter>(state, thisValue, "max");
}

static inline JSValue jsHTMLInputElementMaxGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::maxAttr));
    return result;
}

static inline JSValue jsHTMLInputElementMinLengthGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementMinLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementMinLengthGetter>(state, thisValue, "minLength");
}

static inline JSValue jsHTMLInputElementMinLengthGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.minLength());
    return result;
}

static inline JSValue jsHTMLInputElementMaxLengthGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementMaxLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementMaxLengthGetter>(state, thisValue, "maxLength");
}

static inline JSValue jsHTMLInputElementMaxLengthGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.maxLength());
    return result;
}

static inline JSValue jsHTMLInputElementMinGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementMin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementMinGetter>(state, thisValue, "min");
}

static inline JSValue jsHTMLInputElementMinGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::minAttr));
    return result;
}

static inline JSValue jsHTMLInputElementMultipleGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementMultiple(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementMultipleGetter>(state, thisValue, "multiple");
}

static inline JSValue jsHTMLInputElementMultipleGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::multipleAttr));
    return result;
}

static inline JSValue jsHTMLInputElementNameGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLInputElementNameGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLInputElementPatternGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementPattern(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementPatternGetter>(state, thisValue, "pattern");
}

static inline JSValue jsHTMLInputElementPatternGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::patternAttr));
    return result;
}

static inline JSValue jsHTMLInputElementPlaceholderGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementPlaceholder(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementPlaceholderGetter>(state, thisValue, "placeholder");
}

static inline JSValue jsHTMLInputElementPlaceholderGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::placeholderAttr));
    return result;
}

static inline JSValue jsHTMLInputElementReadOnlyGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementReadOnly(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementReadOnlyGetter>(state, thisValue, "readOnly");
}

static inline JSValue jsHTMLInputElementReadOnlyGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::readonlyAttr));
    return result;
}

static inline JSValue jsHTMLInputElementRequiredGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementRequiredGetter>(state, thisValue, "required");
}

static inline JSValue jsHTMLInputElementRequiredGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::requiredAttr));
    return result;
}

static inline JSValue jsHTMLInputElementSizeGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementSize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementSizeGetter>(state, thisValue, "size");
}

static inline JSValue jsHTMLInputElementSizeGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.size());
    return result;
}

static inline JSValue jsHTMLInputElementSrcGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementSrc(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementSrcGetter>(state, thisValue, "src");
}

static inline JSValue jsHTMLInputElementSrcGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.getURLAttribute(WebCore::HTMLNames::srcAttr));
    return result;
}

static inline JSValue jsHTMLInputElementStepGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementStep(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementStepGetter>(state, thisValue, "step");
}

static inline JSValue jsHTMLInputElementStepGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::stepAttr));
    return result;
}

static inline JSValue jsHTMLInputElementTypeGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsHTMLInputElementTypeGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsHTMLInputElementDefaultValueGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementDefaultValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementDefaultValueGetter>(state, thisValue, "defaultValue");
}

static inline JSValue jsHTMLInputElementDefaultValueGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.defaultValue());
    return result;
}

static inline JSValue jsHTMLInputElementValueGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementValueGetter>(state, thisValue, "value");
}

static inline JSValue jsHTMLInputElementValueGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.value());
    return result;
}

static inline JSValue jsHTMLInputElementValueAsDateGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementValueAsDate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementValueAsDateGetter>(state, thisValue, "valueAsDate");
}

static inline JSValue jsHTMLInputElementValueAsDateGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDate>>(state, impl.valueAsDate());
    return result;
}

static inline JSValue jsHTMLInputElementValueAsNumberGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementValueAsNumber(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementValueAsNumberGetter>(state, thisValue, "valueAsNumber");
}

static inline JSValue jsHTMLInputElementValueAsNumberGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.valueAsNumber());
    return result;
}

static inline JSValue jsHTMLInputElementWidthGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsHTMLInputElementWidthGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.width());
    return result;
}

static inline JSValue jsHTMLInputElementWillValidateGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementWillValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementWillValidateGetter>(state, thisValue, "willValidate");
}

static inline JSValue jsHTMLInputElementWillValidateGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.willValidate());
    return result;
}

static inline JSValue jsHTMLInputElementValidityGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementValidity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementValidityGetter>(state, thisValue, "validity");
}

static inline JSValue jsHTMLInputElementValidityGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<ValidityState>>(state, *thisObject.globalObject(), impl.validity());
    return result;
}

static inline JSValue jsHTMLInputElementValidationMessageGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementValidationMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementValidationMessageGetter>(state, thisValue, "validationMessage");
}

static inline JSValue jsHTMLInputElementValidationMessageGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.validationMessage());
    return result;
}

static inline JSValue jsHTMLInputElementLabelsGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementLabels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementLabelsGetter>(state, thisValue, "labels");
}

static inline JSValue jsHTMLInputElementLabelsGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.labels());
    return result;
}

static inline JSValue jsHTMLInputElementSelectionStartGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementSelectionStart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementSelectionStartGetter>(state, thisValue, "selectionStart");
}

static inline JSValue jsHTMLInputElementSelectionStartGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(state, throwScope, impl.selectionStartForBindings());
    return result;
}

static inline JSValue jsHTMLInputElementSelectionEndGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementSelectionEnd(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementSelectionEndGetter>(state, thisValue, "selectionEnd");
}

static inline JSValue jsHTMLInputElementSelectionEndGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(state, throwScope, impl.selectionEndForBindings());
    return result;
}

static inline JSValue jsHTMLInputElementSelectionDirectionGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementSelectionDirection(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementSelectionDirectionGetter>(state, thisValue, "selectionDirection");
}

static inline JSValue jsHTMLInputElementSelectionDirectionGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, throwScope, impl.selectionDirectionForBindings());
    return result;
}

static inline JSValue jsHTMLInputElementAlignGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementAlign(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementAlignGetter>(state, thisValue, "align");
}

static inline JSValue jsHTMLInputElementAlignGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::alignAttr));
    return result;
}

static inline JSValue jsHTMLInputElementUseMapGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementUseMap(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementUseMapGetter>(state, thisValue, "useMap");
}

static inline JSValue jsHTMLInputElementUseMapGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::usemapAttr));
    return result;
}

static inline JSValue jsHTMLInputElementIncrementalGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementIncremental(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementIncrementalGetter>(state, thisValue, "incremental");
}

static inline JSValue jsHTMLInputElementIncrementalGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::incrementalAttr));
    return result;
}

#if ENABLE(MEDIA_CAPTURE)
static inline JSValue jsHTMLInputElementCaptureGetter(ExecState&, JSHTMLInputElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLInputElementCapture(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLInputElement>::attribute<jsHTMLInputElementCaptureGetter>(state, thisValue, "capture");
}

static inline JSValue jsHTMLInputElementCaptureGetter(ExecState& state, JSHTMLInputElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::captureAttr));
    return result;
}

#endif

EncodedJSValue jsHTMLInputElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLInputElementPrototype* domObject = jsDynamicDowncast<JSHTMLInputElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLInputElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLInputElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLInputElementPrototype* domObject = jsDynamicDowncast<JSHTMLInputElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLInputElementAcceptFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementAccept(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementAcceptFunction>(state, thisValue, encodedValue, "accept");
}

static inline bool setJSHTMLInputElementAcceptFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::acceptAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementAltFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementAlt(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementAltFunction>(state, thisValue, encodedValue, "alt");
}

static inline bool setJSHTMLInputElementAltFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::altAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementAutocompleteFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementAutocomplete(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementAutocompleteFunction>(state, thisValue, encodedValue, "autocomplete");
}

static inline bool setJSHTMLInputElementAutocompleteFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAutocomplete(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementAutofocusFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementAutofocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementAutofocusFunction>(state, thisValue, encodedValue, "autofocus");
}

static inline bool setJSHTMLInputElementAutofocusFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementDefaultCheckedFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementDefaultChecked(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementDefaultCheckedFunction>(state, thisValue, encodedValue, "defaultChecked");
}

static inline bool setJSHTMLInputElementDefaultCheckedFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::checkedAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementCheckedFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementChecked(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementCheckedFunction>(state, thisValue, encodedValue, "checked");
}

static inline bool setJSHTMLInputElementCheckedFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setChecked(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementDirNameFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementDirName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementDirNameFunction>(state, thisValue, encodedValue, "dirName");
}

static inline bool setJSHTMLInputElementDirNameFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::dirnameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementDisabledFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementDisabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementDisabledFunction>(state, thisValue, encodedValue, "disabled");
}

static inline bool setJSHTMLInputElementDisabledFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::disabledAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFilesFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFiles(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFilesFunction>(state, thisValue, encodedValue, "files");
}

static inline bool setJSHTMLInputElementFilesFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLInterface<FileList>>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "HTMLInputElement", "files", "FileList"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFiles(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFormActionFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFormAction(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFormActionFunction>(state, thisValue, encodedValue, "formAction");
}

static inline bool setJSHTMLInputElementFormActionFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormAction(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFormEnctypeFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFormEnctype(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFormEnctypeFunction>(state, thisValue, encodedValue, "formEnctype");
}

static inline bool setJSHTMLInputElementFormEnctypeFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormEnctype(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFormMethodFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFormMethod(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFormMethodFunction>(state, thisValue, encodedValue, "formMethod");
}

static inline bool setJSHTMLInputElementFormMethodFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormMethod(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFormNoValidateFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFormNoValidate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFormNoValidateFunction>(state, thisValue, encodedValue, "formNoValidate");
}

static inline bool setJSHTMLInputElementFormNoValidateFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementFormTargetFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementFormTarget(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementFormTargetFunction>(state, thisValue, encodedValue, "formTarget");
}

static inline bool setJSHTMLInputElementFormTargetFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::formtargetAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementHeightFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementHeightFunction>(state, thisValue, encodedValue, "height");
}

static inline bool setJSHTMLInputElementHeightFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHeight(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementIndeterminateFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementIndeterminate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementIndeterminateFunction>(state, thisValue, encodedValue, "indeterminate");
}

static inline bool setJSHTMLInputElementIndeterminateFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setIndeterminate(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementMaxFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementMax(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementMaxFunction>(state, thisValue, encodedValue, "max");
}

static inline bool setJSHTMLInputElementMaxFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::maxAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementMinLengthFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementMinLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementMinLengthFunction>(state, thisValue, encodedValue, "minLength");
}

static inline bool setJSHTMLInputElementMinLengthFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMinLength(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementMaxLengthFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementMaxLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementMaxLengthFunction>(state, thisValue, encodedValue, "maxLength");
}

static inline bool setJSHTMLInputElementMaxLengthFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMaxLength(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementMinFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementMin(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementMinFunction>(state, thisValue, encodedValue, "min");
}

static inline bool setJSHTMLInputElementMinFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::minAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementMultipleFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementMultiple(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementMultipleFunction>(state, thisValue, encodedValue, "multiple");
}

static inline bool setJSHTMLInputElementMultipleFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::multipleAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementNameFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLInputElementNameFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementPatternFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementPattern(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementPatternFunction>(state, thisValue, encodedValue, "pattern");
}

static inline bool setJSHTMLInputElementPatternFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::patternAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementPlaceholderFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementPlaceholder(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementPlaceholderFunction>(state, thisValue, encodedValue, "placeholder");
}

static inline bool setJSHTMLInputElementPlaceholderFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::placeholderAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementReadOnlyFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementReadOnly(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementReadOnlyFunction>(state, thisValue, encodedValue, "readOnly");
}

static inline bool setJSHTMLInputElementReadOnlyFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementRequiredFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementRequired(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementRequiredFunction>(state, thisValue, encodedValue, "required");
}

static inline bool setJSHTMLInputElementRequiredFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::requiredAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementSizeFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementSize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementSizeFunction>(state, thisValue, encodedValue, "size");
}

static inline bool setJSHTMLInputElementSizeFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setSize(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementSrcFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementSrc(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementSrcFunction>(state, thisValue, encodedValue, "src");
}

static inline bool setJSHTMLInputElementSrcFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::srcAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementStepFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementStep(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementStepFunction>(state, thisValue, encodedValue, "step");
}

static inline bool setJSHTMLInputElementStepFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::stepAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementTypeFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementType(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementTypeFunction>(state, thisValue, encodedValue, "type");
}

static inline bool setJSHTMLInputElementTypeFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setType(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementDefaultValueFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementDefaultValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementDefaultValueFunction>(state, thisValue, encodedValue, "defaultValue");
}

static inline bool setJSHTMLInputElementDefaultValueFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDefaultValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementValueFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSHTMLInputElementValueFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValue(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementValueAsDateFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementValueAsDate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementValueAsDateFunction>(state, thisValue, encodedValue, "valueAsDate");
}

static inline bool setJSHTMLInputElementValueAsDateFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLDate>>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValueAsDate(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementValueAsNumberFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementValueAsNumber(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementValueAsNumberFunction>(state, thisValue, encodedValue, "valueAsNumber");
}

static inline bool setJSHTMLInputElementValueAsNumberFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValueAsNumber(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementWidthFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementWidthFunction>(state, thisValue, encodedValue, "width");
}

static inline bool setJSHTMLInputElementWidthFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setWidth(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementSelectionStartFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementSelectionStart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementSelectionStartFunction>(state, thisValue, encodedValue, "selectionStart");
}

static inline bool setJSHTMLInputElementSelectionStartFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setSelectionStartForBindings(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementSelectionEndFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementSelectionEnd(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementSelectionEndFunction>(state, thisValue, encodedValue, "selectionEnd");
}

static inline bool setJSHTMLInputElementSelectionEndFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setSelectionEndForBindings(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementSelectionDirectionFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementSelectionDirection(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementSelectionDirectionFunction>(state, thisValue, encodedValue, "selectionDirection");
}

static inline bool setJSHTMLInputElementSelectionDirectionFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setSelectionDirectionForBindings(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLInputElementAlignFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementAlign(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementAlignFunction>(state, thisValue, encodedValue, "align");
}

static inline bool setJSHTMLInputElementAlignFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::alignAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementUseMapFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementUseMap(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementUseMapFunction>(state, thisValue, encodedValue, "useMap");
}

static inline bool setJSHTMLInputElementUseMapFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::usemapAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLInputElementIncrementalFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementIncremental(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementIncrementalFunction>(state, thisValue, encodedValue, "incremental");
}

static inline bool setJSHTMLInputElementIncrementalFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::incrementalAttr, WTFMove(nativeValue));
    return true;
}


#if ENABLE(MEDIA_CAPTURE)
static inline bool setJSHTMLInputElementCaptureFunction(ExecState&, JSHTMLInputElement&, JSValue, ThrowScope&);

bool setJSHTMLInputElementCapture(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLInputElement>::setAttribute<setJSHTMLInputElementCaptureFunction>(state, thisValue, encodedValue, "capture");
}

static inline bool setJSHTMLInputElementCaptureFunction(ExecState& state, JSHTMLInputElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::captureAttr, WTFMove(nativeValue));
    return true;
}

#endif

JSValue JSHTMLInputElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLInputElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionStepUpCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionStepUp(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionStepUpCaller>(state, "stepUp");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionStepUpCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto n = state->argument(0).isUndefined() ? 1 : convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.stepUp(WTFMove(n)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionStepDownCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionStepDown(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionStepDownCaller>(state, "stepDown");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionStepDownCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto n = state->argument(0).isUndefined() ? 1 : convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.stepDown(WTFMove(n)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionCheckValidityCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionCheckValidity(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionCheckValidityCaller>(state, "checkValidity");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionCheckValidityCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.checkValidity()));
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionReportValidityCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionReportValidity(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionReportValidityCaller>(state, "reportValidity");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionReportValidityCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.reportValidity()));
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetCustomValidity(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionSetCustomValidityCaller>(state, "setCustomValidity");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto error = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setCustomValidity(WTFMove(error));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSelectCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSelect(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionSelectCaller>(state, "select");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSelectCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.select();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText1Caller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText1(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionSetRangeText1Caller>(state, "setRangeText");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText1Caller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto replacement = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setRangeText(WTFMove(replacement)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText2Caller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText2(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionSetRangeText2Caller>(state, "setRangeText");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetRangeText2Caller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 3))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto replacement = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto start = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto selectionMode = state->argument(3).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(3), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setRangeText(WTFMove(replacement), WTFMove(start), WTFMove(end), WTFMove(selectionMode)));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetRangeText(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(4, state->argumentCount());
    if (argsCount == 1) {
        return jsHTMLInputElementPrototypeFunctionSetRangeText1(state);
    }
    if (argsCount == 3) {
        return jsHTMLInputElementPrototypeFunctionSetRangeText2(state);
    }
    if (argsCount == 4) {
        return jsHTMLInputElementPrototypeFunctionSetRangeText2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetSelectionRangeCaller(JSC::ExecState*, JSHTMLInputElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLInputElementPrototypeFunctionSetSelectionRange(ExecState* state)
{
    return BindingCaller<JSHTMLInputElement>::callOperation<jsHTMLInputElementPrototypeFunctionSetSelectionRangeCaller>(state, "setSelectionRange");
}

static inline JSC::EncodedJSValue jsHTMLInputElementPrototypeFunctionSetSelectionRangeCaller(JSC::ExecState* state, JSHTMLInputElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto start = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = convert<IDLLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto direction = state->argument(2).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setSelectionRangeForBindings(WTFMove(start), WTFMove(end), WTFMove(direction)));
    return JSValue::encode(jsUndefined());
}

void JSHTMLInputElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLInputElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

HTMLInputElement* JSHTMLInputElement::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSHTMLInputElement*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
