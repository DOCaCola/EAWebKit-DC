/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGAnimationElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGStringList.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetStartTime(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetCurrentTime(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetSimpleDuration(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionBeginElement(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionBeginElementAt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionEndElement(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionEndElementAt(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionHasExtension(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGAnimationElementTargetElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAnimationElementExternalResourcesRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAnimationElementRequiredFeatures(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAnimationElementRequiredExtensions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAnimationElementSystemLanguage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAnimationElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGAnimationElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGAnimationElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGAnimationElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGAnimationElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGAnimationElementPrototype>(vm.heap)) JSSVGAnimationElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGAnimationElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGAnimationElementConstructor = JSDOMConstructorNotConstructable<JSSVGAnimationElement>;

template<> JSValue JSSVGAnimationElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGAnimationElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGAnimationElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGAnimationElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGAnimationElementConstructor::s_info = { "SVGAnimationElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAnimationElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGAnimationElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGAnimationElementConstructor) } },
    { "targetElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementTargetElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "externalResourcesRequired", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementExternalResourcesRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredFeatures", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementRequiredFeatures), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredExtensions", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementRequiredExtensions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "systemLanguage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAnimationElementSystemLanguage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "getStartTime", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionGetStartTime), (intptr_t) (0) } },
    { "getCurrentTime", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionGetCurrentTime), (intptr_t) (0) } },
    { "getSimpleDuration", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionGetSimpleDuration), (intptr_t) (0) } },
    { "beginElement", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionBeginElement), (intptr_t) (0) } },
    { "beginElementAt", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionBeginElementAt), (intptr_t) (0) } },
    { "endElement", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionEndElement), (intptr_t) (0) } },
    { "endElementAt", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionEndElementAt), (intptr_t) (0) } },
    { "hasExtension", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnimationElementPrototypeFunctionHasExtension), (intptr_t) (0) } },
};

const ClassInfo JSSVGAnimationElementPrototype::s_info = { "SVGAnimationElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAnimationElementPrototype) };

void JSSVGAnimationElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGAnimationElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGAnimationElement::s_info = { "SVGAnimationElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAnimationElement) };

JSSVGAnimationElement::JSSVGAnimationElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGAnimationElement>&& impl)
    : JSSVGElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGAnimationElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGAnimationElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGAnimationElementPrototype::create(vm, globalObject, JSSVGAnimationElementPrototype::createStructure(vm, globalObject, JSSVGElement::prototype(vm, globalObject)));
}

JSObject* JSSVGAnimationElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGAnimationElement>(vm, globalObject);
}

template<> inline JSSVGAnimationElement* BindingCaller<JSSVGAnimationElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGAnimationElement*>(JSValue::decode(thisValue));
}

template<> inline JSSVGAnimationElement* BindingCaller<JSSVGAnimationElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGAnimationElement*>(state.thisValue());
}

static inline JSValue jsSVGAnimationElementTargetElementGetter(ExecState&, JSSVGAnimationElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGAnimationElementTargetElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAnimationElement>::attribute<jsSVGAnimationElementTargetElementGetter>(state, thisValue, "targetElement");
}

static inline JSValue jsSVGAnimationElementTargetElementGetter(ExecState& state, JSSVGAnimationElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGElement>>(state, *thisObject.globalObject(), impl.targetElement());
    return result;
}

static inline JSValue jsSVGAnimationElementExternalResourcesRequiredGetter(ExecState&, JSSVGAnimationElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGAnimationElementExternalResourcesRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAnimationElement>::attribute<jsSVGAnimationElementExternalResourcesRequiredGetter>(state, thisValue, "externalResourcesRequired");
}

static inline JSValue jsSVGAnimationElementExternalResourcesRequiredGetter(ExecState& state, JSSVGAnimationElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedBoolean>>(state, *thisObject.globalObject(), impl.externalResourcesRequiredAnimated());
    return result;
}

static inline JSValue jsSVGAnimationElementRequiredFeaturesGetter(ExecState&, JSSVGAnimationElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGAnimationElementRequiredFeatures(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAnimationElement>::attribute<jsSVGAnimationElementRequiredFeaturesGetter>(state, thisValue, "requiredFeatures");
}

static inline JSValue jsSVGAnimationElementRequiredFeaturesGetter(ExecState& state, JSSVGAnimationElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredFeatures());
    return result;
}

static inline JSValue jsSVGAnimationElementRequiredExtensionsGetter(ExecState&, JSSVGAnimationElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGAnimationElementRequiredExtensions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAnimationElement>::attribute<jsSVGAnimationElementRequiredExtensionsGetter>(state, thisValue, "requiredExtensions");
}

static inline JSValue jsSVGAnimationElementRequiredExtensionsGetter(ExecState& state, JSSVGAnimationElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredExtensions());
    return result;
}

static inline JSValue jsSVGAnimationElementSystemLanguageGetter(ExecState&, JSSVGAnimationElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGAnimationElementSystemLanguage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAnimationElement>::attribute<jsSVGAnimationElementSystemLanguageGetter>(state, thisValue, "systemLanguage");
}

static inline JSValue jsSVGAnimationElementSystemLanguageGetter(ExecState& state, JSSVGAnimationElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.systemLanguage());
    return result;
}

EncodedJSValue jsSVGAnimationElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGAnimationElementPrototype* domObject = jsDynamicDowncast<JSSVGAnimationElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGAnimationElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGAnimationElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGAnimationElementPrototype* domObject = jsDynamicDowncast<JSSVGAnimationElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGAnimationElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGAnimationElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetStartTimeCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetStartTime(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionGetStartTimeCaller>(state, "getStartTime");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetStartTimeCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(impl.getStartTime()));
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetCurrentTimeCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetCurrentTime(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionGetCurrentTimeCaller>(state, "getCurrentTime");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetCurrentTimeCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(impl.getCurrentTime()));
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetSimpleDurationCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionGetSimpleDuration(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionGetSimpleDurationCaller>(state, "getSimpleDuration");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionGetSimpleDurationCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(impl.getSimpleDuration()));
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionBeginElementCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionBeginElement(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionBeginElementCaller>(state, "beginElement");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionBeginElementCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.beginElement();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionBeginElementAtCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionBeginElementAt(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionBeginElementAtCaller>(state, "beginElementAt");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionBeginElementAtCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.beginElementAt(WTFMove(offset));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionEndElementCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionEndElement(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionEndElementCaller>(state, "endElement");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionEndElementCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.endElement();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionEndElementAtCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionEndElementAt(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionEndElementAtCaller>(state, "endElementAt");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionEndElementAtCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnrestrictedFloat>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.endElementAt(WTFMove(offset));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionHasExtensionCaller(JSC::ExecState*, JSSVGAnimationElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnimationElementPrototypeFunctionHasExtension(ExecState* state)
{
    return BindingCaller<JSSVGAnimationElement>::callOperation<jsSVGAnimationElementPrototypeFunctionHasExtensionCaller>(state, "hasExtension");
}

static inline JSC::EncodedJSValue jsSVGAnimationElementPrototypeFunctionHasExtensionCaller(JSC::ExecState* state, JSSVGAnimationElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto extension = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.hasExtension(WTFMove(extension))));
}

void JSSVGAnimationElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGAnimationElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
