/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(CONTENT_FILTERING)

#include "JSMockContentFilterSettings.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsMockContentFilterSettingsEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsBlockedString(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsBlockedString(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsModifiedRequestURL(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsModifiedRequestURL(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsDecisionPoint(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsDecisionPoint(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsDecision(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsDecision(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsUnblockRequestDecision(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsUnblockRequestDecision(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockContentFilterSettingsUnblockRequestURL(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockContentFilterSettingsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMockContentFilterSettingsPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMockContentFilterSettingsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMockContentFilterSettingsPrototype* ptr = new (NotNull, JSC::allocateCell<JSMockContentFilterSettingsPrototype>(vm.heap)) JSMockContentFilterSettingsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMockContentFilterSettingsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMockContentFilterSettingsPrototypeTableValues[] =
{
    { "enabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsEnabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsEnabled) } },
    { "blockedString", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsBlockedString), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsBlockedString) } },
    { "modifiedRequestURL", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsModifiedRequestURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsModifiedRequestURL) } },
    { "decisionPoint", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsDecisionPoint), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsDecisionPoint) } },
    { "decision", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsDecision), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsDecision) } },
    { "unblockRequestDecision", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsUnblockRequestDecision), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockContentFilterSettingsUnblockRequestDecision) } },
    { "unblockRequestURL", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockContentFilterSettingsUnblockRequestURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "DECISION_POINT_AFTER_WILL_SEND_REQUEST", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "DECISION_POINT_AFTER_REDIRECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "DECISION_POINT_AFTER_RESPONSE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "DECISION_POINT_AFTER_ADD_DATA", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "DECISION_POINT_AFTER_FINISHED_ADDING_DATA", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "DECISION_POINT_NEVER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "DECISION_ALLOW", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "DECISION_BLOCK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
};

const ClassInfo JSMockContentFilterSettingsPrototype::s_info = { "MockContentFilterSettingsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMockContentFilterSettingsPrototype) };

void JSMockContentFilterSettingsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMockContentFilterSettingsPrototypeTableValues, *this);
}

const ClassInfo JSMockContentFilterSettings::s_info = { "MockContentFilterSettings", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMockContentFilterSettings) };

JSMockContentFilterSettings::JSMockContentFilterSettings(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MockContentFilterSettings>&& impl)
    : JSDOMWrapper<MockContentFilterSettings>(structure, globalObject, WTFMove(impl))
{
}

void JSMockContentFilterSettings::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMockContentFilterSettings::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMockContentFilterSettingsPrototype::create(vm, globalObject, JSMockContentFilterSettingsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMockContentFilterSettings::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMockContentFilterSettings>(vm, globalObject);
}

void JSMockContentFilterSettings::destroy(JSC::JSCell* cell)
{
    JSMockContentFilterSettings* thisObject = static_cast<JSMockContentFilterSettings*>(cell);
    thisObject->JSMockContentFilterSettings::~JSMockContentFilterSettings();
}

template<> inline JSMockContentFilterSettings* BindingCaller<JSMockContentFilterSettings>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMockContentFilterSettings*>(JSValue::decode(thisValue));
}

static inline JSValue jsMockContentFilterSettingsEnabledGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsEnabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsEnabledGetter>(state, thisValue, "enabled");
}

static inline JSValue jsMockContentFilterSettingsEnabledGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.enabled());
    return result;
}

static inline JSValue jsMockContentFilterSettingsBlockedStringGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsBlockedString(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsBlockedStringGetter>(state, thisValue, "blockedString");
}

static inline JSValue jsMockContentFilterSettingsBlockedStringGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.blockedString());
    return result;
}

static inline JSValue jsMockContentFilterSettingsModifiedRequestURLGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsModifiedRequestURL(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsModifiedRequestURLGetter>(state, thisValue, "modifiedRequestURL");
}

static inline JSValue jsMockContentFilterSettingsModifiedRequestURLGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.modifiedRequestURL());
    return result;
}

static inline JSValue jsMockContentFilterSettingsDecisionPointGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsDecisionPoint(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsDecisionPointGetter>(state, thisValue, "decisionPoint");
}

static inline JSValue jsMockContentFilterSettingsDecisionPointGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.decisionPoint(state);
}

static inline JSValue jsMockContentFilterSettingsDecisionGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsDecision(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsDecisionGetter>(state, thisValue, "decision");
}

static inline JSValue jsMockContentFilterSettingsDecisionGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.decision(state);
}

static inline JSValue jsMockContentFilterSettingsUnblockRequestDecisionGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsUnblockRequestDecision(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsUnblockRequestDecisionGetter>(state, thisValue, "unblockRequestDecision");
}

static inline JSValue jsMockContentFilterSettingsUnblockRequestDecisionGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.unblockRequestDecision(state);
}

static inline JSValue jsMockContentFilterSettingsUnblockRequestURLGetter(ExecState&, JSMockContentFilterSettings&, ThrowScope& throwScope);

EncodedJSValue jsMockContentFilterSettingsUnblockRequestURL(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockContentFilterSettings>::attribute<jsMockContentFilterSettingsUnblockRequestURLGetter>(state, thisValue, "unblockRequestURL");
}

static inline JSValue jsMockContentFilterSettingsUnblockRequestURLGetter(ExecState& state, JSMockContentFilterSettings& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.unblockRequestURL());
    return result;
}

bool setJSMockContentFilterSettingsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMockContentFilterSettingsPrototype* domObject = jsDynamicDowncast<JSMockContentFilterSettingsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMockContentFilterSettingsEnabledFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsEnabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsEnabledFunction>(state, thisValue, encodedValue, "enabled");
}

static inline bool setJSMockContentFilterSettingsEnabledFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setEnabled(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockContentFilterSettingsBlockedStringFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsBlockedString(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsBlockedStringFunction>(state, thisValue, encodedValue, "blockedString");
}

static inline bool setJSMockContentFilterSettingsBlockedStringFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBlockedString(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockContentFilterSettingsModifiedRequestURLFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsModifiedRequestURL(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsModifiedRequestURLFunction>(state, thisValue, encodedValue, "modifiedRequestURL");
}

static inline bool setJSMockContentFilterSettingsModifiedRequestURLFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setModifiedRequestURL(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockContentFilterSettingsDecisionPointFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsDecisionPoint(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsDecisionPointFunction>(state, thisValue, encodedValue, "decisionPoint");
}

static inline bool setJSMockContentFilterSettingsDecisionPointFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    thisObject.setDecisionPoint(state, value);
    return true;
}


static inline bool setJSMockContentFilterSettingsDecisionFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsDecision(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsDecisionFunction>(state, thisValue, encodedValue, "decision");
}

static inline bool setJSMockContentFilterSettingsDecisionFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    thisObject.setDecision(state, value);
    return true;
}


static inline bool setJSMockContentFilterSettingsUnblockRequestDecisionFunction(ExecState&, JSMockContentFilterSettings&, JSValue, ThrowScope&);

bool setJSMockContentFilterSettingsUnblockRequestDecision(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockContentFilterSettings>::setAttribute<setJSMockContentFilterSettingsUnblockRequestDecisionFunction>(state, thisValue, encodedValue, "unblockRequestDecision");
}

static inline bool setJSMockContentFilterSettingsUnblockRequestDecisionFunction(ExecState& state, JSMockContentFilterSettings& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    thisObject.setUnblockRequestDecision(state, value);
    return true;
}


bool JSMockContentFilterSettingsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMockContentFilterSettingsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMockContentFilterSettings = static_cast<JSMockContentFilterSettings*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMockContentFilterSettings->wrapped(), jsMockContentFilterSettings);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MockContentFilterSettings>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to MockContentFilterSettings.
    static_assert(!__is_polymorphic(MockContentFilterSettings), "MockContentFilterSettings is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<MockContentFilterSettings>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MockContentFilterSettings& impl)
{
    return wrap(state, globalObject, impl);
}

MockContentFilterSettings* JSMockContentFilterSettings::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMockContentFilterSettings*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(CONTENT_FILTERING)
