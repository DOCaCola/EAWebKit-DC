/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLSelectElement.h"

#include "CustomElementReactionQueue.h"
#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSHTMLCollection.h"
#include "JSHTMLFormElement.h"
#include "JSHTMLOptGroupElement.h"
#include "JSHTMLOptionElement.h"
#include "JSHTMLOptionsCollection.h"
#include "JSNodeList.h"
#include "JSValidityState.h"
#include "RuntimeEnabledFeatures.h"
#include <builtins/BuiltinNames.h>
#include <runtime/Error.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionNamedItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionAdd(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionRemove(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionCheckValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionReportValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionSetCustomValidity(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLSelectElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementForm(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementMultiple(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementMultiple(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementOptions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementSelectedOptions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementSelectedIndex(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementSelectedIndex(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementWillValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementValidity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementValidationMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementLabels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLSelectElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSelectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSelectElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLSelectElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLSelectElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLSelectElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLSelectElementPrototype>(vm.heap)) JSHTMLSelectElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLSelectElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLSelectElementConstructor = JSDOMConstructorNotConstructable<JSHTMLSelectElement>;

template<> JSValue JSHTMLSelectElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLSelectElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLSelectElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLSelectElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLSelectElementConstructor::s_info = { "HTMLSelectElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSelectElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLSelectElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementConstructor) } },
    { "autofocus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementAutofocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementAutofocus) } },
    { "disabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementDisabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementDisabled) } },
    { "form", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementForm), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "multiple", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementMultiple), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementMultiple) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementName) } },
    { "required", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementRequired) } },
    { "size", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementSize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementSize) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "options", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementOptions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "length", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementLength) } },
    { "selectedOptions", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementSelectedOptions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "selectedIndex", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementSelectedIndex), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementSelectedIndex) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementValue) } },
    { "willValidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementWillValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validity", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementValidity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validationMessage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementValidationMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "labels", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementLabels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "autocomplete", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSelectElementAutocomplete), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSelectElementAutocomplete) } },
    { "item", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionItem), (intptr_t) (1) } },
    { "namedItem", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionNamedItem), (intptr_t) (1) } },
    { "add", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionAdd), (intptr_t) (1) } },
    { "remove", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionRemove), (intptr_t) (0) } },
    { "checkValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionCheckValidity), (intptr_t) (0) } },
    { "reportValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionReportValidity), (intptr_t) (0) } },
    { "setCustomValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSelectElementPrototypeFunctionSetCustomValidity), (intptr_t) (1) } },
};

const ClassInfo JSHTMLSelectElementPrototype::s_info = { "HTMLSelectElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSelectElementPrototype) };

void JSHTMLSelectElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLSelectElementPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().interactiveFormValidationEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("reportValidity"), strlen("reportValidity"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
    putDirect(vm, vm.propertyNames->iteratorSymbol, globalObject()->arrayPrototype()->getDirect(vm, vm.propertyNames->builtinNames().valuesPrivateName()), DontEnum);
}

const ClassInfo JSHTMLSelectElement::s_info = { "HTMLSelectElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSelectElement) };

JSHTMLSelectElement::JSHTMLSelectElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLSelectElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLSelectElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLSelectElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLSelectElementPrototype::create(vm, globalObject, JSHTMLSelectElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLSelectElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLSelectElement>(vm, globalObject);
}

bool JSHTMLSelectElement::getOwnPropertySlot(JSObject* object, ExecState* state, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    auto optionalIndex = parseIndex(propertyName);
    if (optionalIndex && optionalIndex.value() < thisObject->wrapped().length()) {
        auto index = optionalIndex.value();
        slot.setValue(thisObject, ReadOnly, toJS<IDLNullable<IDLInterface<HTMLOptionElement>>>(*state, *thisObject->globalObject(), thisObject->wrapped().item(index)));
        return true;
    }
    if (Base::getOwnPropertySlot(thisObject, state, propertyName, slot))
        return true;
    return false;
}

bool JSHTMLSelectElement::getOwnPropertySlotByIndex(JSObject* object, ExecState* state, unsigned index, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (LIKELY(index < thisObject->wrapped().length())) {
        slot.setValue(thisObject, ReadOnly, toJS<IDLNullable<IDLInterface<HTMLOptionElement>>>(*state, *thisObject->globalObject(), thisObject->wrapped().item(index)));
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, state, index, slot);
}

void JSHTMLSelectElement::getOwnPropertyNames(JSObject* object, ExecState* state, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    for (unsigned i = 0, count = thisObject->wrapped().length(); i < count; ++i)
        propertyNames.add(Identifier::from(state, i));
    Base::getOwnPropertyNames(thisObject, state, propertyNames, mode);
}

bool JSHTMLSelectElement::put(JSCell* cell, ExecState* state, PropertyName propertyName, JSValue value, PutPropertySlot& slot)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (auto index = parseIndex(propertyName)) {
        thisObject->indexSetter(state, index.value(), value);
        return true;
    }
    return Base::put(thisObject, state, propertyName, value, slot);
}

bool JSHTMLSelectElement::putByIndex(JSCell* cell, ExecState* state, unsigned index, JSValue value, bool shouldThrow)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (LIKELY(index <= MAX_ARRAY_INDEX)) {
        thisObject->indexSetter(state, index, value);
        return true;
    }
    return Base::putByIndex(cell, state, index, value, shouldThrow);
}

template<> inline JSHTMLSelectElement* BindingCaller<JSHTMLSelectElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLSelectElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLSelectElement* BindingCaller<JSHTMLSelectElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLSelectElement*>(state.thisValue());
}

static inline JSValue jsHTMLSelectElementAutofocusGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementAutofocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementAutofocusGetter>(state, thisValue, "autofocus");
}

static inline JSValue jsHTMLSelectElementAutofocusGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::autofocusAttr));
    return result;
}

static inline JSValue jsHTMLSelectElementDisabledGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementDisabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementDisabledGetter>(state, thisValue, "disabled");
}

static inline JSValue jsHTMLSelectElementDisabledGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::disabledAttr));
    return result;
}

static inline JSValue jsHTMLSelectElementFormGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementForm(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementFormGetter>(state, thisValue, "form");
}

static inline JSValue jsHTMLSelectElementFormGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<HTMLFormElement>>>(state, *thisObject.globalObject(), impl.form());
    return result;
}

static inline JSValue jsHTMLSelectElementMultipleGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementMultiple(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementMultipleGetter>(state, thisValue, "multiple");
}

static inline JSValue jsHTMLSelectElementMultipleGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.multiple());
    return result;
}

static inline JSValue jsHTMLSelectElementNameGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLSelectElementNameGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLSelectElementRequiredGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementRequiredGetter>(state, thisValue, "required");
}

static inline JSValue jsHTMLSelectElementRequiredGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::requiredAttr));
    return result;
}

static inline JSValue jsHTMLSelectElementSizeGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementSize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementSizeGetter>(state, thisValue, "size");
}

static inline JSValue jsHTMLSelectElementSizeGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.size());
    return result;
}

static inline JSValue jsHTMLSelectElementTypeGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsHTMLSelectElementTypeGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsHTMLSelectElementOptionsGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementOptions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementOptionsGetter>(state, thisValue, "options");
}

static inline JSValue jsHTMLSelectElementOptionsGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLOptionsCollection>>(state, *thisObject.globalObject(), impl.options());
    return result;
}

static inline JSValue jsHTMLSelectElementLengthGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementLengthGetter>(state, thisValue, "length");
}

static inline JSValue jsHTMLSelectElementLengthGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.length());
    return result;
}

static inline JSValue jsHTMLSelectElementSelectedOptionsGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementSelectedOptions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementSelectedOptionsGetter>(state, thisValue, "selectedOptions");
}

static inline JSValue jsHTMLSelectElementSelectedOptionsGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLCollection>>(state, *thisObject.globalObject(), impl.selectedOptions());
    return result;
}

static inline JSValue jsHTMLSelectElementSelectedIndexGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementSelectedIndex(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementSelectedIndexGetter>(state, thisValue, "selectedIndex");
}

static inline JSValue jsHTMLSelectElementSelectedIndexGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.selectedIndex());
    return result;
}

static inline JSValue jsHTMLSelectElementValueGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementValueGetter>(state, thisValue, "value");
}

static inline JSValue jsHTMLSelectElementValueGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.value());
    return result;
}

static inline JSValue jsHTMLSelectElementWillValidateGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementWillValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementWillValidateGetter>(state, thisValue, "willValidate");
}

static inline JSValue jsHTMLSelectElementWillValidateGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.willValidate());
    return result;
}

static inline JSValue jsHTMLSelectElementValidityGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementValidity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementValidityGetter>(state, thisValue, "validity");
}

static inline JSValue jsHTMLSelectElementValidityGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<ValidityState>>(state, *thisObject.globalObject(), impl.validity());
    return result;
}

static inline JSValue jsHTMLSelectElementValidationMessageGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementValidationMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementValidationMessageGetter>(state, thisValue, "validationMessage");
}

static inline JSValue jsHTMLSelectElementValidationMessageGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.validationMessage());
    return result;
}

static inline JSValue jsHTMLSelectElementLabelsGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementLabels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementLabelsGetter>(state, thisValue, "labels");
}

static inline JSValue jsHTMLSelectElementLabelsGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.labels());
    return result;
}

static inline JSValue jsHTMLSelectElementAutocompleteGetter(ExecState&, JSHTMLSelectElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSelectElementAutocomplete(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSelectElement>::attribute<jsHTMLSelectElementAutocompleteGetter>(state, thisValue, "autocomplete");
}

static inline JSValue jsHTMLSelectElementAutocompleteGetter(ExecState& state, JSHTMLSelectElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.autocomplete());
    return result;
}

EncodedJSValue jsHTMLSelectElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLSelectElementPrototype* domObject = jsDynamicDowncast<JSHTMLSelectElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLSelectElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLSelectElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLSelectElementPrototype* domObject = jsDynamicDowncast<JSHTMLSelectElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLSelectElementAutofocusFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementAutofocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementAutofocusFunction>(state, thisValue, encodedValue, "autofocus");
}

static inline bool setJSHTMLSelectElementAutofocusFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementDisabledFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementDisabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementDisabledFunction>(state, thisValue, encodedValue, "disabled");
}

static inline bool setJSHTMLSelectElementDisabledFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::disabledAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementMultipleFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementMultiple(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementMultipleFunction>(state, thisValue, encodedValue, "multiple");
}

static inline bool setJSHTMLSelectElementMultipleFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setMultiple(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementNameFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLSelectElementNameFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementRequiredFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementRequired(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementRequiredFunction>(state, thisValue, encodedValue, "required");
}

static inline bool setJSHTMLSelectElementRequiredFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::requiredAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementSizeFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementSize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementSizeFunction>(state, thisValue, encodedValue, "size");
}

static inline bool setJSHTMLSelectElementSizeFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSize(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementLengthFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementLengthFunction>(state, thisValue, encodedValue, "length");
}

static inline bool setJSHTMLSelectElementLengthFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setLength(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLSelectElementSelectedIndexFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementSelectedIndex(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementSelectedIndexFunction>(state, thisValue, encodedValue, "selectedIndex");
}

static inline bool setJSHTMLSelectElementSelectedIndexFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSelectedIndex(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementValueFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSHTMLSelectElementValueFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLSelectElementAutocompleteFunction(ExecState&, JSHTMLSelectElement&, JSValue, ThrowScope&);

bool setJSHTMLSelectElementAutocomplete(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSelectElement>::setAttribute<setJSHTMLSelectElementAutocompleteFunction>(state, thisValue, encodedValue, "autocomplete");
}

static inline bool setJSHTMLSelectElementAutocompleteFunction(ExecState& state, JSHTMLSelectElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAutocomplete(WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLSelectElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLSelectElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionItemCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionItem(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionItemCaller>(state, "item");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionItemCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLInterface<HTMLOptionElement>>>(*state, *castedThis->globalObject(), impl.item(WTFMove(index))));
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionNamedItemCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionNamedItem(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionNamedItemCaller>(state, "namedItem");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionNamedItemCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLInterface<HTMLOptionElement>>>(*state, *castedThis->globalObject(), impl.namedItem(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionAddCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionAdd(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionAddCaller>(state, "add");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionAddCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto element = convert<IDLUnion<IDLInterface<HTMLOptionElement>, IDLInterface<HTMLOptGroupElement>>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto before = state->argument(1).isUndefined() ? std::nullopt : convert<IDLNullable<IDLUnion<IDLInterface<HTMLElement>, IDLLong>>>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.add(WTFMove(element), WTFMove(before)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove1Caller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove1(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionRemove1Caller>(state, "remove");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove1Caller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.remove());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove2Caller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove2(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionRemove2Caller>(state, "remove");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove2Caller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto option = convert<IDLInterface<HTMLOptionElement>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "option", "HTMLSelectElement", "remove", "HTMLOptionElement"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.remove(*option);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove3Caller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove3(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionRemove3Caller>(state, "remove");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionRemove3Caller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.remove(WTFMove(index));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionRemove(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 0) {
        return jsHTMLSelectElementPrototypeFunctionRemove1(state);
    }
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSHTMLOptionElement::info()))
            return jsHTMLSelectElementPrototypeFunctionRemove2(state);
        if (distinguishingArg.isNumber())
            return jsHTMLSelectElementPrototypeFunctionRemove3(state);
        return jsHTMLSelectElementPrototypeFunctionRemove3(state);
    }
    return throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionCheckValidityCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionCheckValidity(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionCheckValidityCaller>(state, "checkValidity");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionCheckValidityCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.checkValidity()));
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionReportValidityCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionReportValidity(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionReportValidityCaller>(state, "reportValidity");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionReportValidityCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.reportValidity()));
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState*, JSHTMLSelectElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSelectElementPrototypeFunctionSetCustomValidity(ExecState* state)
{
    return BindingCaller<JSHTMLSelectElement>::callOperation<jsHTMLSelectElementPrototypeFunctionSetCustomValidityCaller>(state, "setCustomValidity");
}

static inline JSC::EncodedJSValue jsHTMLSelectElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState* state, JSHTMLSelectElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto error = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setCustomValidity(WTFMove(error));
    return JSValue::encode(jsUndefined());
}

void JSHTMLSelectElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLSelectElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

HTMLSelectElement* JSHTMLSelectElement::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSHTMLSelectElement*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
