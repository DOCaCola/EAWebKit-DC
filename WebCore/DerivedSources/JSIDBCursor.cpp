/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBCursor.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSIDBCursorDirection.h"
#include "JSIDBIndex.h"
#include "JSIDBObjectStore.h"
#include "JSIDBRequest.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionUpdate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionAdvance(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionContinue(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionContinuePrimaryKey(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionDelete(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIDBCursorSource(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBCursorDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBCursorKey(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBCursorPrimaryKey(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBCursorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBCursorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIDBCursorPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIDBCursorPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIDBCursorPrototype* ptr = new (NotNull, JSC::allocateCell<JSIDBCursorPrototype>(vm.heap)) JSIDBCursorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIDBCursorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIDBCursorConstructor = JSDOMConstructorNotConstructable<JSIDBCursor>;

template<> JSValue JSIDBCursorConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSIDBCursorConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIDBCursor::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IDBCursor"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIDBCursorConstructor::s_info = { "IDBCursor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBCursorConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIDBCursorPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBCursorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBCursorConstructor) } },
    { "source", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBCursorSource), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "direction", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBCursorDirection), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "key", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBCursorKey), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "primaryKey", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBCursorPrimaryKey), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "update", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBCursorPrototypeFunctionUpdate), (intptr_t) (1) } },
    { "advance", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBCursorPrototypeFunctionAdvance), (intptr_t) (1) } },
    { "continue", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBCursorPrototypeFunctionContinue), (intptr_t) (0) } },
    { "continuePrimaryKey", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBCursorPrototypeFunctionContinuePrimaryKey), (intptr_t) (2) } },
    { "delete", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBCursorPrototypeFunctionDelete), (intptr_t) (0) } },
};

const ClassInfo JSIDBCursorPrototype::s_info = { "IDBCursorPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBCursorPrototype) };

void JSIDBCursorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIDBCursorPrototypeTableValues, *this);
}

const ClassInfo JSIDBCursor::s_info = { "IDBCursor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBCursor) };

JSIDBCursor::JSIDBCursor(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IDBCursor>&& impl)
    : JSDOMWrapper<IDBCursor>(structure, globalObject, WTFMove(impl))
{
}

void JSIDBCursor::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIDBCursor::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIDBCursorPrototype::create(vm, globalObject, JSIDBCursorPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSIDBCursor::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBCursor>(vm, globalObject);
}

void JSIDBCursor::destroy(JSC::JSCell* cell)
{
    JSIDBCursor* thisObject = static_cast<JSIDBCursor*>(cell);
    thisObject->JSIDBCursor::~JSIDBCursor();
}

template<> inline JSIDBCursor* BindingCaller<JSIDBCursor>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIDBCursor*>(JSValue::decode(thisValue));
}

template<> inline JSIDBCursor* BindingCaller<JSIDBCursor>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIDBCursor*>(state.thisValue());
}

static inline JSValue jsIDBCursorSourceGetter(ExecState&, JSIDBCursor&, ThrowScope& throwScope);

EncodedJSValue jsIDBCursorSource(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBCursor>::attribute<jsIDBCursorSourceGetter>(state, thisValue, "source");
}

static inline JSValue jsIDBCursorSourceGetter(ExecState& state, JSIDBCursor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnion<IDLInterface<IDBObjectStore>, IDLInterface<IDBIndex>>>(state, *thisObject.globalObject(), impl.source());
    return result;
}

static inline JSValue jsIDBCursorDirectionGetter(ExecState&, JSIDBCursor&, ThrowScope& throwScope);

EncodedJSValue jsIDBCursorDirection(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBCursor>::attribute<jsIDBCursorDirectionGetter>(state, thisValue, "direction");
}

static inline JSValue jsIDBCursorDirectionGetter(ExecState& state, JSIDBCursor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<IDBCursorDirection>>(state, impl.direction());
    return result;
}

static inline JSValue jsIDBCursorKeyGetter(ExecState&, JSIDBCursor&, ThrowScope& throwScope);

EncodedJSValue jsIDBCursorKey(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBCursor>::attribute<jsIDBCursorKeyGetter>(state, thisValue, "key");
}

static inline JSValue jsIDBCursorKeyGetter(ExecState& state, JSIDBCursor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLAny>(impl.key());
    return result;
}

static inline JSValue jsIDBCursorPrimaryKeyGetter(ExecState&, JSIDBCursor&, ThrowScope& throwScope);

EncodedJSValue jsIDBCursorPrimaryKey(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBCursor>::attribute<jsIDBCursorPrimaryKeyGetter>(state, thisValue, "primaryKey");
}

static inline JSValue jsIDBCursorPrimaryKeyGetter(ExecState& state, JSIDBCursor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLAny>(impl.primaryKey());
    return result;
}

EncodedJSValue jsIDBCursorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIDBCursorPrototype* domObject = jsDynamicDowncast<JSIDBCursorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIDBCursor::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIDBCursorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIDBCursorPrototype* domObject = jsDynamicDowncast<JSIDBCursorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSIDBCursor::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBCursorConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionUpdateCaller(JSC::ExecState*, JSIDBCursor*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionUpdate(ExecState* state)
{
    return BindingCaller<JSIDBCursor>::callOperation<jsIDBCursorPrototypeFunctionUpdateCaller>(state, "update");
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionUpdateCaller(JSC::ExecState* state, JSIDBCursor* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto value = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.update(*state, WTFMove(value))));
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionAdvanceCaller(JSC::ExecState*, JSIDBCursor*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionAdvance(ExecState* state)
{
    return BindingCaller<JSIDBCursor>::callOperation<jsIDBCursorPrototypeFunctionAdvanceCaller>(state, "advance");
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionAdvanceCaller(JSC::ExecState* state, JSIDBCursor* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto count = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::EnforceRange);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.advance(WTFMove(count)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionContinueCaller(JSC::ExecState*, JSIDBCursor*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionContinue(ExecState* state)
{
    return BindingCaller<JSIDBCursor>::callOperation<jsIDBCursorPrototypeFunctionContinueCaller>(state, "continue");
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionContinueCaller(JSC::ExecState* state, JSIDBCursor* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto key = convert<IDLAny>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.continueFunction(*state, WTFMove(key)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionContinuePrimaryKeyCaller(JSC::ExecState*, JSIDBCursor*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionContinuePrimaryKey(ExecState* state)
{
    return BindingCaller<JSIDBCursor>::callOperation<jsIDBCursorPrototypeFunctionContinuePrimaryKeyCaller>(state, "continuePrimaryKey");
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionContinuePrimaryKeyCaller(JSC::ExecState* state, JSIDBCursor* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto key = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto primaryKey = convert<IDLAny>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.continuePrimaryKey(*state, WTFMove(key), WTFMove(primaryKey)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionDeleteCaller(JSC::ExecState*, JSIDBCursor*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBCursorPrototypeFunctionDelete(ExecState* state)
{
    return BindingCaller<JSIDBCursor>::callOperation<jsIDBCursorPrototypeFunctionDeleteCaller>(state, "delete");
}

static inline JSC::EncodedJSValue jsIDBCursorPrototypeFunctionDeleteCaller(JSC::ExecState* state, JSIDBCursor* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<IDBRequest>>(*state, *castedThis->globalObject(), throwScope, impl.deleteFunction(*state)));
}

void JSIDBCursor::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBCursor*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSIDBCursor::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBCursor*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

bool JSIDBCursorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsIDBCursor = jsCast<JSIDBCursor*>(handle.slot()->asCell());
    if (jsIDBCursor->wrapped().hasPendingActivity())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBCursorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIDBCursor = static_cast<JSIDBCursor*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIDBCursor->wrapped(), jsIDBCursor);
}

IDBCursor* JSIDBCursor::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIDBCursor*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INDEXED_DATABASE)
