/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLSlotElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSNode.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> HTMLSlotElement::AssignedNodesOptions convertDictionary<HTMLSlotElement::AssignedNodesOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    HTMLSlotElement::AssignedNodesOptions result;
    JSValue flattenValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "flatten"));
    if (!flattenValue.isUndefined()) {
        result.flatten = convert<IDLBoolean>(state, flattenValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.flatten = false;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLSlotElementPrototypeFunctionAssignedNodes(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLSlotElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSlotElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLSlotElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLSlotElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLSlotElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLSlotElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLSlotElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLSlotElementPrototype>(vm.heap)) JSHTMLSlotElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLSlotElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLSlotElementConstructor = JSDOMConstructorNotConstructable<JSHTMLSlotElement>;

template<> JSValue JSHTMLSlotElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLSlotElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLSlotElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLSlotElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLSlotElementConstructor::s_info = { "HTMLSlotElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSlotElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLSlotElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSlotElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSlotElementConstructor) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLSlotElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLSlotElementName) } },
    { "assignedNodes", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLSlotElementPrototypeFunctionAssignedNodes), (intptr_t) (0) } },
};

const ClassInfo JSHTMLSlotElementPrototype::s_info = { "HTMLSlotElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSlotElementPrototype) };

void JSHTMLSlotElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLSlotElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLSlotElement::s_info = { "HTMLSlotElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLSlotElement) };

JSHTMLSlotElement::JSHTMLSlotElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLSlotElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLSlotElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLSlotElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLSlotElementPrototype::create(vm, globalObject, JSHTMLSlotElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLSlotElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLSlotElement>(vm, globalObject);
}

template<> inline JSHTMLSlotElement* BindingCaller<JSHTMLSlotElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLSlotElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLSlotElement* BindingCaller<JSHTMLSlotElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLSlotElement*>(state.thisValue());
}

static inline JSValue jsHTMLSlotElementNameGetter(ExecState&, JSHTMLSlotElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLSlotElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLSlotElement>::attribute<jsHTMLSlotElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLSlotElementNameGetter(ExecState& state, JSHTMLSlotElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

EncodedJSValue jsHTMLSlotElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLSlotElementPrototype* domObject = jsDynamicDowncast<JSHTMLSlotElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLSlotElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLSlotElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLSlotElementPrototype* domObject = jsDynamicDowncast<JSHTMLSlotElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLSlotElementNameFunction(ExecState&, JSHTMLSlotElement&, JSValue, ThrowScope&);

bool setJSHTMLSlotElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLSlotElement>::setAttribute<setJSHTMLSlotElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLSlotElementNameFunction(ExecState& state, JSHTMLSlotElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLSlotElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLSlotElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLSlotElementPrototypeFunctionAssignedNodesCaller(JSC::ExecState*, JSHTMLSlotElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLSlotElementPrototypeFunctionAssignedNodes(ExecState* state)
{
    return BindingCaller<JSHTMLSlotElement>::callOperation<jsHTMLSlotElementPrototypeFunctionAssignedNodesCaller>(state, "assignedNodes");
}

static inline JSC::EncodedJSValue jsHTMLSlotElementPrototypeFunctionAssignedNodesCaller(JSC::ExecState* state, JSHTMLSlotElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto options = convert<IDLDictionary<HTMLSlotElement::AssignedNodesOptions>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLSequence<IDLInterface<Node>>>(*state, *castedThis->globalObject(), impl.assignedNodes(WTFMove(options))));
}

void JSHTMLSlotElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLSlotElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

HTMLSlotElement* JSHTMLSlotElement::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSHTMLSlotElement*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
