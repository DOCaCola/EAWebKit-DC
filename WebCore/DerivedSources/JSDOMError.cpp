/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMError.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDOMErrorName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDOMErrorMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMErrorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMErrorPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMErrorPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMErrorPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMErrorPrototype>(vm.heap)) JSDOMErrorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMErrorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSDOMErrorPrototypeTableValues[] =
{
    { "name", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMErrorName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "message", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMErrorMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSDOMErrorPrototype::s_info = { "DOMErrorPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMErrorPrototype) };

void JSDOMErrorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMErrorPrototypeTableValues, *this);
}

const ClassInfo JSDOMError::s_info = { "DOMError", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMError) };

JSDOMError::JSDOMError(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMError>&& impl)
    : JSDOMWrapper<DOMError>(structure, globalObject, WTFMove(impl))
{
}

void JSDOMError::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMError::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMErrorPrototype::create(vm, globalObject, JSDOMErrorPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDOMError::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMError>(vm, globalObject);
}

void JSDOMError::destroy(JSC::JSCell* cell)
{
    JSDOMError* thisObject = static_cast<JSDOMError*>(cell);
    thisObject->JSDOMError::~JSDOMError();
}

template<> inline JSDOMError* BindingCaller<JSDOMError>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDOMError*>(JSValue::decode(thisValue));
}

static inline JSValue jsDOMErrorNameGetter(ExecState&, JSDOMError&, ThrowScope& throwScope);

EncodedJSValue jsDOMErrorName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMError>::attribute<jsDOMErrorNameGetter>(state, thisValue, "name");
}

static inline JSValue jsDOMErrorNameGetter(ExecState& state, JSDOMError& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsDOMErrorMessageGetter(ExecState&, JSDOMError&, ThrowScope& throwScope);

EncodedJSValue jsDOMErrorMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDOMError>::attribute<jsDOMErrorMessageGetter>(state, thisValue, "message");
}

static inline JSValue jsDOMErrorMessageGetter(ExecState& state, JSDOMError& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.message());
    return result;
}

bool setJSDOMErrorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMErrorPrototype* domObject = jsDynamicDowncast<JSDOMErrorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

bool JSDOMErrorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMErrorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMError = static_cast<JSDOMError*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMError->wrapped(), jsDOMError);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMError>&& impl)
{
    return createWrapper<DOMError>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMError& impl)
{
    return wrap(state, globalObject, impl);
}

DOMError* JSDOMError::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDOMError*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
