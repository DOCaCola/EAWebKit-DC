/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCIceCandidate.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/ObjectConstructor.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> RTCIceCandidate::Init convertDictionary<RTCIceCandidate::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCIceCandidate::Init result;
    JSValue candidateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "candidate"));
    if (!candidateValue.isUndefined()) {
        result.candidate = convert<IDLDOMString>(state, candidateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "candidate", "RTCIceCandidateInit", "DOMString");
        return { };
    }
    JSValue sdpMLineIndexValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sdpMLineIndex"));
    if (!sdpMLineIndexValue.isUndefined()) {
        result.sdpMLineIndex = convert<IDLNullable<IDLUnsignedShort>>(state, sdpMLineIndexValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.sdpMLineIndex = std::nullopt;
    JSValue sdpMidValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sdpMid"));
    if (!sdpMidValue.isUndefined()) {
        result.sdpMid = convert<IDLNullable<IDLDOMString>>(state, sdpMidValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.sdpMid = String();
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCIceCandidatePrototypeFunctionToJSON(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRTCIceCandidateCandidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCIceCandidateSdpMid(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCIceCandidateSdpMLineIndex(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCIceCandidateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCIceCandidateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCIceCandidatePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCIceCandidatePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCIceCandidatePrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCIceCandidatePrototype>(vm.heap)) JSRTCIceCandidatePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCIceCandidatePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSRTCIceCandidateConstructor = JSDOMConstructor<JSRTCIceCandidate>;

template<> EncodedJSValue JSC_HOST_CALL JSRTCIceCandidateConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSRTCIceCandidateConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto candidateInitDict = convert<IDLDictionary<RTCIceCandidate::Init>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = RTCIceCandidate::create(WTFMove(candidateInitDict));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<RTCIceCandidate>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSRTCIceCandidateConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRTCIceCandidateConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSRTCIceCandidate::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("RTCIceCandidate"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSRTCIceCandidateConstructor::s_info = { "RTCIceCandidate", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCIceCandidateConstructor) };

/* Hash table for prototype */

static const HashTableValue JSRTCIceCandidatePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCIceCandidateConstructor) } },
    { "candidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateCandidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "sdpMid", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateSdpMid), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "sdpMLineIndex", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCIceCandidateSdpMLineIndex), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toJSON", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCIceCandidatePrototypeFunctionToJSON), (intptr_t) (0) } },
};

const ClassInfo JSRTCIceCandidatePrototype::s_info = { "RTCIceCandidatePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCIceCandidatePrototype) };

void JSRTCIceCandidatePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCIceCandidatePrototypeTableValues, *this);
}

const ClassInfo JSRTCIceCandidate::s_info = { "RTCIceCandidate", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCIceCandidate) };

JSRTCIceCandidate::JSRTCIceCandidate(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCIceCandidate>&& impl)
    : JSDOMWrapper<RTCIceCandidate>(structure, globalObject, WTFMove(impl))
{
}

void JSRTCIceCandidate::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRTCIceCandidate::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCIceCandidatePrototype::create(vm, globalObject, JSRTCIceCandidatePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRTCIceCandidate::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCIceCandidate>(vm, globalObject);
}

void JSRTCIceCandidate::destroy(JSC::JSCell* cell)
{
    JSRTCIceCandidate* thisObject = static_cast<JSRTCIceCandidate*>(cell);
    thisObject->JSRTCIceCandidate::~JSRTCIceCandidate();
}

template<> inline JSRTCIceCandidate* BindingCaller<JSRTCIceCandidate>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRTCIceCandidate*>(JSValue::decode(thisValue));
}

template<> inline JSRTCIceCandidate* BindingCaller<JSRTCIceCandidate>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSRTCIceCandidate*>(state.thisValue());
}

static inline JSValue jsRTCIceCandidateCandidateGetter(ExecState&, JSRTCIceCandidate&, ThrowScope& throwScope);

EncodedJSValue jsRTCIceCandidateCandidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCIceCandidate>::attribute<jsRTCIceCandidateCandidateGetter>(state, thisValue, "candidate");
}

static inline JSValue jsRTCIceCandidateCandidateGetter(ExecState& state, JSRTCIceCandidate& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.candidate());
    return result;
}

static inline JSValue jsRTCIceCandidateSdpMidGetter(ExecState&, JSRTCIceCandidate&, ThrowScope& throwScope);

EncodedJSValue jsRTCIceCandidateSdpMid(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCIceCandidate>::attribute<jsRTCIceCandidateSdpMidGetter>(state, thisValue, "sdpMid");
}

static inline JSValue jsRTCIceCandidateSdpMidGetter(ExecState& state, JSRTCIceCandidate& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.sdpMid());
    return result;
}

static inline JSValue jsRTCIceCandidateSdpMLineIndexGetter(ExecState&, JSRTCIceCandidate&, ThrowScope& throwScope);

EncodedJSValue jsRTCIceCandidateSdpMLineIndex(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCIceCandidate>::attribute<jsRTCIceCandidateSdpMLineIndexGetter>(state, thisValue, "sdpMLineIndex");
}

static inline JSValue jsRTCIceCandidateSdpMLineIndexGetter(ExecState& state, JSRTCIceCandidate& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLUnsignedShort>>(impl.sdpMLineIndex());
    return result;
}

EncodedJSValue jsRTCIceCandidateConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSRTCIceCandidatePrototype* domObject = jsDynamicDowncast<JSRTCIceCandidatePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSRTCIceCandidate::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSRTCIceCandidateConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRTCIceCandidatePrototype* domObject = jsDynamicDowncast<JSRTCIceCandidatePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSRTCIceCandidate::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRTCIceCandidateConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline EncodedJSValue jsRTCIceCandidatePrototypeFunctionToJSONCaller(ExecState* state, JSRTCIceCandidate* thisObject, JSC::ThrowScope& throwScope)
{
    auto& vm = state->vm();
    auto* result = constructEmptyObject(state);

    auto candidateValue = jsRTCIceCandidateCandidateGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "candidate"), candidateValue);

    auto sdpMidValue = jsRTCIceCandidateSdpMidGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "sdpMid"), sdpMidValue);

    auto sdpMLineIndexValue = jsRTCIceCandidateSdpMLineIndexGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "sdpMLineIndex"), sdpMLineIndexValue);

    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsRTCIceCandidatePrototypeFunctionToJSON(ExecState* state)
{
    return BindingCaller<JSRTCIceCandidate>::callOperation<jsRTCIceCandidatePrototypeFunctionToJSONCaller>(state, "toJSON");
}

bool JSRTCIceCandidateOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCIceCandidateOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCIceCandidate = static_cast<JSRTCIceCandidate*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCIceCandidate->wrapped(), jsRTCIceCandidate);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<RTCIceCandidate>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to RTCIceCandidate.
    static_assert(!__is_polymorphic(RTCIceCandidate), "RTCIceCandidate is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<RTCIceCandidate>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, RTCIceCandidate& impl)
{
    return wrap(state, globalObject, impl);
}

RTCIceCandidate* JSRTCIceCandidate::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSRTCIceCandidate*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
