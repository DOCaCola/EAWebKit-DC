/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMSettableTokenList.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <runtime/PropertyNameArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDOMSettableTokenListValue(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSDOMSettableTokenListValue(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDOMSettableTokenListConstructor(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSDOMSettableTokenListPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSDOMSettableTokenListPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMSettableTokenListPrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMSettableTokenListPrototype>(vm.heap)) JSDOMSettableTokenListPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMSettableTokenListPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }
};

typedef JSDOMConstructorNotConstructable<JSDOMSettableTokenList> JSDOMSettableTokenListConstructor;

/* Hash table */

static const struct CompactHashIndex JSDOMSettableTokenListTableIndex[4] = {
    { -1, -1 },
    { 0, -1 },
    { -1, -1 },
    { 1, -1 },
};


static const HashTableValue JSDOMSettableTokenListTableValues[] =
{
    { "constructor", DontEnum | ReadOnly, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSettableTokenListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "value", DontDelete | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMSettableTokenListValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMSettableTokenListValue) } },
};

static const HashTable JSDOMSettableTokenListTable = { 2, 3, true, JSDOMSettableTokenListTableValues, JSDOMSettableTokenListTableIndex };
template<> void JSDOMSettableTokenListConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMSettableTokenList::getPrototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("DOMSettableTokenList"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDOMSettableTokenListConstructor::s_info = { "DOMSettableTokenListConstructor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMSettableTokenListConstructor) };

/* Hash table for prototype */
const ClassInfo JSDOMSettableTokenListPrototype::s_info = { "DOMSettableTokenListPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMSettableTokenListPrototype) };

const ClassInfo JSDOMSettableTokenList::s_info = { "DOMSettableTokenList", &Base::s_info, &JSDOMSettableTokenListTable, CREATE_METHOD_TABLE(JSDOMSettableTokenList) };

JSDOMSettableTokenList::JSDOMSettableTokenList(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMSettableTokenList>&& impl)
    : JSDOMTokenList(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSDOMSettableTokenList::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMSettableTokenListPrototype::create(vm, globalObject, JSDOMSettableTokenListPrototype::createStructure(vm, globalObject, JSDOMTokenList::getPrototype(vm, globalObject)));
}

JSObject* JSDOMSettableTokenList::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMSettableTokenList>(vm, globalObject);
}

bool JSDOMSettableTokenList::getOwnPropertySlot(JSObject* object, ExecState* state, PropertyName propertyName, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSDOMSettableTokenList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Optional<uint32_t> optionalIndex = parseIndex(propertyName);
    if (optionalIndex) {
        unsigned index = optionalIndex.value();
        unsigned attributes = DontDelete | ReadOnly;
        slot.setValue(thisObject, attributes, jsStringOrUndefined(state, thisObject->wrapped().item(index)));
        return true;
    }
    if (getStaticValueSlot<JSDOMSettableTokenList, Base>(state, JSDOMSettableTokenListTable, thisObject, propertyName, slot))
        return true;
    return false;
}

bool JSDOMSettableTokenList::getOwnPropertySlotByIndex(JSObject* object, ExecState* state, unsigned index, PropertySlot& slot)
{
    auto* thisObject = jsCast<JSDOMSettableTokenList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    if (index <= MAX_ARRAY_INDEX) {
        unsigned attributes = DontDelete | ReadOnly;
        slot.setValue(thisObject, attributes, jsStringOrUndefined(state, thisObject->wrapped().item(index)));
        return true;
    }
    return Base::getOwnPropertySlotByIndex(thisObject, state, index, slot);
}

EncodedJSValue jsDOMSettableTokenListValue(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSDOMSettableTokenList*>(slotBase);
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.value());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMSettableTokenListConstructor(ExecState* state, JSObject*, EncodedJSValue thisValue, PropertyName)
{
    JSDOMSettableTokenList* domObject = jsDynamicCast<JSDOMSettableTokenList*>(JSValue::decode(thisValue));
    if (!domObject)
        return throwVMTypeError(state);
    return JSValue::encode(JSDOMSettableTokenList::getConstructor(state->vm(), domObject->globalObject()));
}

void setJSDOMSettableTokenListValue(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    UNUSED_PARAM(thisValue);
    auto* castedThis = jsCast<JSDOMSettableTokenList*>(baseObject);
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(state);
    auto& impl = castedThis->wrapped();
    String nativeValue = value.toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return;
    impl.setValue(nativeValue);
}


void JSDOMSettableTokenList::getOwnPropertyNames(JSObject* object, ExecState* state, PropertyNameArray& propertyNames, EnumerationMode mode)
{
    auto* thisObject = jsCast<JSDOMSettableTokenList*>(object);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    for (unsigned i = 0, count = thisObject->wrapped().length(); i < count; ++i)
        propertyNames.add(Identifier::from(state, i));
    Base::getOwnPropertyNames(thisObject, state, propertyNames, mode);
}

JSValue JSDOMSettableTokenList::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMSettableTokenListConstructor>(vm, *jsCast<JSDOMGlobalObject*>(globalObject));
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, DOMSettableTokenList* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSDOMSettableTokenList>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, DOMSettableTokenList* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSDOMSettableTokenList>(globalObject, impl))
        return result;
    return createNewWrapper<JSDOMSettableTokenList>(globalObject, impl);
}


}
