/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FETCH_API)

#include "JSFetchRequest.h"

#include "FetchRequestBuiltins.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMPromise.h"
#include "JSFetchHeaders.h"
#include "JSFetchRequest.h"
#include "RuntimeEnabledFeatures.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Type enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        emptyString(),
        ASCIILiteral("audio"),
        ASCIILiteral("font"),
        ASCIILiteral("image"),
        ASCIILiteral("script"),
        ASCIILiteral("style"),
        ASCIILiteral("track"),
        ASCIILiteral("video"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Type::EmptyString) == 0, "FetchRequest::Type::EmptyString is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Audio) == 1, "FetchRequest::Type::Audio is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Font) == 2, "FetchRequest::Type::Font is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Image) == 3, "FetchRequest::Type::Image is not 3 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Script) == 4, "FetchRequest::Type::Script is not 4 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Style) == 5, "FetchRequest::Type::Style is not 5 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Track) == 6, "FetchRequest::Type::Track is not 6 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Type::Video) == 7, "FetchRequest::Type::Video is not 7 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Type> parseEnumeration<FetchRequest::Type>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue.isEmpty())
        return FetchRequest::Type::EmptyString;
    if (stringValue == "audio")
        return FetchRequest::Type::Audio;
    if (stringValue == "font")
        return FetchRequest::Type::Font;
    if (stringValue == "image")
        return FetchRequest::Type::Image;
    if (stringValue == "script")
        return FetchRequest::Type::Script;
    if (stringValue == "style")
        return FetchRequest::Type::Style;
    if (stringValue == "track")
        return FetchRequest::Type::Track;
    if (stringValue == "video")
        return FetchRequest::Type::Video;
    return std::nullopt;
}

template<> FetchRequest::Type convertEnumeration<FetchRequest::Type>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Type>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Type>()
{
    return "\"\", \"audio\", \"font\", \"image\", \"script\", \"style\", \"track\", \"video\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Destination enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        emptyString(),
        ASCIILiteral("document"),
        ASCIILiteral("sharedworker"),
        ASCIILiteral("subresource"),
        ASCIILiteral("unknown"),
        ASCIILiteral("worker"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Destination::EmptyString) == 0, "FetchRequest::Destination::EmptyString is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Destination::Document) == 1, "FetchRequest::Destination::Document is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Destination::Sharedworker) == 2, "FetchRequest::Destination::Sharedworker is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Destination::Subresource) == 3, "FetchRequest::Destination::Subresource is not 3 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Destination::Unknown) == 4, "FetchRequest::Destination::Unknown is not 4 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Destination::Worker) == 5, "FetchRequest::Destination::Worker is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Destination> parseEnumeration<FetchRequest::Destination>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue.isEmpty())
        return FetchRequest::Destination::EmptyString;
    if (stringValue == "document")
        return FetchRequest::Destination::Document;
    if (stringValue == "sharedworker")
        return FetchRequest::Destination::Sharedworker;
    if (stringValue == "subresource")
        return FetchRequest::Destination::Subresource;
    if (stringValue == "unknown")
        return FetchRequest::Destination::Unknown;
    if (stringValue == "worker")
        return FetchRequest::Destination::Worker;
    return std::nullopt;
}

template<> FetchRequest::Destination convertEnumeration<FetchRequest::Destination>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Destination>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Destination>()
{
    return "\"\", \"document\", \"sharedworker\", \"subresource\", \"unknown\", \"worker\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Mode enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("navigate"),
        ASCIILiteral("same-origin"),
        ASCIILiteral("no-cors"),
        ASCIILiteral("cors"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Mode::Navigate) == 0, "FetchRequest::Mode::Navigate is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Mode::SameOrigin) == 1, "FetchRequest::Mode::SameOrigin is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Mode::NoCors) == 2, "FetchRequest::Mode::NoCors is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Mode::Cors) == 3, "FetchRequest::Mode::Cors is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Mode> parseEnumeration<FetchRequest::Mode>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "navigate")
        return FetchRequest::Mode::Navigate;
    if (stringValue == "same-origin")
        return FetchRequest::Mode::SameOrigin;
    if (stringValue == "no-cors")
        return FetchRequest::Mode::NoCors;
    if (stringValue == "cors")
        return FetchRequest::Mode::Cors;
    return std::nullopt;
}

template<> FetchRequest::Mode convertEnumeration<FetchRequest::Mode>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Mode>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Mode>()
{
    return "\"navigate\", \"same-origin\", \"no-cors\", \"cors\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Credentials enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("omit"),
        ASCIILiteral("same-origin"),
        ASCIILiteral("include"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Credentials::Omit) == 0, "FetchRequest::Credentials::Omit is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Credentials::SameOrigin) == 1, "FetchRequest::Credentials::SameOrigin is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Credentials::Include) == 2, "FetchRequest::Credentials::Include is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Credentials> parseEnumeration<FetchRequest::Credentials>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "omit")
        return FetchRequest::Credentials::Omit;
    if (stringValue == "same-origin")
        return FetchRequest::Credentials::SameOrigin;
    if (stringValue == "include")
        return FetchRequest::Credentials::Include;
    return std::nullopt;
}

template<> FetchRequest::Credentials convertEnumeration<FetchRequest::Credentials>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Credentials>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Credentials>()
{
    return "\"omit\", \"same-origin\", \"include\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Cache enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("default"),
        ASCIILiteral("no-store"),
        ASCIILiteral("reload"),
        ASCIILiteral("no-cache"),
        ASCIILiteral("force-cache"),
        ASCIILiteral("only-if-cached"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Cache::Default) == 0, "FetchRequest::Cache::Default is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Cache::NoStore) == 1, "FetchRequest::Cache::NoStore is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Cache::Reload) == 2, "FetchRequest::Cache::Reload is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Cache::NoCache) == 3, "FetchRequest::Cache::NoCache is not 3 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Cache::ForceCache) == 4, "FetchRequest::Cache::ForceCache is not 4 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Cache::OnlyIfCached) == 5, "FetchRequest::Cache::OnlyIfCached is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Cache> parseEnumeration<FetchRequest::Cache>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "default")
        return FetchRequest::Cache::Default;
    if (stringValue == "no-store")
        return FetchRequest::Cache::NoStore;
    if (stringValue == "reload")
        return FetchRequest::Cache::Reload;
    if (stringValue == "no-cache")
        return FetchRequest::Cache::NoCache;
    if (stringValue == "force-cache")
        return FetchRequest::Cache::ForceCache;
    if (stringValue == "only-if-cached")
        return FetchRequest::Cache::OnlyIfCached;
    return std::nullopt;
}

template<> FetchRequest::Cache convertEnumeration<FetchRequest::Cache>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Cache>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Cache>()
{
    return "\"default\", \"no-store\", \"reload\", \"no-cache\", \"force-cache\", \"only-if-cached\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::Redirect enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("follow"),
        ASCIILiteral("error"),
        ASCIILiteral("manual"),
    };
    static_assert(static_cast<size_t>(FetchRequest::Redirect::Follow) == 0, "FetchRequest::Redirect::Follow is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Redirect::Error) == 1, "FetchRequest::Redirect::Error is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::Redirect::Manual) == 2, "FetchRequest::Redirect::Manual is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::Redirect> parseEnumeration<FetchRequest::Redirect>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "follow")
        return FetchRequest::Redirect::Follow;
    if (stringValue == "error")
        return FetchRequest::Redirect::Error;
    if (stringValue == "manual")
        return FetchRequest::Redirect::Manual;
    return std::nullopt;
}

template<> FetchRequest::Redirect convertEnumeration<FetchRequest::Redirect>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::Redirect>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::Redirect>()
{
    return "\"follow\", \"error\", \"manual\"";
}

template<> JSString* convertEnumerationToJS(ExecState& state, FetchRequest::ReferrerPolicy enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        emptyString(),
        ASCIILiteral("no-referrer"),
        ASCIILiteral("no-referrer-when-downgrade"),
        ASCIILiteral("origin"),
        ASCIILiteral("origin-when-cross-origin"),
        ASCIILiteral("unsafe-url"),
    };
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::EmptyString) == 0, "FetchRequest::ReferrerPolicy::EmptyString is not 0 as expected");
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::NoReferrer) == 1, "FetchRequest::ReferrerPolicy::NoReferrer is not 1 as expected");
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::NoReferrerWhenDowngrade) == 2, "FetchRequest::ReferrerPolicy::NoReferrerWhenDowngrade is not 2 as expected");
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::Origin) == 3, "FetchRequest::ReferrerPolicy::Origin is not 3 as expected");
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::OriginWhenCrossOrigin) == 4, "FetchRequest::ReferrerPolicy::OriginWhenCrossOrigin is not 4 as expected");
    static_assert(static_cast<size_t>(FetchRequest::ReferrerPolicy::UnsafeUrl) == 5, "FetchRequest::ReferrerPolicy::UnsafeUrl is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchRequest::ReferrerPolicy> parseEnumeration<FetchRequest::ReferrerPolicy>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue.isEmpty())
        return FetchRequest::ReferrerPolicy::EmptyString;
    if (stringValue == "no-referrer")
        return FetchRequest::ReferrerPolicy::NoReferrer;
    if (stringValue == "no-referrer-when-downgrade")
        return FetchRequest::ReferrerPolicy::NoReferrerWhenDowngrade;
    if (stringValue == "origin")
        return FetchRequest::ReferrerPolicy::Origin;
    if (stringValue == "origin-when-cross-origin")
        return FetchRequest::ReferrerPolicy::OriginWhenCrossOrigin;
    if (stringValue == "unsafe-url")
        return FetchRequest::ReferrerPolicy::UnsafeUrl;
    return std::nullopt;
}

template<> FetchRequest::ReferrerPolicy convertEnumeration<FetchRequest::ReferrerPolicy>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchRequest::ReferrerPolicy>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchRequest::ReferrerPolicy>()
{
    return "\"\", \"no-referrer\", \"no-referrer-when-downgrade\", \"origin\", \"origin-when-cross-origin\", \"unsafe-url\"";
}

template<> FetchRequest::Init convertDictionary<FetchRequest::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    FetchRequest::Init result;
    JSValue cacheValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "cache"));
    if (!cacheValue.isUndefined()) {
        result.cache = convert<IDLEnumeration<FetchRequest::Cache>>(state, cacheValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue credentialsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "credentials"));
    if (!credentialsValue.isUndefined()) {
        result.credentials = convert<IDLEnumeration<FetchRequest::Credentials>>(state, credentialsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue integrityValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "integrity"));
    if (!integrityValue.isUndefined()) {
        result.integrity = convert<IDLDOMString>(state, integrityValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue methodValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "method"));
    if (!methodValue.isUndefined()) {
        result.method = convert<IDLByteString>(state, methodValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue modeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "mode"));
    if (!modeValue.isUndefined()) {
        result.mode = convert<IDLEnumeration<FetchRequest::Mode>>(state, modeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue redirectValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "redirect"));
    if (!redirectValue.isUndefined()) {
        result.redirect = convert<IDLEnumeration<FetchRequest::Redirect>>(state, redirectValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue referrerValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "referrer"));
    if (!referrerValue.isUndefined()) {
        result.referrer = convert<IDLUSVString>(state, referrerValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue referrerPolicyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "referrerPolicy"));
    if (!referrerPolicyValue.isUndefined()) {
        result.referrerPolicy = convert<IDLEnumeration<FetchRequest::ReferrerPolicy>>(state, referrerPolicyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue windowValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "window"));
    if (!windowValue.isUndefined()) {
        result.window = convert<IDLAny>(state, windowValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.window = jsUndefined();
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionClone(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionInitializeWith(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionSetBody(JSC::ExecState*);
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionArrayBuffer(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionBlob(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionJson(JSC::ExecState*);
#endif
#if ENABLE(FETCH_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionText(JSC::ExecState*);
#endif

// Attributes

JSC::EncodedJSValue jsFetchRequestMethod(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestUrl(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestHeaders(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestDestination(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestReferrer(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestReferrerPolicy(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestCredentials(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestCache(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestRedirect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchRequestIntegrity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#if ENABLE(FETCH_API)
JSC::EncodedJSValue jsFetchRequestBodyUsed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsFetchRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFetchRequestConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFetchRequestPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFetchRequestPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFetchRequestPrototype* ptr = new (NotNull, JSC::allocateCell<JSFetchRequestPrototype>(vm.heap)) JSFetchRequestPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFetchRequestPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFetchRequestConstructor = JSBuiltinConstructor<JSFetchRequest>;

template<> JSValue JSFetchRequestConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSFetchRequestConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFetchRequest::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Request"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> FunctionExecutable* JSFetchRequestConstructor::initializeExecutable(VM& vm)
{
    return fetchRequestInitializeFetchRequestCodeGenerator(vm);
}

template<> const ClassInfo JSFetchRequestConstructor::s_info = { "Request", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchRequestConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFetchRequestPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFetchRequestConstructor) } },
    { "method", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestMethod), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "url", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "headers", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestHeaders), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "destination", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestDestination), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "referrer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestReferrer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "referrerPolicy", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestReferrerPolicy), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "mode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestMode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "credentials", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestCredentials), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "cache", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestCache), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "redirect", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestRedirect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "integrity", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestIntegrity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#if ENABLE(FETCH_API)
    { "bodyUsed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchRequestBodyUsed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "clone", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchRequestPrototypeFunctionClone), (intptr_t) (0) } },
#if ENABLE(FETCH_API)
    { "arrayBuffer", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchRequestPrototypeFunctionArrayBuffer), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "blob", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchRequestPrototypeFunctionBlob), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "json", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchRequestPrototypeFunctionJson), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(FETCH_API)
    { "text", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchRequestPrototypeFunctionText), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
};

const ClassInfo JSFetchRequestPrototype::s_info = { "RequestPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchRequestPrototype) };

void JSFetchRequestPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFetchRequestPrototypeTableValues, *this);
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("arrayBuffer"), strlen("arrayBuffer"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("blob"), strlen("blob"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("json"), strlen("json"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("text"), strlen("text"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
#if ENABLE(FETCH_API)
    if (!RuntimeEnabledFeatures::sharedFeatures().fetchAPIEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("bodyUsed"), strlen("bodyUsed"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().initializeWithPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchRequestPrototypeFunctionInitializeWith), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().initializeWithPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchRequestPrototypeFunctionInitializeWith), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().setBodyPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchRequestPrototypeFunctionSetBody), ReadOnly | DontEnum);
}

const ClassInfo JSFetchRequest::s_info = { "Request", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchRequest) };

JSFetchRequest::JSFetchRequest(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FetchRequest>&& impl)
    : JSDOMWrapper<FetchRequest>(structure, globalObject, WTFMove(impl))
{
}

void JSFetchRequest::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFetchRequest::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFetchRequestPrototype::create(vm, globalObject, JSFetchRequestPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFetchRequest::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFetchRequest>(vm, globalObject);
}

void JSFetchRequest::destroy(JSC::JSCell* cell)
{
    JSFetchRequest* thisObject = static_cast<JSFetchRequest*>(cell);
    thisObject->JSFetchRequest::~JSFetchRequest();
}

template<> inline JSFetchRequest* BindingCaller<JSFetchRequest>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFetchRequest*>(JSValue::decode(thisValue));
}

template<> inline JSFetchRequest* BindingCaller<JSFetchRequest>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFetchRequest*>(state.thisValue());
}

static inline JSValue jsFetchRequestMethodGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestMethod(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestMethodGetter>(state, thisValue, "method");
}

static inline JSValue jsFetchRequestMethodGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLByteString>(state, impl.method());
    return result;
}

static inline JSValue jsFetchRequestUrlGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestUrl(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestUrlGetter>(state, thisValue, "url");
}

static inline JSValue jsFetchRequestUrlGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.url());
    return result;
}

static inline JSValue jsFetchRequestHeadersGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestHeaders(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestHeadersGetter>(state, thisValue, "headers");
}

static inline JSValue jsFetchRequestHeadersGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<FetchHeaders>>(state, *thisObject.globalObject(), impl.headers());
    return result;
}

static inline JSValue jsFetchRequestTypeGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsFetchRequestTypeGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Type>>(state, impl.type());
    return result;
}

static inline JSValue jsFetchRequestDestinationGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestDestination(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestDestinationGetter>(state, thisValue, "destination");
}

static inline JSValue jsFetchRequestDestinationGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Destination>>(state, impl.destination());
    return result;
}

static inline JSValue jsFetchRequestReferrerGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestReferrer(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestReferrerGetter>(state, thisValue, "referrer");
}

static inline JSValue jsFetchRequestReferrerGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.referrer());
    return result;
}

static inline JSValue jsFetchRequestReferrerPolicyGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestReferrerPolicy(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestReferrerPolicyGetter>(state, thisValue, "referrerPolicy");
}

static inline JSValue jsFetchRequestReferrerPolicyGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::ReferrerPolicy>>(state, impl.referrerPolicy());
    return result;
}

static inline JSValue jsFetchRequestModeGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestMode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestModeGetter>(state, thisValue, "mode");
}

static inline JSValue jsFetchRequestModeGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Mode>>(state, impl.mode());
    return result;
}

static inline JSValue jsFetchRequestCredentialsGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestCredentials(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestCredentialsGetter>(state, thisValue, "credentials");
}

static inline JSValue jsFetchRequestCredentialsGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Credentials>>(state, impl.credentials());
    return result;
}

static inline JSValue jsFetchRequestCacheGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestCache(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestCacheGetter>(state, thisValue, "cache");
}

static inline JSValue jsFetchRequestCacheGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Cache>>(state, impl.cache());
    return result;
}

static inline JSValue jsFetchRequestRedirectGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestRedirect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestRedirectGetter>(state, thisValue, "redirect");
}

static inline JSValue jsFetchRequestRedirectGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchRequest::Redirect>>(state, impl.redirect());
    return result;
}

static inline JSValue jsFetchRequestIntegrityGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestIntegrity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestIntegrityGetter>(state, thisValue, "integrity");
}

static inline JSValue jsFetchRequestIntegrityGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.integrity());
    return result;
}

#if ENABLE(FETCH_API)
static inline JSValue jsFetchRequestBodyUsedGetter(ExecState&, JSFetchRequest&, ThrowScope& throwScope);

EncodedJSValue jsFetchRequestBodyUsed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchRequest>::attribute<jsFetchRequestBodyUsedGetter>(state, thisValue, "bodyUsed");
}

static inline JSValue jsFetchRequestBodyUsedGetter(ExecState& state, JSFetchRequest& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isDisturbed());
    return result;
}

#endif

EncodedJSValue jsFetchRequestConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFetchRequestPrototype* domObject = jsDynamicDowncast<JSFetchRequestPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFetchRequest::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFetchRequestConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFetchRequestPrototype* domObject = jsDynamicDowncast<JSFetchRequestPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSFetchRequest::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFetchRequestConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionCloneCaller(JSC::ExecState*, JSFetchRequest*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionClone(ExecState* state)
{
    return BindingCaller<JSFetchRequest>::callOperation<jsFetchRequestPrototypeFunctionCloneCaller>(state, "clone");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionCloneCaller(JSC::ExecState* state, JSFetchRequest* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchRequest>>(*state, *castedThis->globalObject(), throwScope, impl.clone(*context)));
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith1Caller(JSC::ExecState*, JSFetchRequest*, JSC::ThrowScope&);

static inline EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith1(ExecState* state)
{
    return BindingCaller<JSFetchRequest>::callOperation<jsFetchRequestPrototypeFunctionInitializeWith1Caller, CastedThisErrorBehavior::Assert>(state, "initializeWith");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith1Caller(JSC::ExecState* state, JSFetchRequest* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto input = convert<IDLInterface<FetchRequest>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "input", "Request", "initializeWith", "FetchRequest"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto init = convert<IDLDictionary<FetchRequest::Init>>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchHeaders>>(*state, *castedThis->globalObject(), throwScope, impl.initializeWith(*input, WTFMove(init))));
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith2Caller(JSC::ExecState*, JSFetchRequest*, JSC::ThrowScope&);

static inline EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith2(ExecState* state)
{
    return BindingCaller<JSFetchRequest>::callOperation<jsFetchRequestPrototypeFunctionInitializeWith2Caller, CastedThisErrorBehavior::Assert>(state, "initializeWith");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionInitializeWith2Caller(JSC::ExecState* state, JSFetchRequest* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto input = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto init = convert<IDLDictionary<FetchRequest::Init>>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchHeaders>>(*state, *castedThis->globalObject(), throwScope, impl.initializeWith(WTFMove(input), WTFMove(init))));
}

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionInitializeWith(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSFetchRequest::info()))
            return jsFetchRequestPrototypeFunctionInitializeWith1(state);
        return jsFetchRequestPrototypeFunctionInitializeWith2(state);
    }
    return argsCount < 2 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionSetBodyCaller(JSC::ExecState*, JSFetchRequest*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionSetBody(ExecState* state)
{
    return BindingCaller<JSFetchRequest>::callOperation<jsFetchRequestPrototypeFunctionSetBodyCaller, CastedThisErrorBehavior::Assert>(state, "setBody");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionSetBodyCaller(JSC::ExecState* state, JSFetchRequest* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto body = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto request = convert<IDLNullable<IDLInterface<FetchRequest>>>(*state, state->uncheckedArgument(1), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 1, "request", "Request", "setBody", "FetchRequest"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setBody(*state, WTFMove(body), WTFMove(request)));
    return JSValue::encode(jsUndefined());
}

#if ENABLE(FETCH_API)
static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionArrayBufferCaller(JSC::ExecState*, JSFetchRequest*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchRequestPrototypeFunctionArrayBufferPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionArrayBuffer(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchRequestPrototypeFunctionArrayBufferPromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchRequestPrototypeFunctionArrayBufferPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchRequest>::callPromiseOperation<jsFetchRequestPrototypeFunctionArrayBufferCaller>(state, WTFMove(promise), "arrayBuffer");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionArrayBufferCaller(JSC::ExecState* state, JSFetchRequest* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.arrayBuffer(WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionBlobCaller(JSC::ExecState*, JSFetchRequest*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchRequestPrototypeFunctionBlobPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionBlob(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchRequestPrototypeFunctionBlobPromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchRequestPrototypeFunctionBlobPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchRequest>::callPromiseOperation<jsFetchRequestPrototypeFunctionBlobCaller>(state, WTFMove(promise), "blob");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionBlobCaller(JSC::ExecState* state, JSFetchRequest* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.blob(WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionJsonCaller(JSC::ExecState*, JSFetchRequest*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchRequestPrototypeFunctionJsonPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionJson(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchRequestPrototypeFunctionJsonPromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchRequestPrototypeFunctionJsonPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchRequest>::callPromiseOperation<jsFetchRequestPrototypeFunctionJsonCaller>(state, WTFMove(promise), "json");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionJsonCaller(JSC::ExecState* state, JSFetchRequest* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.json(WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(FETCH_API)
static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionTextCaller(JSC::ExecState*, JSFetchRequest*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchRequestPrototypeFunctionTextPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchRequestPrototypeFunctionText(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchRequestPrototypeFunctionTextPromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchRequestPrototypeFunctionTextPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchRequest>::callPromiseOperation<jsFetchRequestPrototypeFunctionTextCaller>(state, WTFMove(promise), "text");
}

static inline JSC::EncodedJSValue jsFetchRequestPrototypeFunctionTextCaller(JSC::ExecState* state, JSFetchRequest* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.text(WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

void JSFetchRequest::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFetchRequest*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
}

bool JSFetchRequestOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsFetchRequest = jsCast<JSFetchRequest*>(handle.slot()->asCell());
    if (jsFetchRequest->wrapped().hasPendingActivity())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSFetchRequestOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFetchRequest = static_cast<JSFetchRequest*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFetchRequest->wrapped(), jsFetchRequest);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FetchRequest@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12FetchRequestE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FetchRequest>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FetchRequest@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12FetchRequestE[2];
#if COMPILER(CLANG)
    // If this fails FetchRequest does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(FetchRequest), "FetchRequest is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FetchRequest has subclasses. If FetchRequest has subclasses that get passed
    // to toJS() we currently require FetchRequest you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<FetchRequest>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FetchRequest& impl)
{
    return wrap(state, globalObject, impl);
}

FetchRequest* JSFetchRequest::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFetchRequest*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(FETCH_API)
