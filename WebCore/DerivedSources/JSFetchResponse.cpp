/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FETCH_API)

#include "JSFetchResponse.h"

#include "FetchResponseBuiltins.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMPromise.h"
#include "JSFetchHeaders.h"
#include "JSFetchResponse.h"
#include "JSReadableStreamSource.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, FetchResponse::Type enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("basic"),
        ASCIILiteral("cors"),
        ASCIILiteral("default"),
        ASCIILiteral("error"),
        ASCIILiteral("opaque"),
        ASCIILiteral("opaqueredirect"),
    };
    static_assert(static_cast<size_t>(FetchResponse::Type::Basic) == 0, "FetchResponse::Type::Basic is not 0 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Cors) == 1, "FetchResponse::Type::Cors is not 1 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Default) == 2, "FetchResponse::Type::Default is not 2 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Error) == 3, "FetchResponse::Type::Error is not 3 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Opaque) == 4, "FetchResponse::Type::Opaque is not 4 as expected");
    static_assert(static_cast<size_t>(FetchResponse::Type::Opaqueredirect) == 5, "FetchResponse::Type::Opaqueredirect is not 5 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FetchResponse::Type> parseEnumeration<FetchResponse::Type>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "basic")
        return FetchResponse::Type::Basic;
    if (stringValue == "cors")
        return FetchResponse::Type::Cors;
    if (stringValue == "default")
        return FetchResponse::Type::Default;
    if (stringValue == "error")
        return FetchResponse::Type::Error;
    if (stringValue == "opaque")
        return FetchResponse::Type::Opaque;
    if (stringValue == "opaqueredirect")
        return FetchResponse::Type::Opaqueredirect;
    return std::nullopt;
}

template<> FetchResponse::Type convertEnumeration<FetchResponse::Type>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FetchResponse::Type>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FetchResponse::Type>()
{
    return "\"basic\", \"cors\", \"default\", \"error\", \"opaque\", \"opaqueredirect\"";
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionError(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionRedirect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionCloneForJS(JSC::ExecState*);
#if ENABLE(READABLE_STREAM_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionStartConsumingStream(JSC::ExecState*);
#endif
#if ENABLE(READABLE_STREAM_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionConsumeChunk(JSC::ExecState*);
#endif
#if ENABLE(READABLE_STREAM_API)
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionFinishConsumingStream(JSC::ExecState*);
#endif
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionConsume(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionIsLoading(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionSetStatus(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionInitializeWith(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionCreateReadableStreamSource(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionIsDisturbed(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFetchResponseType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseUrl(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseRedirected(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseOk(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseStatusText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseHeaders(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFetchResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFetchResponseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFetchResponsePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFetchResponsePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFetchResponsePrototype* ptr = new (NotNull, JSC::allocateCell<JSFetchResponsePrototype>(vm.heap)) JSFetchResponsePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFetchResponsePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFetchResponseConstructor = JSBuiltinConstructor<JSFetchResponse>;

/* Hash table for constructor */

static const HashTableValue JSFetchResponseConstructorTableValues[] =
{
    { "error", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponseConstructorFunctionError), (intptr_t) (0) } },
    { "redirect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchResponseConstructorFunctionRedirect), (intptr_t) (1) } },
};

template<> JSValue JSFetchResponseConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSFetchResponseConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFetchResponse::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Response"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSFetchResponseConstructorTableValues, *this);
}

template<> FunctionExecutable* JSFetchResponseConstructor::initializeExecutable(VM& vm)
{
    return fetchResponseInitializeFetchResponseCodeGenerator(vm);
}

template<> const ClassInfo JSFetchResponseConstructor::s_info = { "Response", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponseConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFetchResponsePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFetchResponseConstructor) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "url", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "redirected", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseRedirected), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "status", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseStatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "ok", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseOk), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "statusText", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseStatusText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "headers", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchResponseHeaders), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "body", ReadOnly | Accessor | Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseBodyCodeGenerator), (intptr_t) (0) } },
    { "bodyUsed", ReadOnly | Accessor | Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseBodyUsedCodeGenerator), (intptr_t) (0) } },
    { "arrayBuffer", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseArrayBufferCodeGenerator), (intptr_t) (0) } },
    { "blob", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseBlobCodeGenerator), (intptr_t) (0) } },
    { "formData", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseFormDataCodeGenerator), (intptr_t) (0) } },
    { "json", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseJsonCodeGenerator), (intptr_t) (0) } },
    { "text", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseTextCodeGenerator), (intptr_t) (0) } },
    { "clone", JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(fetchResponseCloneCodeGenerator), (intptr_t) (0) } },
};

const ClassInfo JSFetchResponsePrototype::s_info = { "ResponsePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponsePrototype) };

void JSFetchResponsePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFetchResponsePrototypeTableValues, *this);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().cloneForJSPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionCloneForJS), ReadOnly | DontEnum);
#if ENABLE(READABLE_STREAM_API)
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().startConsumingStreamPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionStartConsumingStream), ReadOnly | DontEnum);
#endif
#if ENABLE(READABLE_STREAM_API)
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().consumeChunkPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionConsumeChunk), ReadOnly | DontEnum);
#endif
#if ENABLE(READABLE_STREAM_API)
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().finishConsumingStreamPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionFinishConsumingStream), ReadOnly | DontEnum);
#endif
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().consumePrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionConsume), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().isLoadingPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionIsLoading), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().setStatusPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionSetStatus), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().initializeWithPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionInitializeWith), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().createReadableStreamSourcePrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionCreateReadableStreamSource), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().isDisturbedPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchResponsePrototypeFunctionIsDisturbed), ReadOnly | DontEnum);
}

const ClassInfo JSFetchResponse::s_info = { "Response", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchResponse) };

JSFetchResponse::JSFetchResponse(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FetchResponse>&& impl)
    : JSDOMWrapper<FetchResponse>(structure, globalObject, WTFMove(impl))
{
}

void JSFetchResponse::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFetchResponse::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFetchResponsePrototype::create(vm, globalObject, JSFetchResponsePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFetchResponse::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFetchResponse>(vm, globalObject);
}

void JSFetchResponse::destroy(JSC::JSCell* cell)
{
    JSFetchResponse* thisObject = static_cast<JSFetchResponse*>(cell);
    thisObject->JSFetchResponse::~JSFetchResponse();
}

template<> inline JSFetchResponse* BindingCaller<JSFetchResponse>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFetchResponse*>(JSValue::decode(thisValue));
}

template<> inline JSFetchResponse* BindingCaller<JSFetchResponse>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFetchResponse*>(state.thisValue());
}

static inline JSValue jsFetchResponseTypeGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsFetchResponseTypeGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FetchResponse::Type>>(state, impl.type());
    return result;
}

static inline JSValue jsFetchResponseUrlGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseUrl(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseUrlGetter>(state, thisValue, "url");
}

static inline JSValue jsFetchResponseUrlGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.url());
    return result;
}

static inline JSValue jsFetchResponseRedirectedGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseRedirected(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseRedirectedGetter>(state, thisValue, "redirected");
}

static inline JSValue jsFetchResponseRedirectedGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.redirected());
    return result;
}

static inline JSValue jsFetchResponseStatusGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseStatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseStatusGetter>(state, thisValue, "status");
}

static inline JSValue jsFetchResponseStatusGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.status());
    return result;
}

static inline JSValue jsFetchResponseOkGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseOk(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseOkGetter>(state, thisValue, "ok");
}

static inline JSValue jsFetchResponseOkGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.ok());
    return result;
}

static inline JSValue jsFetchResponseStatusTextGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseStatusText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseStatusTextGetter>(state, thisValue, "statusText");
}

static inline JSValue jsFetchResponseStatusTextGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.statusText());
    return result;
}

static inline JSValue jsFetchResponseHeadersGetter(ExecState&, JSFetchResponse&, ThrowScope& throwScope);

EncodedJSValue jsFetchResponseHeaders(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFetchResponse>::attribute<jsFetchResponseHeadersGetter>(state, thisValue, "headers");
}

static inline JSValue jsFetchResponseHeadersGetter(ExecState& state, JSFetchResponse& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<FetchHeaders>>(state, *thisObject.globalObject(), impl.headers());
    return result;
}

EncodedJSValue jsFetchResponseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFetchResponsePrototype* domObject = jsDynamicDowncast<JSFetchResponsePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFetchResponse::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFetchResponseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFetchResponsePrototype* domObject = jsDynamicDowncast<JSFetchResponsePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSFetchResponse::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFetchResponseConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionError(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchResponse>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), FetchResponse::error(*context)));
}

EncodedJSValue JSC_HOST_CALL jsFetchResponseConstructorFunctionRedirect(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    auto url = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto status = state->argument(1).isUndefined() ? 302 : convert<IDLUnsignedShort>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchResponse>>(*state, *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), throwScope, FetchResponse::redirect(*context, WTFMove(url), WTFMove(status))));
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionCloneForJSCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionCloneForJS(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionCloneForJSCaller, CastedThisErrorBehavior::Assert>(state, "cloneForJS");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionCloneForJSCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FetchResponse>>(*state, *castedThis->globalObject(), impl.cloneForJS()));
}

#if ENABLE(READABLE_STREAM_API)
static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionStartConsumingStreamCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionStartConsumingStream(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionStartConsumingStreamCaller, CastedThisErrorBehavior::Assert>(state, "startConsumingStream");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionStartConsumingStreamCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto type = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.startConsumingStream(WTFMove(type));
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(READABLE_STREAM_API)
static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionConsumeChunkCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionConsumeChunk(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionConsumeChunkCaller, CastedThisErrorBehavior::Assert>(state, "consumeChunk");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionConsumeChunkCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto chunk = convert<IDLInterface<Uint8Array>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "chunk", "Response", "consumeChunk", "Uint8Array"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.consumeChunk(chunk.releaseNonNull());
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(READABLE_STREAM_API)
static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionFinishConsumingStreamCaller(JSC::ExecState*, JSFetchResponse*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchResponsePrototypeFunctionFinishConsumingStreamPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionFinishConsumingStream(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchResponsePrototypeFunctionFinishConsumingStreamPromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionFinishConsumingStreamPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchResponse>::callPromiseOperation<jsFetchResponsePrototypeFunctionFinishConsumingStreamCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "finishConsumingStream");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionFinishConsumingStreamCaller(JSC::ExecState* state, JSFetchResponse* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.finishConsumingStream(WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

#endif

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionConsumeCaller(JSC::ExecState*, JSFetchResponse*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsFetchResponsePrototypeFunctionConsumePromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionConsume(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsFetchResponsePrototypeFunctionConsumePromise, PromiseExecutionScope::WindowOrWorker>(*state));
}

static inline EncodedJSValue jsFetchResponsePrototypeFunctionConsumePromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSFetchResponse>::callPromiseOperation<jsFetchResponsePrototypeFunctionConsumeCaller, CastedThisErrorBehavior::Assert>(state, WTFMove(promise), "consume");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionConsumeCaller(JSC::ExecState* state, JSFetchResponse* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto type = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.consume(WTFMove(type), WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionIsLoadingCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionIsLoading(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionIsLoadingCaller, CastedThisErrorBehavior::Assert>(state, "isLoading");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionIsLoadingCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.isLoading()));
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionSetStatusCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionSetStatus(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionSetStatusCaller, CastedThisErrorBehavior::Assert>(state, "setStatus");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionSetStatusCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto status = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto statusText = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setStatus(WTFMove(status), WTFMove(statusText)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionInitializeWithCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionInitializeWith(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionInitializeWithCaller, CastedThisErrorBehavior::Assert>(state, "initializeWith");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionInitializeWithCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto body = convert<IDLAny>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.initializeWith(*state, WTFMove(body));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionCreateReadableStreamSourceCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionCreateReadableStreamSource(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionCreateReadableStreamSourceCaller, CastedThisErrorBehavior::Assert>(state, "createReadableStreamSource");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionCreateReadableStreamSourceCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<ReadableStreamSource>>(*state, *castedThis->globalObject(), impl.createReadableStreamSource()));
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionIsDisturbedCaller(JSC::ExecState*, JSFetchResponse*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchResponsePrototypeFunctionIsDisturbed(ExecState* state)
{
    return BindingCaller<JSFetchResponse>::callOperation<jsFetchResponsePrototypeFunctionIsDisturbedCaller, CastedThisErrorBehavior::Assert>(state, "isDisturbed");
}

static inline JSC::EncodedJSValue jsFetchResponsePrototypeFunctionIsDisturbedCaller(JSC::ExecState* state, JSFetchResponse* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.isDisturbed()));
}

void JSFetchResponse::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFetchResponse*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
}

bool JSFetchResponseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsFetchResponse = jsCast<JSFetchResponse*>(handle.slot()->asCell());
    if (jsFetchResponse->wrapped().hasPendingActivity())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSFetchResponseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFetchResponse = static_cast<JSFetchResponse*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFetchResponse->wrapped(), jsFetchResponse);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FetchResponse@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore13FetchResponseE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FetchResponse>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FetchResponse@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore13FetchResponseE[2];
#if COMPILER(CLANG)
    // If this fails FetchResponse does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(FetchResponse), "FetchResponse is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FetchResponse has subclasses. If FetchResponse has subclasses that get passed
    // to toJS() we currently require FetchResponse you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<FetchResponse>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FetchResponse& impl)
{
    return wrap(state, globalObject, impl);
}

FetchResponse* JSFetchResponse::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFetchResponse*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(FETCH_API)
