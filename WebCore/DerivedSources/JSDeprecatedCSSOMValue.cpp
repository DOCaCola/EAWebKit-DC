/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDeprecatedCSSOMValue.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDeprecatedCSSOMValueCssText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDeprecatedCSSOMValueCssText(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsDeprecatedCSSOMValueCssValueType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDeprecatedCSSOMValueConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDeprecatedCSSOMValuePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDeprecatedCSSOMValuePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDeprecatedCSSOMValuePrototype* ptr = new (NotNull, JSC::allocateCell<JSDeprecatedCSSOMValuePrototype>(vm.heap)) JSDeprecatedCSSOMValuePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDeprecatedCSSOMValuePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDeprecatedCSSOMValueConstructor = JSDOMConstructorNotConstructable<JSDeprecatedCSSOMValue>;

/* Hash table for constructor */

static const HashTableValue JSDeprecatedCSSOMValueConstructorTableValues[] =
{
    { "CSS_INHERIT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "CSS_PRIMITIVE_VALUE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CSS_VALUE_LIST", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "CSS_CUSTOM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

static_assert(DeprecatedCSSOMValue::CSS_INHERIT == 0, "CSS_INHERIT in DeprecatedCSSOMValue does not match value from IDL");
static_assert(DeprecatedCSSOMValue::CSS_PRIMITIVE_VALUE == 1, "CSS_PRIMITIVE_VALUE in DeprecatedCSSOMValue does not match value from IDL");
static_assert(DeprecatedCSSOMValue::CSS_VALUE_LIST == 2, "CSS_VALUE_LIST in DeprecatedCSSOMValue does not match value from IDL");
static_assert(DeprecatedCSSOMValue::CSS_CUSTOM == 3, "CSS_CUSTOM in DeprecatedCSSOMValue does not match value from IDL");

template<> JSValue JSDeprecatedCSSOMValueConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDeprecatedCSSOMValueConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDeprecatedCSSOMValue::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("CSSValue"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDeprecatedCSSOMValueConstructorTableValues, *this);
}

template<> const ClassInfo JSDeprecatedCSSOMValueConstructor::s_info = { "CSSValue", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMValueConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDeprecatedCSSOMValuePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMValueConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDeprecatedCSSOMValueConstructor) } },
    { "cssText", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMValueCssText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDeprecatedCSSOMValueCssText) } },
    { "cssValueType", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMValueCssValueType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "CSS_INHERIT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "CSS_PRIMITIVE_VALUE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CSS_VALUE_LIST", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "CSS_CUSTOM", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

const ClassInfo JSDeprecatedCSSOMValuePrototype::s_info = { "CSSValuePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMValuePrototype) };

void JSDeprecatedCSSOMValuePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDeprecatedCSSOMValuePrototypeTableValues, *this);
}

const ClassInfo JSDeprecatedCSSOMValue::s_info = { "CSSValue", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMValue) };

JSDeprecatedCSSOMValue::JSDeprecatedCSSOMValue(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DeprecatedCSSOMValue>&& impl)
    : JSDOMWrapper<DeprecatedCSSOMValue>(structure, globalObject, WTFMove(impl))
{
}

void JSDeprecatedCSSOMValue::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDeprecatedCSSOMValue::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDeprecatedCSSOMValuePrototype::create(vm, globalObject, JSDeprecatedCSSOMValuePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDeprecatedCSSOMValue::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDeprecatedCSSOMValue>(vm, globalObject);
}

void JSDeprecatedCSSOMValue::destroy(JSC::JSCell* cell)
{
    JSDeprecatedCSSOMValue* thisObject = static_cast<JSDeprecatedCSSOMValue*>(cell);
    thisObject->JSDeprecatedCSSOMValue::~JSDeprecatedCSSOMValue();
}

template<> inline JSDeprecatedCSSOMValue* BindingCaller<JSDeprecatedCSSOMValue>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDeprecatedCSSOMValue*>(JSValue::decode(thisValue));
}

static inline JSValue jsDeprecatedCSSOMValueCssTextGetter(ExecState&, JSDeprecatedCSSOMValue&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMValueCssText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMValue>::attribute<jsDeprecatedCSSOMValueCssTextGetter>(state, thisValue, "cssText");
}

static inline JSValue jsDeprecatedCSSOMValueCssTextGetter(ExecState& state, JSDeprecatedCSSOMValue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.cssText());
    return result;
}

static inline JSValue jsDeprecatedCSSOMValueCssValueTypeGetter(ExecState&, JSDeprecatedCSSOMValue&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMValueCssValueType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMValue>::attribute<jsDeprecatedCSSOMValueCssValueTypeGetter>(state, thisValue, "cssValueType");
}

static inline JSValue jsDeprecatedCSSOMValueCssValueTypeGetter(ExecState& state, JSDeprecatedCSSOMValue& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.cssValueType());
    return result;
}

EncodedJSValue jsDeprecatedCSSOMValueConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDeprecatedCSSOMValuePrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMValuePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDeprecatedCSSOMValue::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDeprecatedCSSOMValueConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDeprecatedCSSOMValuePrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMValuePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSDeprecatedCSSOMValueCssTextFunction(ExecState&, JSDeprecatedCSSOMValue&, JSValue, ThrowScope&);

bool setJSDeprecatedCSSOMValueCssText(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSDeprecatedCSSOMValue>::setAttribute<setJSDeprecatedCSSOMValueCssTextFunction>(state, thisValue, encodedValue, "cssText");
}

static inline bool setJSDeprecatedCSSOMValueCssTextFunction(ExecState& state, JSDeprecatedCSSOMValue& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLDOMString>>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setCssText(WTFMove(nativeValue)));
    return true;
}


JSValue JSDeprecatedCSSOMValue::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeprecatedCSSOMValueConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

DeprecatedCSSOMValue* JSDeprecatedCSSOMValue::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDeprecatedCSSOMValue*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
