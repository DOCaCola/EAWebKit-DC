/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGFEDisplacementMapElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGAnimatedNumber.h"
#include "JSSVGAnimatedString.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGFEDisplacementMapElementIn1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementIn2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementScale(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementXChannelSelector(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementYChannelSelector(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementResult(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFEDisplacementMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGFEDisplacementMapElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGFEDisplacementMapElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGFEDisplacementMapElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGFEDisplacementMapElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGFEDisplacementMapElementPrototype>(vm.heap)) JSSVGFEDisplacementMapElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGFEDisplacementMapElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGFEDisplacementMapElementConstructor = JSDOMConstructorNotConstructable<JSSVGFEDisplacementMapElement>;

/* Hash table for constructor */

static const HashTableValue JSSVGFEDisplacementMapElementConstructorTableValues[] =
{
    { "SVG_CHANNEL_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "SVG_CHANNEL_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "SVG_CHANNEL_G", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "SVG_CHANNEL_B", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "SVG_CHANNEL_A", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
};

template<> JSValue JSSVGFEDisplacementMapElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGFEDisplacementMapElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGFEDisplacementMapElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGFEDisplacementMapElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSSVGFEDisplacementMapElementConstructorTableValues, *this);
}

template<> const ClassInfo JSSVGFEDisplacementMapElementConstructor::s_info = { "SVGFEDisplacementMapElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFEDisplacementMapElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGFEDisplacementMapElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGFEDisplacementMapElementConstructor) } },
    { "in1", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementIn1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "in2", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementIn2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "scale", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementScale), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "xChannelSelector", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementXChannelSelector), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "yChannelSelector", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementYChannelSelector), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "x", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "y", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "width", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "height", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "result", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFEDisplacementMapElementResult), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "SVG_CHANNEL_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "SVG_CHANNEL_R", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "SVG_CHANNEL_G", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "SVG_CHANNEL_B", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "SVG_CHANNEL_A", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
};

const ClassInfo JSSVGFEDisplacementMapElementPrototype::s_info = { "SVGFEDisplacementMapElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFEDisplacementMapElementPrototype) };

void JSSVGFEDisplacementMapElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGFEDisplacementMapElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGFEDisplacementMapElement::s_info = { "SVGFEDisplacementMapElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFEDisplacementMapElement) };

JSSVGFEDisplacementMapElement::JSSVGFEDisplacementMapElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGFEDisplacementMapElement>&& impl)
    : JSSVGElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGFEDisplacementMapElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGFEDisplacementMapElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGFEDisplacementMapElementPrototype::create(vm, globalObject, JSSVGFEDisplacementMapElementPrototype::createStructure(vm, globalObject, JSSVGElement::prototype(vm, globalObject)));
}

JSObject* JSSVGFEDisplacementMapElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFEDisplacementMapElement>(vm, globalObject);
}

template<> inline JSSVGFEDisplacementMapElement* BindingCaller<JSSVGFEDisplacementMapElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGFEDisplacementMapElement*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGFEDisplacementMapElementIn1Getter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementIn1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementIn1Getter>(state, thisValue, "in1");
}

static inline JSValue jsSVGFEDisplacementMapElementIn1Getter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedString>>(state, *thisObject.globalObject(), impl.in1Animated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementIn2Getter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementIn2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementIn2Getter>(state, thisValue, "in2");
}

static inline JSValue jsSVGFEDisplacementMapElementIn2Getter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedString>>(state, *thisObject.globalObject(), impl.in2Animated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementScaleGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementScale(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementScaleGetter>(state, thisValue, "scale");
}

static inline JSValue jsSVGFEDisplacementMapElementScaleGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.scaleAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementXChannelSelectorGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementXChannelSelector(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementXChannelSelectorGetter>(state, thisValue, "xChannelSelector");
}

static inline JSValue jsSVGFEDisplacementMapElementXChannelSelectorGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedEnumeration>>(state, *thisObject.globalObject(), impl.xChannelSelectorAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementYChannelSelectorGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementYChannelSelector(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementYChannelSelectorGetter>(state, thisValue, "yChannelSelector");
}

static inline JSValue jsSVGFEDisplacementMapElementYChannelSelectorGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedEnumeration>>(state, *thisObject.globalObject(), impl.yChannelSelectorAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementXGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGFEDisplacementMapElementXGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.xAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementYGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGFEDisplacementMapElementYGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.yAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementWidthGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsSVGFEDisplacementMapElementWidthGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.widthAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementHeightGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsSVGFEDisplacementMapElementHeightGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.heightAnimated());
    return result;
}

static inline JSValue jsSVGFEDisplacementMapElementResultGetter(ExecState&, JSSVGFEDisplacementMapElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFEDisplacementMapElementResult(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFEDisplacementMapElement>::attribute<jsSVGFEDisplacementMapElementResultGetter>(state, thisValue, "result");
}

static inline JSValue jsSVGFEDisplacementMapElementResultGetter(ExecState& state, JSSVGFEDisplacementMapElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedString>>(state, *thisObject.globalObject(), impl.resultAnimated());
    return result;
}

EncodedJSValue jsSVGFEDisplacementMapElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGFEDisplacementMapElementPrototype* domObject = jsDynamicDowncast<JSSVGFEDisplacementMapElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGFEDisplacementMapElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGFEDisplacementMapElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGFEDisplacementMapElementPrototype* domObject = jsDynamicDowncast<JSSVGFEDisplacementMapElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGFEDisplacementMapElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFEDisplacementMapElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSSVGFEDisplacementMapElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGFEDisplacementMapElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
