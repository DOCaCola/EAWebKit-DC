/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSJsonWebKey.h"

#include "JSCryptoKeyUsage.h"
#include "JSRsaOtherPrimesInfo.h"
#include <runtime/JSArray.h>

using namespace JSC;

namespace WebCore {

template<> JsonWebKey convertDictionary<JsonWebKey>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    JsonWebKey result;
    JSValue algValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "alg"));
    if (!algValue.isUndefined()) {
        result.alg = convert<IDLDOMString>(state, algValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue crvValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "crv"));
    if (!crvValue.isUndefined()) {
        result.crv = convert<IDLDOMString>(state, crvValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue dValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "d"));
    if (!dValue.isUndefined()) {
        result.d = convert<IDLDOMString>(state, dValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue dpValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "dp"));
    if (!dpValue.isUndefined()) {
        result.dp = convert<IDLDOMString>(state, dpValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue dqValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "dq"));
    if (!dqValue.isUndefined()) {
        result.dq = convert<IDLDOMString>(state, dqValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue eValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "e"));
    if (!eValue.isUndefined()) {
        result.e = convert<IDLDOMString>(state, eValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue extValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "ext"));
    if (!extValue.isUndefined()) {
        result.ext = convert<IDLBoolean>(state, extValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue kValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "k"));
    if (!kValue.isUndefined()) {
        result.k = convert<IDLDOMString>(state, kValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue key_opsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "key_ops"));
    if (!key_opsValue.isUndefined()) {
        result.key_ops = convert<IDLSequence<IDLEnumeration<CryptoKeyUsage>>>(state, key_opsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue ktyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "kty"));
    if (!ktyValue.isUndefined()) {
        result.kty = convert<IDLDOMString>(state, ktyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "kty", "JsonWebKey", "DOMString");
        return { };
    }
    JSValue nValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "n"));
    if (!nValue.isUndefined()) {
        result.n = convert<IDLDOMString>(state, nValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue othValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "oth"));
    if (!othValue.isUndefined()) {
        result.oth = convert<IDLSequence<IDLDictionary<RsaOtherPrimesInfo>>>(state, othValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue pValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "p"));
    if (!pValue.isUndefined()) {
        result.p = convert<IDLDOMString>(state, pValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue qValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "q"));
    if (!qValue.isUndefined()) {
        result.q = convert<IDLDOMString>(state, qValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue qiValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "qi"));
    if (!qiValue.isUndefined()) {
        result.qi = convert<IDLDOMString>(state, qiValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue useValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "use"));
    if (!useValue.isUndefined()) {
        result.use = convert<IDLDOMString>(state, useValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue xValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "x"));
    if (!xValue.isUndefined()) {
        result.x = convert<IDLDOMString>(state, xValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue yValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "y"));
    if (!yValue.isUndefined()) {
        result.y = convert<IDLDOMString>(state, yValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

} // namespace WebCore

#endif // ENABLE(SUBTLE_CRYPTO)
