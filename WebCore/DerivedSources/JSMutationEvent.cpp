/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSMutationEvent.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSNode.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMutationEventPrototypeFunctionInitMutationEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMutationEventRelatedNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMutationEventPrevValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMutationEventNewValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMutationEventAttrName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMutationEventAttrChange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMutationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMutationEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMutationEventPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMutationEventPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMutationEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSMutationEventPrototype>(vm.heap)) JSMutationEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMutationEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSMutationEventConstructor = JSDOMConstructorNotConstructable<JSMutationEvent>;

/* Hash table for constructor */

static const HashTableValue JSMutationEventConstructorTableValues[] =
{
    { "MODIFICATION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "ADDITION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "REMOVAL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

static_assert(MutationEvent::MODIFICATION == 1, "MODIFICATION in MutationEvent does not match value from IDL");
static_assert(MutationEvent::ADDITION == 2, "ADDITION in MutationEvent does not match value from IDL");
static_assert(MutationEvent::REMOVAL == 3, "REMOVAL in MutationEvent does not match value from IDL");

template<> JSValue JSMutationEventConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEvent::getConstructor(vm, &globalObject);
}

template<> void JSMutationEventConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMutationEvent::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("MutationEvent"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSMutationEventConstructorTableValues, *this);
}

template<> const ClassInfo JSMutationEventConstructor::s_info = { "MutationEvent", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationEventConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMutationEventPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMutationEventConstructor) } },
    { "relatedNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventRelatedNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "prevValue", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventPrevValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "newValue", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventNewValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "attrName", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventAttrName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "attrChange", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMutationEventAttrChange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "initMutationEvent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMutationEventPrototypeFunctionInitMutationEvent), (intptr_t) (0) } },
    { "MODIFICATION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "ADDITION", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "REMOVAL", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

const ClassInfo JSMutationEventPrototype::s_info = { "MutationEventPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationEventPrototype) };

void JSMutationEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMutationEventPrototypeTableValues, *this);
}

const ClassInfo JSMutationEvent::s_info = { "MutationEvent", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMutationEvent) };

JSMutationEvent::JSMutationEvent(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MutationEvent>&& impl)
    : JSEvent(structure, globalObject, WTFMove(impl))
{
}

void JSMutationEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMutationEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMutationEventPrototype::create(vm, globalObject, JSMutationEventPrototype::createStructure(vm, globalObject, JSEvent::prototype(vm, globalObject)));
}

JSObject* JSMutationEvent::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMutationEvent>(vm, globalObject);
}

template<> inline JSMutationEvent* BindingCaller<JSMutationEvent>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMutationEvent*>(JSValue::decode(thisValue));
}

template<> inline JSMutationEvent* BindingCaller<JSMutationEvent>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMutationEvent*>(state.thisValue());
}

static inline JSValue jsMutationEventRelatedNodeGetter(ExecState&, JSMutationEvent&, ThrowScope& throwScope);

EncodedJSValue jsMutationEventRelatedNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMutationEvent>::attribute<jsMutationEventRelatedNodeGetter>(state, thisValue, "relatedNode");
}

static inline JSValue jsMutationEventRelatedNodeGetter(ExecState& state, JSMutationEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Node>>>(state, *thisObject.globalObject(), impl.relatedNode());
    return result;
}

static inline JSValue jsMutationEventPrevValueGetter(ExecState&, JSMutationEvent&, ThrowScope& throwScope);

EncodedJSValue jsMutationEventPrevValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMutationEvent>::attribute<jsMutationEventPrevValueGetter>(state, thisValue, "prevValue");
}

static inline JSValue jsMutationEventPrevValueGetter(ExecState& state, JSMutationEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.prevValue());
    return result;
}

static inline JSValue jsMutationEventNewValueGetter(ExecState&, JSMutationEvent&, ThrowScope& throwScope);

EncodedJSValue jsMutationEventNewValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMutationEvent>::attribute<jsMutationEventNewValueGetter>(state, thisValue, "newValue");
}

static inline JSValue jsMutationEventNewValueGetter(ExecState& state, JSMutationEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.newValue());
    return result;
}

static inline JSValue jsMutationEventAttrNameGetter(ExecState&, JSMutationEvent&, ThrowScope& throwScope);

EncodedJSValue jsMutationEventAttrName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMutationEvent>::attribute<jsMutationEventAttrNameGetter>(state, thisValue, "attrName");
}

static inline JSValue jsMutationEventAttrNameGetter(ExecState& state, JSMutationEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attrName());
    return result;
}

static inline JSValue jsMutationEventAttrChangeGetter(ExecState&, JSMutationEvent&, ThrowScope& throwScope);

EncodedJSValue jsMutationEventAttrChange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMutationEvent>::attribute<jsMutationEventAttrChangeGetter>(state, thisValue, "attrChange");
}

static inline JSValue jsMutationEventAttrChangeGetter(ExecState& state, JSMutationEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.attrChange());
    return result;
}

EncodedJSValue jsMutationEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSMutationEventPrototype* domObject = jsDynamicDowncast<JSMutationEventPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSMutationEvent::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMutationEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMutationEventPrototype* domObject = jsDynamicDowncast<JSMutationEventPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSMutationEvent::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMutationEventConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsMutationEventPrototypeFunctionInitMutationEventCaller(JSC::ExecState*, JSMutationEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMutationEventPrototypeFunctionInitMutationEvent(ExecState* state)
{
    return BindingCaller<JSMutationEvent>::callOperation<jsMutationEventPrototypeFunctionInitMutationEventCaller>(state, "initMutationEvent");
}

static inline JSC::EncodedJSValue jsMutationEventPrototypeFunctionInitMutationEventCaller(JSC::ExecState* state, JSMutationEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto type = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto canBubble = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto cancelable = convert<IDLBoolean>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto relatedNode = convert<IDLNullable<IDLInterface<Node>>>(*state, state->argument(3), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 3, "relatedNode", "MutationEvent", "initMutationEvent", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto prevValue = convert<IDLDOMString>(*state, state->argument(4), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto newValue = convert<IDLDOMString>(*state, state->argument(5), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto attrName = convert<IDLDOMString>(*state, state->argument(6), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto attrChange = convert<IDLUnsignedShort>(*state, state->argument(7), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.initMutationEvent(WTFMove(type), WTFMove(canBubble), WTFMove(cancelable), WTFMove(relatedNode), WTFMove(prevValue), WTFMove(newValue), WTFMove(attrName), WTFMove(attrChange));
    return JSValue::encode(jsUndefined());
}


}
