/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLContextAttributes.h"


using namespace JSC;

namespace WebCore {

template<> WebGLContextAttributes convertDictionary<WebGLContextAttributes>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    WebGLContextAttributes result;
    JSValue alphaValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "alpha"));
    if (!alphaValue.isUndefined()) {
        result.alpha = convert<IDLBoolean>(state, alphaValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.alpha = true;
    JSValue antialiasValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "antialias"));
    if (!antialiasValue.isUndefined()) {
        result.antialias = convert<IDLBoolean>(state, antialiasValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.antialias = true;
    JSValue depthValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "depth"));
    if (!depthValue.isUndefined()) {
        result.depth = convert<IDLBoolean>(state, depthValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.depth = true;
    JSValue failIfMajorPerformanceCaveatValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "failIfMajorPerformanceCaveat"));
    if (!failIfMajorPerformanceCaveatValue.isUndefined()) {
        result.failIfMajorPerformanceCaveat = convert<IDLBoolean>(state, failIfMajorPerformanceCaveatValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.failIfMajorPerformanceCaveat = false;
    JSValue preferLowPowerToHighPerformanceValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "preferLowPowerToHighPerformance"));
    if (!preferLowPowerToHighPerformanceValue.isUndefined()) {
        result.preferLowPowerToHighPerformance = convert<IDLBoolean>(state, preferLowPowerToHighPerformanceValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.preferLowPowerToHighPerformance = false;
    JSValue premultipliedAlphaValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "premultipliedAlpha"));
    if (!premultipliedAlphaValue.isUndefined()) {
        result.premultipliedAlpha = convert<IDLBoolean>(state, premultipliedAlphaValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.premultipliedAlpha = true;
    JSValue preserveDrawingBufferValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "preserveDrawingBuffer"));
    if (!preserveDrawingBufferValue.isUndefined()) {
        result.preserveDrawingBuffer = convert<IDLBoolean>(state, preserveDrawingBufferValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.preserveDrawingBuffer = false;
    JSValue stencilValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "stencil"));
    if (!stencilValue.isUndefined()) {
        result.stencil = convert<IDLBoolean>(state, stencilValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.stencil = false;
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const WebGLContextAttributes& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    auto alphaValue = toJS<IDLBoolean>(state, globalObject, dictionary.alpha);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "alpha"), alphaValue);
    auto antialiasValue = toJS<IDLBoolean>(state, globalObject, dictionary.antialias);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "antialias"), antialiasValue);
    auto depthValue = toJS<IDLBoolean>(state, globalObject, dictionary.depth);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "depth"), depthValue);
    auto failIfMajorPerformanceCaveatValue = toJS<IDLBoolean>(state, globalObject, dictionary.failIfMajorPerformanceCaveat);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "failIfMajorPerformanceCaveat"), failIfMajorPerformanceCaveatValue);
    auto preferLowPowerToHighPerformanceValue = toJS<IDLBoolean>(state, globalObject, dictionary.preferLowPowerToHighPerformance);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "preferLowPowerToHighPerformance"), preferLowPowerToHighPerformanceValue);
    auto premultipliedAlphaValue = toJS<IDLBoolean>(state, globalObject, dictionary.premultipliedAlpha);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "premultipliedAlpha"), premultipliedAlphaValue);
    auto preserveDrawingBufferValue = toJS<IDLBoolean>(state, globalObject, dictionary.preserveDrawingBuffer);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "preserveDrawingBuffer"), preserveDrawingBufferValue);
    auto stencilValue = toJS<IDLBoolean>(state, globalObject, dictionary.stencil);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "stencil"), stencilValue);
    return result;
}

} // namespace WebCore

#endif // ENABLE(WEBGL)
