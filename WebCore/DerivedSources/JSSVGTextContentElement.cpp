/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGTextContentElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedBoolean.h"
#include "JSSVGAnimatedEnumeration.h"
#include "JSSVGAnimatedLength.h"
#include "JSSVGPoint.h"
#include "JSSVGRect.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetNumberOfChars(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetComputedTextLength(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetSubStringLength(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetStartPositionOfChar(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetEndPositionOfChar(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetExtentOfChar(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetRotationOfChar(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetCharNumAtPosition(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionSelectSubString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGTextContentElementTextLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGTextContentElementLengthAdjust(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGTextContentElementExternalResourcesRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGTextContentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGTextContentElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGTextContentElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGTextContentElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGTextContentElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGTextContentElementPrototype>(vm.heap)) JSSVGTextContentElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGTextContentElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGTextContentElementConstructor = JSDOMConstructorNotConstructable<JSSVGTextContentElement>;

/* Hash table for constructor */

static const HashTableValue JSSVGTextContentElementConstructorTableValues[] =
{
    { "LENGTHADJUST_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "LENGTHADJUST_SPACING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "LENGTHADJUST_SPACINGANDGLYPHS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

static_assert(SVGTextContentElement::LENGTHADJUST_UNKNOWN == 0, "LENGTHADJUST_UNKNOWN in SVGTextContentElement does not match value from IDL");
static_assert(SVGTextContentElement::LENGTHADJUST_SPACING == 1, "LENGTHADJUST_SPACING in SVGTextContentElement does not match value from IDL");
static_assert(SVGTextContentElement::LENGTHADJUST_SPACINGANDGLYPHS == 2, "LENGTHADJUST_SPACINGANDGLYPHS in SVGTextContentElement does not match value from IDL");

template<> JSValue JSSVGTextContentElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGGraphicsElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGTextContentElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGTextContentElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGTextContentElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSSVGTextContentElementConstructorTableValues, *this);
}

template<> const ClassInfo JSSVGTextContentElementConstructor::s_info = { "SVGTextContentElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTextContentElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGTextContentElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTextContentElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGTextContentElementConstructor) } },
    { "textLength", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTextContentElementTextLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "lengthAdjust", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTextContentElementLengthAdjust), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "externalResourcesRequired", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTextContentElementExternalResourcesRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "getNumberOfChars", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetNumberOfChars), (intptr_t) (0) } },
    { "getComputedTextLength", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetComputedTextLength), (intptr_t) (0) } },
    { "getSubStringLength", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetSubStringLength), (intptr_t) (0) } },
    { "getStartPositionOfChar", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetStartPositionOfChar), (intptr_t) (0) } },
    { "getEndPositionOfChar", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetEndPositionOfChar), (intptr_t) (0) } },
    { "getExtentOfChar", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetExtentOfChar), (intptr_t) (0) } },
    { "getRotationOfChar", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetRotationOfChar), (intptr_t) (0) } },
    { "getCharNumAtPosition", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionGetCharNumAtPosition), (intptr_t) (1) } },
    { "selectSubString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTextContentElementPrototypeFunctionSelectSubString), (intptr_t) (0) } },
    { "LENGTHADJUST_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "LENGTHADJUST_SPACING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "LENGTHADJUST_SPACINGANDGLYPHS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

const ClassInfo JSSVGTextContentElementPrototype::s_info = { "SVGTextContentElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTextContentElementPrototype) };

void JSSVGTextContentElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGTextContentElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGTextContentElement::s_info = { "SVGTextContentElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTextContentElement) };

JSSVGTextContentElement::JSSVGTextContentElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGTextContentElement>&& impl)
    : JSSVGGraphicsElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGTextContentElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGTextContentElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGTextContentElementPrototype::create(vm, globalObject, JSSVGTextContentElementPrototype::createStructure(vm, globalObject, JSSVGGraphicsElement::prototype(vm, globalObject)));
}

JSObject* JSSVGTextContentElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGTextContentElement>(vm, globalObject);
}

template<> inline JSSVGTextContentElement* BindingCaller<JSSVGTextContentElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGTextContentElement*>(JSValue::decode(thisValue));
}

template<> inline JSSVGTextContentElement* BindingCaller<JSSVGTextContentElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGTextContentElement*>(state.thisValue());
}

static inline JSValue jsSVGTextContentElementTextLengthGetter(ExecState&, JSSVGTextContentElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGTextContentElementTextLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGTextContentElement>::attribute<jsSVGTextContentElementTextLengthGetter>(state, thisValue, "textLength");
}

static inline JSValue jsSVGTextContentElementTextLengthGetter(ExecState& state, JSSVGTextContentElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedLength>>(state, *thisObject.globalObject(), impl.textLengthAnimated());
    return result;
}

static inline JSValue jsSVGTextContentElementLengthAdjustGetter(ExecState&, JSSVGTextContentElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGTextContentElementLengthAdjust(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGTextContentElement>::attribute<jsSVGTextContentElementLengthAdjustGetter>(state, thisValue, "lengthAdjust");
}

static inline JSValue jsSVGTextContentElementLengthAdjustGetter(ExecState& state, JSSVGTextContentElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedEnumeration>>(state, *thisObject.globalObject(), impl.lengthAdjustAnimated());
    return result;
}

static inline JSValue jsSVGTextContentElementExternalResourcesRequiredGetter(ExecState&, JSSVGTextContentElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGTextContentElementExternalResourcesRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGTextContentElement>::attribute<jsSVGTextContentElementExternalResourcesRequiredGetter>(state, thisValue, "externalResourcesRequired");
}

static inline JSValue jsSVGTextContentElementExternalResourcesRequiredGetter(ExecState& state, JSSVGTextContentElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedBoolean>>(state, *thisObject.globalObject(), impl.externalResourcesRequiredAnimated());
    return result;
}

EncodedJSValue jsSVGTextContentElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGTextContentElementPrototype* domObject = jsDynamicDowncast<JSSVGTextContentElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGTextContentElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGTextContentElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGTextContentElementPrototype* domObject = jsDynamicDowncast<JSSVGTextContentElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGTextContentElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGTextContentElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetNumberOfCharsCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetNumberOfChars(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetNumberOfCharsCaller>(state, "getNumberOfChars");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetNumberOfCharsCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLLong>(impl.getNumberOfChars()));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetComputedTextLengthCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetComputedTextLength(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetComputedTextLengthCaller>(state, "getComputedTextLength");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetComputedTextLengthCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(impl.getComputedTextLength()));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetSubStringLengthCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetSubStringLength(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetSubStringLengthCaller>(state, "getSubStringLength");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetSubStringLengthCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto length = convert<IDLUnsignedLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(*state, throwScope, impl.getSubStringLength(WTFMove(offset), WTFMove(length))));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetStartPositionOfCharCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetStartPositionOfChar(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetStartPositionOfCharCaller>(state, "getStartPositionOfChar");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetStartPositionOfCharCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGPoint>>(*state, *castedThis->globalObject(), throwScope, impl.getStartPositionOfChar(WTFMove(offset))));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetEndPositionOfCharCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetEndPositionOfChar(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetEndPositionOfCharCaller>(state, "getEndPositionOfChar");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetEndPositionOfCharCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGPoint>>(*state, *castedThis->globalObject(), throwScope, impl.getEndPositionOfChar(WTFMove(offset))));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetExtentOfCharCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetExtentOfChar(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetExtentOfCharCaller>(state, "getExtentOfChar");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetExtentOfCharCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGRect>>(*state, *castedThis->globalObject(), throwScope, impl.getExtentOfChar(WTFMove(offset))));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetRotationOfCharCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetRotationOfChar(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetRotationOfCharCaller>(state, "getRotationOfChar");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetRotationOfCharCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUnrestrictedFloat>(*state, throwScope, impl.getRotationOfChar(WTFMove(offset))));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetCharNumAtPositionCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionGetCharNumAtPosition(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionGetCharNumAtPositionCaller>(state, "getCharNumAtPosition");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionGetCharNumAtPositionCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto point = convert<IDLInterface<SVGPoint>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "point", "SVGTextContentElement", "getCharNumAtPosition", "SVGPoint"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLLong>(impl.getCharNumAtPosition(*point)));
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionSelectSubStringCaller(JSC::ExecState*, JSSVGTextContentElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTextContentElementPrototypeFunctionSelectSubString(ExecState* state)
{
    return BindingCaller<JSSVGTextContentElement>::callOperation<jsSVGTextContentElementPrototypeFunctionSelectSubStringCaller>(state, "selectSubString");
}

static inline JSC::EncodedJSValue jsSVGTextContentElementPrototypeFunctionSelectSubStringCaller(JSC::ExecState* state, JSSVGTextContentElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto offset = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto length = convert<IDLUnsignedLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.selectSubString(WTFMove(offset), WTFMove(length)));
    return JSValue::encode(jsUndefined());
}

void JSSVGTextContentElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGTextContentElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
