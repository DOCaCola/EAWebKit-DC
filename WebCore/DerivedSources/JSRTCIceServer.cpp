/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCIceServer.h"

#include <runtime/JSArray.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

template<> RTCIceServer convertDictionary<RTCIceServer>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    RTCIceServer result;
    JSValue credentialValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "credential"));
    if (!credentialValue.isUndefined()) {
        result.credential = convert<IDLDOMString>(state, credentialValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue urlsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "urls"));
    if (!urlsValue.isUndefined()) {
        result.urls = convert<IDLUnion<IDLDOMString, IDLSequence<IDLDOMString>>>(state, urlsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else {
        throwRequiredMemberTypeError(state, throwScope, "urls", "RTCIceServer", "UNION");
        return { };
    }
    JSValue usernameValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "username"));
    if (!usernameValue.isUndefined()) {
        result.username = convert<IDLDOMString>(state, usernameValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const RTCIceServer& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    if (!IDLDOMString::isNullValue(dictionary.credential)) {
        auto credentialValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.credential));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "credential"), credentialValue);
    }
    auto urlsValue = toJS<IDLUnion<IDLDOMString, IDLSequence<IDLDOMString>>>(state, globalObject, dictionary.urls);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "urls"), urlsValue);
    if (!IDLDOMString::isNullValue(dictionary.username)) {
        auto usernameValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.username));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "username"), usernameValue);
    }
    return result;
}

} // namespace WebCore

#endif // ENABLE(WEB_RTC)
