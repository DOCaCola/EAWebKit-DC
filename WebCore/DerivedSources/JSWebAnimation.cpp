/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_ANIMATIONS)

#include "JSWebAnimation.h"

#include "JSAnimationEffect.h"
#include "JSAnimationTimeline.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsWebAnimationEffect(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebAnimationTimeline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebAnimationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebAnimationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSWebAnimationPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebAnimationPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebAnimationPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebAnimationPrototype>(vm.heap)) JSWebAnimationPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebAnimationPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSWebAnimationConstructor = JSDOMConstructor<JSWebAnimation>;

template<> EncodedJSValue JSC_HOST_CALL JSWebAnimationConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSWebAnimationConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto effect = convert<IDLNullable<IDLInterface<AnimationEffect>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "effect", "Animation", nullptr, "AnimationEffect"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto timeline = convert<IDLNullable<IDLInterface<AnimationTimeline>>>(*state, state->uncheckedArgument(1), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 1, "timeline", "Animation", nullptr, "AnimationTimeline"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = WebAnimation::create(WTFMove(effect), WTFMove(timeline));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<WebAnimation>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSWebAnimationConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebAnimationConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSWebAnimation::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Animation"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(2), ReadOnly | DontEnum);
}

template<> const ClassInfo JSWebAnimationConstructor::s_info = { "Animation", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebAnimationConstructor) };

/* Hash table for prototype */

static const HashTableValue JSWebAnimationPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebAnimationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebAnimationConstructor) } },
    { "effect", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebAnimationEffect), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "timeline", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebAnimationTimeline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSWebAnimationPrototype::s_info = { "AnimationPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebAnimationPrototype) };

void JSWebAnimationPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebAnimationPrototypeTableValues, *this);
}

const ClassInfo JSWebAnimation::s_info = { "Animation", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebAnimation) };

JSWebAnimation::JSWebAnimation(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebAnimation>&& impl)
    : JSDOMWrapper<WebAnimation>(structure, globalObject, WTFMove(impl))
{
}

void JSWebAnimation::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWebAnimation::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebAnimationPrototype::create(vm, globalObject, JSWebAnimationPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWebAnimation::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebAnimation>(vm, globalObject);
}

void JSWebAnimation::destroy(JSC::JSCell* cell)
{
    JSWebAnimation* thisObject = static_cast<JSWebAnimation*>(cell);
    thisObject->JSWebAnimation::~JSWebAnimation();
}

template<> inline JSWebAnimation* BindingCaller<JSWebAnimation>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSWebAnimation*>(JSValue::decode(thisValue));
}

static inline JSValue jsWebAnimationEffectGetter(ExecState&, JSWebAnimation&, ThrowScope& throwScope);

EncodedJSValue jsWebAnimationEffect(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebAnimation>::attribute<jsWebAnimationEffectGetter>(state, thisValue, "effect");
}

static inline JSValue jsWebAnimationEffectGetter(ExecState& state, JSWebAnimation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<AnimationEffect>>>(state, *thisObject.globalObject(), impl.effect());
    return result;
}

static inline JSValue jsWebAnimationTimelineGetter(ExecState&, JSWebAnimation&, ThrowScope& throwScope);

EncodedJSValue jsWebAnimationTimeline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebAnimation>::attribute<jsWebAnimationTimelineGetter>(state, thisValue, "timeline");
}

static inline JSValue jsWebAnimationTimelineGetter(ExecState& state, JSWebAnimation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<AnimationTimeline>>>(state, *thisObject.globalObject(), impl.timeline());
    return result;
}

EncodedJSValue jsWebAnimationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSWebAnimationPrototype* domObject = jsDynamicDowncast<JSWebAnimationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSWebAnimation::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSWebAnimationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSWebAnimationPrototype* domObject = jsDynamicDowncast<JSWebAnimationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSWebAnimation::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebAnimationConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSWebAnimationOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebAnimationOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebAnimation = static_cast<JSWebAnimation*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebAnimation->wrapped(), jsWebAnimation);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WebAnimation>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WebAnimation.
    static_assert(!__is_polymorphic(WebAnimation), "WebAnimation is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<WebAnimation>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WebAnimation& impl)
{
    return wrap(state, globalObject, impl);
}

WebAnimation* JSWebAnimation::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWebAnimation*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_ANIMATIONS)
