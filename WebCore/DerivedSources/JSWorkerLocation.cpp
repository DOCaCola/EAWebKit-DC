/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSWorkerLocation.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsWorkerLocationPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsWorkerLocationHref(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationProtocol(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationHost(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationHostname(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationPort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationPathname(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationSearch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationHash(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationOrigin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWorkerLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWorkerLocationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSWorkerLocationPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWorkerLocationPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWorkerLocationPrototype* ptr = new (NotNull, JSC::allocateCell<JSWorkerLocationPrototype>(vm.heap)) JSWorkerLocationPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWorkerLocationPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSWorkerLocationConstructor = JSDOMConstructorNotConstructable<JSWorkerLocation>;

template<> JSValue JSWorkerLocationConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWorkerLocationConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSWorkerLocation::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WorkerLocation"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSWorkerLocationConstructor::s_info = { "WorkerLocation", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWorkerLocationConstructor) };

/* Hash table for prototype */

static const HashTableValue JSWorkerLocationPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWorkerLocationConstructor) } },
    { "href", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationHref), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "protocol", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationProtocol), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "host", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationHost), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "hostname", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationHostname), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "port", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationPort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pathname", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationPathname), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "search", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationSearch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "hash", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationHash), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "origin", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWorkerLocationOrigin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsWorkerLocationPrototypeFunctionToString), (intptr_t) (0) } },
};

const ClassInfo JSWorkerLocationPrototype::s_info = { "WorkerLocationPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWorkerLocationPrototype) };

void JSWorkerLocationPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWorkerLocationPrototypeTableValues, *this);
}

const ClassInfo JSWorkerLocation::s_info = { "WorkerLocation", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWorkerLocation) };

JSWorkerLocation::JSWorkerLocation(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WorkerLocation>&& impl)
    : JSDOMWrapper<WorkerLocation>(structure, globalObject, WTFMove(impl))
{
}

void JSWorkerLocation::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWorkerLocation::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWorkerLocationPrototype::create(vm, globalObject, JSWorkerLocationPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWorkerLocation::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWorkerLocation>(vm, globalObject);
}

void JSWorkerLocation::destroy(JSC::JSCell* cell)
{
    JSWorkerLocation* thisObject = static_cast<JSWorkerLocation*>(cell);
    thisObject->JSWorkerLocation::~JSWorkerLocation();
}

template<> inline JSWorkerLocation* BindingCaller<JSWorkerLocation>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSWorkerLocation*>(JSValue::decode(thisValue));
}

template<> inline JSWorkerLocation* BindingCaller<JSWorkerLocation>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSWorkerLocation*>(state.thisValue());
}

static inline JSValue jsWorkerLocationHrefGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationHref(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationHrefGetter>(state, thisValue, "href");
}

static inline JSValue jsWorkerLocationHrefGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.href());
    return result;
}

static inline JSValue jsWorkerLocationProtocolGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationProtocol(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationProtocolGetter>(state, thisValue, "protocol");
}

static inline JSValue jsWorkerLocationProtocolGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.protocol());
    return result;
}

static inline JSValue jsWorkerLocationHostGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationHost(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationHostGetter>(state, thisValue, "host");
}

static inline JSValue jsWorkerLocationHostGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.host());
    return result;
}

static inline JSValue jsWorkerLocationHostnameGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationHostname(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationHostnameGetter>(state, thisValue, "hostname");
}

static inline JSValue jsWorkerLocationHostnameGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.hostname());
    return result;
}

static inline JSValue jsWorkerLocationPortGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationPort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationPortGetter>(state, thisValue, "port");
}

static inline JSValue jsWorkerLocationPortGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.port());
    return result;
}

static inline JSValue jsWorkerLocationPathnameGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationPathname(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationPathnameGetter>(state, thisValue, "pathname");
}

static inline JSValue jsWorkerLocationPathnameGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.pathname());
    return result;
}

static inline JSValue jsWorkerLocationSearchGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationSearch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationSearchGetter>(state, thisValue, "search");
}

static inline JSValue jsWorkerLocationSearchGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.search());
    return result;
}

static inline JSValue jsWorkerLocationHashGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationHash(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationHashGetter>(state, thisValue, "hash");
}

static inline JSValue jsWorkerLocationHashGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.hash());
    return result;
}

static inline JSValue jsWorkerLocationOriginGetter(ExecState&, JSWorkerLocation&, ThrowScope& throwScope);

EncodedJSValue jsWorkerLocationOrigin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWorkerLocation>::attribute<jsWorkerLocationOriginGetter>(state, thisValue, "origin");
}

static inline JSValue jsWorkerLocationOriginGetter(ExecState& state, JSWorkerLocation& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.origin());
    return result;
}

EncodedJSValue jsWorkerLocationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSWorkerLocationPrototype* domObject = jsDynamicDowncast<JSWorkerLocationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSWorkerLocation::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSWorkerLocationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSWorkerLocationPrototype* domObject = jsDynamicDowncast<JSWorkerLocationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSWorkerLocation::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWorkerLocationConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsWorkerLocationPrototypeFunctionToStringCaller(JSC::ExecState*, JSWorkerLocation*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsWorkerLocationPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSWorkerLocation>::callOperation<jsWorkerLocationPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsWorkerLocationPrototypeFunctionToStringCaller(JSC::ExecState* state, JSWorkerLocation* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUSVString>(*state, impl.href()));
}

bool JSWorkerLocationOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsWorkerLocation = jsCast<JSWorkerLocation*>(handle.slot()->asCell());
    WorkerLocation* root = &jsWorkerLocation->wrapped();
    return visitor.containsOpaqueRoot(root);
}

void JSWorkerLocationOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWorkerLocation = static_cast<JSWorkerLocation*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWorkerLocation->wrapped(), jsWorkerLocation);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WorkerLocation>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WorkerLocation.
    static_assert(!__is_polymorphic(WorkerLocation), "WorkerLocation is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<WorkerLocation>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WorkerLocation& impl)
{
    return wrap(state, globalObject, impl);
}

WorkerLocation* JSWorkerLocation::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWorkerLocation*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
