/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLMarqueeElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLMarqueeElementPrototypeFunctionStart(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLMarqueeElementPrototypeFunctionStop(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLMarqueeElementBehavior(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementBehavior(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementHspace(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementHspace(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementLoop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementLoop(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementScrollAmount(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementScrollAmount(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementScrollDelay(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementScrollDelay(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementTrueSpeed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementTrueSpeed(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementVspace(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementVspace(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLMarqueeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLMarqueeElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLMarqueeElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLMarqueeElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLMarqueeElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLMarqueeElementPrototype>(vm.heap)) JSHTMLMarqueeElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLMarqueeElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLMarqueeElementConstructor = JSDOMConstructorNotConstructable<JSHTMLMarqueeElement>;

template<> JSValue JSHTMLMarqueeElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLMarqueeElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLMarqueeElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLMarqueeElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLMarqueeElementConstructor::s_info = { "HTMLMarqueeElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMarqueeElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLMarqueeElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementConstructor) } },
    { "behavior", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementBehavior), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementBehavior) } },
    { "bgColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementBgColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementBgColor) } },
    { "direction", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementDirection), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementDirection) } },
    { "height", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementHeight) } },
    { "hspace", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementHspace), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementHspace) } },
    { "loop", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementLoop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementLoop) } },
    { "scrollAmount", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementScrollAmount), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementScrollAmount) } },
    { "scrollDelay", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementScrollDelay), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementScrollDelay) } },
    { "trueSpeed", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementTrueSpeed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementTrueSpeed) } },
    { "vspace", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementVspace), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementVspace) } },
    { "width", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLMarqueeElementWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLMarqueeElementWidth) } },
    { "start", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLMarqueeElementPrototypeFunctionStart), (intptr_t) (0) } },
    { "stop", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLMarqueeElementPrototypeFunctionStop), (intptr_t) (0) } },
};

const ClassInfo JSHTMLMarqueeElementPrototype::s_info = { "HTMLMarqueeElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMarqueeElementPrototype) };

void JSHTMLMarqueeElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLMarqueeElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLMarqueeElement::s_info = { "HTMLMarqueeElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLMarqueeElement) };

JSHTMLMarqueeElement::JSHTMLMarqueeElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLMarqueeElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLMarqueeElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLMarqueeElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLMarqueeElementPrototype::create(vm, globalObject, JSHTMLMarqueeElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLMarqueeElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLMarqueeElement>(vm, globalObject);
}

template<> inline JSHTMLMarqueeElement* BindingCaller<JSHTMLMarqueeElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLMarqueeElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLMarqueeElement* BindingCaller<JSHTMLMarqueeElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLMarqueeElement*>(state.thisValue());
}

static inline JSValue jsHTMLMarqueeElementBehaviorGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementBehavior(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementBehaviorGetter>(state, thisValue, "behavior");
}

static inline JSValue jsHTMLMarqueeElementBehaviorGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::behaviorAttr));
    return result;
}

static inline JSValue jsHTMLMarqueeElementBgColorGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementBgColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementBgColorGetter>(state, thisValue, "bgColor");
}

static inline JSValue jsHTMLMarqueeElementBgColorGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr));
    return result;
}

static inline JSValue jsHTMLMarqueeElementDirectionGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementDirection(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementDirectionGetter>(state, thisValue, "direction");
}

static inline JSValue jsHTMLMarqueeElementDirectionGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::directionAttr));
    return result;
}

static inline JSValue jsHTMLMarqueeElementHeightGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsHTMLMarqueeElementHeightGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::heightAttr));
    return result;
}

static inline JSValue jsHTMLMarqueeElementHspaceGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementHspace(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementHspaceGetter>(state, thisValue, "hspace");
}

static inline JSValue jsHTMLMarqueeElementHspaceGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(std::max(0, impl.getIntegralAttribute(WebCore::HTMLNames::hspaceAttr)));
    return result;
}

static inline JSValue jsHTMLMarqueeElementLoopGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementLoop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementLoopGetter>(state, thisValue, "loop");
}

static inline JSValue jsHTMLMarqueeElementLoopGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.loop());
    return result;
}

static inline JSValue jsHTMLMarqueeElementScrollAmountGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementScrollAmount(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementScrollAmountGetter>(state, thisValue, "scrollAmount");
}

static inline JSValue jsHTMLMarqueeElementScrollAmountGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.scrollAmount());
    return result;
}

static inline JSValue jsHTMLMarqueeElementScrollDelayGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementScrollDelay(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementScrollDelayGetter>(state, thisValue, "scrollDelay");
}

static inline JSValue jsHTMLMarqueeElementScrollDelayGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.scrollDelay());
    return result;
}

static inline JSValue jsHTMLMarqueeElementTrueSpeedGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementTrueSpeed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementTrueSpeedGetter>(state, thisValue, "trueSpeed");
}

static inline JSValue jsHTMLMarqueeElementTrueSpeedGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::truespeedAttr));
    return result;
}

static inline JSValue jsHTMLMarqueeElementVspaceGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementVspace(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementVspaceGetter>(state, thisValue, "vspace");
}

static inline JSValue jsHTMLMarqueeElementVspaceGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(std::max(0, impl.getIntegralAttribute(WebCore::HTMLNames::vspaceAttr)));
    return result;
}

static inline JSValue jsHTMLMarqueeElementWidthGetter(ExecState&, JSHTMLMarqueeElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLMarqueeElementWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLMarqueeElement>::attribute<jsHTMLMarqueeElementWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsHTMLMarqueeElementWidthGetter(ExecState& state, JSHTMLMarqueeElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::widthAttr));
    return result;
}

EncodedJSValue jsHTMLMarqueeElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLMarqueeElementPrototype* domObject = jsDynamicDowncast<JSHTMLMarqueeElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLMarqueeElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLMarqueeElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLMarqueeElementPrototype* domObject = jsDynamicDowncast<JSHTMLMarqueeElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLMarqueeElementBehaviorFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementBehavior(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementBehaviorFunction>(state, thisValue, encodedValue, "behavior");
}

static inline bool setJSHTMLMarqueeElementBehaviorFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::behaviorAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementBgColorFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementBgColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementBgColorFunction>(state, thisValue, encodedValue, "bgColor");
}

static inline bool setJSHTMLMarqueeElementBgColorFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementDirectionFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementDirection(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementDirectionFunction>(state, thisValue, encodedValue, "direction");
}

static inline bool setJSHTMLMarqueeElementDirectionFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::directionAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementHeightFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementHeightFunction>(state, thisValue, encodedValue, "height");
}

static inline bool setJSHTMLMarqueeElementHeightFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::heightAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementHspaceFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementHspace(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementHspaceFunction>(state, thisValue, encodedValue, "hspace");
}

static inline bool setJSHTMLMarqueeElementHspaceFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setUnsignedIntegralAttribute(WebCore::HTMLNames::hspaceAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementLoopFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementLoop(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementLoopFunction>(state, thisValue, encodedValue, "loop");
}

static inline bool setJSHTMLMarqueeElementLoopFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setLoop(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLMarqueeElementScrollAmountFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementScrollAmount(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementScrollAmountFunction>(state, thisValue, encodedValue, "scrollAmount");
}

static inline bool setJSHTMLMarqueeElementScrollAmountFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setScrollAmount(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementScrollDelayFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementScrollDelay(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementScrollDelayFunction>(state, thisValue, encodedValue, "scrollDelay");
}

static inline bool setJSHTMLMarqueeElementScrollDelayFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setScrollDelay(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementTrueSpeedFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementTrueSpeed(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementTrueSpeedFunction>(state, thisValue, encodedValue, "trueSpeed");
}

static inline bool setJSHTMLMarqueeElementTrueSpeedFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::truespeedAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementVspaceFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementVspace(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementVspaceFunction>(state, thisValue, encodedValue, "vspace");
}

static inline bool setJSHTMLMarqueeElementVspaceFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setUnsignedIntegralAttribute(WebCore::HTMLNames::vspaceAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLMarqueeElementWidthFunction(ExecState&, JSHTMLMarqueeElement&, JSValue, ThrowScope&);

bool setJSHTMLMarqueeElementWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLMarqueeElement>::setAttribute<setJSHTMLMarqueeElementWidthFunction>(state, thisValue, encodedValue, "width");
}

static inline bool setJSHTMLMarqueeElementWidthFunction(ExecState& state, JSHTMLMarqueeElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::widthAttr, WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLMarqueeElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLMarqueeElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLMarqueeElementPrototypeFunctionStartCaller(JSC::ExecState*, JSHTMLMarqueeElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLMarqueeElementPrototypeFunctionStart(ExecState* state)
{
    return BindingCaller<JSHTMLMarqueeElement>::callOperation<jsHTMLMarqueeElementPrototypeFunctionStartCaller>(state, "start");
}

static inline JSC::EncodedJSValue jsHTMLMarqueeElementPrototypeFunctionStartCaller(JSC::ExecState* state, JSHTMLMarqueeElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.start();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLMarqueeElementPrototypeFunctionStopCaller(JSC::ExecState*, JSHTMLMarqueeElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLMarqueeElementPrototypeFunctionStop(ExecState* state)
{
    return BindingCaller<JSHTMLMarqueeElement>::callOperation<jsHTMLMarqueeElementPrototypeFunctionStopCaller>(state, "stop");
}

static inline JSC::EncodedJSValue jsHTMLMarqueeElementPrototypeFunctionStopCaller(JSC::ExecState* state, JSHTMLMarqueeElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.stop();
    return JSValue::encode(jsUndefined());
}

void JSHTMLMarqueeElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLMarqueeElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
