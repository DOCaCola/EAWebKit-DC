/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLFrameElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMWindow.h"
#include "JSDocument.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLFrameElementPrototypeFunctionGetSVGDocument(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLFrameElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementScrolling(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementScrolling(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementSrc(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementSrc(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementFrameBorder(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementFrameBorder(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementLongDesc(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementLongDesc(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementNoResize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementNoResize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementContentDocument(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLFrameElementContentWindow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLFrameElementMarginHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementMarginHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementMarginWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementMarginWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLFrameElementHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLFrameElementLocation(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementLocation(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLFrameElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLFrameElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLFrameElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLFrameElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLFrameElementPrototype>(vm.heap)) JSHTMLFrameElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLFrameElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLFrameElementConstructor = JSDOMConstructorNotConstructable<JSHTMLFrameElement>;

template<> JSValue JSHTMLFrameElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLFrameElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLFrameElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLFrameElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLFrameElementConstructor::s_info = { "HTMLFrameElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLFrameElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLFrameElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementConstructor) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementName) } },
    { "scrolling", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementScrolling), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementScrolling) } },
    { "src", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementSrc), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementSrc) } },
    { "frameBorder", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementFrameBorder), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementFrameBorder) } },
    { "longDesc", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementLongDesc), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementLongDesc) } },
    { "noResize", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementNoResize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementNoResize) } },
    { "contentDocument", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementContentDocument), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "contentWindow", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementContentWindow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "marginHeight", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementMarginHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementMarginHeight) } },
    { "marginWidth", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementMarginWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementMarginWidth) } },
    { "width", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "height", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "location", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLFrameElementLocation), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLFrameElementLocation) } },
    { "getSVGDocument", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLFrameElementPrototypeFunctionGetSVGDocument), (intptr_t) (0) } },
};

const ClassInfo JSHTMLFrameElementPrototype::s_info = { "HTMLFrameElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLFrameElementPrototype) };

void JSHTMLFrameElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLFrameElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLFrameElement::s_info = { "HTMLFrameElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLFrameElement) };

JSHTMLFrameElement::JSHTMLFrameElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLFrameElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLFrameElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLFrameElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLFrameElementPrototype::create(vm, globalObject, JSHTMLFrameElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLFrameElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLFrameElement>(vm, globalObject);
}

template<> inline JSHTMLFrameElement* BindingCaller<JSHTMLFrameElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLFrameElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLFrameElement* BindingCaller<JSHTMLFrameElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLFrameElement*>(state.thisValue());
}

static inline JSValue jsHTMLFrameElementNameGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLFrameElementNameGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLFrameElementScrollingGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementScrolling(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementScrollingGetter>(state, thisValue, "scrolling");
}

static inline JSValue jsHTMLFrameElementScrollingGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::scrollingAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementSrcGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementSrc(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementSrcGetter>(state, thisValue, "src");
}

static inline JSValue jsHTMLFrameElementSrcGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.getURLAttribute(WebCore::HTMLNames::srcAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementFrameBorderGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementFrameBorder(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementFrameBorderGetter>(state, thisValue, "frameBorder");
}

static inline JSValue jsHTMLFrameElementFrameBorderGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::frameborderAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementLongDescGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementLongDesc(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementLongDescGetter>(state, thisValue, "longDesc");
}

static inline JSValue jsHTMLFrameElementLongDescGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.getURLAttribute(WebCore::HTMLNames::longdescAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementNoResizeGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementNoResize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementNoResizeGetter>(state, thisValue, "noResize");
}

static inline JSValue jsHTMLFrameElementNoResizeGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::noresizeAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementContentDocumentGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementContentDocument(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementContentDocumentGetter>(state, thisValue, "contentDocument");
}

static inline JSValue jsHTMLFrameElementContentDocumentGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Document>>(state, *thisObject.globalObject(), BindingSecurity::checkSecurityForNode(state, impl.contentDocument()));
    return result;
}

static inline JSValue jsHTMLFrameElementContentWindowGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementContentWindow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementContentWindowGetter>(state, thisValue, "contentWindow");
}

static inline JSValue jsHTMLFrameElementContentWindowGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMWindow>>(state, *thisObject.globalObject(), impl.contentWindow());
    return result;
}

static inline JSValue jsHTMLFrameElementMarginHeightGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementMarginHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementMarginHeightGetter>(state, thisValue, "marginHeight");
}

static inline JSValue jsHTMLFrameElementMarginHeightGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::marginheightAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementMarginWidthGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementMarginWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementMarginWidthGetter>(state, thisValue, "marginWidth");
}

static inline JSValue jsHTMLFrameElementMarginWidthGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::marginwidthAttr));
    return result;
}

static inline JSValue jsHTMLFrameElementWidthGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsHTMLFrameElementWidthGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.width());
    return result;
}

static inline JSValue jsHTMLFrameElementHeightGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsHTMLFrameElementHeightGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.height());
    return result;
}

static inline JSValue jsHTMLFrameElementLocationGetter(ExecState&, JSHTMLFrameElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLFrameElementLocation(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLFrameElement>::attribute<jsHTMLFrameElementLocationGetter>(state, thisValue, "location");
}

static inline JSValue jsHTMLFrameElementLocationGetter(ExecState& state, JSHTMLFrameElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLDOMString>>(state, impl.location());
    return result;
}

EncodedJSValue jsHTMLFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLFrameElementPrototype* domObject = jsDynamicDowncast<JSHTMLFrameElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLFrameElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLFrameElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLFrameElementPrototype* domObject = jsDynamicDowncast<JSHTMLFrameElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLFrameElementNameFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLFrameElementNameFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementScrollingFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementScrolling(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementScrollingFunction>(state, thisValue, encodedValue, "scrolling");
}

static inline bool setJSHTMLFrameElementScrollingFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::scrollingAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementSrcFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementSrc(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementSrcFunction>(state, thisValue, encodedValue, "src");
}

static inline bool setJSHTMLFrameElementSrcFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::srcAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementFrameBorderFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementFrameBorder(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementFrameBorderFunction>(state, thisValue, encodedValue, "frameBorder");
}

static inline bool setJSHTMLFrameElementFrameBorderFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::frameborderAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementLongDescFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementLongDesc(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementLongDescFunction>(state, thisValue, encodedValue, "longDesc");
}

static inline bool setJSHTMLFrameElementLongDescFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::longdescAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementNoResizeFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementNoResize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementNoResizeFunction>(state, thisValue, encodedValue, "noResize");
}

static inline bool setJSHTMLFrameElementNoResizeFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::noresizeAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementMarginHeightFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementMarginHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementMarginHeightFunction>(state, thisValue, encodedValue, "marginHeight");
}

static inline bool setJSHTMLFrameElementMarginHeightFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::marginheightAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementMarginWidthFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementMarginWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementMarginWidthFunction>(state, thisValue, encodedValue, "marginWidth");
}

static inline bool setJSHTMLFrameElementMarginWidthFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::marginwidthAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLFrameElementLocationFunction(ExecState&, JSHTMLFrameElement&, JSValue, ThrowScope&);

bool setJSHTMLFrameElementLocation(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLFrameElement>::setAttribute<setJSHTMLFrameElementLocationFunction>(state, thisValue, encodedValue, "location");
}

static inline bool setJSHTMLFrameElementLocationFunction(ExecState& state, JSHTMLFrameElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLDOMString>>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLocation(state, WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLFrameElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLFrameElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLFrameElementPrototypeFunctionGetSVGDocumentCaller(JSC::ExecState*, JSHTMLFrameElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLFrameElementPrototypeFunctionGetSVGDocument(ExecState* state)
{
    return BindingCaller<JSHTMLFrameElement>::callOperation<jsHTMLFrameElementPrototypeFunctionGetSVGDocumentCaller>(state, "getSVGDocument");
}

static inline JSC::EncodedJSValue jsHTMLFrameElementPrototypeFunctionGetSVGDocumentCaller(JSC::ExecState* state, JSHTMLFrameElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Document>>(*state, *castedThis->globalObject(), throwScope, BindingSecurity::checkSecurityForNode(*state, impl.getSVGDocument())));
}

void JSHTMLFrameElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLFrameElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
