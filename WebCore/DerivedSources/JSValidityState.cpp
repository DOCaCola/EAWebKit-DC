/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSValidityState.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsValidityStateValueMissing(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateTypeMismatch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStatePatternMismatch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateTooShort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateTooLong(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateRangeUnderflow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateRangeOverflow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateStepMismatch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateBadInput(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateCustomError(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateValid(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsValidityStateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSValidityStateConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSValidityStatePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSValidityStatePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSValidityStatePrototype* ptr = new (NotNull, JSC::allocateCell<JSValidityStatePrototype>(vm.heap)) JSValidityStatePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSValidityStatePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSValidityStateConstructor = JSDOMConstructorNotConstructable<JSValidityState>;

template<> JSValue JSValidityStateConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSValidityStateConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSValidityState::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("ValidityState"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSValidityStateConstructor::s_info = { "ValidityState", &Base::s_info, 0, CREATE_METHOD_TABLE(JSValidityStateConstructor) };

/* Hash table for prototype */

static const HashTableValue JSValidityStatePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSValidityStateConstructor) } },
    { "valueMissing", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateValueMissing), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "typeMismatch", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateTypeMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "patternMismatch", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStatePatternMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "tooShort", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateTooShort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "tooLong", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateTooLong), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rangeUnderflow", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateRangeUnderflow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rangeOverflow", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateRangeOverflow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "stepMismatch", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateStepMismatch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "badInput", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateBadInput), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "customError", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateCustomError), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "valid", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsValidityStateValid), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSValidityStatePrototype::s_info = { "ValidityStatePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSValidityStatePrototype) };

void JSValidityStatePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSValidityStatePrototypeTableValues, *this);
}

const ClassInfo JSValidityState::s_info = { "ValidityState", &Base::s_info, 0, CREATE_METHOD_TABLE(JSValidityState) };

JSValidityState::JSValidityState(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ValidityState>&& impl)
    : JSDOMWrapper<ValidityState>(structure, globalObject, WTFMove(impl))
{
}

void JSValidityState::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSValidityState::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSValidityStatePrototype::create(vm, globalObject, JSValidityStatePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSValidityState::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSValidityState>(vm, globalObject);
}

void JSValidityState::destroy(JSC::JSCell* cell)
{
    JSValidityState* thisObject = static_cast<JSValidityState*>(cell);
    thisObject->JSValidityState::~JSValidityState();
}

template<> inline JSValidityState* BindingCaller<JSValidityState>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSValidityState*>(JSValue::decode(thisValue));
}

static inline JSValue jsValidityStateValueMissingGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateValueMissing(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateValueMissingGetter>(state, thisValue, "valueMissing");
}

static inline JSValue jsValidityStateValueMissingGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.valueMissing());
    return result;
}

static inline JSValue jsValidityStateTypeMismatchGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateTypeMismatch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateTypeMismatchGetter>(state, thisValue, "typeMismatch");
}

static inline JSValue jsValidityStateTypeMismatchGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.typeMismatch());
    return result;
}

static inline JSValue jsValidityStatePatternMismatchGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStatePatternMismatch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStatePatternMismatchGetter>(state, thisValue, "patternMismatch");
}

static inline JSValue jsValidityStatePatternMismatchGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.patternMismatch());
    return result;
}

static inline JSValue jsValidityStateTooShortGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateTooShort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateTooShortGetter>(state, thisValue, "tooShort");
}

static inline JSValue jsValidityStateTooShortGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.tooShort());
    return result;
}

static inline JSValue jsValidityStateTooLongGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateTooLong(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateTooLongGetter>(state, thisValue, "tooLong");
}

static inline JSValue jsValidityStateTooLongGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.tooLong());
    return result;
}

static inline JSValue jsValidityStateRangeUnderflowGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateRangeUnderflow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateRangeUnderflowGetter>(state, thisValue, "rangeUnderflow");
}

static inline JSValue jsValidityStateRangeUnderflowGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.rangeUnderflow());
    return result;
}

static inline JSValue jsValidityStateRangeOverflowGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateRangeOverflow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateRangeOverflowGetter>(state, thisValue, "rangeOverflow");
}

static inline JSValue jsValidityStateRangeOverflowGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.rangeOverflow());
    return result;
}

static inline JSValue jsValidityStateStepMismatchGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateStepMismatch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateStepMismatchGetter>(state, thisValue, "stepMismatch");
}

static inline JSValue jsValidityStateStepMismatchGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.stepMismatch());
    return result;
}

static inline JSValue jsValidityStateBadInputGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateBadInput(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateBadInputGetter>(state, thisValue, "badInput");
}

static inline JSValue jsValidityStateBadInputGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.badInput());
    return result;
}

static inline JSValue jsValidityStateCustomErrorGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateCustomError(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateCustomErrorGetter>(state, thisValue, "customError");
}

static inline JSValue jsValidityStateCustomErrorGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.customError());
    return result;
}

static inline JSValue jsValidityStateValidGetter(ExecState&, JSValidityState&, ThrowScope& throwScope);

EncodedJSValue jsValidityStateValid(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSValidityState>::attribute<jsValidityStateValidGetter>(state, thisValue, "valid");
}

static inline JSValue jsValidityStateValidGetter(ExecState& state, JSValidityState& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isValid());
    return result;
}

EncodedJSValue jsValidityStateConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValidityStatePrototype* domObject = jsDynamicDowncast<JSValidityStatePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSValidityState::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSValidityStateConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSValidityStatePrototype* domObject = jsDynamicDowncast<JSValidityStatePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSValidityState::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSValidityStateConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSValidityStateOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSValidityStateOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsValidityState = static_cast<JSValidityState*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsValidityState->wrapped(), jsValidityState);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<ValidityState>&& impl)
{
    return createWrapper<ValidityState>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, ValidityState& impl)
{
    return wrap(state, globalObject, impl);
}

ValidityState* JSValidityState::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSValidityState*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
