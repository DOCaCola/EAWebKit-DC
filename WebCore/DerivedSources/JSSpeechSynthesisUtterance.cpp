/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SPEECH_SYNTHESIS)

#include "JSSpeechSynthesisUtterance.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include "JSSpeechSynthesisVoice.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSpeechSynthesisUtteranceText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceText(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceLang(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceLang(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceVoice(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceVoice(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceVolume(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceVolume(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceRate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtterancePitch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtterancePitch(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnpause(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnpause(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnresume(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnresume(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnmark(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnmark(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceOnboundary(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceOnboundary(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSpeechSynthesisUtteranceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSpeechSynthesisUtteranceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSpeechSynthesisUtterancePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSpeechSynthesisUtterancePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSpeechSynthesisUtterancePrototype* ptr = new (NotNull, JSC::allocateCell<JSSpeechSynthesisUtterancePrototype>(vm.heap)) JSSpeechSynthesisUtterancePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSpeechSynthesisUtterancePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSpeechSynthesisUtteranceConstructor = JSDOMConstructor<JSSpeechSynthesisUtterance>;

template<> EncodedJSValue JSC_HOST_CALL JSSpeechSynthesisUtteranceConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSSpeechSynthesisUtteranceConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto text = state->argument(0).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "SpeechSynthesisUtterance");
    auto object = SpeechSynthesisUtterance::create(*context, WTFMove(text));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SpeechSynthesisUtterance>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSSpeechSynthesisUtteranceConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSSpeechSynthesisUtteranceConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSpeechSynthesisUtterance::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SpeechSynthesisUtterance"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSpeechSynthesisUtteranceConstructor::s_info = { "SpeechSynthesisUtterance", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtteranceConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSpeechSynthesisUtterancePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceConstructor) } },
    { "text", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceText) } },
    { "lang", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceLang), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceLang) } },
    { "voice", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceVoice), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceVoice) } },
    { "volume", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceVolume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceVolume) } },
    { "rate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceRate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceRate) } },
    { "pitch", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtterancePitch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtterancePitch) } },
    { "onstart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnstart) } },
    { "onend", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnend) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnerror) } },
    { "onpause", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnpause), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnpause) } },
    { "onresume", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnresume), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnresume) } },
    { "onmark", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnmark), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnmark) } },
    { "onboundary", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSpeechSynthesisUtteranceOnboundary), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSpeechSynthesisUtteranceOnboundary) } },
};

const ClassInfo JSSpeechSynthesisUtterancePrototype::s_info = { "SpeechSynthesisUtterancePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtterancePrototype) };

void JSSpeechSynthesisUtterancePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSpeechSynthesisUtterancePrototypeTableValues, *this);
}

const ClassInfo JSSpeechSynthesisUtterance::s_info = { "SpeechSynthesisUtterance", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSpeechSynthesisUtterance) };

JSSpeechSynthesisUtterance::JSSpeechSynthesisUtterance(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SpeechSynthesisUtterance>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSSpeechSynthesisUtterance::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSpeechSynthesisUtterance::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSpeechSynthesisUtterancePrototype::create(vm, globalObject, JSSpeechSynthesisUtterancePrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSSpeechSynthesisUtterance::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSpeechSynthesisUtterance>(vm, globalObject);
}

template<> inline JSSpeechSynthesisUtterance* BindingCaller<JSSpeechSynthesisUtterance>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSpeechSynthesisUtterance*>(JSValue::decode(thisValue));
}

static inline JSValue jsSpeechSynthesisUtteranceTextGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceTextGetter>(state, thisValue, "text");
}

static inline JSValue jsSpeechSynthesisUtteranceTextGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.text());
    return result;
}

static inline JSValue jsSpeechSynthesisUtteranceLangGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceLang(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceLangGetter>(state, thisValue, "lang");
}

static inline JSValue jsSpeechSynthesisUtteranceLangGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.lang());
    return result;
}

static inline JSValue jsSpeechSynthesisUtteranceVoiceGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceVoice(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceVoiceGetter>(state, thisValue, "voice");
}

static inline JSValue jsSpeechSynthesisUtteranceVoiceGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<SpeechSynthesisVoice>>>(state, *thisObject.globalObject(), impl.voice());
    return result;
}

static inline JSValue jsSpeechSynthesisUtteranceVolumeGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceVolume(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceVolumeGetter>(state, thisValue, "volume");
}

static inline JSValue jsSpeechSynthesisUtteranceVolumeGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.volume());
    return result;
}

static inline JSValue jsSpeechSynthesisUtteranceRateGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceRate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceRateGetter>(state, thisValue, "rate");
}

static inline JSValue jsSpeechSynthesisUtteranceRateGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.rate());
    return result;
}

static inline JSValue jsSpeechSynthesisUtterancePitchGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtterancePitch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtterancePitchGetter>(state, thisValue, "pitch");
}

static inline JSValue jsSpeechSynthesisUtterancePitchGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.pitch());
    return result;
}

static inline JSValue jsSpeechSynthesisUtteranceOnstartGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnstartGetter>(state, thisValue, "onstart");
}

static inline JSValue jsSpeechSynthesisUtteranceOnstartGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().startEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnendGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnendGetter>(state, thisValue, "onend");
}

static inline JSValue jsSpeechSynthesisUtteranceOnendGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().endEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnerrorGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsSpeechSynthesisUtteranceOnerrorGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnpauseGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnpause(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnpauseGetter>(state, thisValue, "onpause");
}

static inline JSValue jsSpeechSynthesisUtteranceOnpauseGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().pauseEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnresumeGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnresume(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnresumeGetter>(state, thisValue, "onresume");
}

static inline JSValue jsSpeechSynthesisUtteranceOnresumeGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().resumeEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnmarkGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnmark(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnmarkGetter>(state, thisValue, "onmark");
}

static inline JSValue jsSpeechSynthesisUtteranceOnmarkGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().markEvent);
}

static inline JSValue jsSpeechSynthesisUtteranceOnboundaryGetter(ExecState&, JSSpeechSynthesisUtterance&, ThrowScope& throwScope);

EncodedJSValue jsSpeechSynthesisUtteranceOnboundary(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::attribute<jsSpeechSynthesisUtteranceOnboundaryGetter>(state, thisValue, "onboundary");
}

static inline JSValue jsSpeechSynthesisUtteranceOnboundaryGetter(ExecState& state, JSSpeechSynthesisUtterance& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().boundaryEvent);
}

EncodedJSValue jsSpeechSynthesisUtteranceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSpeechSynthesisUtterancePrototype* domObject = jsDynamicDowncast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSpeechSynthesisUtterance::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSpeechSynthesisUtteranceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSpeechSynthesisUtterancePrototype* domObject = jsDynamicDowncast<JSSpeechSynthesisUtterancePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSpeechSynthesisUtteranceTextFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceText(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceTextFunction>(state, thisValue, encodedValue, "text");
}

static inline bool setJSSpeechSynthesisUtteranceTextFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setText(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceLangFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceLang(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceLangFunction>(state, thisValue, encodedValue, "lang");
}

static inline bool setJSSpeechSynthesisUtteranceLangFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLang(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceVoiceFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceVoice(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceVoiceFunction>(state, thisValue, encodedValue, "voice");
}

static inline bool setJSSpeechSynthesisUtteranceVoiceFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLInterface<SpeechSynthesisVoice>>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "SpeechSynthesisUtterance", "voice", "SpeechSynthesisVoice"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setVoice(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceVolumeFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceVolume(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceVolumeFunction>(state, thisValue, encodedValue, "volume");
}

static inline bool setJSSpeechSynthesisUtteranceVolumeFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setVolume(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceRateFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceRate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceRateFunction>(state, thisValue, encodedValue, "rate");
}

static inline bool setJSSpeechSynthesisUtteranceRateFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setRate(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtterancePitchFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtterancePitch(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtterancePitchFunction>(state, thisValue, encodedValue, "pitch");
}

static inline bool setJSSpeechSynthesisUtterancePitchFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPitch(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnstartFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnstartFunction>(state, thisValue, encodedValue, "onstart");
}

static inline bool setJSSpeechSynthesisUtteranceOnstartFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().startEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnendFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnendFunction>(state, thisValue, encodedValue, "onend");
}

static inline bool setJSSpeechSynthesisUtteranceOnendFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().endEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnerrorFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSSpeechSynthesisUtteranceOnerrorFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnpauseFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnpause(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnpauseFunction>(state, thisValue, encodedValue, "onpause");
}

static inline bool setJSSpeechSynthesisUtteranceOnpauseFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pauseEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnresumeFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnresume(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnresumeFunction>(state, thisValue, encodedValue, "onresume");
}

static inline bool setJSSpeechSynthesisUtteranceOnresumeFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().resumeEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnmarkFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnmark(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnmarkFunction>(state, thisValue, encodedValue, "onmark");
}

static inline bool setJSSpeechSynthesisUtteranceOnmarkFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().markEvent, value);
    return true;
}


static inline bool setJSSpeechSynthesisUtteranceOnboundaryFunction(ExecState&, JSSpeechSynthesisUtterance&, JSValue, ThrowScope&);

bool setJSSpeechSynthesisUtteranceOnboundary(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSpeechSynthesisUtterance>::setAttribute<setJSSpeechSynthesisUtteranceOnboundaryFunction>(state, thisValue, encodedValue, "onboundary");
}

static inline bool setJSSpeechSynthesisUtteranceOnboundaryFunction(ExecState& state, JSSpeechSynthesisUtterance& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().boundaryEvent, value);
    return true;
}


JSValue JSSpeechSynthesisUtterance::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSpeechSynthesisUtteranceConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSSpeechSynthesisUtterance::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSpeechSynthesisUtterance*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SpeechSynthesisUtterance@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore24SpeechSynthesisUtteranceE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SpeechSynthesisUtterance>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SpeechSynthesisUtterance@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore24SpeechSynthesisUtteranceE[2];
#if COMPILER(CLANG)
    // If this fails SpeechSynthesisUtterance does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(SpeechSynthesisUtterance), "SpeechSynthesisUtterance is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SpeechSynthesisUtterance has subclasses. If SpeechSynthesisUtterance has subclasses that get passed
    // to toJS() we currently require SpeechSynthesisUtterance you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<SpeechSynthesisUtterance>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SpeechSynthesisUtterance& impl)
{
    return wrap(state, globalObject, impl);
}

SpeechSynthesisUtterance* JSSpeechSynthesisUtterance::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSpeechSynthesisUtterance*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(SPEECH_SYNTHESIS)
