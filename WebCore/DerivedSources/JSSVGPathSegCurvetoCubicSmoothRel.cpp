/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGPathSegCurvetoCubicSmoothRel.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicSmoothRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicSmoothRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelX2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicSmoothRelX2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelY2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicSmoothRelY2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicSmoothRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGPathSegCurvetoCubicSmoothRelPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGPathSegCurvetoCubicSmoothRelPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGPathSegCurvetoCubicSmoothRelPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGPathSegCurvetoCubicSmoothRelPrototype>(vm.heap)) JSSVGPathSegCurvetoCubicSmoothRelPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGPathSegCurvetoCubicSmoothRelPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGPathSegCurvetoCubicSmoothRelConstructor = JSDOMConstructorNotConstructable<JSSVGPathSegCurvetoCubicSmoothRel>;

template<> JSValue JSSVGPathSegCurvetoCubicSmoothRelConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGPathSeg::getConstructor(vm, &globalObject);
}

template<> void JSSVGPathSegCurvetoCubicSmoothRelConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGPathSegCurvetoCubicSmoothRel::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGPathSegCurvetoCubicSmoothRel"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGPathSegCurvetoCubicSmoothRelConstructor::s_info = { "SVGPathSegCurvetoCubicSmoothRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicSmoothRelConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegCurvetoCubicSmoothRelPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicSmoothRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicSmoothRelConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicSmoothRelX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicSmoothRelX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicSmoothRelY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicSmoothRelY) } },
    { "x2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicSmoothRelX2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicSmoothRelX2) } },
    { "y2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicSmoothRelY2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicSmoothRelY2) } },
};

const ClassInfo JSSVGPathSegCurvetoCubicSmoothRelPrototype::s_info = { "SVGPathSegCurvetoCubicSmoothRelPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicSmoothRelPrototype) };

void JSSVGPathSegCurvetoCubicSmoothRelPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGPathSegCurvetoCubicSmoothRelPrototypeTableValues, *this);
}

const ClassInfo JSSVGPathSegCurvetoCubicSmoothRel::s_info = { "SVGPathSegCurvetoCubicSmoothRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicSmoothRel) };

JSSVGPathSegCurvetoCubicSmoothRel::JSSVGPathSegCurvetoCubicSmoothRel(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGPathSegCurvetoCubicSmoothRel>&& impl)
    : JSSVGPathSeg(structure, globalObject, WTFMove(impl))
{
}

void JSSVGPathSegCurvetoCubicSmoothRel::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGPathSegCurvetoCubicSmoothRel::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGPathSegCurvetoCubicSmoothRelPrototype::create(vm, globalObject, JSSVGPathSegCurvetoCubicSmoothRelPrototype::createStructure(vm, globalObject, JSSVGPathSeg::prototype(vm, globalObject)));
}

JSObject* JSSVGPathSegCurvetoCubicSmoothRel::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGPathSegCurvetoCubicSmoothRel>(vm, globalObject);
}

template<> inline JSSVGPathSegCurvetoCubicSmoothRel* BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGPathSegCurvetoCubicSmoothRel*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelXGetter(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::attribute<jsSVGPathSegCurvetoCubicSmoothRelXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelXGetter(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelYGetter(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::attribute<jsSVGPathSegCurvetoCubicSmoothRelYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelYGetter(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelX2Getter(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelX2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::attribute<jsSVGPathSegCurvetoCubicSmoothRelX2Getter>(state, thisValue, "x2");
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelX2Getter(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x2());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelY2Getter(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelY2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::attribute<jsSVGPathSegCurvetoCubicSmoothRelY2Getter>(state, thisValue, "y2");
}

static inline JSValue jsSVGPathSegCurvetoCubicSmoothRelY2Getter(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y2());
    return result;
}

EncodedJSValue jsSVGPathSegCurvetoCubicSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGPathSegCurvetoCubicSmoothRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoCubicSmoothRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGPathSegCurvetoCubicSmoothRel::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGPathSegCurvetoCubicSmoothRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGPathSegCurvetoCubicSmoothRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoCubicSmoothRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGPathSegCurvetoCubicSmoothRelXFunction(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicSmoothRelX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::setAttribute<setJSSVGPathSegCurvetoCubicSmoothRelXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSSVGPathSegCurvetoCubicSmoothRelXFunction(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicSmoothRelYFunction(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicSmoothRelY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::setAttribute<setJSSVGPathSegCurvetoCubicSmoothRelYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSSVGPathSegCurvetoCubicSmoothRelYFunction(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicSmoothRelX2Function(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicSmoothRelX2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::setAttribute<setJSSVGPathSegCurvetoCubicSmoothRelX2Function>(state, thisValue, encodedValue, "x2");
}

static inline bool setJSSVGPathSegCurvetoCubicSmoothRelX2Function(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX2(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicSmoothRelY2Function(ExecState&, JSSVGPathSegCurvetoCubicSmoothRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicSmoothRelY2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicSmoothRel>::setAttribute<setJSSVGPathSegCurvetoCubicSmoothRelY2Function>(state, thisValue, encodedValue, "y2");
}

static inline bool setJSSVGPathSegCurvetoCubicSmoothRelY2Function(ExecState& state, JSSVGPathSegCurvetoCubicSmoothRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY2(WTFMove(nativeValue));
    return true;
}


JSValue JSSVGPathSegCurvetoCubicSmoothRel::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGPathSegCurvetoCubicSmoothRelConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}


}
