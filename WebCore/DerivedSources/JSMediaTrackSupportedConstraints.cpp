/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaTrackSupportedConstraints.h"


using namespace JSC;

namespace WebCore {

template<> MediaTrackSupportedConstraints convertDictionary<MediaTrackSupportedConstraints>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    MediaTrackSupportedConstraints result;
    JSValue aspectRatioValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "aspectRatio"));
    if (!aspectRatioValue.isUndefined()) {
        result.aspectRatio = convert<IDLBoolean>(state, aspectRatioValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.aspectRatio = true;
    JSValue deviceIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "deviceId"));
    if (!deviceIdValue.isUndefined()) {
        result.deviceId = convert<IDLBoolean>(state, deviceIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.deviceId = true;
    JSValue echoCancellationValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "echoCancellation"));
    if (!echoCancellationValue.isUndefined()) {
        result.echoCancellation = convert<IDLBoolean>(state, echoCancellationValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.echoCancellation = true;
    JSValue facingModeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "facingMode"));
    if (!facingModeValue.isUndefined()) {
        result.facingMode = convert<IDLBoolean>(state, facingModeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.facingMode = true;
    JSValue frameRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "frameRate"));
    if (!frameRateValue.isUndefined()) {
        result.frameRate = convert<IDLBoolean>(state, frameRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.frameRate = true;
    JSValue groupIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "groupId"));
    if (!groupIdValue.isUndefined()) {
        result.groupId = convert<IDLBoolean>(state, groupIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.groupId = true;
    JSValue heightValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "height"));
    if (!heightValue.isUndefined()) {
        result.height = convert<IDLBoolean>(state, heightValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.height = true;
    JSValue sampleRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleRate"));
    if (!sampleRateValue.isUndefined()) {
        result.sampleRate = convert<IDLBoolean>(state, sampleRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.sampleRate = true;
    JSValue sampleSizeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleSize"));
    if (!sampleSizeValue.isUndefined()) {
        result.sampleSize = convert<IDLBoolean>(state, sampleSizeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.sampleSize = true;
    JSValue volumeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "volume"));
    if (!volumeValue.isUndefined()) {
        result.volume = convert<IDLBoolean>(state, volumeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.volume = true;
    JSValue widthValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "width"));
    if (!widthValue.isUndefined()) {
        result.width = convert<IDLBoolean>(state, widthValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.width = true;
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const MediaTrackSupportedConstraints& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    auto aspectRatioValue = toJS<IDLBoolean>(state, globalObject, dictionary.aspectRatio);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "aspectRatio"), aspectRatioValue);
    auto deviceIdValue = toJS<IDLBoolean>(state, globalObject, dictionary.deviceId);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "deviceId"), deviceIdValue);
    auto echoCancellationValue = toJS<IDLBoolean>(state, globalObject, dictionary.echoCancellation);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "echoCancellation"), echoCancellationValue);
    auto facingModeValue = toJS<IDLBoolean>(state, globalObject, dictionary.facingMode);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "facingMode"), facingModeValue);
    auto frameRateValue = toJS<IDLBoolean>(state, globalObject, dictionary.frameRate);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "frameRate"), frameRateValue);
    auto groupIdValue = toJS<IDLBoolean>(state, globalObject, dictionary.groupId);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "groupId"), groupIdValue);
    auto heightValue = toJS<IDLBoolean>(state, globalObject, dictionary.height);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "height"), heightValue);
    auto sampleRateValue = toJS<IDLBoolean>(state, globalObject, dictionary.sampleRate);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleRate"), sampleRateValue);
    auto sampleSizeValue = toJS<IDLBoolean>(state, globalObject, dictionary.sampleSize);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleSize"), sampleSizeValue);
    auto volumeValue = toJS<IDLBoolean>(state, globalObject, dictionary.volume);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "volume"), volumeValue);
    auto widthValue = toJS<IDLBoolean>(state, globalObject, dictionary.width);
    result->putDirect(vm, JSC::Identifier::fromString(&vm, "width"), widthValue);
    return result;
}

} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
