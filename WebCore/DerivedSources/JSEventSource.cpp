/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSEventSource.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> EventSource::Init convertDictionary<EventSource::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    EventSource::Init result;
    JSValue withCredentialsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "withCredentials"));
    if (!withCredentialsValue.isUndefined()) {
        result.withCredentials = convert<IDLBoolean>(state, withCredentialsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.withCredentials = false;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsEventSourcePrototypeFunctionClose(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsEventSourceURL(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventSourceUrl(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventSourceWithCredentials(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventSourceReadyState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventSourceOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventSourceOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsEventSourceOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventSourceOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsEventSourceOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventSourceOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsEventSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventSourceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSEventSourcePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSEventSourcePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSEventSourcePrototype* ptr = new (NotNull, JSC::allocateCell<JSEventSourcePrototype>(vm.heap)) JSEventSourcePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSEventSourcePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSEventSourceConstructor = JSDOMConstructor<JSEventSource>;

/* Hash table for constructor */

static const HashTableValue JSEventSourceConstructorTableValues[] =
{
    { "CONNECTING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "OPEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CLOSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

static_assert(EventSource::CONNECTING == 0, "CONNECTING in EventSource does not match value from IDL");
static_assert(EventSource::OPEN == 1, "OPEN in EventSource does not match value from IDL");
static_assert(EventSource::CLOSED == 2, "CLOSED in EventSource does not match value from IDL");

template<> EncodedJSValue JSC_HOST_CALL JSEventSourceConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSEventSourceConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto url = convert<IDLUSVString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto eventSourceInitDict = convert<IDLDictionary<EventSource::Init>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "EventSource");
    auto object = EventSource::create(*context, WTFMove(url), WTFMove(eventSourceInitDict));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<EventSource>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSEventSourceConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSEventSourceConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSEventSource::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("EventSource"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSEventSourceConstructorTableValues, *this);
}

template<> const ClassInfo JSEventSourceConstructor::s_info = { "EventSource", &Base::s_info, 0, CREATE_METHOD_TABLE(JSEventSourceConstructor) };

/* Hash table for prototype */

static const HashTableValue JSEventSourcePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventSourceConstructor) } },
    { "URL", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceURL), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "url", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceUrl), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "withCredentials", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceWithCredentials), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "readyState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceReadyState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onopen", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceOnopen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventSourceOnopen) } },
    { "onmessage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceOnmessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventSourceOnmessage) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSourceOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventSourceOnerror) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventSourcePrototypeFunctionClose), (intptr_t) (0) } },
    { "CONNECTING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "OPEN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "CLOSED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

const ClassInfo JSEventSourcePrototype::s_info = { "EventSourcePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSEventSourcePrototype) };

void JSEventSourcePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSEventSourcePrototypeTableValues, *this);
}

const ClassInfo JSEventSource::s_info = { "EventSource", &Base::s_info, 0, CREATE_METHOD_TABLE(JSEventSource) };

JSEventSource::JSEventSource(Structure* structure, JSDOMGlobalObject& globalObject, Ref<EventSource>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSEventSource::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSEventSource::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSEventSourcePrototype::create(vm, globalObject, JSEventSourcePrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSEventSource::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSEventSource>(vm, globalObject);
}

template<> inline JSEventSource* BindingCaller<JSEventSource>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSEventSource*>(JSValue::decode(thisValue));
}

template<> inline JSEventSource* BindingCaller<JSEventSource>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSEventSource*>(state.thisValue());
}

static inline JSValue jsEventSourceURLGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceURL(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceURLGetter>(state, thisValue, "URL");
}

static inline JSValue jsEventSourceURLGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.url());
    return result;
}

static inline JSValue jsEventSourceUrlGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceUrl(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceUrlGetter>(state, thisValue, "url");
}

static inline JSValue jsEventSourceUrlGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.url());
    return result;
}

static inline JSValue jsEventSourceWithCredentialsGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceWithCredentials(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceWithCredentialsGetter>(state, thisValue, "withCredentials");
}

static inline JSValue jsEventSourceWithCredentialsGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.withCredentials());
    return result;
}

static inline JSValue jsEventSourceReadyStateGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceReadyState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceReadyStateGetter>(state, thisValue, "readyState");
}

static inline JSValue jsEventSourceReadyStateGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.readyState());
    return result;
}

static inline JSValue jsEventSourceOnopenGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceOnopen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceOnopenGetter>(state, thisValue, "onopen");
}

static inline JSValue jsEventSourceOnopenGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().openEvent);
}

static inline JSValue jsEventSourceOnmessageGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceOnmessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceOnmessageGetter>(state, thisValue, "onmessage");
}

static inline JSValue jsEventSourceOnmessageGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().messageEvent);
}

static inline JSValue jsEventSourceOnerrorGetter(ExecState&, JSEventSource&, ThrowScope& throwScope);

EncodedJSValue jsEventSourceOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEventSource>::attribute<jsEventSourceOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsEventSourceOnerrorGetter(ExecState& state, JSEventSource& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

EncodedJSValue jsEventSourceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSEventSourcePrototype* domObject = jsDynamicDowncast<JSEventSourcePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSEventSource::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSEventSourceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSEventSourcePrototype* domObject = jsDynamicDowncast<JSEventSourcePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSEventSourceOnopenFunction(ExecState&, JSEventSource&, JSValue, ThrowScope&);

bool setJSEventSourceOnopen(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSEventSource>::setAttribute<setJSEventSourceOnopenFunction>(state, thisValue, encodedValue, "onopen");
}

static inline bool setJSEventSourceOnopenFunction(ExecState& state, JSEventSource& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().openEvent, value);
    return true;
}


static inline bool setJSEventSourceOnmessageFunction(ExecState&, JSEventSource&, JSValue, ThrowScope&);

bool setJSEventSourceOnmessage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSEventSource>::setAttribute<setJSEventSourceOnmessageFunction>(state, thisValue, encodedValue, "onmessage");
}

static inline bool setJSEventSourceOnmessageFunction(ExecState& state, JSEventSource& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().messageEvent, value);
    return true;
}


static inline bool setJSEventSourceOnerrorFunction(ExecState&, JSEventSource&, JSValue, ThrowScope&);

bool setJSEventSourceOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSEventSource>::setAttribute<setJSEventSourceOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSEventSourceOnerrorFunction(ExecState& state, JSEventSource& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


JSValue JSEventSource::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSEventSourceConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsEventSourcePrototypeFunctionCloseCaller(JSC::ExecState*, JSEventSource*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventSourcePrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSEventSource>::callOperation<jsEventSourcePrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsEventSourcePrototypeFunctionCloseCaller(JSC::ExecState* state, JSEventSource* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

void JSEventSource::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSEventSource*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSEventSourceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsEventSource = jsCast<JSEventSource*>(handle.slot()->asCell());
    if (jsEventSource->wrapped().hasPendingActivity())
        return true;
    if (jsEventSource->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSEventSourceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsEventSource = static_cast<JSEventSource*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsEventSource->wrapped(), jsEventSource);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7EventSource@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore11EventSourceE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<EventSource>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7EventSource@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore11EventSourceE[2];
#if COMPILER(CLANG)
    // If this fails EventSource does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(EventSource), "EventSource is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // EventSource has subclasses. If EventSource has subclasses that get passed
    // to toJS() we currently require EventSource you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<EventSource>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, EventSource& impl)
{
    return wrap(state, globalObject, impl);
}

EventSource* JSEventSource::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSEventSource*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
