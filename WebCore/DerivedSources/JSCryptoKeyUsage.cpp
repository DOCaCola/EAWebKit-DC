/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSCryptoKeyUsage.h"

#include <runtime/JSString.h>
#include <wtf/NeverDestroyed.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, CryptoKeyUsage enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("encrypt"),
        ASCIILiteral("decrypt"),
        ASCIILiteral("sign"),
        ASCIILiteral("verify"),
        ASCIILiteral("deriveKey"),
        ASCIILiteral("deriveBits"),
        ASCIILiteral("wrapKey"),
        ASCIILiteral("unwrapKey"),
    };
    static_assert(static_cast<size_t>(CryptoKeyUsage::Encrypt) == 0, "CryptoKeyUsage::Encrypt is not 0 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Decrypt) == 1, "CryptoKeyUsage::Decrypt is not 1 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Sign) == 2, "CryptoKeyUsage::Sign is not 2 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::Verify) == 3, "CryptoKeyUsage::Verify is not 3 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::DeriveKey) == 4, "CryptoKeyUsage::DeriveKey is not 4 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::DeriveBits) == 5, "CryptoKeyUsage::DeriveBits is not 5 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::WrapKey) == 6, "CryptoKeyUsage::WrapKey is not 6 as expected");
    static_assert(static_cast<size_t>(CryptoKeyUsage::UnwrapKey) == 7, "CryptoKeyUsage::UnwrapKey is not 7 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<CryptoKeyUsage> parseEnumeration<CryptoKeyUsage>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "encrypt")
        return CryptoKeyUsage::Encrypt;
    if (stringValue == "decrypt")
        return CryptoKeyUsage::Decrypt;
    if (stringValue == "sign")
        return CryptoKeyUsage::Sign;
    if (stringValue == "verify")
        return CryptoKeyUsage::Verify;
    if (stringValue == "deriveKey")
        return CryptoKeyUsage::DeriveKey;
    if (stringValue == "deriveBits")
        return CryptoKeyUsage::DeriveBits;
    if (stringValue == "wrapKey")
        return CryptoKeyUsage::WrapKey;
    if (stringValue == "unwrapKey")
        return CryptoKeyUsage::UnwrapKey;
    return std::nullopt;
}

template<> CryptoKeyUsage convertEnumeration<CryptoKeyUsage>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<CryptoKeyUsage>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<CryptoKeyUsage>()
{
    return "\"encrypt\", \"decrypt\", \"sign\", \"verify\", \"deriveKey\", \"deriveBits\", \"wrapKey\", \"unwrapKey\"";
}

} // namespace WebCore

#endif // ENABLE(SUBTLE_CRYPTO)
