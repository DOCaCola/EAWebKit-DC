/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGFESpotLightElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedNumber.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGFESpotLightElementX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementZ(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementPointsAtX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementPointsAtY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementPointsAtZ(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementSpecularExponent(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementLimitingConeAngle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGFESpotLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGFESpotLightElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGFESpotLightElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGFESpotLightElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGFESpotLightElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGFESpotLightElementPrototype>(vm.heap)) JSSVGFESpotLightElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGFESpotLightElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGFESpotLightElementConstructor = JSDOMConstructorNotConstructable<JSSVGFESpotLightElement>;

template<> JSValue JSSVGFESpotLightElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGFESpotLightElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGFESpotLightElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGFESpotLightElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGFESpotLightElementConstructor::s_info = { "SVGFESpotLightElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFESpotLightElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGFESpotLightElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGFESpotLightElementConstructor) } },
    { "x", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "y", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "z", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementZ), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pointsAtX", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementPointsAtX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pointsAtY", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementPointsAtY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "pointsAtZ", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementPointsAtZ), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "specularExponent", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementSpecularExponent), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "limitingConeAngle", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGFESpotLightElementLimitingConeAngle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSSVGFESpotLightElementPrototype::s_info = { "SVGFESpotLightElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFESpotLightElementPrototype) };

void JSSVGFESpotLightElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGFESpotLightElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGFESpotLightElement::s_info = { "SVGFESpotLightElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGFESpotLightElement) };

JSSVGFESpotLightElement::JSSVGFESpotLightElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGFESpotLightElement>&& impl)
    : JSSVGElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGFESpotLightElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGFESpotLightElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGFESpotLightElementPrototype::create(vm, globalObject, JSSVGFESpotLightElementPrototype::createStructure(vm, globalObject, JSSVGElement::prototype(vm, globalObject)));
}

JSObject* JSSVGFESpotLightElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGFESpotLightElement>(vm, globalObject);
}

template<> inline JSSVGFESpotLightElement* BindingCaller<JSSVGFESpotLightElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGFESpotLightElement*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGFESpotLightElementXGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGFESpotLightElementXGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.xAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementYGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGFESpotLightElementYGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.yAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementZGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementZ(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementZGetter>(state, thisValue, "z");
}

static inline JSValue jsSVGFESpotLightElementZGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.zAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementPointsAtXGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementPointsAtX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementPointsAtXGetter>(state, thisValue, "pointsAtX");
}

static inline JSValue jsSVGFESpotLightElementPointsAtXGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.pointsAtXAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementPointsAtYGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementPointsAtY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementPointsAtYGetter>(state, thisValue, "pointsAtY");
}

static inline JSValue jsSVGFESpotLightElementPointsAtYGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.pointsAtYAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementPointsAtZGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementPointsAtZ(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementPointsAtZGetter>(state, thisValue, "pointsAtZ");
}

static inline JSValue jsSVGFESpotLightElementPointsAtZGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.pointsAtZAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementSpecularExponentGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementSpecularExponent(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementSpecularExponentGetter>(state, thisValue, "specularExponent");
}

static inline JSValue jsSVGFESpotLightElementSpecularExponentGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.specularExponentAnimated());
    return result;
}

static inline JSValue jsSVGFESpotLightElementLimitingConeAngleGetter(ExecState&, JSSVGFESpotLightElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGFESpotLightElementLimitingConeAngle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGFESpotLightElement>::attribute<jsSVGFESpotLightElementLimitingConeAngleGetter>(state, thisValue, "limitingConeAngle");
}

static inline JSValue jsSVGFESpotLightElementLimitingConeAngleGetter(ExecState& state, JSSVGFESpotLightElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedNumber>>(state, *thisObject.globalObject(), impl.limitingConeAngleAnimated());
    return result;
}

EncodedJSValue jsSVGFESpotLightElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGFESpotLightElementPrototype* domObject = jsDynamicDowncast<JSSVGFESpotLightElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGFESpotLightElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGFESpotLightElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGFESpotLightElementPrototype* domObject = jsDynamicDowncast<JSSVGFESpotLightElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGFESpotLightElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGFESpotLightElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSSVGFESpotLightElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGFESpotLightElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
