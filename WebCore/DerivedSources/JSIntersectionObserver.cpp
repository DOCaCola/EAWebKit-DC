/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INTERSECTION_OBSERVER)

#include "JSIntersectionObserver.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSElement.h"
#include "JSIntersectionObserverEntry.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

#if ENABLE(INTERSECTION_OBSERVER)
#include "JSIntersectionObserverCallback.h"
#endif

using namespace JSC;

namespace WebCore {

#if ENABLE(INTERSECTION_OBSERVER)

template<> IntersectionObserver::Init convertDictionary<IntersectionObserver::Init>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    IntersectionObserver::Init result;
    JSValue rootValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "root"));
    if (!rootValue.isUndefined()) {
        result.root = convert<IDLNullable<IDLInterface<Element>>>(state, rootValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.root = nullptr;
    JSValue rootMarginValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "rootMargin"));
    if (!rootMarginValue.isUndefined()) {
        result.rootMargin = convert<IDLDOMString>(state, rootMarginValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.rootMargin = ASCIILiteral("0px");
    JSValue thresholdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "threshold"));
    if (!thresholdValue.isUndefined()) {
        result.threshold = convert<IDLUnion<IDLDouble, IDLSequence<IDLDouble>>>(state, thresholdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.threshold = 0.0;
    return result;
}

#endif

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionObserve(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionUnobserve(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionDisconnect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionTakeRecords(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIntersectionObserverRoot(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverRootMargin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverThresholds(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIntersectionObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIntersectionObserverConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIntersectionObserverPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIntersectionObserverPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIntersectionObserverPrototype* ptr = new (NotNull, JSC::allocateCell<JSIntersectionObserverPrototype>(vm.heap)) JSIntersectionObserverPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIntersectionObserverPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIntersectionObserverConstructor = JSDOMConstructor<JSIntersectionObserver>;

template<> EncodedJSValue JSC_HOST_CALL JSIntersectionObserverConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSIntersectionObserverConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto callback = convert<IDLCallbackFunction<JSIntersectionObserverCallback>>(*state, state->uncheckedArgument(0), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "IntersectionObserver", nullptr); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<IntersectionObserver::Init>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = IntersectionObserver::create(callback.releaseNonNull(), WTFMove(options));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<IntersectionObserver>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSIntersectionObserverConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSIntersectionObserverConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIntersectionObserver::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IntersectionObserver"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIntersectionObserverConstructor::s_info = { "IntersectionObserver", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserverConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIntersectionObserverPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIntersectionObserverConstructor) } },
    { "root", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverRoot), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rootMargin", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverRootMargin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "thresholds", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIntersectionObserverThresholds), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "observe", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIntersectionObserverPrototypeFunctionObserve), (intptr_t) (1) } },
    { "unobserve", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIntersectionObserverPrototypeFunctionUnobserve), (intptr_t) (1) } },
    { "disconnect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIntersectionObserverPrototypeFunctionDisconnect), (intptr_t) (0) } },
    { "takeRecords", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIntersectionObserverPrototypeFunctionTakeRecords), (intptr_t) (0) } },
};

const ClassInfo JSIntersectionObserverPrototype::s_info = { "IntersectionObserverPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserverPrototype) };

void JSIntersectionObserverPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIntersectionObserverPrototypeTableValues, *this);
}

const ClassInfo JSIntersectionObserver::s_info = { "IntersectionObserver", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIntersectionObserver) };

JSIntersectionObserver::JSIntersectionObserver(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IntersectionObserver>&& impl)
    : JSDOMWrapper<IntersectionObserver>(structure, globalObject, WTFMove(impl))
{
}

void JSIntersectionObserver::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIntersectionObserver::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIntersectionObserverPrototype::create(vm, globalObject, JSIntersectionObserverPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSIntersectionObserver::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIntersectionObserver>(vm, globalObject);
}

void JSIntersectionObserver::destroy(JSC::JSCell* cell)
{
    JSIntersectionObserver* thisObject = static_cast<JSIntersectionObserver*>(cell);
    thisObject->JSIntersectionObserver::~JSIntersectionObserver();
}

template<> inline JSIntersectionObserver* BindingCaller<JSIntersectionObserver>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIntersectionObserver*>(JSValue::decode(thisValue));
}

template<> inline JSIntersectionObserver* BindingCaller<JSIntersectionObserver>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIntersectionObserver*>(state.thisValue());
}

static inline JSValue jsIntersectionObserverRootGetter(ExecState&, JSIntersectionObserver&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverRoot(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserver>::attribute<jsIntersectionObserverRootGetter>(state, thisValue, "root");
}

static inline JSValue jsIntersectionObserverRootGetter(ExecState& state, JSIntersectionObserver& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<Element>>>(state, *thisObject.globalObject(), impl.root());
    return result;
}

static inline JSValue jsIntersectionObserverRootMarginGetter(ExecState&, JSIntersectionObserver&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverRootMargin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserver>::attribute<jsIntersectionObserverRootMarginGetter>(state, thisValue, "rootMargin");
}

static inline JSValue jsIntersectionObserverRootMarginGetter(ExecState& state, JSIntersectionObserver& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.rootMargin());
    return result;
}

static inline JSValue jsIntersectionObserverThresholdsGetter(ExecState&, JSIntersectionObserver&, ThrowScope& throwScope);

EncodedJSValue jsIntersectionObserverThresholds(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIntersectionObserver>::attribute<jsIntersectionObserverThresholdsGetter>(state, thisValue, "thresholds");
}

static inline JSValue jsIntersectionObserverThresholdsGetter(ExecState& state, JSIntersectionObserver& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLSequence<IDLDouble>>(state, *thisObject.globalObject(), impl.thresholds());
    return result;
}

EncodedJSValue jsIntersectionObserverConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIntersectionObserverPrototype* domObject = jsDynamicDowncast<JSIntersectionObserverPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIntersectionObserver::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIntersectionObserverConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIntersectionObserverPrototype* domObject = jsDynamicDowncast<JSIntersectionObserverPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSIntersectionObserver::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIntersectionObserverConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionObserveCaller(JSC::ExecState*, JSIntersectionObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionObserve(ExecState* state)
{
    return BindingCaller<JSIntersectionObserver>::callOperation<jsIntersectionObserverPrototypeFunctionObserveCaller>(state, "observe");
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionObserveCaller(JSC::ExecState* state, JSIntersectionObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto target = convert<IDLInterface<Element>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "target", "IntersectionObserver", "observe", "Element"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.observe(*target);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionUnobserveCaller(JSC::ExecState*, JSIntersectionObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionUnobserve(ExecState* state)
{
    return BindingCaller<JSIntersectionObserver>::callOperation<jsIntersectionObserverPrototypeFunctionUnobserveCaller>(state, "unobserve");
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionUnobserveCaller(JSC::ExecState* state, JSIntersectionObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto target = convert<IDLInterface<Element>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "target", "IntersectionObserver", "unobserve", "Element"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.unobserve(*target);
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionDisconnectCaller(JSC::ExecState*, JSIntersectionObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionDisconnect(ExecState* state)
{
    return BindingCaller<JSIntersectionObserver>::callOperation<jsIntersectionObserverPrototypeFunctionDisconnectCaller>(state, "disconnect");
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionDisconnectCaller(JSC::ExecState* state, JSIntersectionObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.disconnect();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionTakeRecordsCaller(JSC::ExecState*, JSIntersectionObserver*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIntersectionObserverPrototypeFunctionTakeRecords(ExecState* state)
{
    return BindingCaller<JSIntersectionObserver>::callOperation<jsIntersectionObserverPrototypeFunctionTakeRecordsCaller>(state, "takeRecords");
}

static inline JSC::EncodedJSValue jsIntersectionObserverPrototypeFunctionTakeRecordsCaller(JSC::ExecState* state, JSIntersectionObserver* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<IntersectionObserverEntry>>>(*state, *castedThis->globalObject(), impl.takeRecords()));
}

bool JSIntersectionObserverOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSIntersectionObserverOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIntersectionObserver = static_cast<JSIntersectionObserver*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIntersectionObserver->wrapped(), jsIntersectionObserver);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IntersectionObserver>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to IntersectionObserver.
    static_assert(!__is_polymorphic(IntersectionObserver), "IntersectionObserver is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<IntersectionObserver>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IntersectionObserver& impl)
{
    return wrap(state, globalObject, impl);
}

IntersectionObserver* JSIntersectionObserver::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIntersectionObserver*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INTERSECTION_OBSERVER)
