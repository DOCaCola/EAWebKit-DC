/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(GEOLOCATION)

#include "JSGeoposition.h"

#include "JSCoordinates.h"
#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsGeopositionCoords(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsGeopositionTimestamp(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSGeopositionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSGeopositionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSGeopositionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSGeopositionPrototype* ptr = new (NotNull, JSC::allocateCell<JSGeopositionPrototype>(vm.heap)) JSGeopositionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSGeopositionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSGeopositionPrototypeTableValues[] =
{
    { "coords", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGeopositionCoords), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "timestamp", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsGeopositionTimestamp), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSGeopositionPrototype::s_info = { "GeopositionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGeopositionPrototype) };

void JSGeopositionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSGeopositionPrototypeTableValues, *this);
}

const ClassInfo JSGeoposition::s_info = { "Geoposition", &Base::s_info, 0, CREATE_METHOD_TABLE(JSGeoposition) };

JSGeoposition::JSGeoposition(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Geoposition>&& impl)
    : JSDOMWrapper<Geoposition>(structure, globalObject, WTFMove(impl))
{
}

void JSGeoposition::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSGeoposition::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSGeopositionPrototype::create(vm, globalObject, JSGeopositionPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSGeoposition::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSGeoposition>(vm, globalObject);
}

void JSGeoposition::destroy(JSC::JSCell* cell)
{
    JSGeoposition* thisObject = static_cast<JSGeoposition*>(cell);
    thisObject->JSGeoposition::~JSGeoposition();
}

template<> inline JSGeoposition* BindingCaller<JSGeoposition>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSGeoposition*>(JSValue::decode(thisValue));
}

static inline JSValue jsGeopositionCoordsGetter(ExecState&, JSGeoposition&, ThrowScope& throwScope);

EncodedJSValue jsGeopositionCoords(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSGeoposition>::attribute<jsGeopositionCoordsGetter>(state, thisValue, "coords");
}

static inline JSValue jsGeopositionCoordsGetter(ExecState& state, JSGeoposition& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Coordinates>>(state, *thisObject.globalObject(), impl.coords());
    return result;
}

static inline JSValue jsGeopositionTimestampGetter(ExecState&, JSGeoposition&, ThrowScope& throwScope);

EncodedJSValue jsGeopositionTimestamp(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSGeoposition>::attribute<jsGeopositionTimestampGetter>(state, thisValue, "timestamp");
}

static inline JSValue jsGeopositionTimestampGetter(ExecState& state, JSGeoposition& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLongLong>(impl.timestamp());
    return result;
}

bool setJSGeopositionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSGeopositionPrototype* domObject = jsDynamicDowncast<JSGeopositionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

bool JSGeopositionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSGeopositionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsGeoposition = static_cast<JSGeoposition*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsGeoposition->wrapped(), jsGeoposition);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<Geoposition>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Geoposition.
    static_assert(!__is_polymorphic(Geoposition), "Geoposition is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<Geoposition>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, Geoposition& impl)
{
    return wrap(state, globalObject, impl);
}

Geoposition* JSGeoposition::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSGeoposition*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(GEOLOCATION)
