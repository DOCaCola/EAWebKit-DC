/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFileException.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFileExceptionPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFileExceptionCode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileExceptionName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileExceptionMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileExceptionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFileExceptionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFileExceptionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFileExceptionPrototype* ptr = new (NotNull, JSC::allocateCell<JSFileExceptionPrototype>(vm.heap)) JSFileExceptionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFileExceptionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table */

static const struct CompactHashIndex JSFileExceptionTableIndex[9] = {
    { -1, -1 },
    { 0, 8 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { -1, -1 },
    { 2, -1 },
    { 1, -1 },
};


static const HashTableValue JSFileExceptionTableValues[] =
{
    { "code", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileExceptionCode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "name", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileExceptionName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "message", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileExceptionMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

static const HashTable JSFileExceptionTable = { 3, 7, true, JSFileExceptionTableValues, JSFileExceptionTableIndex };
/* Hash table for prototype */

static const HashTableValue JSFileExceptionPrototypeTableValues[] =
{
    { "toString", DontEnum | JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileExceptionPrototypeFunctionToString), (intptr_t) (0) } },
    { "NOT_FOUND_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "SECURITY_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "ABORT_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "NOT_READABLE_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "ENCODING_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(5) } },
    { "NO_MODIFICATION_ALLOWED_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(6) } },
    { "INVALID_STATE_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(7) } },
    { "SYNTAX_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8) } },
    { "INVALID_MODIFICATION_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(9) } },
    { "QUOTA_EXCEEDED_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(10) } },
    { "TYPE_MISMATCH_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(11) } },
    { "PATH_EXISTS_ERR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(12) } },
};

const ClassInfo JSFileExceptionPrototype::s_info = { "FileExceptionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFileExceptionPrototype) };

void JSFileExceptionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFileExceptionPrototypeTableValues, *this);
}

const ClassInfo JSFileException::s_info = { "FileException", &Base::s_info, &JSFileExceptionTable, CREATE_METHOD_TABLE(JSFileException) };

JSFileException::JSFileException(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FileException>&& impl)
    : JSDOMWrapper<FileException>(structure, globalObject, WTFMove(impl))
{
}

void JSFileException::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFileException::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFileExceptionPrototype::create(vm, globalObject, JSFileExceptionPrototype::createStructure(vm, globalObject, globalObject->errorPrototype()));
}

JSObject* JSFileException::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFileException>(vm, globalObject);
}

void JSFileException::destroy(JSC::JSCell* cell)
{
    JSFileException* thisObject = static_cast<JSFileException*>(cell);
    thisObject->JSFileException::~JSFileException();
}

template<> inline JSFileException* BindingCaller<JSFileException>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFileException*>(JSValue::decode(thisValue));
}

template<> inline JSFileException* BindingCaller<JSFileException>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFileException*>(state.thisValue());
}

static inline JSValue jsFileExceptionCodeGetter(ExecState&, JSFileException&, ThrowScope& throwScope);

EncodedJSValue jsFileExceptionCode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileException>::attribute<jsFileExceptionCodeGetter>(state, thisValue, "code");
}

static inline JSValue jsFileExceptionCodeGetter(ExecState& state, JSFileException& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.code());
    return result;
}

static inline JSValue jsFileExceptionNameGetter(ExecState&, JSFileException&, ThrowScope& throwScope);

EncodedJSValue jsFileExceptionName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileException>::attribute<jsFileExceptionNameGetter>(state, thisValue, "name");
}

static inline JSValue jsFileExceptionNameGetter(ExecState& state, JSFileException& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsFileExceptionMessageGetter(ExecState&, JSFileException&, ThrowScope& throwScope);

EncodedJSValue jsFileExceptionMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileException>::attribute<jsFileExceptionMessageGetter>(state, thisValue, "message");
}

static inline JSValue jsFileExceptionMessageGetter(ExecState& state, JSFileException& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.message());
    return result;
}

bool setJSFileExceptionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFileExceptionPrototype* domObject = jsDynamicDowncast<JSFileExceptionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline JSC::EncodedJSValue jsFileExceptionPrototypeFunctionToStringCaller(JSC::ExecState*, JSFileException*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileExceptionPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSFileException>::callOperation<jsFileExceptionPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsFileExceptionPrototypeFunctionToStringCaller(JSC::ExecState* state, JSFileException* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.toString()));
}

bool JSFileExceptionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSFileExceptionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFileException = static_cast<JSFileException*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFileException->wrapped(), jsFileException);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FileException>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to FileException.
    static_assert(!__is_polymorphic(FileException), "FileException is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<FileException>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FileException& impl)
{
    return wrap(state, globalObject, impl);
}

FileException* JSFileException::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFileException*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
