/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_TIMING)

#include "JSPerformanceEntry.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsPerformanceEntryName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsPerformanceEntryEntryType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsPerformanceEntryStartTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsPerformanceEntryDuration(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsPerformanceEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSPerformanceEntryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSPerformanceEntryPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSPerformanceEntryPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSPerformanceEntryPrototype* ptr = new (NotNull, JSC::allocateCell<JSPerformanceEntryPrototype>(vm.heap)) JSPerformanceEntryPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSPerformanceEntryPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSPerformanceEntryConstructor = JSDOMConstructorNotConstructable<JSPerformanceEntry>;

template<> JSValue JSPerformanceEntryConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSPerformanceEntryConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSPerformanceEntry::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("PerformanceEntry"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSPerformanceEntryConstructor::s_info = { "PerformanceEntry", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPerformanceEntryConstructor) };

/* Hash table for prototype */

static const HashTableValue JSPerformanceEntryPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSPerformanceEntryConstructor) } },
    { "name", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "entryType", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryEntryType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "startTime", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryStartTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "duration", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsPerformanceEntryDuration), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSPerformanceEntryPrototype::s_info = { "PerformanceEntryPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPerformanceEntryPrototype) };

void JSPerformanceEntryPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSPerformanceEntryPrototypeTableValues, *this);
}

const ClassInfo JSPerformanceEntry::s_info = { "PerformanceEntry", &Base::s_info, 0, CREATE_METHOD_TABLE(JSPerformanceEntry) };

JSPerformanceEntry::JSPerformanceEntry(Structure* structure, JSDOMGlobalObject& globalObject, Ref<PerformanceEntry>&& impl)
    : JSDOMWrapper<PerformanceEntry>(structure, globalObject, WTFMove(impl))
{
}

void JSPerformanceEntry::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSPerformanceEntry::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSPerformanceEntryPrototype::create(vm, globalObject, JSPerformanceEntryPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSPerformanceEntry::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSPerformanceEntry>(vm, globalObject);
}

void JSPerformanceEntry::destroy(JSC::JSCell* cell)
{
    JSPerformanceEntry* thisObject = static_cast<JSPerformanceEntry*>(cell);
    thisObject->JSPerformanceEntry::~JSPerformanceEntry();
}

template<> inline JSPerformanceEntry* BindingCaller<JSPerformanceEntry>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSPerformanceEntry*>(JSValue::decode(thisValue));
}

static inline JSValue jsPerformanceEntryNameGetter(ExecState&, JSPerformanceEntry&, ThrowScope& throwScope);

EncodedJSValue jsPerformanceEntryName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSPerformanceEntry>::attribute<jsPerformanceEntryNameGetter>(state, thisValue, "name");
}

static inline JSValue jsPerformanceEntryNameGetter(ExecState& state, JSPerformanceEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsPerformanceEntryEntryTypeGetter(ExecState&, JSPerformanceEntry&, ThrowScope& throwScope);

EncodedJSValue jsPerformanceEntryEntryType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSPerformanceEntry>::attribute<jsPerformanceEntryEntryTypeGetter>(state, thisValue, "entryType");
}

static inline JSValue jsPerformanceEntryEntryTypeGetter(ExecState& state, JSPerformanceEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.entryType());
    return result;
}

static inline JSValue jsPerformanceEntryStartTimeGetter(ExecState&, JSPerformanceEntry&, ThrowScope& throwScope);

EncodedJSValue jsPerformanceEntryStartTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSPerformanceEntry>::attribute<jsPerformanceEntryStartTimeGetter>(state, thisValue, "startTime");
}

static inline JSValue jsPerformanceEntryStartTimeGetter(ExecState& state, JSPerformanceEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.startTime());
    return result;
}

static inline JSValue jsPerformanceEntryDurationGetter(ExecState&, JSPerformanceEntry&, ThrowScope& throwScope);

EncodedJSValue jsPerformanceEntryDuration(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSPerformanceEntry>::attribute<jsPerformanceEntryDurationGetter>(state, thisValue, "duration");
}

static inline JSValue jsPerformanceEntryDurationGetter(ExecState& state, JSPerformanceEntry& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.duration());
    return result;
}

EncodedJSValue jsPerformanceEntryConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSPerformanceEntryPrototype* domObject = jsDynamicDowncast<JSPerformanceEntryPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSPerformanceEntry::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSPerformanceEntryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSPerformanceEntryPrototype* domObject = jsDynamicDowncast<JSPerformanceEntryPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSPerformanceEntry::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSPerformanceEntryConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSPerformanceEntryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSPerformanceEntryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsPerformanceEntry = static_cast<JSPerformanceEntry*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsPerformanceEntry->wrapped(), jsPerformanceEntry);
}

PerformanceEntry* JSPerformanceEntry::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSPerformanceEntry*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_TIMING)
