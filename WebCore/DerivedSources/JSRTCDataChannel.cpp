/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_RTC)

#include "JSRTCDataChannel.h"

#include "EventNames.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCDataChannelPrototypeFunctionSend(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCDataChannelPrototypeFunctionClose(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRTCDataChannelLabel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelOrdered(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelMaxRetransmitTime(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelMaxRetransmits(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelProtocol(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelNegotiated(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelReadyState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelBufferedAmount(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDataChannelBinaryType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCDataChannelBinaryType(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCDataChannelOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCDataChannelOnopen(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCDataChannelOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCDataChannelOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCDataChannelOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCDataChannelOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsRTCDataChannelOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRTCDataChannelOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
bool setJSRTCDataChannelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCDataChannelPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRTCDataChannelPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCDataChannelPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCDataChannelPrototype>(vm.heap)) JSRTCDataChannelPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCDataChannelPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSRTCDataChannelPrototypeTableValues[] =
{
    { "label", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelLabel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "ordered", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelOrdered), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "maxRetransmitTime", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelMaxRetransmitTime), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "maxRetransmits", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelMaxRetransmits), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "protocol", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelProtocol), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "negotiated", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelNegotiated), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "id", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "readyState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelReadyState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "bufferedAmount", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelBufferedAmount), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "binaryType", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelBinaryType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDataChannelBinaryType) } },
    { "onopen", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelOnopen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDataChannelOnopen) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDataChannelOnerror) } },
    { "onclose", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelOnclose), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDataChannelOnclose) } },
    { "onmessage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDataChannelOnmessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDataChannelOnmessage) } },
    { "send", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDataChannelPrototypeFunctionSend), (intptr_t) (1) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDataChannelPrototypeFunctionClose), (intptr_t) (0) } },
};

const ClassInfo JSRTCDataChannelPrototype::s_info = { "RTCDataChannelPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCDataChannelPrototype) };

void JSRTCDataChannelPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCDataChannelPrototypeTableValues, *this);
}

const ClassInfo JSRTCDataChannel::s_info = { "RTCDataChannel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCDataChannel) };

JSRTCDataChannel::JSRTCDataChannel(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCDataChannel>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSRTCDataChannel::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRTCDataChannel::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCDataChannelPrototype::create(vm, globalObject, JSRTCDataChannelPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSRTCDataChannel::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCDataChannel>(vm, globalObject);
}

template<> inline JSRTCDataChannel* BindingCaller<JSRTCDataChannel>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRTCDataChannel*>(JSValue::decode(thisValue));
}

template<> inline JSRTCDataChannel* BindingCaller<JSRTCDataChannel>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSRTCDataChannel*>(state.thisValue());
}

static inline JSValue jsRTCDataChannelLabelGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelLabel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelLabelGetter>(state, thisValue, "label");
}

static inline JSValue jsRTCDataChannelLabelGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.label());
    return result;
}

static inline JSValue jsRTCDataChannelOrderedGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelOrdered(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelOrderedGetter>(state, thisValue, "ordered");
}

static inline JSValue jsRTCDataChannelOrderedGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.ordered());
    return result;
}

static inline JSValue jsRTCDataChannelMaxRetransmitTimeGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelMaxRetransmitTime(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelMaxRetransmitTimeGetter>(state, thisValue, "maxRetransmitTime");
}

static inline JSValue jsRTCDataChannelMaxRetransmitTimeGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.maxRetransmitTime());
    return result;
}

static inline JSValue jsRTCDataChannelMaxRetransmitsGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelMaxRetransmits(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelMaxRetransmitsGetter>(state, thisValue, "maxRetransmits");
}

static inline JSValue jsRTCDataChannelMaxRetransmitsGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.maxRetransmits());
    return result;
}

static inline JSValue jsRTCDataChannelProtocolGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelProtocol(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelProtocolGetter>(state, thisValue, "protocol");
}

static inline JSValue jsRTCDataChannelProtocolGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.protocol());
    return result;
}

static inline JSValue jsRTCDataChannelNegotiatedGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelNegotiated(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelNegotiatedGetter>(state, thisValue, "negotiated");
}

static inline JSValue jsRTCDataChannelNegotiatedGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.negotiated());
    return result;
}

static inline JSValue jsRTCDataChannelIdGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelIdGetter>(state, thisValue, "id");
}

static inline JSValue jsRTCDataChannelIdGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.id());
    return result;
}

static inline JSValue jsRTCDataChannelReadyStateGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelReadyState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelReadyStateGetter>(state, thisValue, "readyState");
}

static inline JSValue jsRTCDataChannelReadyStateGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.readyState());
    return result;
}

static inline JSValue jsRTCDataChannelBufferedAmountGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelBufferedAmount(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelBufferedAmountGetter>(state, thisValue, "bufferedAmount");
}

static inline JSValue jsRTCDataChannelBufferedAmountGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.bufferedAmount());
    return result;
}

static inline JSValue jsRTCDataChannelBinaryTypeGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelBinaryType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelBinaryTypeGetter>(state, thisValue, "binaryType");
}

static inline JSValue jsRTCDataChannelBinaryTypeGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.binaryType());
    return result;
}

static inline JSValue jsRTCDataChannelOnopenGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelOnopen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelOnopenGetter>(state, thisValue, "onopen");
}

static inline JSValue jsRTCDataChannelOnopenGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().openEvent);
}

static inline JSValue jsRTCDataChannelOnerrorGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsRTCDataChannelOnerrorGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsRTCDataChannelOncloseGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelOnclose(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelOncloseGetter>(state, thisValue, "onclose");
}

static inline JSValue jsRTCDataChannelOncloseGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().closeEvent);
}

static inline JSValue jsRTCDataChannelOnmessageGetter(ExecState&, JSRTCDataChannel&, ThrowScope& throwScope);

EncodedJSValue jsRTCDataChannelOnmessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRTCDataChannel>::attribute<jsRTCDataChannelOnmessageGetter>(state, thisValue, "onmessage");
}

static inline JSValue jsRTCDataChannelOnmessageGetter(ExecState& state, JSRTCDataChannel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().messageEvent);
}

bool setJSRTCDataChannelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRTCDataChannelPrototype* domObject = jsDynamicDowncast<JSRTCDataChannelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSRTCDataChannelBinaryTypeFunction(ExecState&, JSRTCDataChannel&, JSValue, ThrowScope&);

bool setJSRTCDataChannelBinaryType(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCDataChannel>::setAttribute<setJSRTCDataChannelBinaryTypeFunction>(state, thisValue, encodedValue, "binaryType");
}

static inline bool setJSRTCDataChannelBinaryTypeFunction(ExecState& state, JSRTCDataChannel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setBinaryType(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSRTCDataChannelOnopenFunction(ExecState&, JSRTCDataChannel&, JSValue, ThrowScope&);

bool setJSRTCDataChannelOnopen(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCDataChannel>::setAttribute<setJSRTCDataChannelOnopenFunction>(state, thisValue, encodedValue, "onopen");
}

static inline bool setJSRTCDataChannelOnopenFunction(ExecState& state, JSRTCDataChannel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().openEvent, value);
    return true;
}


static inline bool setJSRTCDataChannelOnerrorFunction(ExecState&, JSRTCDataChannel&, JSValue, ThrowScope&);

bool setJSRTCDataChannelOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCDataChannel>::setAttribute<setJSRTCDataChannelOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSRTCDataChannelOnerrorFunction(ExecState& state, JSRTCDataChannel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSRTCDataChannelOncloseFunction(ExecState&, JSRTCDataChannel&, JSValue, ThrowScope&);

bool setJSRTCDataChannelOnclose(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCDataChannel>::setAttribute<setJSRTCDataChannelOncloseFunction>(state, thisValue, encodedValue, "onclose");
}

static inline bool setJSRTCDataChannelOncloseFunction(ExecState& state, JSRTCDataChannel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().closeEvent, value);
    return true;
}


static inline bool setJSRTCDataChannelOnmessageFunction(ExecState&, JSRTCDataChannel&, JSValue, ThrowScope&);

bool setJSRTCDataChannelOnmessage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSRTCDataChannel>::setAttribute<setJSRTCDataChannelOnmessageFunction>(state, thisValue, encodedValue, "onmessage");
}

static inline bool setJSRTCDataChannelOnmessageFunction(ExecState& state, JSRTCDataChannel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().messageEvent, value);
    return true;
}


static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend1Caller(JSC::ExecState*, JSRTCDataChannel*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCDataChannelPrototypeFunctionSend1(ExecState* state)
{
    return BindingCaller<JSRTCDataChannel>::callOperation<jsRTCDataChannelPrototypeFunctionSend1Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend1Caller(JSC::ExecState* state, JSRTCDataChannel* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<ArrayBuffer>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "RTCDataChannel", "send", "ArrayBuffer"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(*data));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend2Caller(JSC::ExecState*, JSRTCDataChannel*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCDataChannelPrototypeFunctionSend2(ExecState* state)
{
    return BindingCaller<JSRTCDataChannel>::callOperation<jsRTCDataChannelPrototypeFunctionSend2Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend2Caller(JSC::ExecState* state, JSRTCDataChannel* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<ArrayBufferView>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "RTCDataChannel", "send", "ArrayBufferView"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(data.releaseNonNull()));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend3Caller(JSC::ExecState*, JSRTCDataChannel*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCDataChannelPrototypeFunctionSend3(ExecState* state)
{
    return BindingCaller<JSRTCDataChannel>::callOperation<jsRTCDataChannelPrototypeFunctionSend3Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend3Caller(JSC::ExecState* state, JSRTCDataChannel* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLInterface<Blob>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "data", "RTCDataChannel", "send", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(*data));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend4Caller(JSC::ExecState*, JSRTCDataChannel*, JSC::ThrowScope&);

static inline EncodedJSValue jsRTCDataChannelPrototypeFunctionSend4(ExecState* state)
{
    return BindingCaller<JSRTCDataChannel>::callOperation<jsRTCDataChannelPrototypeFunctionSend4Caller>(state, "send");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionSend4Caller(JSC::ExecState* state, JSRTCDataChannel* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.send(WTFMove(data)));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDataChannelPrototypeFunctionSend(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSArrayBuffer::info()))
            return jsRTCDataChannelPrototypeFunctionSend1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSArrayBufferView::info()))
            return jsRTCDataChannelPrototypeFunctionSend2(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSBlob::info()))
            return jsRTCDataChannelPrototypeFunctionSend3(state);
        return jsRTCDataChannelPrototypeFunctionSend4(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionCloseCaller(JSC::ExecState*, JSRTCDataChannel*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRTCDataChannelPrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSRTCDataChannel>::callOperation<jsRTCDataChannelPrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsRTCDataChannelPrototypeFunctionCloseCaller(JSC::ExecState* state, JSRTCDataChannel* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

void JSRTCDataChannel::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSRTCDataChannel*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCDataChannel@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14RTCDataChannelE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<RTCDataChannel>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCDataChannel@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore14RTCDataChannelE[2];
#if COMPILER(CLANG)
    // If this fails RTCDataChannel does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(RTCDataChannel), "RTCDataChannel is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCDataChannel has subclasses. If RTCDataChannel has subclasses that get passed
    // to toJS() we currently require RTCDataChannel you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<RTCDataChannel>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, RTCDataChannel& impl)
{
    return wrap(state, globalObject, impl);
}

RTCDataChannel* JSRTCDataChannel::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSRTCDataChannel*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEB_RTC)
