/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDeprecatedCSSOMRGBColor.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDeprecatedCSSOMPrimitiveValue.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsDeprecatedCSSOMRGBColorRed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMRGBColorGreen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMRGBColorBlue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMRGBColorAlpha(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDeprecatedCSSOMRGBColorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDeprecatedCSSOMRGBColorConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDeprecatedCSSOMRGBColorPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDeprecatedCSSOMRGBColorPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDeprecatedCSSOMRGBColorPrototype* ptr = new (NotNull, JSC::allocateCell<JSDeprecatedCSSOMRGBColorPrototype>(vm.heap)) JSDeprecatedCSSOMRGBColorPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDeprecatedCSSOMRGBColorPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDeprecatedCSSOMRGBColorConstructor = JSDOMConstructorNotConstructable<JSDeprecatedCSSOMRGBColor>;

template<> JSValue JSDeprecatedCSSOMRGBColorConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDeprecatedCSSOMRGBColorConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDeprecatedCSSOMRGBColor::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("RGBColor"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSDeprecatedCSSOMRGBColorConstructor::s_info = { "RGBColor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMRGBColorConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDeprecatedCSSOMRGBColorPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMRGBColorConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDeprecatedCSSOMRGBColorConstructor) } },
    { "red", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMRGBColorRed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "green", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMRGBColorGreen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "blue", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMRGBColorBlue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "alpha", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDeprecatedCSSOMRGBColorAlpha), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSDeprecatedCSSOMRGBColorPrototype::s_info = { "RGBColorPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMRGBColorPrototype) };

void JSDeprecatedCSSOMRGBColorPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDeprecatedCSSOMRGBColorPrototypeTableValues, *this);
}

const ClassInfo JSDeprecatedCSSOMRGBColor::s_info = { "RGBColor", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDeprecatedCSSOMRGBColor) };

JSDeprecatedCSSOMRGBColor::JSDeprecatedCSSOMRGBColor(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DeprecatedCSSOMRGBColor>&& impl)
    : JSDOMWrapper<DeprecatedCSSOMRGBColor>(structure, globalObject, WTFMove(impl))
{
}

void JSDeprecatedCSSOMRGBColor::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDeprecatedCSSOMRGBColor::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDeprecatedCSSOMRGBColorPrototype::create(vm, globalObject, JSDeprecatedCSSOMRGBColorPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDeprecatedCSSOMRGBColor::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDeprecatedCSSOMRGBColor>(vm, globalObject);
}

void JSDeprecatedCSSOMRGBColor::destroy(JSC::JSCell* cell)
{
    JSDeprecatedCSSOMRGBColor* thisObject = static_cast<JSDeprecatedCSSOMRGBColor*>(cell);
    thisObject->JSDeprecatedCSSOMRGBColor::~JSDeprecatedCSSOMRGBColor();
}

template<> inline JSDeprecatedCSSOMRGBColor* BindingCaller<JSDeprecatedCSSOMRGBColor>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDeprecatedCSSOMRGBColor*>(JSValue::decode(thisValue));
}

static inline JSValue jsDeprecatedCSSOMRGBColorRedGetter(ExecState&, JSDeprecatedCSSOMRGBColor&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMRGBColorRed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMRGBColor>::attribute<jsDeprecatedCSSOMRGBColorRedGetter>(state, thisValue, "red");
}

static inline JSValue jsDeprecatedCSSOMRGBColorRedGetter(ExecState& state, JSDeprecatedCSSOMRGBColor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DeprecatedCSSOMPrimitiveValue>>(state, *thisObject.globalObject(), impl.red());
    return result;
}

static inline JSValue jsDeprecatedCSSOMRGBColorGreenGetter(ExecState&, JSDeprecatedCSSOMRGBColor&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMRGBColorGreen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMRGBColor>::attribute<jsDeprecatedCSSOMRGBColorGreenGetter>(state, thisValue, "green");
}

static inline JSValue jsDeprecatedCSSOMRGBColorGreenGetter(ExecState& state, JSDeprecatedCSSOMRGBColor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DeprecatedCSSOMPrimitiveValue>>(state, *thisObject.globalObject(), impl.green());
    return result;
}

static inline JSValue jsDeprecatedCSSOMRGBColorBlueGetter(ExecState&, JSDeprecatedCSSOMRGBColor&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMRGBColorBlue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMRGBColor>::attribute<jsDeprecatedCSSOMRGBColorBlueGetter>(state, thisValue, "blue");
}

static inline JSValue jsDeprecatedCSSOMRGBColorBlueGetter(ExecState& state, JSDeprecatedCSSOMRGBColor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DeprecatedCSSOMPrimitiveValue>>(state, *thisObject.globalObject(), impl.blue());
    return result;
}

static inline JSValue jsDeprecatedCSSOMRGBColorAlphaGetter(ExecState&, JSDeprecatedCSSOMRGBColor&, ThrowScope& throwScope);

EncodedJSValue jsDeprecatedCSSOMRGBColorAlpha(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDeprecatedCSSOMRGBColor>::attribute<jsDeprecatedCSSOMRGBColorAlphaGetter>(state, thisValue, "alpha");
}

static inline JSValue jsDeprecatedCSSOMRGBColorAlphaGetter(ExecState& state, JSDeprecatedCSSOMRGBColor& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DeprecatedCSSOMPrimitiveValue>>(state, *thisObject.globalObject(), impl.alpha());
    return result;
}

EncodedJSValue jsDeprecatedCSSOMRGBColorConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDeprecatedCSSOMRGBColorPrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMRGBColorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDeprecatedCSSOMRGBColor::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDeprecatedCSSOMRGBColorConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDeprecatedCSSOMRGBColorPrototype* domObject = jsDynamicDowncast<JSDeprecatedCSSOMRGBColorPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDeprecatedCSSOMRGBColor::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDeprecatedCSSOMRGBColorConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSDeprecatedCSSOMRGBColorOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDeprecatedCSSOMRGBColorOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDeprecatedCSSOMRGBColor = static_cast<JSDeprecatedCSSOMRGBColor*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDeprecatedCSSOMRGBColor->wrapped(), jsDeprecatedCSSOMRGBColor);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DeprecatedCSSOMRGBColor>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DeprecatedCSSOMRGBColor.
    static_assert(!__is_polymorphic(DeprecatedCSSOMRGBColor), "DeprecatedCSSOMRGBColor is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DeprecatedCSSOMRGBColor>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DeprecatedCSSOMRGBColor& impl)
{
    return wrap(state, globalObject, impl);
}

DeprecatedCSSOMRGBColor* JSDeprecatedCSSOMRGBColor::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDeprecatedCSSOMRGBColor*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
