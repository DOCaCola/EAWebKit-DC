/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#ifdef SKIP_STATIC_CONSTRUCTORS_ON_GCC
#define DOM_MathML_NAMES_HIDE_GLOBALS 1
#else
#define QNAME_DEFAULT_CONSTRUCTOR 1
#endif

#include "MathMLNames.h"

#include <wtf/StaticConstructors.h>
namespace WebCore {

namespace MathMLNames {

using namespace WebCore;

WEBCORE_EXPORT DEFINE_GLOBAL(AtomicString, mathmlNamespaceURI)

#if COMPILER(MSVC)
#pragma warning(push)
#pragma warning(disable: 4307)
#endif

static StringImpl::StaticStringImpl accentData("accent");
static StringImpl::StaticStringImpl accentunderData("accentunder");
static StringImpl::StaticStringImpl actiontypeData("actiontype");
static StringImpl::StaticStringImpl alttextData("alttext");
static StringImpl::StaticStringImpl annotationData("annotation");
static StringImpl::StaticStringImpl annotation_xmlData("annotation-xml");
static StringImpl::StaticStringImpl backgroundData("background");
static StringImpl::StaticStringImpl closeData("close");
static StringImpl::StaticStringImpl colorData("color");
static StringImpl::StaticStringImpl columnspanData("columnspan");
static StringImpl::StaticStringImpl definitionURLData("definitionURL");
static StringImpl::StaticStringImpl denomalignData("denomalign");
static StringImpl::StaticStringImpl depthData("depth");
static StringImpl::StaticStringImpl dirData("dir");
static StringImpl::StaticStringImpl displayData("display");
static StringImpl::StaticStringImpl displaystyleData("displaystyle");
static StringImpl::StaticStringImpl encodingData("encoding");
static StringImpl::StaticStringImpl fenceData("fence");
static StringImpl::StaticStringImpl fontfamilyData("fontfamily");
static StringImpl::StaticStringImpl fontsizeData("fontsize");
static StringImpl::StaticStringImpl fontstyleData("fontstyle");
static StringImpl::StaticStringImpl fontweightData("fontweight");
static StringImpl::StaticStringImpl formData("form");
static StringImpl::StaticStringImpl heightData("height");
static StringImpl::StaticStringImpl hrefData("href");
static StringImpl::StaticStringImpl largeopData("largeop");
static StringImpl::StaticStringImpl linethicknessData("linethickness");
static StringImpl::StaticStringImpl lspaceData("lspace");
static StringImpl::StaticStringImpl mactionData("maction");
static StringImpl::StaticStringImpl maligngroupData("maligngroup");
static StringImpl::StaticStringImpl malignmarkData("malignmark");
static StringImpl::StaticStringImpl mathData("math");
static StringImpl::StaticStringImpl mathbackgroundData("mathbackground");
static StringImpl::StaticStringImpl mathcolorData("mathcolor");
static StringImpl::StaticStringImpl mathsizeData("mathsize");
static StringImpl::StaticStringImpl mathvariantData("mathvariant");
static StringImpl::StaticStringImpl maxsizeData("maxsize");
static StringImpl::StaticStringImpl mencloseData("menclose");
static StringImpl::StaticStringImpl merrorData("merror");
static StringImpl::StaticStringImpl mfencedData("mfenced");
static StringImpl::StaticStringImpl mfracData("mfrac");
static StringImpl::StaticStringImpl mglyphData("mglyph");
static StringImpl::StaticStringImpl miData("mi");
static StringImpl::StaticStringImpl minsizeData("minsize");
static StringImpl::StaticStringImpl mlabeledtrData("mlabeledtr");
static StringImpl::StaticStringImpl mlongdivData("mlongdiv");
static StringImpl::StaticStringImpl mmultiscriptsData("mmultiscripts");
static StringImpl::StaticStringImpl mnData("mn");
static StringImpl::StaticStringImpl moData("mo");
static StringImpl::StaticStringImpl movablelimitsData("movablelimits");
static StringImpl::StaticStringImpl moverData("mover");
static StringImpl::StaticStringImpl mpaddedData("mpadded");
static StringImpl::StaticStringImpl mphantomData("mphantom");
static StringImpl::StaticStringImpl mprescriptsData("mprescripts");
static StringImpl::StaticStringImpl mrootData("mroot");
static StringImpl::StaticStringImpl mrowData("mrow");
static StringImpl::StaticStringImpl msData("ms");
static StringImpl::StaticStringImpl mscarriesData("mscarries");
static StringImpl::StaticStringImpl mscarryData("mscarry");
static StringImpl::StaticStringImpl msgroupData("msgroup");
static StringImpl::StaticStringImpl mslineData("msline");
static StringImpl::StaticStringImpl mspaceData("mspace");
static StringImpl::StaticStringImpl msqrtData("msqrt");
static StringImpl::StaticStringImpl msrowData("msrow");
static StringImpl::StaticStringImpl mstackData("mstack");
static StringImpl::StaticStringImpl mstyleData("mstyle");
static StringImpl::StaticStringImpl msubData("msub");
static StringImpl::StaticStringImpl msubsupData("msubsup");
static StringImpl::StaticStringImpl msupData("msup");
static StringImpl::StaticStringImpl mtableData("mtable");
static StringImpl::StaticStringImpl mtdData("mtd");
static StringImpl::StaticStringImpl mtextData("mtext");
static StringImpl::StaticStringImpl mtrData("mtr");
static StringImpl::StaticStringImpl munderData("munder");
static StringImpl::StaticStringImpl munderoverData("munderover");
static StringImpl::StaticStringImpl noneData("none");
static StringImpl::StaticStringImpl notationData("notation");
static StringImpl::StaticStringImpl numalignData("numalign");
static StringImpl::StaticStringImpl openData("open");
static StringImpl::StaticStringImpl rowspanData("rowspan");
static StringImpl::StaticStringImpl rspaceData("rspace");
static StringImpl::StaticStringImpl selectionData("selection");
static StringImpl::StaticStringImpl semanticsData("semantics");
static StringImpl::StaticStringImpl separatorData("separator");
static StringImpl::StaticStringImpl separatorsData("separators");
static StringImpl::StaticStringImpl srcData("src");
static StringImpl::StaticStringImpl stretchyData("stretchy");
static StringImpl::StaticStringImpl subscriptshiftData("subscriptshift");
static StringImpl::StaticStringImpl superscriptshiftData("superscriptshift");
static StringImpl::StaticStringImpl symmetricData("symmetric");
static StringImpl::StaticStringImpl voffsetData("voffset");
static StringImpl::StaticStringImpl widthData("width");

#if COMPILER(MSVC)
#pragma warning(pop)
#endif

// Tags
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, annotationTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, annotation_xmlTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mactionTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, maligngroupTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, malignmarkTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mathTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mencloseTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, merrorTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mfencedTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mfracTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mglyphTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, miTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mlabeledtrTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mlongdivTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mmultiscriptsTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mnTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, moTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, moverTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mpaddedTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mphantomTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mprescriptsTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mrootTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mrowTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mscarriesTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mscarryTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msgroupTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mslineTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mspaceTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msqrtTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msrowTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mstackTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mstyleTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msubTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msubsupTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, msupTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mtableTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mtdTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mtextTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, mtrTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, munderTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, munderoverTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, noneTag)
WEBCORE_EXPORT DEFINE_GLOBAL(MathMLQualifiedName, semanticsTag)


const WebCore::MathMLQualifiedName* const* getMathMLTags()
{
    static const WebCore::MathMLQualifiedName* const MathMLTags[] = {
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&annotationTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&annotation_xmlTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mactionTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&maligngroupTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&malignmarkTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mathTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mencloseTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&merrorTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mfencedTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mfracTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mglyphTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&miTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mlabeledtrTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mlongdivTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mmultiscriptsTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mnTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&moTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&moverTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mpaddedTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mphantomTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mprescriptsTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mrootTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mrowTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mscarriesTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mscarryTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msgroupTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mslineTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mspaceTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msqrtTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msrowTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mstackTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mstyleTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msubTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msubsupTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&msupTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mtableTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mtdTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mtextTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&mtrTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&munderTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&munderoverTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&noneTag),
        reinterpret_cast<const WebCore::MathMLQualifiedName*>(&semanticsTag),
    };
    return MathMLTags;
}

// Attributes
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, accentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, accentunderAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, actiontypeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, alttextAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, backgroundAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, closeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, colorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, columnspanAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, definitionURLAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, denomalignAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, depthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, dirAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, displayAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, displaystyleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, encodingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fenceAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fontfamilyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fontsizeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fontstyleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fontweightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, formAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, heightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, hrefAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, largeopAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, linethicknessAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, lspaceAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mathbackgroundAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mathcolorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mathsizeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mathvariantAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, maxsizeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, minsizeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, movablelimitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, notationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, numalignAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, openAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rowspanAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rspaceAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, selectionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, separatorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, separatorsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, srcAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stretchyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, subscriptshiftAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, superscriptshiftAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, symmetricAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, voffsetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, widthAttr)


const WebCore::QualifiedName* const* getMathMLAttrs()
{
    static const WebCore::QualifiedName* const MathMLAttrs[] = {
        reinterpret_cast<const WebCore::QualifiedName*>(&accentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&accentunderAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&actiontypeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&alttextAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&backgroundAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&closeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&colorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&columnspanAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&definitionURLAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&denomalignAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&depthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&dirAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&displayAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&displaystyleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&encodingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fenceAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fontfamilyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fontsizeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fontstyleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fontweightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&formAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&heightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&hrefAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&largeopAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&linethicknessAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&lspaceAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mathbackgroundAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mathcolorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mathsizeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mathvariantAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&maxsizeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&minsizeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&movablelimitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&notationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&numalignAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&openAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rowspanAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rspaceAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&selectionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&separatorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&separatorsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&srcAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stretchyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&subscriptshiftAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&superscriptshiftAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&symmetricAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&voffsetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&widthAttr),
    };
    return MathMLAttrs;
}

void init()
{
    static bool initialized = false;
    if (initialized)
        return;
    initialized = true;

    // Use placement new to initialize the globals.

    AtomicString::init();
    AtomicString mathmlNS("http://www.w3.org/1998/Math/MathML", AtomicString::ConstructFromLiteral);

    // Namespace
    new (NotNull, (void*)&mathmlNamespaceURI) AtomicString(mathmlNS);

#ifndef NDEBUG
    reinterpret_cast<StringImpl*>(&accentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&accentunderData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&actiontypeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&alttextData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&annotationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&annotation_xmlData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&backgroundData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&closeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&colorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&columnspanData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&definitionURLData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&denomalignData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&depthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&dirData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&displayData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&displaystyleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&encodingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fenceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fontfamilyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fontsizeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fontstyleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fontweightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&formData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&heightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&hrefData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&largeopData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&linethicknessData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&lspaceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mactionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maligngroupData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&malignmarkData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathbackgroundData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathcolorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathsizeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathvariantData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maxsizeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mencloseData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&merrorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mfencedData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mfracData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mglyphData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&miData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&minsizeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mlabeledtrData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mlongdivData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mmultiscriptsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mnData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&moData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&movablelimitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&moverData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mpaddedData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mphantomData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mprescriptsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mrootData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mrowData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mscarriesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mscarryData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msgroupData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mslineData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mspaceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msqrtData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msrowData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mstackData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mstyleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msubData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msubsupData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&msupData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mtableData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mtdData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mtextData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mtrData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&munderData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&munderoverData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&noneData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&notationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&numalignData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&openData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rowspanData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rspaceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&selectionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&semanticsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&separatorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&separatorsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&srcData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stretchyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&subscriptshiftData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&superscriptshiftData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&symmetricData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&voffsetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&widthData)->assertHashIsCorrect();
#endif // NDEBUG


    struct TagsTableEntry {
        void* targetAddress;
        StringImpl& name;
    };

    static const TagsTableEntry tagsTable[] = {
        { (void*)&annotationTag, *reinterpret_cast<StringImpl*>(&annotationData) },
        { (void*)&annotation_xmlTag, *reinterpret_cast<StringImpl*>(&annotation_xmlData) },
        { (void*)&mactionTag, *reinterpret_cast<StringImpl*>(&mactionData) },
        { (void*)&maligngroupTag, *reinterpret_cast<StringImpl*>(&maligngroupData) },
        { (void*)&malignmarkTag, *reinterpret_cast<StringImpl*>(&malignmarkData) },
        { (void*)&mathTag, *reinterpret_cast<StringImpl*>(&mathData) },
        { (void*)&mencloseTag, *reinterpret_cast<StringImpl*>(&mencloseData) },
        { (void*)&merrorTag, *reinterpret_cast<StringImpl*>(&merrorData) },
        { (void*)&mfencedTag, *reinterpret_cast<StringImpl*>(&mfencedData) },
        { (void*)&mfracTag, *reinterpret_cast<StringImpl*>(&mfracData) },
        { (void*)&mglyphTag, *reinterpret_cast<StringImpl*>(&mglyphData) },
        { (void*)&miTag, *reinterpret_cast<StringImpl*>(&miData) },
        { (void*)&mlabeledtrTag, *reinterpret_cast<StringImpl*>(&mlabeledtrData) },
        { (void*)&mlongdivTag, *reinterpret_cast<StringImpl*>(&mlongdivData) },
        { (void*)&mmultiscriptsTag, *reinterpret_cast<StringImpl*>(&mmultiscriptsData) },
        { (void*)&mnTag, *reinterpret_cast<StringImpl*>(&mnData) },
        { (void*)&moTag, *reinterpret_cast<StringImpl*>(&moData) },
        { (void*)&moverTag, *reinterpret_cast<StringImpl*>(&moverData) },
        { (void*)&mpaddedTag, *reinterpret_cast<StringImpl*>(&mpaddedData) },
        { (void*)&mphantomTag, *reinterpret_cast<StringImpl*>(&mphantomData) },
        { (void*)&mprescriptsTag, *reinterpret_cast<StringImpl*>(&mprescriptsData) },
        { (void*)&mrootTag, *reinterpret_cast<StringImpl*>(&mrootData) },
        { (void*)&mrowTag, *reinterpret_cast<StringImpl*>(&mrowData) },
        { (void*)&msTag, *reinterpret_cast<StringImpl*>(&msData) },
        { (void*)&mscarriesTag, *reinterpret_cast<StringImpl*>(&mscarriesData) },
        { (void*)&mscarryTag, *reinterpret_cast<StringImpl*>(&mscarryData) },
        { (void*)&msgroupTag, *reinterpret_cast<StringImpl*>(&msgroupData) },
        { (void*)&mslineTag, *reinterpret_cast<StringImpl*>(&mslineData) },
        { (void*)&mspaceTag, *reinterpret_cast<StringImpl*>(&mspaceData) },
        { (void*)&msqrtTag, *reinterpret_cast<StringImpl*>(&msqrtData) },
        { (void*)&msrowTag, *reinterpret_cast<StringImpl*>(&msrowData) },
        { (void*)&mstackTag, *reinterpret_cast<StringImpl*>(&mstackData) },
        { (void*)&mstyleTag, *reinterpret_cast<StringImpl*>(&mstyleData) },
        { (void*)&msubTag, *reinterpret_cast<StringImpl*>(&msubData) },
        { (void*)&msubsupTag, *reinterpret_cast<StringImpl*>(&msubsupData) },
        { (void*)&msupTag, *reinterpret_cast<StringImpl*>(&msupData) },
        { (void*)&mtableTag, *reinterpret_cast<StringImpl*>(&mtableData) },
        { (void*)&mtdTag, *reinterpret_cast<StringImpl*>(&mtdData) },
        { (void*)&mtextTag, *reinterpret_cast<StringImpl*>(&mtextData) },
        { (void*)&mtrTag, *reinterpret_cast<StringImpl*>(&mtrData) },
        { (void*)&munderTag, *reinterpret_cast<StringImpl*>(&munderData) },
        { (void*)&munderoverTag, *reinterpret_cast<StringImpl*>(&munderoverData) },
        { (void*)&noneTag, *reinterpret_cast<StringImpl*>(&noneData) },
        { (void*)&semanticsTag, *reinterpret_cast<StringImpl*>(&semanticsData) },
    };

    for (unsigned i = 0; i < WTF_ARRAY_LENGTH(tagsTable); ++i)
        createQualifiedName(tagsTable[i].targetAddress, &tagsTable[i].name, mathmlNS);

    struct AttributesTableEntry {
        void* targetAddress;
        StringImpl& name;
    };

    static const AttributesTableEntry attributesTable[] = {
        { (void*)&accentAttr, *reinterpret_cast<StringImpl*>(&accentData) },
        { (void*)&accentunderAttr, *reinterpret_cast<StringImpl*>(&accentunderData) },
        { (void*)&actiontypeAttr, *reinterpret_cast<StringImpl*>(&actiontypeData) },
        { (void*)&alttextAttr, *reinterpret_cast<StringImpl*>(&alttextData) },
        { (void*)&backgroundAttr, *reinterpret_cast<StringImpl*>(&backgroundData) },
        { (void*)&closeAttr, *reinterpret_cast<StringImpl*>(&closeData) },
        { (void*)&colorAttr, *reinterpret_cast<StringImpl*>(&colorData) },
        { (void*)&columnspanAttr, *reinterpret_cast<StringImpl*>(&columnspanData) },
        { (void*)&definitionURLAttr, *reinterpret_cast<StringImpl*>(&definitionURLData) },
        { (void*)&denomalignAttr, *reinterpret_cast<StringImpl*>(&denomalignData) },
        { (void*)&depthAttr, *reinterpret_cast<StringImpl*>(&depthData) },
        { (void*)&dirAttr, *reinterpret_cast<StringImpl*>(&dirData) },
        { (void*)&displayAttr, *reinterpret_cast<StringImpl*>(&displayData) },
        { (void*)&displaystyleAttr, *reinterpret_cast<StringImpl*>(&displaystyleData) },
        { (void*)&encodingAttr, *reinterpret_cast<StringImpl*>(&encodingData) },
        { (void*)&fenceAttr, *reinterpret_cast<StringImpl*>(&fenceData) },
        { (void*)&fontfamilyAttr, *reinterpret_cast<StringImpl*>(&fontfamilyData) },
        { (void*)&fontsizeAttr, *reinterpret_cast<StringImpl*>(&fontsizeData) },
        { (void*)&fontstyleAttr, *reinterpret_cast<StringImpl*>(&fontstyleData) },
        { (void*)&fontweightAttr, *reinterpret_cast<StringImpl*>(&fontweightData) },
        { (void*)&formAttr, *reinterpret_cast<StringImpl*>(&formData) },
        { (void*)&heightAttr, *reinterpret_cast<StringImpl*>(&heightData) },
        { (void*)&hrefAttr, *reinterpret_cast<StringImpl*>(&hrefData) },
        { (void*)&largeopAttr, *reinterpret_cast<StringImpl*>(&largeopData) },
        { (void*)&linethicknessAttr, *reinterpret_cast<StringImpl*>(&linethicknessData) },
        { (void*)&lspaceAttr, *reinterpret_cast<StringImpl*>(&lspaceData) },
        { (void*)&mathbackgroundAttr, *reinterpret_cast<StringImpl*>(&mathbackgroundData) },
        { (void*)&mathcolorAttr, *reinterpret_cast<StringImpl*>(&mathcolorData) },
        { (void*)&mathsizeAttr, *reinterpret_cast<StringImpl*>(&mathsizeData) },
        { (void*)&mathvariantAttr, *reinterpret_cast<StringImpl*>(&mathvariantData) },
        { (void*)&maxsizeAttr, *reinterpret_cast<StringImpl*>(&maxsizeData) },
        { (void*)&minsizeAttr, *reinterpret_cast<StringImpl*>(&minsizeData) },
        { (void*)&movablelimitsAttr, *reinterpret_cast<StringImpl*>(&movablelimitsData) },
        { (void*)&notationAttr, *reinterpret_cast<StringImpl*>(&notationData) },
        { (void*)&numalignAttr, *reinterpret_cast<StringImpl*>(&numalignData) },
        { (void*)&openAttr, *reinterpret_cast<StringImpl*>(&openData) },
        { (void*)&rowspanAttr, *reinterpret_cast<StringImpl*>(&rowspanData) },
        { (void*)&rspaceAttr, *reinterpret_cast<StringImpl*>(&rspaceData) },
        { (void*)&selectionAttr, *reinterpret_cast<StringImpl*>(&selectionData) },
        { (void*)&separatorAttr, *reinterpret_cast<StringImpl*>(&separatorData) },
        { (void*)&separatorsAttr, *reinterpret_cast<StringImpl*>(&separatorsData) },
        { (void*)&srcAttr, *reinterpret_cast<StringImpl*>(&srcData) },
        { (void*)&stretchyAttr, *reinterpret_cast<StringImpl*>(&stretchyData) },
        { (void*)&subscriptshiftAttr, *reinterpret_cast<StringImpl*>(&subscriptshiftData) },
        { (void*)&superscriptshiftAttr, *reinterpret_cast<StringImpl*>(&superscriptshiftData) },
        { (void*)&symmetricAttr, *reinterpret_cast<StringImpl*>(&symmetricData) },
        { (void*)&voffsetAttr, *reinterpret_cast<StringImpl*>(&voffsetData) },
        { (void*)&widthAttr, *reinterpret_cast<StringImpl*>(&widthData) },
    };

    for (unsigned i = 0; i < WTF_ARRAY_LENGTH(attributesTable); ++i)
        createQualifiedName(attributesTable[i].targetAddress, &attributesTable[i].name);
}

} }

