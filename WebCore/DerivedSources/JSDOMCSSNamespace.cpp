/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMCSSNamespace.h"

#include "Document.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDOMCSSNamespaceConstructorFunctionSupports(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDOMCSSNamespaceConstructorFunctionEscape(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDOMCSSNamespaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDOMCSSNamespaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDOMCSSNamespacePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDOMCSSNamespacePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDOMCSSNamespacePrototype* ptr = new (NotNull, JSC::allocateCell<JSDOMCSSNamespacePrototype>(vm.heap)) JSDOMCSSNamespacePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDOMCSSNamespacePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSDOMCSSNamespaceConstructor = JSDOMConstructorNotConstructable<JSDOMCSSNamespace>;

/* Hash table for constructor */

static const HashTableValue JSDOMCSSNamespaceConstructorTableValues[] =
{
    { "supports", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMCSSNamespaceConstructorFunctionSupports), (intptr_t) (1) } },
    { "escape", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDOMCSSNamespaceConstructorFunctionEscape), (intptr_t) (1) } },
};

template<> JSValue JSDOMCSSNamespaceConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSDOMCSSNamespaceConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSDOMCSSNamespace::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("CSS"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSDOMCSSNamespaceConstructorTableValues, *this);
}

template<> const ClassInfo JSDOMCSSNamespaceConstructor::s_info = { "CSS", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMCSSNamespaceConstructor) };

/* Hash table for prototype */

static const HashTableValue JSDOMCSSNamespacePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMCSSNamespaceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSDOMCSSNamespaceConstructor) } },
};

const ClassInfo JSDOMCSSNamespacePrototype::s_info = { "CSSPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMCSSNamespacePrototype) };

void JSDOMCSSNamespacePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDOMCSSNamespacePrototypeTableValues, *this);
}

const ClassInfo JSDOMCSSNamespace::s_info = { "CSS", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDOMCSSNamespace) };

JSDOMCSSNamespace::JSDOMCSSNamespace(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DOMCSSNamespace>&& impl)
    : JSDOMWrapper<DOMCSSNamespace>(structure, globalObject, WTFMove(impl))
{
}

void JSDOMCSSNamespace::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDOMCSSNamespace::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDOMCSSNamespacePrototype::create(vm, globalObject, JSDOMCSSNamespacePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDOMCSSNamespace::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDOMCSSNamespace>(vm, globalObject);
}

void JSDOMCSSNamespace::destroy(JSC::JSCell* cell)
{
    JSDOMCSSNamespace* thisObject = static_cast<JSDOMCSSNamespace*>(cell);
    thisObject->JSDOMCSSNamespace::~JSDOMCSSNamespace();
}

template<> inline JSDOMCSSNamespace* BindingCaller<JSDOMCSSNamespace>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDOMCSSNamespace*>(state.thisValue());
}

EncodedJSValue jsDOMCSSNamespaceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSDOMCSSNamespacePrototype* domObject = jsDynamicDowncast<JSDOMCSSNamespacePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSDOMCSSNamespace::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSDOMCSSNamespaceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDOMCSSNamespacePrototype* domObject = jsDynamicDowncast<JSDOMCSSNamespacePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSDOMCSSNamespace::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMCSSNamespaceConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline EncodedJSValue jsDOMCSSNamespaceConstructorFunctionSupports1(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto property = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(DOMCSSNamespace::supports(document, WTFMove(property), WTFMove(value))));
}

static inline EncodedJSValue jsDOMCSSNamespaceConstructorFunctionSupports2(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto conditionText = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(DOMCSSNamespace::supports(document, WTFMove(conditionText))));
}

EncodedJSValue JSC_HOST_CALL jsDOMCSSNamespaceConstructorFunctionSupports(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
        return jsDOMCSSNamespaceConstructorFunctionSupports2(state);
    }
    if (argsCount == 2) {
        return jsDOMCSSNamespaceConstructorFunctionSupports1(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

EncodedJSValue JSC_HOST_CALL jsDOMCSSNamespaceConstructorFunctionEscape(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto ident = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, DOMCSSNamespace::escape(WTFMove(ident))));
}

bool JSDOMCSSNamespaceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDOMCSSNamespaceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDOMCSSNamespace = static_cast<JSDOMCSSNamespace*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDOMCSSNamespace->wrapped(), jsDOMCSSNamespace);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DOMCSSNamespace>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DOMCSSNamespace.
    static_assert(!__is_polymorphic(DOMCSSNamespace), "DOMCSSNamespace is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DOMCSSNamespace>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DOMCSSNamespace& impl)
{
    return wrap(state, globalObject, impl);
}

DOMCSSNamespace* JSDOMCSSNamespace::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDOMCSSNamespace*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
