/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include "config.h"

#ifdef SKIP_STATIC_CONSTRUCTORS_ON_GCC
#define DOM_SVG_NAMES_HIDE_GLOBALS 1
#else
#define QNAME_DEFAULT_CONSTRUCTOR 1
#endif

#include "SVGNames.h"

#include <wtf/StaticConstructors.h>
namespace WebCore {

namespace SVGNames {

using namespace WebCore;

WEBCORE_EXPORT DEFINE_GLOBAL(AtomicString, svgNamespaceURI)

#if COMPILER(MSVC)
#pragma warning(push)
#pragma warning(disable: 4307)
#endif

static StringImpl::StaticStringImpl aData("a");
static StringImpl::StaticStringImpl accent_heightData("accent-height");
static StringImpl::StaticStringImpl accumulateData("accumulate");
static StringImpl::StaticStringImpl additiveData("additive");
static StringImpl::StaticStringImpl alignment_baselineData("alignment-baseline");
static StringImpl::StaticStringImpl alphabeticData("alphabetic");
static StringImpl::StaticStringImpl altGlyphData("altGlyph");
static StringImpl::StaticStringImpl altGlyphDefData("altGlyphDef");
static StringImpl::StaticStringImpl altGlyphItemData("altGlyphItem");
static StringImpl::StaticStringImpl amplitudeData("amplitude");
static StringImpl::StaticStringImpl animateData("animate");
static StringImpl::StaticStringImpl animateColorData("animateColor");
static StringImpl::StaticStringImpl animateMotionData("animateMotion");
static StringImpl::StaticStringImpl animateTransformData("animateTransform");
static StringImpl::StaticStringImpl arabic_formData("arabic-form");
static StringImpl::StaticStringImpl ascentData("ascent");
static StringImpl::StaticStringImpl attributeNameData("attributeName");
static StringImpl::StaticStringImpl attributeTypeData("attributeType");
static StringImpl::StaticStringImpl azimuthData("azimuth");
static StringImpl::StaticStringImpl baseFrequencyData("baseFrequency");
static StringImpl::StaticStringImpl baseProfileData("baseProfile");
static StringImpl::StaticStringImpl baseline_shiftData("baseline-shift");
static StringImpl::StaticStringImpl bboxData("bbox");
static StringImpl::StaticStringImpl beginData("begin");
static StringImpl::StaticStringImpl biasData("bias");
static StringImpl::StaticStringImpl buffered_renderingData("buffered-rendering");
static StringImpl::StaticStringImpl byData("by");
static StringImpl::StaticStringImpl calcModeData("calcMode");
static StringImpl::StaticStringImpl cap_heightData("cap-height");
static StringImpl::StaticStringImpl circleData("circle");
static StringImpl::StaticStringImpl clipData("clip");
static StringImpl::StaticStringImpl clipPathData("clipPath");
static StringImpl::StaticStringImpl clipPathUnitsData("clipPathUnits");
static StringImpl::StaticStringImpl clip_pathData("clip-path");
static StringImpl::StaticStringImpl clip_ruleData("clip-rule");
static StringImpl::StaticStringImpl colorData("color");
static StringImpl::StaticStringImpl color_interpolationData("color-interpolation");
static StringImpl::StaticStringImpl color_interpolation_filtersData("color-interpolation-filters");
static StringImpl::StaticStringImpl color_profileData("color-profile");
static StringImpl::StaticStringImpl color_renderingData("color-rendering");
static StringImpl::StaticStringImpl contentScriptTypeData("contentScriptType");
static StringImpl::StaticStringImpl contentStyleTypeData("contentStyleType");
static StringImpl::StaticStringImpl cursorData("cursor");
static StringImpl::StaticStringImpl cxData("cx");
static StringImpl::StaticStringImpl cyData("cy");
static StringImpl::StaticStringImpl dData("d");
static StringImpl::StaticStringImpl defsData("defs");
static StringImpl::StaticStringImpl descData("desc");
static StringImpl::StaticStringImpl descentData("descent");
static StringImpl::StaticStringImpl diffuseConstantData("diffuseConstant");
static StringImpl::StaticStringImpl directionData("direction");
static StringImpl::StaticStringImpl displayData("display");
static StringImpl::StaticStringImpl divisorData("divisor");
static StringImpl::StaticStringImpl dominant_baselineData("dominant-baseline");
static StringImpl::StaticStringImpl durData("dur");
static StringImpl::StaticStringImpl dxData("dx");
static StringImpl::StaticStringImpl dyData("dy");
static StringImpl::StaticStringImpl edgeModeData("edgeMode");
static StringImpl::StaticStringImpl elevationData("elevation");
static StringImpl::StaticStringImpl ellipseData("ellipse");
static StringImpl::StaticStringImpl enable_backgroundData("enable-background");
static StringImpl::StaticStringImpl endData("end");
static StringImpl::StaticStringImpl exponentData("exponent");
static StringImpl::StaticStringImpl externalResourcesRequiredData("externalResourcesRequired");
static StringImpl::StaticStringImpl feBlendData("feBlend");
static StringImpl::StaticStringImpl feColorMatrixData("feColorMatrix");
static StringImpl::StaticStringImpl feComponentTransferData("feComponentTransfer");
static StringImpl::StaticStringImpl feCompositeData("feComposite");
static StringImpl::StaticStringImpl feConvolveMatrixData("feConvolveMatrix");
static StringImpl::StaticStringImpl feDiffuseLightingData("feDiffuseLighting");
static StringImpl::StaticStringImpl feDisplacementMapData("feDisplacementMap");
static StringImpl::StaticStringImpl feDistantLightData("feDistantLight");
static StringImpl::StaticStringImpl feDropShadowData("feDropShadow");
static StringImpl::StaticStringImpl feFloodData("feFlood");
static StringImpl::StaticStringImpl feFuncAData("feFuncA");
static StringImpl::StaticStringImpl feFuncBData("feFuncB");
static StringImpl::StaticStringImpl feFuncGData("feFuncG");
static StringImpl::StaticStringImpl feFuncRData("feFuncR");
static StringImpl::StaticStringImpl feGaussianBlurData("feGaussianBlur");
static StringImpl::StaticStringImpl feImageData("feImage");
static StringImpl::StaticStringImpl feMergeData("feMerge");
static StringImpl::StaticStringImpl feMergeNodeData("feMergeNode");
static StringImpl::StaticStringImpl feMorphologyData("feMorphology");
static StringImpl::StaticStringImpl feOffsetData("feOffset");
static StringImpl::StaticStringImpl fePointLightData("fePointLight");
static StringImpl::StaticStringImpl feSpecularLightingData("feSpecularLighting");
static StringImpl::StaticStringImpl feSpotLightData("feSpotLight");
static StringImpl::StaticStringImpl feTileData("feTile");
static StringImpl::StaticStringImpl feTurbulenceData("feTurbulence");
static StringImpl::StaticStringImpl fillData("fill");
static StringImpl::StaticStringImpl fill_opacityData("fill-opacity");
static StringImpl::StaticStringImpl fill_ruleData("fill-rule");
static StringImpl::StaticStringImpl filterData("filter");
static StringImpl::StaticStringImpl filterResData("filterRes");
static StringImpl::StaticStringImpl filterUnitsData("filterUnits");
static StringImpl::StaticStringImpl flood_colorData("flood-color");
static StringImpl::StaticStringImpl flood_opacityData("flood-opacity");
static StringImpl::StaticStringImpl fontData("font");
static StringImpl::StaticStringImpl font_faceData("font-face");
static StringImpl::StaticStringImpl font_face_formatData("font-face-format");
static StringImpl::StaticStringImpl font_face_nameData("font-face-name");
static StringImpl::StaticStringImpl font_face_srcData("font-face-src");
static StringImpl::StaticStringImpl font_face_uriData("font-face-uri");
static StringImpl::StaticStringImpl font_familyData("font-family");
static StringImpl::StaticStringImpl font_sizeData("font-size");
static StringImpl::StaticStringImpl font_size_adjustData("font-size-adjust");
static StringImpl::StaticStringImpl font_stretchData("font-stretch");
static StringImpl::StaticStringImpl font_styleData("font-style");
static StringImpl::StaticStringImpl font_variantData("font-variant");
static StringImpl::StaticStringImpl font_weightData("font-weight");
static StringImpl::StaticStringImpl foreignObjectData("foreignObject");
static StringImpl::StaticStringImpl formatData("format");
static StringImpl::StaticStringImpl frData("fr");
static StringImpl::StaticStringImpl fromData("from");
static StringImpl::StaticStringImpl fxData("fx");
static StringImpl::StaticStringImpl fyData("fy");
static StringImpl::StaticStringImpl gData("g");
static StringImpl::StaticStringImpl g1Data("g1");
static StringImpl::StaticStringImpl g2Data("g2");
static StringImpl::StaticStringImpl glyphData("glyph");
static StringImpl::StaticStringImpl glyphRefData("glyphRef");
static StringImpl::StaticStringImpl glyph_nameData("glyph-name");
static StringImpl::StaticStringImpl glyph_orientation_horizontalData("glyph-orientation-horizontal");
static StringImpl::StaticStringImpl glyph_orientation_verticalData("glyph-orientation-vertical");
static StringImpl::StaticStringImpl gradientTransformData("gradientTransform");
static StringImpl::StaticStringImpl gradientUnitsData("gradientUnits");
static StringImpl::StaticStringImpl hangingData("hanging");
static StringImpl::StaticStringImpl heightData("height");
static StringImpl::StaticStringImpl hkernData("hkern");
static StringImpl::StaticStringImpl horiz_adv_xData("horiz-adv-x");
static StringImpl::StaticStringImpl horiz_origin_xData("horiz-origin-x");
static StringImpl::StaticStringImpl horiz_origin_yData("horiz-origin-y");
static StringImpl::StaticStringImpl ideographicData("ideographic");
static StringImpl::StaticStringImpl imageData("image");
static StringImpl::StaticStringImpl image_renderingData("image-rendering");
static StringImpl::StaticStringImpl inData("in");
static StringImpl::StaticStringImpl in2Data("in2");
static StringImpl::StaticStringImpl interceptData("intercept");
static StringImpl::StaticStringImpl kData("k");
static StringImpl::StaticStringImpl k1Data("k1");
static StringImpl::StaticStringImpl k2Data("k2");
static StringImpl::StaticStringImpl k3Data("k3");
static StringImpl::StaticStringImpl k4Data("k4");
static StringImpl::StaticStringImpl kernelMatrixData("kernelMatrix");
static StringImpl::StaticStringImpl kernelUnitLengthData("kernelUnitLength");
static StringImpl::StaticStringImpl kerningData("kerning");
static StringImpl::StaticStringImpl keyPointsData("keyPoints");
static StringImpl::StaticStringImpl keySplinesData("keySplines");
static StringImpl::StaticStringImpl keyTimesData("keyTimes");
static StringImpl::StaticStringImpl langData("lang");
static StringImpl::StaticStringImpl lengthAdjustData("lengthAdjust");
static StringImpl::StaticStringImpl letter_spacingData("letter-spacing");
static StringImpl::StaticStringImpl lighting_colorData("lighting-color");
static StringImpl::StaticStringImpl limitingConeAngleData("limitingConeAngle");
static StringImpl::StaticStringImpl lineData("line");
static StringImpl::StaticStringImpl linearGradientData("linearGradient");
static StringImpl::StaticStringImpl localData("local");
static StringImpl::StaticStringImpl markerData("marker");
static StringImpl::StaticStringImpl markerHeightData("markerHeight");
static StringImpl::StaticStringImpl markerUnitsData("markerUnits");
static StringImpl::StaticStringImpl markerWidthData("markerWidth");
static StringImpl::StaticStringImpl marker_endData("marker-end");
static StringImpl::StaticStringImpl marker_midData("marker-mid");
static StringImpl::StaticStringImpl marker_startData("marker-start");
static StringImpl::StaticStringImpl maskData("mask");
static StringImpl::StaticStringImpl maskContentUnitsData("maskContentUnits");
static StringImpl::StaticStringImpl maskUnitsData("maskUnits");
static StringImpl::StaticStringImpl mask_typeData("mask-type");
static StringImpl::StaticStringImpl mathematicalData("mathematical");
static StringImpl::StaticStringImpl maxData("max");
static StringImpl::StaticStringImpl mediaData("media");
static StringImpl::StaticStringImpl metadataData("metadata");
static StringImpl::StaticStringImpl methodData("method");
static StringImpl::StaticStringImpl minData("min");
static StringImpl::StaticStringImpl missing_glyphData("missing-glyph");
static StringImpl::StaticStringImpl modeData("mode");
static StringImpl::StaticStringImpl mpathData("mpath");
static StringImpl::StaticStringImpl nameData("name");
static StringImpl::StaticStringImpl numOctavesData("numOctaves");
static StringImpl::StaticStringImpl offsetData("offset");
static StringImpl::StaticStringImpl onbeginData("onbegin");
static StringImpl::StaticStringImpl onendData("onend");
static StringImpl::StaticStringImpl onzoomData("onzoom");
static StringImpl::StaticStringImpl opacityData("opacity");
static StringImpl::StaticStringImpl operatorData("operator");
static StringImpl::StaticStringImpl orderData("order");
static StringImpl::StaticStringImpl orientData("orient");
static StringImpl::StaticStringImpl orientationData("orientation");
static StringImpl::StaticStringImpl originData("origin");
static StringImpl::StaticStringImpl overflowData("overflow");
static StringImpl::StaticStringImpl overline_positionData("overline-position");
static StringImpl::StaticStringImpl overline_thicknessData("overline-thickness");
static StringImpl::StaticStringImpl paint_orderData("paint-order");
static StringImpl::StaticStringImpl panose_1Data("panose-1");
static StringImpl::StaticStringImpl pathData("path");
static StringImpl::StaticStringImpl pathLengthData("pathLength");
static StringImpl::StaticStringImpl patternData("pattern");
static StringImpl::StaticStringImpl patternContentUnitsData("patternContentUnits");
static StringImpl::StaticStringImpl patternTransformData("patternTransform");
static StringImpl::StaticStringImpl patternUnitsData("patternUnits");
static StringImpl::StaticStringImpl pointer_eventsData("pointer-events");
static StringImpl::StaticStringImpl pointsData("points");
static StringImpl::StaticStringImpl pointsAtXData("pointsAtX");
static StringImpl::StaticStringImpl pointsAtYData("pointsAtY");
static StringImpl::StaticStringImpl pointsAtZData("pointsAtZ");
static StringImpl::StaticStringImpl polygonData("polygon");
static StringImpl::StaticStringImpl polylineData("polyline");
static StringImpl::StaticStringImpl preserveAlphaData("preserveAlpha");
static StringImpl::StaticStringImpl preserveAspectRatioData("preserveAspectRatio");
static StringImpl::StaticStringImpl primitiveUnitsData("primitiveUnits");
static StringImpl::StaticStringImpl rData("r");
static StringImpl::StaticStringImpl radialGradientData("radialGradient");
static StringImpl::StaticStringImpl radiusData("radius");
static StringImpl::StaticStringImpl rectData("rect");
static StringImpl::StaticStringImpl refXData("refX");
static StringImpl::StaticStringImpl refYData("refY");
static StringImpl::StaticStringImpl rendering_intentData("rendering-intent");
static StringImpl::StaticStringImpl repeatCountData("repeatCount");
static StringImpl::StaticStringImpl repeatDurData("repeatDur");
static StringImpl::StaticStringImpl requiredExtensionsData("requiredExtensions");
static StringImpl::StaticStringImpl requiredFeaturesData("requiredFeatures");
static StringImpl::StaticStringImpl restartData("restart");
static StringImpl::StaticStringImpl resultData("result");
static StringImpl::StaticStringImpl rotateData("rotate");
static StringImpl::StaticStringImpl rxData("rx");
static StringImpl::StaticStringImpl ryData("ry");
static StringImpl::StaticStringImpl scaleData("scale");
static StringImpl::StaticStringImpl scriptData("script");
static StringImpl::StaticStringImpl seedData("seed");
static StringImpl::StaticStringImpl setData("set");
static StringImpl::StaticStringImpl shape_renderingData("shape-rendering");
static StringImpl::StaticStringImpl slopeData("slope");
static StringImpl::StaticStringImpl spacingData("spacing");
static StringImpl::StaticStringImpl specularConstantData("specularConstant");
static StringImpl::StaticStringImpl specularExponentData("specularExponent");
static StringImpl::StaticStringImpl spreadMethodData("spreadMethod");
static StringImpl::StaticStringImpl startOffsetData("startOffset");
static StringImpl::StaticStringImpl stdDeviationData("stdDeviation");
static StringImpl::StaticStringImpl stemhData("stemh");
static StringImpl::StaticStringImpl stemvData("stemv");
static StringImpl::StaticStringImpl stitchTilesData("stitchTiles");
static StringImpl::StaticStringImpl stopData("stop");
static StringImpl::StaticStringImpl stop_colorData("stop-color");
static StringImpl::StaticStringImpl stop_opacityData("stop-opacity");
static StringImpl::StaticStringImpl strikethrough_positionData("strikethrough-position");
static StringImpl::StaticStringImpl strikethrough_thicknessData("strikethrough-thickness");
static StringImpl::StaticStringImpl strokeData("stroke");
static StringImpl::StaticStringImpl stroke_dasharrayData("stroke-dasharray");
static StringImpl::StaticStringImpl stroke_dashoffsetData("stroke-dashoffset");
static StringImpl::StaticStringImpl stroke_linecapData("stroke-linecap");
static StringImpl::StaticStringImpl stroke_linejoinData("stroke-linejoin");
static StringImpl::StaticStringImpl stroke_miterlimitData("stroke-miterlimit");
static StringImpl::StaticStringImpl stroke_opacityData("stroke-opacity");
static StringImpl::StaticStringImpl stroke_widthData("stroke-width");
static StringImpl::StaticStringImpl styleData("style");
static StringImpl::StaticStringImpl surfaceScaleData("surfaceScale");
static StringImpl::StaticStringImpl svgData("svg");
static StringImpl::StaticStringImpl switchData("switch");
static StringImpl::StaticStringImpl symbolData("symbol");
static StringImpl::StaticStringImpl systemLanguageData("systemLanguage");
static StringImpl::StaticStringImpl tableValuesData("tableValues");
static StringImpl::StaticStringImpl targetData("target");
static StringImpl::StaticStringImpl targetXData("targetX");
static StringImpl::StaticStringImpl targetYData("targetY");
static StringImpl::StaticStringImpl textData("text");
static StringImpl::StaticStringImpl textLengthData("textLength");
static StringImpl::StaticStringImpl textPathData("textPath");
static StringImpl::StaticStringImpl text_anchorData("text-anchor");
static StringImpl::StaticStringImpl text_decorationData("text-decoration");
static StringImpl::StaticStringImpl text_renderingData("text-rendering");
static StringImpl::StaticStringImpl titleData("title");
static StringImpl::StaticStringImpl toData("to");
static StringImpl::StaticStringImpl transformData("transform");
static StringImpl::StaticStringImpl transform_originData("transform-origin");
static StringImpl::StaticStringImpl trefData("tref");
static StringImpl::StaticStringImpl tspanData("tspan");
static StringImpl::StaticStringImpl typeData("type");
static StringImpl::StaticStringImpl u1Data("u1");
static StringImpl::StaticStringImpl u2Data("u2");
static StringImpl::StaticStringImpl underline_positionData("underline-position");
static StringImpl::StaticStringImpl underline_thicknessData("underline-thickness");
static StringImpl::StaticStringImpl unicodeData("unicode");
static StringImpl::StaticStringImpl unicode_bidiData("unicode-bidi");
static StringImpl::StaticStringImpl unicode_rangeData("unicode-range");
static StringImpl::StaticStringImpl units_per_emData("units-per-em");
static StringImpl::StaticStringImpl useData("use");
static StringImpl::StaticStringImpl v_alphabeticData("v-alphabetic");
static StringImpl::StaticStringImpl v_hangingData("v-hanging");
static StringImpl::StaticStringImpl v_ideographicData("v-ideographic");
static StringImpl::StaticStringImpl v_mathematicalData("v-mathematical");
static StringImpl::StaticStringImpl valuesData("values");
static StringImpl::StaticStringImpl vector_effectData("vector-effect");
static StringImpl::StaticStringImpl versionData("version");
static StringImpl::StaticStringImpl vert_adv_yData("vert-adv-y");
static StringImpl::StaticStringImpl vert_origin_xData("vert-origin-x");
static StringImpl::StaticStringImpl vert_origin_yData("vert-origin-y");
static StringImpl::StaticStringImpl viewData("view");
static StringImpl::StaticStringImpl viewBoxData("viewBox");
static StringImpl::StaticStringImpl viewTargetData("viewTarget");
static StringImpl::StaticStringImpl visibilityData("visibility");
static StringImpl::StaticStringImpl vkernData("vkern");
static StringImpl::StaticStringImpl widthData("width");
static StringImpl::StaticStringImpl widthsData("widths");
static StringImpl::StaticStringImpl word_spacingData("word-spacing");
static StringImpl::StaticStringImpl writing_modeData("writing-mode");
static StringImpl::StaticStringImpl xData("x");
static StringImpl::StaticStringImpl x1Data("x1");
static StringImpl::StaticStringImpl x2Data("x2");
static StringImpl::StaticStringImpl xChannelSelectorData("xChannelSelector");
static StringImpl::StaticStringImpl x_heightData("x-height");
static StringImpl::StaticStringImpl yData("y");
static StringImpl::StaticStringImpl y1Data("y1");
static StringImpl::StaticStringImpl y2Data("y2");
static StringImpl::StaticStringImpl yChannelSelectorData("yChannelSelector");
static StringImpl::StaticStringImpl zData("z");
static StringImpl::StaticStringImpl zoomAndPanData("zoomAndPan");

#if COMPILER(MSVC)
#pragma warning(pop)
#endif

// Tags
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, aTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, altGlyphTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, altGlyphDefTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, altGlyphItemTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, animateTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, animateColorTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, animateMotionTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, animateTransformTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, circleTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, clipPathTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, color_profileTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, cursorTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, defsTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, descTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, ellipseTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feBlendTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feColorMatrixTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feComponentTransferTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feCompositeTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feConvolveMatrixTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feDiffuseLightingTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feDisplacementMapTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feDistantLightTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feDropShadowTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feFloodTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feFuncATag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feFuncBTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feFuncGTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feFuncRTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feGaussianBlurTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feImageTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feMergeTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feMergeNodeTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feMorphologyTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feOffsetTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, fePointLightTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feSpecularLightingTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feSpotLightTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feTileTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, feTurbulenceTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, filterTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, fontTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, font_faceTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, font_face_formatTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, font_face_nameTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, font_face_srcTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, font_face_uriTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, foreignObjectTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, gTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, glyphTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, glyphRefTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, hkernTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, imageTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, lineTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, linearGradientTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, markerTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, maskTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, metadataTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, missing_glyphTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, mpathTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, pathTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, patternTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, polygonTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, polylineTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, radialGradientTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, rectTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, scriptTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, setTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, stopTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, styleTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, svgTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, switchTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, symbolTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, textTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, textPathTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, titleTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, trefTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, tspanTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, useTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, viewTag)
WEBCORE_EXPORT DEFINE_GLOBAL(SVGQualifiedName, vkernTag)


const WebCore::SVGQualifiedName* const* getSVGTags()
{
    static const WebCore::SVGQualifiedName* const SVGTags[] = {
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&aTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&altGlyphTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&altGlyphDefTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&altGlyphItemTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&animateTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&animateColorTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&animateMotionTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&animateTransformTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&circleTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&clipPathTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&color_profileTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&cursorTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&defsTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&descTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&ellipseTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feBlendTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feColorMatrixTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feComponentTransferTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feCompositeTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feConvolveMatrixTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feDiffuseLightingTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feDisplacementMapTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feDistantLightTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feDropShadowTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feFloodTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feFuncATag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feFuncBTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feFuncGTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feFuncRTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feGaussianBlurTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feImageTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feMergeTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feMergeNodeTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feMorphologyTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feOffsetTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&fePointLightTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feSpecularLightingTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feSpotLightTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feTileTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&feTurbulenceTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&filterTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&fontTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&font_faceTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&font_face_formatTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&font_face_nameTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&font_face_srcTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&font_face_uriTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&foreignObjectTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&gTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&glyphTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&glyphRefTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&hkernTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&imageTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&lineTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&linearGradientTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&markerTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&maskTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&metadataTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&missing_glyphTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&mpathTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&pathTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&patternTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&polygonTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&polylineTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&radialGradientTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&rectTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&scriptTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&setTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&stopTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&styleTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&svgTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&switchTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&symbolTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&textTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&textPathTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&titleTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&trefTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&tspanTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&useTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&viewTag),
        reinterpret_cast<const WebCore::SVGQualifiedName*>(&vkernTag),
    };
    return SVGTags;
}

// Attributes
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, accent_heightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, accumulateAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, additiveAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, alignment_baselineAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, alphabeticAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, amplitudeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, animateAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, arabic_formAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, ascentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, attributeNameAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, attributeTypeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, azimuthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, baseFrequencyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, baseProfileAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, baseline_shiftAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, bboxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, beginAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, biasAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, buffered_renderingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, byAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, calcModeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, cap_heightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, clipAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, clipPathUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, clip_pathAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, clip_ruleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, colorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, color_interpolationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, color_interpolation_filtersAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, color_profileAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, color_renderingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, contentScriptTypeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, contentStyleTypeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, cursorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, cxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, cyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, dAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, descentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, diffuseConstantAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, directionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, displayAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, divisorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, dominant_baselineAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, durAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, dxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, dyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, edgeModeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, elevationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, enable_backgroundAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, endAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, exponentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, externalResourcesRequiredAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fillAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fill_opacityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fill_ruleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, filterAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, filterResAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, filterUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, flood_colorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, flood_opacityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_familyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_sizeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_size_adjustAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_stretchAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_styleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_variantAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, font_weightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, formatAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, frAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fromAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, fyAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, g1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, g2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, glyphRefAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, glyph_nameAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, glyph_orientation_horizontalAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, glyph_orientation_verticalAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, gradientTransformAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, gradientUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, hangingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, heightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, horiz_adv_xAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, horiz_origin_xAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, horiz_origin_yAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, ideographicAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, image_renderingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, inAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, in2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, interceptAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, kAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, k1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, k2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, k3Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, k4Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, kernelMatrixAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, kernelUnitLengthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, kerningAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, keyPointsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, keySplinesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, keyTimesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, langAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, lengthAdjustAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, letter_spacingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, lighting_colorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, limitingConeAngleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, localAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, markerHeightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, markerUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, markerWidthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, marker_endAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, marker_midAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, marker_startAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, maskAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, maskContentUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, maskUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mask_typeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mathematicalAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, maxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, mediaAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, methodAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, minAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, modeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, nameAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, numOctavesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, offsetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, onbeginAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, onendAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, onzoomAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, opacityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, operatorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, orderAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, orientAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, orientationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, originAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, overflowAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, overline_positionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, overline_thicknessAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, paint_orderAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, panose_1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pathAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pathLengthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, patternContentUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, patternTransformAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, patternUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pointer_eventsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pointsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pointsAtXAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pointsAtYAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, pointsAtZAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, preserveAlphaAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, preserveAspectRatioAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, primitiveUnitsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, radiusAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, refXAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, refYAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rendering_intentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, repeatCountAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, repeatDurAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, requiredExtensionsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, requiredFeaturesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, restartAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, resultAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rotateAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, rxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, ryAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, scaleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, seedAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, shape_renderingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, slopeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, spacingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, specularConstantAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, specularExponentAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, spreadMethodAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, startOffsetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stdDeviationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stemhAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stemvAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stitchTilesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stop_colorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stop_opacityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, strikethrough_positionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, strikethrough_thicknessAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, strokeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_dasharrayAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_dashoffsetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_linecapAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_linejoinAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_miterlimitAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_opacityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, stroke_widthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, styleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, surfaceScaleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, systemLanguageAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, tableValuesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, targetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, targetXAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, targetYAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, textLengthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, text_anchorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, text_decorationAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, text_renderingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, titleAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, toAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, transformAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, transform_originAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, typeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, u1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, u2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, underline_positionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, underline_thicknessAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, unicodeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, unicode_bidiAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, unicode_rangeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, units_per_emAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, v_alphabeticAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, v_hangingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, v_ideographicAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, v_mathematicalAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, valuesAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, vector_effectAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, versionAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, vert_adv_yAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, vert_origin_xAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, vert_origin_yAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, viewBoxAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, viewTargetAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, visibilityAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, widthAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, widthsAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, word_spacingAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, writing_modeAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, xAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, x1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, x2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, xChannelSelectorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, x_heightAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, yAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, y1Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, y2Attr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, yChannelSelectorAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, zAttr)
WEBCORE_EXPORT DEFINE_GLOBAL(QualifiedName, zoomAndPanAttr)


const WebCore::QualifiedName* const* getSVGAttrs()
{
    static const WebCore::QualifiedName* const SVGAttrs[] = {
        reinterpret_cast<const WebCore::QualifiedName*>(&accent_heightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&accumulateAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&additiveAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&alignment_baselineAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&alphabeticAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&amplitudeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&animateAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&arabic_formAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&ascentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&attributeNameAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&attributeTypeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&azimuthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&baseFrequencyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&baseProfileAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&baseline_shiftAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&bboxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&beginAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&biasAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&buffered_renderingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&byAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&calcModeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&cap_heightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&clipAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&clipPathUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&clip_pathAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&clip_ruleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&colorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&color_interpolationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&color_interpolation_filtersAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&color_profileAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&color_renderingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&contentScriptTypeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&contentStyleTypeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&cursorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&cxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&cyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&dAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&descentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&diffuseConstantAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&directionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&displayAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&divisorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&dominant_baselineAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&durAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&dxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&dyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&edgeModeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&elevationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&enable_backgroundAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&endAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&exponentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&externalResourcesRequiredAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fillAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fill_opacityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fill_ruleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&filterAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&filterResAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&filterUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&flood_colorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&flood_opacityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_familyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_sizeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_size_adjustAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_stretchAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_styleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_variantAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&font_weightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&formatAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&frAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fromAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&fyAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&g1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&g2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&glyphRefAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&glyph_nameAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&glyph_orientation_horizontalAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&glyph_orientation_verticalAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&gradientTransformAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&gradientUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&hangingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&heightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&horiz_adv_xAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&horiz_origin_xAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&horiz_origin_yAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&ideographicAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&image_renderingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&inAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&in2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&interceptAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&kAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&k1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&k2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&k3Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&k4Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&kernelMatrixAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&kernelUnitLengthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&kerningAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&keyPointsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&keySplinesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&keyTimesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&langAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&lengthAdjustAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&letter_spacingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&lighting_colorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&limitingConeAngleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&localAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&markerHeightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&markerUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&markerWidthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&marker_endAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&marker_midAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&marker_startAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&maskAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&maskContentUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&maskUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mask_typeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mathematicalAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&maxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&mediaAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&methodAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&minAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&modeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&nameAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&numOctavesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&offsetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&onbeginAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&onendAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&onzoomAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&opacityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&operatorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&orderAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&orientAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&orientationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&originAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&overflowAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&overline_positionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&overline_thicknessAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&paint_orderAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&panose_1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pathAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pathLengthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&patternContentUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&patternTransformAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&patternUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pointer_eventsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pointsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pointsAtXAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pointsAtYAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&pointsAtZAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&preserveAlphaAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&preserveAspectRatioAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&primitiveUnitsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&radiusAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&refXAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&refYAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rendering_intentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&repeatCountAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&repeatDurAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&requiredExtensionsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&requiredFeaturesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&restartAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&resultAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rotateAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&rxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&ryAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&scaleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&seedAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&shape_renderingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&slopeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&spacingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&specularConstantAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&specularExponentAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&spreadMethodAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&startOffsetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stdDeviationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stemhAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stemvAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stitchTilesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stop_colorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stop_opacityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&strikethrough_positionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&strikethrough_thicknessAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&strokeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_dasharrayAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_dashoffsetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_linecapAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_linejoinAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_miterlimitAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_opacityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&stroke_widthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&styleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&surfaceScaleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&systemLanguageAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&tableValuesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&targetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&targetXAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&targetYAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&textLengthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&text_anchorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&text_decorationAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&text_renderingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&titleAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&toAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&transformAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&transform_originAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&typeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&u1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&u2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&underline_positionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&underline_thicknessAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&unicodeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&unicode_bidiAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&unicode_rangeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&units_per_emAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&v_alphabeticAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&v_hangingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&v_ideographicAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&v_mathematicalAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&valuesAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&vector_effectAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&versionAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&vert_adv_yAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&vert_origin_xAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&vert_origin_yAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&viewBoxAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&viewTargetAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&visibilityAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&widthAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&widthsAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&word_spacingAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&writing_modeAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&xAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&x1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&x2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&xChannelSelectorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&x_heightAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&yAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&y1Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&y2Attr),
        reinterpret_cast<const WebCore::QualifiedName*>(&yChannelSelectorAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&zAttr),
        reinterpret_cast<const WebCore::QualifiedName*>(&zoomAndPanAttr),
    };
    return SVGAttrs;
}

void init()
{
    static bool initialized = false;
    if (initialized)
        return;
    initialized = true;

    // Use placement new to initialize the globals.

    AtomicString::init();
    AtomicString svgNS("http://www.w3.org/2000/svg", AtomicString::ConstructFromLiteral);

    // Namespace
    new (NotNull, (void*)&svgNamespaceURI) AtomicString(svgNS);

#ifndef NDEBUG
    reinterpret_cast<StringImpl*>(&aData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&accent_heightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&accumulateData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&additiveData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&alignment_baselineData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&alphabeticData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&altGlyphData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&altGlyphDefData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&altGlyphItemData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&amplitudeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&animateData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&animateColorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&animateMotionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&animateTransformData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&arabic_formData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&ascentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&attributeNameData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&attributeTypeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&azimuthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&baseFrequencyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&baseProfileData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&baseline_shiftData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&bboxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&beginData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&biasData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&buffered_renderingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&byData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&calcModeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&cap_heightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&circleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&clipData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&clipPathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&clipPathUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&clip_pathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&clip_ruleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&colorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&color_interpolationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&color_interpolation_filtersData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&color_profileData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&color_renderingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&contentScriptTypeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&contentStyleTypeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&cursorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&cxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&cyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&dData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&defsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&descData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&descentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&diffuseConstantData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&directionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&displayData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&divisorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&dominant_baselineData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&durData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&dxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&dyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&edgeModeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&elevationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&ellipseData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&enable_backgroundData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&endData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&exponentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&externalResourcesRequiredData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feBlendData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feColorMatrixData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feComponentTransferData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feCompositeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feConvolveMatrixData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feDiffuseLightingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feDisplacementMapData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feDistantLightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feDropShadowData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feFloodData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feFuncAData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feFuncBData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feFuncGData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feFuncRData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feGaussianBlurData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feImageData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feMergeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feMergeNodeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feMorphologyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feOffsetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fePointLightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feSpecularLightingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feSpotLightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feTileData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&feTurbulenceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fillData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fill_opacityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fill_ruleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&filterData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&filterResData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&filterUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&flood_colorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&flood_opacityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fontData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_faceData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_face_formatData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_face_nameData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_face_srcData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_face_uriData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_familyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_sizeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_size_adjustData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_stretchData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_styleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_variantData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&font_weightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&foreignObjectData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&formatData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&frData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fromData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&fyData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&gData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&g1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&g2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&glyphData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&glyphRefData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&glyph_nameData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&glyph_orientation_horizontalData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&glyph_orientation_verticalData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&gradientTransformData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&gradientUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&hangingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&heightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&hkernData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&horiz_adv_xData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&horiz_origin_xData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&horiz_origin_yData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&ideographicData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&imageData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&image_renderingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&inData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&in2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&interceptData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&kData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&k1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&k2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&k3Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&k4Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&kernelMatrixData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&kernelUnitLengthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&kerningData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&keyPointsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&keySplinesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&keyTimesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&langData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&lengthAdjustData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&letter_spacingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&lighting_colorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&limitingConeAngleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&lineData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&linearGradientData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&localData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&markerData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&markerHeightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&markerUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&markerWidthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&marker_endData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&marker_midData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&marker_startData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maskData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maskContentUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maskUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mask_typeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mathematicalData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&maxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mediaData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&metadataData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&methodData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&minData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&missing_glyphData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&modeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&mpathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&nameData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&numOctavesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&offsetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&onbeginData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&onendData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&onzoomData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&opacityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&operatorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&orderData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&orientData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&orientationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&originData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&overflowData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&overline_positionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&overline_thicknessData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&paint_orderData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&panose_1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pathLengthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&patternData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&patternContentUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&patternTransformData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&patternUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pointer_eventsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pointsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pointsAtXData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pointsAtYData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&pointsAtZData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&polygonData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&polylineData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&preserveAlphaData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&preserveAspectRatioData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&primitiveUnitsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&radialGradientData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&radiusData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rectData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&refXData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&refYData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rendering_intentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&repeatCountData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&repeatDurData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&requiredExtensionsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&requiredFeaturesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&restartData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&resultData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rotateData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&rxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&ryData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&scaleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&scriptData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&seedData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&setData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&shape_renderingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&slopeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&spacingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&specularConstantData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&specularExponentData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&spreadMethodData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&startOffsetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stdDeviationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stemhData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stemvData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stitchTilesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stopData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stop_colorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stop_opacityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&strikethrough_positionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&strikethrough_thicknessData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&strokeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_dasharrayData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_dashoffsetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_linecapData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_linejoinData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_miterlimitData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_opacityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&stroke_widthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&styleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&surfaceScaleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&svgData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&switchData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&symbolData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&systemLanguageData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&tableValuesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&targetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&targetXData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&targetYData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&textData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&textLengthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&textPathData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&text_anchorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&text_decorationData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&text_renderingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&titleData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&toData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&transformData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&transform_originData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&trefData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&tspanData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&typeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&u1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&u2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&underline_positionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&underline_thicknessData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&unicodeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&unicode_bidiData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&unicode_rangeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&units_per_emData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&useData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&v_alphabeticData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&v_hangingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&v_ideographicData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&v_mathematicalData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&valuesData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&vector_effectData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&versionData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&vert_adv_yData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&vert_origin_xData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&vert_origin_yData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&viewData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&viewBoxData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&viewTargetData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&visibilityData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&vkernData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&widthData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&widthsData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&word_spacingData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&writing_modeData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&xData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&x1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&x2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&xChannelSelectorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&x_heightData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&yData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&y1Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&y2Data)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&yChannelSelectorData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&zData)->assertHashIsCorrect();
    reinterpret_cast<StringImpl*>(&zoomAndPanData)->assertHashIsCorrect();
#endif // NDEBUG


    struct TagsTableEntry {
        void* targetAddress;
        StringImpl& name;
    };

    static const TagsTableEntry tagsTable[] = {
        { (void*)&aTag, *reinterpret_cast<StringImpl*>(&aData) },
        { (void*)&altGlyphTag, *reinterpret_cast<StringImpl*>(&altGlyphData) },
        { (void*)&altGlyphDefTag, *reinterpret_cast<StringImpl*>(&altGlyphDefData) },
        { (void*)&altGlyphItemTag, *reinterpret_cast<StringImpl*>(&altGlyphItemData) },
        { (void*)&animateTag, *reinterpret_cast<StringImpl*>(&animateData) },
        { (void*)&animateColorTag, *reinterpret_cast<StringImpl*>(&animateColorData) },
        { (void*)&animateMotionTag, *reinterpret_cast<StringImpl*>(&animateMotionData) },
        { (void*)&animateTransformTag, *reinterpret_cast<StringImpl*>(&animateTransformData) },
        { (void*)&circleTag, *reinterpret_cast<StringImpl*>(&circleData) },
        { (void*)&clipPathTag, *reinterpret_cast<StringImpl*>(&clipPathData) },
        { (void*)&color_profileTag, *reinterpret_cast<StringImpl*>(&color_profileData) },
        { (void*)&cursorTag, *reinterpret_cast<StringImpl*>(&cursorData) },
        { (void*)&defsTag, *reinterpret_cast<StringImpl*>(&defsData) },
        { (void*)&descTag, *reinterpret_cast<StringImpl*>(&descData) },
        { (void*)&ellipseTag, *reinterpret_cast<StringImpl*>(&ellipseData) },
        { (void*)&feBlendTag, *reinterpret_cast<StringImpl*>(&feBlendData) },
        { (void*)&feColorMatrixTag, *reinterpret_cast<StringImpl*>(&feColorMatrixData) },
        { (void*)&feComponentTransferTag, *reinterpret_cast<StringImpl*>(&feComponentTransferData) },
        { (void*)&feCompositeTag, *reinterpret_cast<StringImpl*>(&feCompositeData) },
        { (void*)&feConvolveMatrixTag, *reinterpret_cast<StringImpl*>(&feConvolveMatrixData) },
        { (void*)&feDiffuseLightingTag, *reinterpret_cast<StringImpl*>(&feDiffuseLightingData) },
        { (void*)&feDisplacementMapTag, *reinterpret_cast<StringImpl*>(&feDisplacementMapData) },
        { (void*)&feDistantLightTag, *reinterpret_cast<StringImpl*>(&feDistantLightData) },
        { (void*)&feDropShadowTag, *reinterpret_cast<StringImpl*>(&feDropShadowData) },
        { (void*)&feFloodTag, *reinterpret_cast<StringImpl*>(&feFloodData) },
        { (void*)&feFuncATag, *reinterpret_cast<StringImpl*>(&feFuncAData) },
        { (void*)&feFuncBTag, *reinterpret_cast<StringImpl*>(&feFuncBData) },
        { (void*)&feFuncGTag, *reinterpret_cast<StringImpl*>(&feFuncGData) },
        { (void*)&feFuncRTag, *reinterpret_cast<StringImpl*>(&feFuncRData) },
        { (void*)&feGaussianBlurTag, *reinterpret_cast<StringImpl*>(&feGaussianBlurData) },
        { (void*)&feImageTag, *reinterpret_cast<StringImpl*>(&feImageData) },
        { (void*)&feMergeTag, *reinterpret_cast<StringImpl*>(&feMergeData) },
        { (void*)&feMergeNodeTag, *reinterpret_cast<StringImpl*>(&feMergeNodeData) },
        { (void*)&feMorphologyTag, *reinterpret_cast<StringImpl*>(&feMorphologyData) },
        { (void*)&feOffsetTag, *reinterpret_cast<StringImpl*>(&feOffsetData) },
        { (void*)&fePointLightTag, *reinterpret_cast<StringImpl*>(&fePointLightData) },
        { (void*)&feSpecularLightingTag, *reinterpret_cast<StringImpl*>(&feSpecularLightingData) },
        { (void*)&feSpotLightTag, *reinterpret_cast<StringImpl*>(&feSpotLightData) },
        { (void*)&feTileTag, *reinterpret_cast<StringImpl*>(&feTileData) },
        { (void*)&feTurbulenceTag, *reinterpret_cast<StringImpl*>(&feTurbulenceData) },
        { (void*)&filterTag, *reinterpret_cast<StringImpl*>(&filterData) },
        { (void*)&fontTag, *reinterpret_cast<StringImpl*>(&fontData) },
        { (void*)&font_faceTag, *reinterpret_cast<StringImpl*>(&font_faceData) },
        { (void*)&font_face_formatTag, *reinterpret_cast<StringImpl*>(&font_face_formatData) },
        { (void*)&font_face_nameTag, *reinterpret_cast<StringImpl*>(&font_face_nameData) },
        { (void*)&font_face_srcTag, *reinterpret_cast<StringImpl*>(&font_face_srcData) },
        { (void*)&font_face_uriTag, *reinterpret_cast<StringImpl*>(&font_face_uriData) },
        { (void*)&foreignObjectTag, *reinterpret_cast<StringImpl*>(&foreignObjectData) },
        { (void*)&gTag, *reinterpret_cast<StringImpl*>(&gData) },
        { (void*)&glyphTag, *reinterpret_cast<StringImpl*>(&glyphData) },
        { (void*)&glyphRefTag, *reinterpret_cast<StringImpl*>(&glyphRefData) },
        { (void*)&hkernTag, *reinterpret_cast<StringImpl*>(&hkernData) },
        { (void*)&imageTag, *reinterpret_cast<StringImpl*>(&imageData) },
        { (void*)&lineTag, *reinterpret_cast<StringImpl*>(&lineData) },
        { (void*)&linearGradientTag, *reinterpret_cast<StringImpl*>(&linearGradientData) },
        { (void*)&markerTag, *reinterpret_cast<StringImpl*>(&markerData) },
        { (void*)&maskTag, *reinterpret_cast<StringImpl*>(&maskData) },
        { (void*)&metadataTag, *reinterpret_cast<StringImpl*>(&metadataData) },
        { (void*)&missing_glyphTag, *reinterpret_cast<StringImpl*>(&missing_glyphData) },
        { (void*)&mpathTag, *reinterpret_cast<StringImpl*>(&mpathData) },
        { (void*)&pathTag, *reinterpret_cast<StringImpl*>(&pathData) },
        { (void*)&patternTag, *reinterpret_cast<StringImpl*>(&patternData) },
        { (void*)&polygonTag, *reinterpret_cast<StringImpl*>(&polygonData) },
        { (void*)&polylineTag, *reinterpret_cast<StringImpl*>(&polylineData) },
        { (void*)&radialGradientTag, *reinterpret_cast<StringImpl*>(&radialGradientData) },
        { (void*)&rectTag, *reinterpret_cast<StringImpl*>(&rectData) },
        { (void*)&scriptTag, *reinterpret_cast<StringImpl*>(&scriptData) },
        { (void*)&setTag, *reinterpret_cast<StringImpl*>(&setData) },
        { (void*)&stopTag, *reinterpret_cast<StringImpl*>(&stopData) },
        { (void*)&styleTag, *reinterpret_cast<StringImpl*>(&styleData) },
        { (void*)&svgTag, *reinterpret_cast<StringImpl*>(&svgData) },
        { (void*)&switchTag, *reinterpret_cast<StringImpl*>(&switchData) },
        { (void*)&symbolTag, *reinterpret_cast<StringImpl*>(&symbolData) },
        { (void*)&textTag, *reinterpret_cast<StringImpl*>(&textData) },
        { (void*)&textPathTag, *reinterpret_cast<StringImpl*>(&textPathData) },
        { (void*)&titleTag, *reinterpret_cast<StringImpl*>(&titleData) },
        { (void*)&trefTag, *reinterpret_cast<StringImpl*>(&trefData) },
        { (void*)&tspanTag, *reinterpret_cast<StringImpl*>(&tspanData) },
        { (void*)&useTag, *reinterpret_cast<StringImpl*>(&useData) },
        { (void*)&viewTag, *reinterpret_cast<StringImpl*>(&viewData) },
        { (void*)&vkernTag, *reinterpret_cast<StringImpl*>(&vkernData) },
    };

    for (unsigned i = 0; i < WTF_ARRAY_LENGTH(tagsTable); ++i)
        createQualifiedName(tagsTable[i].targetAddress, &tagsTable[i].name, svgNS);

    struct AttributesTableEntry {
        void* targetAddress;
        StringImpl& name;
    };

    static const AttributesTableEntry attributesTable[] = {
        { (void*)&accent_heightAttr, *reinterpret_cast<StringImpl*>(&accent_heightData) },
        { (void*)&accumulateAttr, *reinterpret_cast<StringImpl*>(&accumulateData) },
        { (void*)&additiveAttr, *reinterpret_cast<StringImpl*>(&additiveData) },
        { (void*)&alignment_baselineAttr, *reinterpret_cast<StringImpl*>(&alignment_baselineData) },
        { (void*)&alphabeticAttr, *reinterpret_cast<StringImpl*>(&alphabeticData) },
        { (void*)&amplitudeAttr, *reinterpret_cast<StringImpl*>(&amplitudeData) },
        { (void*)&animateAttr, *reinterpret_cast<StringImpl*>(&animateData) },
        { (void*)&arabic_formAttr, *reinterpret_cast<StringImpl*>(&arabic_formData) },
        { (void*)&ascentAttr, *reinterpret_cast<StringImpl*>(&ascentData) },
        { (void*)&attributeNameAttr, *reinterpret_cast<StringImpl*>(&attributeNameData) },
        { (void*)&attributeTypeAttr, *reinterpret_cast<StringImpl*>(&attributeTypeData) },
        { (void*)&azimuthAttr, *reinterpret_cast<StringImpl*>(&azimuthData) },
        { (void*)&baseFrequencyAttr, *reinterpret_cast<StringImpl*>(&baseFrequencyData) },
        { (void*)&baseProfileAttr, *reinterpret_cast<StringImpl*>(&baseProfileData) },
        { (void*)&baseline_shiftAttr, *reinterpret_cast<StringImpl*>(&baseline_shiftData) },
        { (void*)&bboxAttr, *reinterpret_cast<StringImpl*>(&bboxData) },
        { (void*)&beginAttr, *reinterpret_cast<StringImpl*>(&beginData) },
        { (void*)&biasAttr, *reinterpret_cast<StringImpl*>(&biasData) },
        { (void*)&buffered_renderingAttr, *reinterpret_cast<StringImpl*>(&buffered_renderingData) },
        { (void*)&byAttr, *reinterpret_cast<StringImpl*>(&byData) },
        { (void*)&calcModeAttr, *reinterpret_cast<StringImpl*>(&calcModeData) },
        { (void*)&cap_heightAttr, *reinterpret_cast<StringImpl*>(&cap_heightData) },
        { (void*)&clipAttr, *reinterpret_cast<StringImpl*>(&clipData) },
        { (void*)&clipPathUnitsAttr, *reinterpret_cast<StringImpl*>(&clipPathUnitsData) },
        { (void*)&clip_pathAttr, *reinterpret_cast<StringImpl*>(&clip_pathData) },
        { (void*)&clip_ruleAttr, *reinterpret_cast<StringImpl*>(&clip_ruleData) },
        { (void*)&colorAttr, *reinterpret_cast<StringImpl*>(&colorData) },
        { (void*)&color_interpolationAttr, *reinterpret_cast<StringImpl*>(&color_interpolationData) },
        { (void*)&color_interpolation_filtersAttr, *reinterpret_cast<StringImpl*>(&color_interpolation_filtersData) },
        { (void*)&color_profileAttr, *reinterpret_cast<StringImpl*>(&color_profileData) },
        { (void*)&color_renderingAttr, *reinterpret_cast<StringImpl*>(&color_renderingData) },
        { (void*)&contentScriptTypeAttr, *reinterpret_cast<StringImpl*>(&contentScriptTypeData) },
        { (void*)&contentStyleTypeAttr, *reinterpret_cast<StringImpl*>(&contentStyleTypeData) },
        { (void*)&cursorAttr, *reinterpret_cast<StringImpl*>(&cursorData) },
        { (void*)&cxAttr, *reinterpret_cast<StringImpl*>(&cxData) },
        { (void*)&cyAttr, *reinterpret_cast<StringImpl*>(&cyData) },
        { (void*)&dAttr, *reinterpret_cast<StringImpl*>(&dData) },
        { (void*)&descentAttr, *reinterpret_cast<StringImpl*>(&descentData) },
        { (void*)&diffuseConstantAttr, *reinterpret_cast<StringImpl*>(&diffuseConstantData) },
        { (void*)&directionAttr, *reinterpret_cast<StringImpl*>(&directionData) },
        { (void*)&displayAttr, *reinterpret_cast<StringImpl*>(&displayData) },
        { (void*)&divisorAttr, *reinterpret_cast<StringImpl*>(&divisorData) },
        { (void*)&dominant_baselineAttr, *reinterpret_cast<StringImpl*>(&dominant_baselineData) },
        { (void*)&durAttr, *reinterpret_cast<StringImpl*>(&durData) },
        { (void*)&dxAttr, *reinterpret_cast<StringImpl*>(&dxData) },
        { (void*)&dyAttr, *reinterpret_cast<StringImpl*>(&dyData) },
        { (void*)&edgeModeAttr, *reinterpret_cast<StringImpl*>(&edgeModeData) },
        { (void*)&elevationAttr, *reinterpret_cast<StringImpl*>(&elevationData) },
        { (void*)&enable_backgroundAttr, *reinterpret_cast<StringImpl*>(&enable_backgroundData) },
        { (void*)&endAttr, *reinterpret_cast<StringImpl*>(&endData) },
        { (void*)&exponentAttr, *reinterpret_cast<StringImpl*>(&exponentData) },
        { (void*)&externalResourcesRequiredAttr, *reinterpret_cast<StringImpl*>(&externalResourcesRequiredData) },
        { (void*)&fillAttr, *reinterpret_cast<StringImpl*>(&fillData) },
        { (void*)&fill_opacityAttr, *reinterpret_cast<StringImpl*>(&fill_opacityData) },
        { (void*)&fill_ruleAttr, *reinterpret_cast<StringImpl*>(&fill_ruleData) },
        { (void*)&filterAttr, *reinterpret_cast<StringImpl*>(&filterData) },
        { (void*)&filterResAttr, *reinterpret_cast<StringImpl*>(&filterResData) },
        { (void*)&filterUnitsAttr, *reinterpret_cast<StringImpl*>(&filterUnitsData) },
        { (void*)&flood_colorAttr, *reinterpret_cast<StringImpl*>(&flood_colorData) },
        { (void*)&flood_opacityAttr, *reinterpret_cast<StringImpl*>(&flood_opacityData) },
        { (void*)&font_familyAttr, *reinterpret_cast<StringImpl*>(&font_familyData) },
        { (void*)&font_sizeAttr, *reinterpret_cast<StringImpl*>(&font_sizeData) },
        { (void*)&font_size_adjustAttr, *reinterpret_cast<StringImpl*>(&font_size_adjustData) },
        { (void*)&font_stretchAttr, *reinterpret_cast<StringImpl*>(&font_stretchData) },
        { (void*)&font_styleAttr, *reinterpret_cast<StringImpl*>(&font_styleData) },
        { (void*)&font_variantAttr, *reinterpret_cast<StringImpl*>(&font_variantData) },
        { (void*)&font_weightAttr, *reinterpret_cast<StringImpl*>(&font_weightData) },
        { (void*)&formatAttr, *reinterpret_cast<StringImpl*>(&formatData) },
        { (void*)&frAttr, *reinterpret_cast<StringImpl*>(&frData) },
        { (void*)&fromAttr, *reinterpret_cast<StringImpl*>(&fromData) },
        { (void*)&fxAttr, *reinterpret_cast<StringImpl*>(&fxData) },
        { (void*)&fyAttr, *reinterpret_cast<StringImpl*>(&fyData) },
        { (void*)&g1Attr, *reinterpret_cast<StringImpl*>(&g1Data) },
        { (void*)&g2Attr, *reinterpret_cast<StringImpl*>(&g2Data) },
        { (void*)&glyphRefAttr, *reinterpret_cast<StringImpl*>(&glyphRefData) },
        { (void*)&glyph_nameAttr, *reinterpret_cast<StringImpl*>(&glyph_nameData) },
        { (void*)&glyph_orientation_horizontalAttr, *reinterpret_cast<StringImpl*>(&glyph_orientation_horizontalData) },
        { (void*)&glyph_orientation_verticalAttr, *reinterpret_cast<StringImpl*>(&glyph_orientation_verticalData) },
        { (void*)&gradientTransformAttr, *reinterpret_cast<StringImpl*>(&gradientTransformData) },
        { (void*)&gradientUnitsAttr, *reinterpret_cast<StringImpl*>(&gradientUnitsData) },
        { (void*)&hangingAttr, *reinterpret_cast<StringImpl*>(&hangingData) },
        { (void*)&heightAttr, *reinterpret_cast<StringImpl*>(&heightData) },
        { (void*)&horiz_adv_xAttr, *reinterpret_cast<StringImpl*>(&horiz_adv_xData) },
        { (void*)&horiz_origin_xAttr, *reinterpret_cast<StringImpl*>(&horiz_origin_xData) },
        { (void*)&horiz_origin_yAttr, *reinterpret_cast<StringImpl*>(&horiz_origin_yData) },
        { (void*)&ideographicAttr, *reinterpret_cast<StringImpl*>(&ideographicData) },
        { (void*)&image_renderingAttr, *reinterpret_cast<StringImpl*>(&image_renderingData) },
        { (void*)&inAttr, *reinterpret_cast<StringImpl*>(&inData) },
        { (void*)&in2Attr, *reinterpret_cast<StringImpl*>(&in2Data) },
        { (void*)&interceptAttr, *reinterpret_cast<StringImpl*>(&interceptData) },
        { (void*)&kAttr, *reinterpret_cast<StringImpl*>(&kData) },
        { (void*)&k1Attr, *reinterpret_cast<StringImpl*>(&k1Data) },
        { (void*)&k2Attr, *reinterpret_cast<StringImpl*>(&k2Data) },
        { (void*)&k3Attr, *reinterpret_cast<StringImpl*>(&k3Data) },
        { (void*)&k4Attr, *reinterpret_cast<StringImpl*>(&k4Data) },
        { (void*)&kernelMatrixAttr, *reinterpret_cast<StringImpl*>(&kernelMatrixData) },
        { (void*)&kernelUnitLengthAttr, *reinterpret_cast<StringImpl*>(&kernelUnitLengthData) },
        { (void*)&kerningAttr, *reinterpret_cast<StringImpl*>(&kerningData) },
        { (void*)&keyPointsAttr, *reinterpret_cast<StringImpl*>(&keyPointsData) },
        { (void*)&keySplinesAttr, *reinterpret_cast<StringImpl*>(&keySplinesData) },
        { (void*)&keyTimesAttr, *reinterpret_cast<StringImpl*>(&keyTimesData) },
        { (void*)&langAttr, *reinterpret_cast<StringImpl*>(&langData) },
        { (void*)&lengthAdjustAttr, *reinterpret_cast<StringImpl*>(&lengthAdjustData) },
        { (void*)&letter_spacingAttr, *reinterpret_cast<StringImpl*>(&letter_spacingData) },
        { (void*)&lighting_colorAttr, *reinterpret_cast<StringImpl*>(&lighting_colorData) },
        { (void*)&limitingConeAngleAttr, *reinterpret_cast<StringImpl*>(&limitingConeAngleData) },
        { (void*)&localAttr, *reinterpret_cast<StringImpl*>(&localData) },
        { (void*)&markerHeightAttr, *reinterpret_cast<StringImpl*>(&markerHeightData) },
        { (void*)&markerUnitsAttr, *reinterpret_cast<StringImpl*>(&markerUnitsData) },
        { (void*)&markerWidthAttr, *reinterpret_cast<StringImpl*>(&markerWidthData) },
        { (void*)&marker_endAttr, *reinterpret_cast<StringImpl*>(&marker_endData) },
        { (void*)&marker_midAttr, *reinterpret_cast<StringImpl*>(&marker_midData) },
        { (void*)&marker_startAttr, *reinterpret_cast<StringImpl*>(&marker_startData) },
        { (void*)&maskAttr, *reinterpret_cast<StringImpl*>(&maskData) },
        { (void*)&maskContentUnitsAttr, *reinterpret_cast<StringImpl*>(&maskContentUnitsData) },
        { (void*)&maskUnitsAttr, *reinterpret_cast<StringImpl*>(&maskUnitsData) },
        { (void*)&mask_typeAttr, *reinterpret_cast<StringImpl*>(&mask_typeData) },
        { (void*)&mathematicalAttr, *reinterpret_cast<StringImpl*>(&mathematicalData) },
        { (void*)&maxAttr, *reinterpret_cast<StringImpl*>(&maxData) },
        { (void*)&mediaAttr, *reinterpret_cast<StringImpl*>(&mediaData) },
        { (void*)&methodAttr, *reinterpret_cast<StringImpl*>(&methodData) },
        { (void*)&minAttr, *reinterpret_cast<StringImpl*>(&minData) },
        { (void*)&modeAttr, *reinterpret_cast<StringImpl*>(&modeData) },
        { (void*)&nameAttr, *reinterpret_cast<StringImpl*>(&nameData) },
        { (void*)&numOctavesAttr, *reinterpret_cast<StringImpl*>(&numOctavesData) },
        { (void*)&offsetAttr, *reinterpret_cast<StringImpl*>(&offsetData) },
        { (void*)&onbeginAttr, *reinterpret_cast<StringImpl*>(&onbeginData) },
        { (void*)&onendAttr, *reinterpret_cast<StringImpl*>(&onendData) },
        { (void*)&onzoomAttr, *reinterpret_cast<StringImpl*>(&onzoomData) },
        { (void*)&opacityAttr, *reinterpret_cast<StringImpl*>(&opacityData) },
        { (void*)&operatorAttr, *reinterpret_cast<StringImpl*>(&operatorData) },
        { (void*)&orderAttr, *reinterpret_cast<StringImpl*>(&orderData) },
        { (void*)&orientAttr, *reinterpret_cast<StringImpl*>(&orientData) },
        { (void*)&orientationAttr, *reinterpret_cast<StringImpl*>(&orientationData) },
        { (void*)&originAttr, *reinterpret_cast<StringImpl*>(&originData) },
        { (void*)&overflowAttr, *reinterpret_cast<StringImpl*>(&overflowData) },
        { (void*)&overline_positionAttr, *reinterpret_cast<StringImpl*>(&overline_positionData) },
        { (void*)&overline_thicknessAttr, *reinterpret_cast<StringImpl*>(&overline_thicknessData) },
        { (void*)&paint_orderAttr, *reinterpret_cast<StringImpl*>(&paint_orderData) },
        { (void*)&panose_1Attr, *reinterpret_cast<StringImpl*>(&panose_1Data) },
        { (void*)&pathAttr, *reinterpret_cast<StringImpl*>(&pathData) },
        { (void*)&pathLengthAttr, *reinterpret_cast<StringImpl*>(&pathLengthData) },
        { (void*)&patternContentUnitsAttr, *reinterpret_cast<StringImpl*>(&patternContentUnitsData) },
        { (void*)&patternTransformAttr, *reinterpret_cast<StringImpl*>(&patternTransformData) },
        { (void*)&patternUnitsAttr, *reinterpret_cast<StringImpl*>(&patternUnitsData) },
        { (void*)&pointer_eventsAttr, *reinterpret_cast<StringImpl*>(&pointer_eventsData) },
        { (void*)&pointsAttr, *reinterpret_cast<StringImpl*>(&pointsData) },
        { (void*)&pointsAtXAttr, *reinterpret_cast<StringImpl*>(&pointsAtXData) },
        { (void*)&pointsAtYAttr, *reinterpret_cast<StringImpl*>(&pointsAtYData) },
        { (void*)&pointsAtZAttr, *reinterpret_cast<StringImpl*>(&pointsAtZData) },
        { (void*)&preserveAlphaAttr, *reinterpret_cast<StringImpl*>(&preserveAlphaData) },
        { (void*)&preserveAspectRatioAttr, *reinterpret_cast<StringImpl*>(&preserveAspectRatioData) },
        { (void*)&primitiveUnitsAttr, *reinterpret_cast<StringImpl*>(&primitiveUnitsData) },
        { (void*)&rAttr, *reinterpret_cast<StringImpl*>(&rData) },
        { (void*)&radiusAttr, *reinterpret_cast<StringImpl*>(&radiusData) },
        { (void*)&refXAttr, *reinterpret_cast<StringImpl*>(&refXData) },
        { (void*)&refYAttr, *reinterpret_cast<StringImpl*>(&refYData) },
        { (void*)&rendering_intentAttr, *reinterpret_cast<StringImpl*>(&rendering_intentData) },
        { (void*)&repeatCountAttr, *reinterpret_cast<StringImpl*>(&repeatCountData) },
        { (void*)&repeatDurAttr, *reinterpret_cast<StringImpl*>(&repeatDurData) },
        { (void*)&requiredExtensionsAttr, *reinterpret_cast<StringImpl*>(&requiredExtensionsData) },
        { (void*)&requiredFeaturesAttr, *reinterpret_cast<StringImpl*>(&requiredFeaturesData) },
        { (void*)&restartAttr, *reinterpret_cast<StringImpl*>(&restartData) },
        { (void*)&resultAttr, *reinterpret_cast<StringImpl*>(&resultData) },
        { (void*)&rotateAttr, *reinterpret_cast<StringImpl*>(&rotateData) },
        { (void*)&rxAttr, *reinterpret_cast<StringImpl*>(&rxData) },
        { (void*)&ryAttr, *reinterpret_cast<StringImpl*>(&ryData) },
        { (void*)&scaleAttr, *reinterpret_cast<StringImpl*>(&scaleData) },
        { (void*)&seedAttr, *reinterpret_cast<StringImpl*>(&seedData) },
        { (void*)&shape_renderingAttr, *reinterpret_cast<StringImpl*>(&shape_renderingData) },
        { (void*)&slopeAttr, *reinterpret_cast<StringImpl*>(&slopeData) },
        { (void*)&spacingAttr, *reinterpret_cast<StringImpl*>(&spacingData) },
        { (void*)&specularConstantAttr, *reinterpret_cast<StringImpl*>(&specularConstantData) },
        { (void*)&specularExponentAttr, *reinterpret_cast<StringImpl*>(&specularExponentData) },
        { (void*)&spreadMethodAttr, *reinterpret_cast<StringImpl*>(&spreadMethodData) },
        { (void*)&startOffsetAttr, *reinterpret_cast<StringImpl*>(&startOffsetData) },
        { (void*)&stdDeviationAttr, *reinterpret_cast<StringImpl*>(&stdDeviationData) },
        { (void*)&stemhAttr, *reinterpret_cast<StringImpl*>(&stemhData) },
        { (void*)&stemvAttr, *reinterpret_cast<StringImpl*>(&stemvData) },
        { (void*)&stitchTilesAttr, *reinterpret_cast<StringImpl*>(&stitchTilesData) },
        { (void*)&stop_colorAttr, *reinterpret_cast<StringImpl*>(&stop_colorData) },
        { (void*)&stop_opacityAttr, *reinterpret_cast<StringImpl*>(&stop_opacityData) },
        { (void*)&strikethrough_positionAttr, *reinterpret_cast<StringImpl*>(&strikethrough_positionData) },
        { (void*)&strikethrough_thicknessAttr, *reinterpret_cast<StringImpl*>(&strikethrough_thicknessData) },
        { (void*)&strokeAttr, *reinterpret_cast<StringImpl*>(&strokeData) },
        { (void*)&stroke_dasharrayAttr, *reinterpret_cast<StringImpl*>(&stroke_dasharrayData) },
        { (void*)&stroke_dashoffsetAttr, *reinterpret_cast<StringImpl*>(&stroke_dashoffsetData) },
        { (void*)&stroke_linecapAttr, *reinterpret_cast<StringImpl*>(&stroke_linecapData) },
        { (void*)&stroke_linejoinAttr, *reinterpret_cast<StringImpl*>(&stroke_linejoinData) },
        { (void*)&stroke_miterlimitAttr, *reinterpret_cast<StringImpl*>(&stroke_miterlimitData) },
        { (void*)&stroke_opacityAttr, *reinterpret_cast<StringImpl*>(&stroke_opacityData) },
        { (void*)&stroke_widthAttr, *reinterpret_cast<StringImpl*>(&stroke_widthData) },
        { (void*)&styleAttr, *reinterpret_cast<StringImpl*>(&styleData) },
        { (void*)&surfaceScaleAttr, *reinterpret_cast<StringImpl*>(&surfaceScaleData) },
        { (void*)&systemLanguageAttr, *reinterpret_cast<StringImpl*>(&systemLanguageData) },
        { (void*)&tableValuesAttr, *reinterpret_cast<StringImpl*>(&tableValuesData) },
        { (void*)&targetAttr, *reinterpret_cast<StringImpl*>(&targetData) },
        { (void*)&targetXAttr, *reinterpret_cast<StringImpl*>(&targetXData) },
        { (void*)&targetYAttr, *reinterpret_cast<StringImpl*>(&targetYData) },
        { (void*)&textLengthAttr, *reinterpret_cast<StringImpl*>(&textLengthData) },
        { (void*)&text_anchorAttr, *reinterpret_cast<StringImpl*>(&text_anchorData) },
        { (void*)&text_decorationAttr, *reinterpret_cast<StringImpl*>(&text_decorationData) },
        { (void*)&text_renderingAttr, *reinterpret_cast<StringImpl*>(&text_renderingData) },
        { (void*)&titleAttr, *reinterpret_cast<StringImpl*>(&titleData) },
        { (void*)&toAttr, *reinterpret_cast<StringImpl*>(&toData) },
        { (void*)&transformAttr, *reinterpret_cast<StringImpl*>(&transformData) },
        { (void*)&transform_originAttr, *reinterpret_cast<StringImpl*>(&transform_originData) },
        { (void*)&typeAttr, *reinterpret_cast<StringImpl*>(&typeData) },
        { (void*)&u1Attr, *reinterpret_cast<StringImpl*>(&u1Data) },
        { (void*)&u2Attr, *reinterpret_cast<StringImpl*>(&u2Data) },
        { (void*)&underline_positionAttr, *reinterpret_cast<StringImpl*>(&underline_positionData) },
        { (void*)&underline_thicknessAttr, *reinterpret_cast<StringImpl*>(&underline_thicknessData) },
        { (void*)&unicodeAttr, *reinterpret_cast<StringImpl*>(&unicodeData) },
        { (void*)&unicode_bidiAttr, *reinterpret_cast<StringImpl*>(&unicode_bidiData) },
        { (void*)&unicode_rangeAttr, *reinterpret_cast<StringImpl*>(&unicode_rangeData) },
        { (void*)&units_per_emAttr, *reinterpret_cast<StringImpl*>(&units_per_emData) },
        { (void*)&v_alphabeticAttr, *reinterpret_cast<StringImpl*>(&v_alphabeticData) },
        { (void*)&v_hangingAttr, *reinterpret_cast<StringImpl*>(&v_hangingData) },
        { (void*)&v_ideographicAttr, *reinterpret_cast<StringImpl*>(&v_ideographicData) },
        { (void*)&v_mathematicalAttr, *reinterpret_cast<StringImpl*>(&v_mathematicalData) },
        { (void*)&valuesAttr, *reinterpret_cast<StringImpl*>(&valuesData) },
        { (void*)&vector_effectAttr, *reinterpret_cast<StringImpl*>(&vector_effectData) },
        { (void*)&versionAttr, *reinterpret_cast<StringImpl*>(&versionData) },
        { (void*)&vert_adv_yAttr, *reinterpret_cast<StringImpl*>(&vert_adv_yData) },
        { (void*)&vert_origin_xAttr, *reinterpret_cast<StringImpl*>(&vert_origin_xData) },
        { (void*)&vert_origin_yAttr, *reinterpret_cast<StringImpl*>(&vert_origin_yData) },
        { (void*)&viewBoxAttr, *reinterpret_cast<StringImpl*>(&viewBoxData) },
        { (void*)&viewTargetAttr, *reinterpret_cast<StringImpl*>(&viewTargetData) },
        { (void*)&visibilityAttr, *reinterpret_cast<StringImpl*>(&visibilityData) },
        { (void*)&widthAttr, *reinterpret_cast<StringImpl*>(&widthData) },
        { (void*)&widthsAttr, *reinterpret_cast<StringImpl*>(&widthsData) },
        { (void*)&word_spacingAttr, *reinterpret_cast<StringImpl*>(&word_spacingData) },
        { (void*)&writing_modeAttr, *reinterpret_cast<StringImpl*>(&writing_modeData) },
        { (void*)&xAttr, *reinterpret_cast<StringImpl*>(&xData) },
        { (void*)&x1Attr, *reinterpret_cast<StringImpl*>(&x1Data) },
        { (void*)&x2Attr, *reinterpret_cast<StringImpl*>(&x2Data) },
        { (void*)&xChannelSelectorAttr, *reinterpret_cast<StringImpl*>(&xChannelSelectorData) },
        { (void*)&x_heightAttr, *reinterpret_cast<StringImpl*>(&x_heightData) },
        { (void*)&yAttr, *reinterpret_cast<StringImpl*>(&yData) },
        { (void*)&y1Attr, *reinterpret_cast<StringImpl*>(&y1Data) },
        { (void*)&y2Attr, *reinterpret_cast<StringImpl*>(&y2Data) },
        { (void*)&yChannelSelectorAttr, *reinterpret_cast<StringImpl*>(&yChannelSelectorData) },
        { (void*)&zAttr, *reinterpret_cast<StringImpl*>(&zData) },
        { (void*)&zoomAndPanAttr, *reinterpret_cast<StringImpl*>(&zoomAndPanData) },
    };

    for (unsigned i = 0; i < WTF_ARRAY_LENGTH(attributesTable); ++i)
        createQualifiedName(attributesTable[i].targetAddress, &attributesTable[i].name);
}

} }

