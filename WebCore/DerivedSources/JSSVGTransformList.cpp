/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGTransformList.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGMatrix.h"
#include "JSSVGTransform.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionClear(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionInitialize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionGetItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionInsertItemBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionReplaceItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionRemoveItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionAppendItem(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrix(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionConsolidate(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGTransformListNumberOfItems(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGTransformListConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGTransformListPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGTransformListPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGTransformListPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGTransformListPrototype>(vm.heap)) JSSVGTransformListPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGTransformListPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGTransformListConstructor = JSDOMConstructorNotConstructable<JSSVGTransformList>;

template<> JSValue JSSVGTransformListConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSSVGTransformListConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGTransformList::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGTransformList"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGTransformListConstructor::s_info = { "SVGTransformList", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTransformListConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGTransformListPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTransformListConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGTransformListConstructor) } },
    { "numberOfItems", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGTransformListNumberOfItems), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "clear", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionClear), (intptr_t) (0) } },
    { "initialize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionInitialize), (intptr_t) (1) } },
    { "getItem", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionGetItem), (intptr_t) (1) } },
    { "insertItemBefore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionInsertItemBefore), (intptr_t) (2) } },
    { "replaceItem", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionReplaceItem), (intptr_t) (2) } },
    { "removeItem", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionRemoveItem), (intptr_t) (1) } },
    { "appendItem", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionAppendItem), (intptr_t) (1) } },
    { "createSVGTransformFromMatrix", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrix), (intptr_t) (1) } },
    { "consolidate", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGTransformListPrototypeFunctionConsolidate), (intptr_t) (0) } },
};

const ClassInfo JSSVGTransformListPrototype::s_info = { "SVGTransformListPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTransformListPrototype) };

void JSSVGTransformListPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGTransformListPrototypeTableValues, *this);
}

const ClassInfo JSSVGTransformList::s_info = { "SVGTransformList", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGTransformList) };

JSSVGTransformList::JSSVGTransformList(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGTransformList>&& impl)
    : JSDOMWrapper<SVGTransformList>(structure, globalObject, WTFMove(impl))
{
}

void JSSVGTransformList::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGTransformList::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGTransformListPrototype::create(vm, globalObject, JSSVGTransformListPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSVGTransformList::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGTransformList>(vm, globalObject);
}

void JSSVGTransformList::destroy(JSC::JSCell* cell)
{
    JSSVGTransformList* thisObject = static_cast<JSSVGTransformList*>(cell);
    thisObject->JSSVGTransformList::~JSSVGTransformList();
}

template<> inline JSSVGTransformList* BindingCaller<JSSVGTransformList>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGTransformList*>(JSValue::decode(thisValue));
}

template<> inline JSSVGTransformList* BindingCaller<JSSVGTransformList>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGTransformList*>(state.thisValue());
}

static inline JSValue jsSVGTransformListNumberOfItemsGetter(ExecState&, JSSVGTransformList&, ThrowScope& throwScope);

EncodedJSValue jsSVGTransformListNumberOfItems(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGTransformList>::attribute<jsSVGTransformListNumberOfItemsGetter>(state, thisValue, "numberOfItems");
}

static inline JSValue jsSVGTransformListNumberOfItemsGetter(ExecState& state, JSSVGTransformList& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.numberOfItems());
    return result;
}

EncodedJSValue jsSVGTransformListConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGTransformListPrototype* domObject = jsDynamicDowncast<JSSVGTransformListPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGTransformList::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGTransformListConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGTransformListPrototype* domObject = jsDynamicDowncast<JSSVGTransformListPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGTransformList::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGTransformListConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionClearCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionClear(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionClearCaller>(state, "clear");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionClearCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.clear());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionInitializeCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionInitialize(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionInitializeCaller>(state, "initialize");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionInitializeCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto item = convert<IDLInterface<SVGTransform>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "item", "SVGTransformList", "initialize", "SVGTransform"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.initialize(*item)));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionGetItemCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionGetItem(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionGetItemCaller>(state, "getItem");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionGetItemCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.getItem(WTFMove(index))));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionInsertItemBeforeCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionInsertItemBefore(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionInsertItemBeforeCaller>(state, "insertItemBefore");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionInsertItemBeforeCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto item = convert<IDLInterface<SVGTransform>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "item", "SVGTransformList", "insertItemBefore", "SVGTransform"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.insertItemBefore(*item, WTFMove(index))));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionReplaceItemCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionReplaceItem(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionReplaceItemCaller>(state, "replaceItem");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionReplaceItemCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto item = convert<IDLInterface<SVGTransform>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "item", "SVGTransformList", "replaceItem", "SVGTransform"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.replaceItem(*item, WTFMove(index))));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionRemoveItemCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionRemoveItem(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionRemoveItemCaller>(state, "removeItem");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionRemoveItemCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.removeItem(WTFMove(index))));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionAppendItemCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionAppendItem(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionAppendItemCaller>(state, "appendItem");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionAppendItemCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto item = convert<IDLInterface<SVGTransform>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "item", "SVGTransformList", "appendItem", "SVGTransform"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.appendItem(*item)));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrixCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrix(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrixCaller>(state, "createSVGTransformFromMatrix");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionCreateSVGTransformFromMatrixCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto matrix = convert<IDLInterface<SVGMatrix>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "matrix", "SVGTransformList", "createSVGTransformFromMatrix", "SVGMatrix"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.createSVGTransformFromMatrix(*matrix)));
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionConsolidateCaller(JSC::ExecState*, JSSVGTransformList*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGTransformListPrototypeFunctionConsolidate(ExecState* state)
{
    return BindingCaller<JSSVGTransformList>::callOperation<jsSVGTransformListPrototypeFunctionConsolidateCaller>(state, "consolidate");
}

static inline JSC::EncodedJSValue jsSVGTransformListPrototypeFunctionConsolidateCaller(JSC::ExecState* state, JSSVGTransformList* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGTransform>>(*state, *castedThis->globalObject(), throwScope, impl.consolidate()));
}

bool JSSVGTransformListOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSSVGTransformListOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSVGTransformList = static_cast<JSSVGTransformList*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSVGTransformList->wrapped(), jsSVGTransformList);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SVGTransformList@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore16SVGTransformListE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SVGTransformList>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SVGTransformList@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore16SVGTransformListE[2];
#if COMPILER(CLANG)
    // If this fails SVGTransformList does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(SVGTransformList), "SVGTransformList is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SVGTransformList has subclasses. If SVGTransformList has subclasses that get passed
    // to toJS() we currently require SVGTransformList you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<SVGTransformList>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SVGTransformList& impl)
{
    return wrap(state, globalObject, impl);
}

SVGTransformList* JSSVGTransformList::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSVGTransformList*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
