/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLButtonElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSHTMLFormElement.h"
#include "JSNodeList.h"
#include "JSValidityState.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionCheckValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionReportValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionSetCustomValidity(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLButtonElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementForm(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLButtonElementFormAction(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementFormAction(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementFormEnctype(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementFormEnctype(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementFormMethod(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementFormMethod(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementFormNoValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementFormNoValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementFormTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementFormTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLButtonElementWillValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLButtonElementValidity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLButtonElementValidationMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLButtonElementLabels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLButtonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLButtonElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLButtonElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLButtonElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLButtonElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLButtonElementPrototype>(vm.heap)) JSHTMLButtonElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLButtonElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLButtonElementConstructor = JSDOMConstructorNotConstructable<JSHTMLButtonElement>;

template<> JSValue JSHTMLButtonElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLButtonElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLButtonElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLButtonElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLButtonElementConstructor::s_info = { "HTMLButtonElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLButtonElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLButtonElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementConstructor) } },
    { "autofocus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementAutofocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementAutofocus) } },
    { "disabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementDisabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementDisabled) } },
    { "form", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementForm), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "formAction", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementFormAction), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementFormAction) } },
    { "formEnctype", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementFormEnctype), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementFormEnctype) } },
    { "formMethod", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementFormMethod), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementFormMethod) } },
    { "type", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementType) } },
    { "formNoValidate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementFormNoValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementFormNoValidate) } },
    { "formTarget", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementFormTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementFormTarget) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementName) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLButtonElementValue) } },
    { "willValidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementWillValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validity", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementValidity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validationMessage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementValidationMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "labels", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLButtonElementLabels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "checkValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLButtonElementPrototypeFunctionCheckValidity), (intptr_t) (0) } },
    { "reportValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLButtonElementPrototypeFunctionReportValidity), (intptr_t) (0) } },
    { "setCustomValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLButtonElementPrototypeFunctionSetCustomValidity), (intptr_t) (1) } },
};

const ClassInfo JSHTMLButtonElementPrototype::s_info = { "HTMLButtonElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLButtonElementPrototype) };

void JSHTMLButtonElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLButtonElementPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().interactiveFormValidationEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("reportValidity"), strlen("reportValidity"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSHTMLButtonElement::s_info = { "HTMLButtonElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLButtonElement) };

JSHTMLButtonElement::JSHTMLButtonElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLButtonElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLButtonElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLButtonElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLButtonElementPrototype::create(vm, globalObject, JSHTMLButtonElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLButtonElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLButtonElement>(vm, globalObject);
}

template<> inline JSHTMLButtonElement* BindingCaller<JSHTMLButtonElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLButtonElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLButtonElement* BindingCaller<JSHTMLButtonElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLButtonElement*>(state.thisValue());
}

static inline JSValue jsHTMLButtonElementAutofocusGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementAutofocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementAutofocusGetter>(state, thisValue, "autofocus");
}

static inline JSValue jsHTMLButtonElementAutofocusGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::autofocusAttr));
    return result;
}

static inline JSValue jsHTMLButtonElementDisabledGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementDisabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementDisabledGetter>(state, thisValue, "disabled");
}

static inline JSValue jsHTMLButtonElementDisabledGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::disabledAttr));
    return result;
}

static inline JSValue jsHTMLButtonElementFormGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementForm(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormGetter>(state, thisValue, "form");
}

static inline JSValue jsHTMLButtonElementFormGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLFormElement>>(state, *thisObject.globalObject(), impl.form());
    return result;
}

static inline JSValue jsHTMLButtonElementFormActionGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementFormAction(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormActionGetter>(state, thisValue, "formAction");
}

static inline JSValue jsHTMLButtonElementFormActionGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.formAction());
    return result;
}

static inline JSValue jsHTMLButtonElementFormEnctypeGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementFormEnctype(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormEnctypeGetter>(state, thisValue, "formEnctype");
}

static inline JSValue jsHTMLButtonElementFormEnctypeGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.formEnctype());
    return result;
}

static inline JSValue jsHTMLButtonElementFormMethodGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementFormMethod(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormMethodGetter>(state, thisValue, "formMethod");
}

static inline JSValue jsHTMLButtonElementFormMethodGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.formMethod());
    return result;
}

static inline JSValue jsHTMLButtonElementTypeGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsHTMLButtonElementTypeGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsHTMLButtonElementFormNoValidateGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementFormNoValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormNoValidateGetter>(state, thisValue, "formNoValidate");
}

static inline JSValue jsHTMLButtonElementFormNoValidateGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::formnovalidateAttr));
    return result;
}

static inline JSValue jsHTMLButtonElementFormTargetGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementFormTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementFormTargetGetter>(state, thisValue, "formTarget");
}

static inline JSValue jsHTMLButtonElementFormTargetGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::formtargetAttr));
    return result;
}

static inline JSValue jsHTMLButtonElementNameGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLButtonElementNameGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLButtonElementValueGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementValueGetter>(state, thisValue, "value");
}

static inline JSValue jsHTMLButtonElementValueGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::valueAttr));
    return result;
}

static inline JSValue jsHTMLButtonElementWillValidateGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementWillValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementWillValidateGetter>(state, thisValue, "willValidate");
}

static inline JSValue jsHTMLButtonElementWillValidateGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.willValidate());
    return result;
}

static inline JSValue jsHTMLButtonElementValidityGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementValidity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementValidityGetter>(state, thisValue, "validity");
}

static inline JSValue jsHTMLButtonElementValidityGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<ValidityState>>(state, *thisObject.globalObject(), impl.validity());
    return result;
}

static inline JSValue jsHTMLButtonElementValidationMessageGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementValidationMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementValidationMessageGetter>(state, thisValue, "validationMessage");
}

static inline JSValue jsHTMLButtonElementValidationMessageGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.validationMessage());
    return result;
}

static inline JSValue jsHTMLButtonElementLabelsGetter(ExecState&, JSHTMLButtonElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLButtonElementLabels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLButtonElement>::attribute<jsHTMLButtonElementLabelsGetter>(state, thisValue, "labels");
}

static inline JSValue jsHTMLButtonElementLabelsGetter(ExecState& state, JSHTMLButtonElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.labels());
    return result;
}

EncodedJSValue jsHTMLButtonElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLButtonElementPrototype* domObject = jsDynamicDowncast<JSHTMLButtonElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLButtonElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLButtonElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLButtonElementPrototype* domObject = jsDynamicDowncast<JSHTMLButtonElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLButtonElementAutofocusFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementAutofocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementAutofocusFunction>(state, thisValue, encodedValue, "autofocus");
}

static inline bool setJSHTMLButtonElementAutofocusFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementDisabledFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementDisabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementDisabledFunction>(state, thisValue, encodedValue, "disabled");
}

static inline bool setJSHTMLButtonElementDisabledFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::disabledAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementFormActionFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementFormAction(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementFormActionFunction>(state, thisValue, encodedValue, "formAction");
}

static inline bool setJSHTMLButtonElementFormActionFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormAction(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementFormEnctypeFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementFormEnctype(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementFormEnctypeFunction>(state, thisValue, encodedValue, "formEnctype");
}

static inline bool setJSHTMLButtonElementFormEnctypeFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormEnctype(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementFormMethodFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementFormMethod(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementFormMethodFunction>(state, thisValue, encodedValue, "formMethod");
}

static inline bool setJSHTMLButtonElementFormMethodFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setFormMethod(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementTypeFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementType(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementTypeFunction>(state, thisValue, encodedValue, "type");
}

static inline bool setJSHTMLButtonElementTypeFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setType(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementFormNoValidateFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementFormNoValidate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementFormNoValidateFunction>(state, thisValue, encodedValue, "formNoValidate");
}

static inline bool setJSHTMLButtonElementFormNoValidateFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::formnovalidateAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementFormTargetFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementFormTarget(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementFormTargetFunction>(state, thisValue, encodedValue, "formTarget");
}

static inline bool setJSHTMLButtonElementFormTargetFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::formtargetAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementNameFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLButtonElementNameFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLButtonElementValueFunction(ExecState&, JSHTMLButtonElement&, JSValue, ThrowScope&);

bool setJSHTMLButtonElementValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLButtonElement>::setAttribute<setJSHTMLButtonElementValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSHTMLButtonElementValueFunction(ExecState& state, JSHTMLButtonElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::valueAttr, WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLButtonElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLButtonElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionCheckValidityCaller(JSC::ExecState*, JSHTMLButtonElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionCheckValidity(ExecState* state)
{
    return BindingCaller<JSHTMLButtonElement>::callOperation<jsHTMLButtonElementPrototypeFunctionCheckValidityCaller>(state, "checkValidity");
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionCheckValidityCaller(JSC::ExecState* state, JSHTMLButtonElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.checkValidity()));
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionReportValidityCaller(JSC::ExecState*, JSHTMLButtonElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionReportValidity(ExecState* state)
{
    return BindingCaller<JSHTMLButtonElement>::callOperation<jsHTMLButtonElementPrototypeFunctionReportValidityCaller>(state, "reportValidity");
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionReportValidityCaller(JSC::ExecState* state, JSHTMLButtonElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.reportValidity()));
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState*, JSHTMLButtonElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLButtonElementPrototypeFunctionSetCustomValidity(ExecState* state)
{
    return BindingCaller<JSHTMLButtonElement>::callOperation<jsHTMLButtonElementPrototypeFunctionSetCustomValidityCaller>(state, "setCustomValidity");
}

static inline JSC::EncodedJSValue jsHTMLButtonElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState* state, JSHTMLButtonElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto error = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setCustomValidity(WTFMove(error));
    return JSValue::encode(jsUndefined());
}

void JSHTMLButtonElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLButtonElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
