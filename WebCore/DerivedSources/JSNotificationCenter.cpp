/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(LEGACY_NOTIFICATIONS)

#include "JSNotificationCenter.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include "JSNotification.h"
#include "JSVoidCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionCreateNotification(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionCheckPermission(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionRequestPermission(JSC::ExecState*);

class JSNotificationCenterPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSNotificationCenterPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSNotificationCenterPrototype* ptr = new (NotNull, JSC::allocateCell<JSNotificationCenterPrototype>(vm.heap)) JSNotificationCenterPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSNotificationCenterPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSNotificationCenterPrototypeTableValues[] =
{
    { "createNotification", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationCenterPrototypeFunctionCreateNotification), (intptr_t) (3) } },
    { "checkPermission", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationCenterPrototypeFunctionCheckPermission), (intptr_t) (0) } },
    { "requestPermission", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationCenterPrototypeFunctionRequestPermission), (intptr_t) (0) } },
};

const ClassInfo JSNotificationCenterPrototype::s_info = { "NotificationCenterPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNotificationCenterPrototype) };

void JSNotificationCenterPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSNotificationCenterPrototypeTableValues, *this);
}

const ClassInfo JSNotificationCenter::s_info = { "NotificationCenter", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNotificationCenter) };

JSNotificationCenter::JSNotificationCenter(Structure* structure, JSDOMGlobalObject& globalObject, Ref<NotificationCenter>&& impl)
    : JSDOMWrapper<NotificationCenter>(structure, globalObject, WTFMove(impl))
{
}

void JSNotificationCenter::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSNotificationCenter::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSNotificationCenterPrototype::create(vm, globalObject, JSNotificationCenterPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSNotificationCenter::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNotificationCenter>(vm, globalObject);
}

void JSNotificationCenter::destroy(JSC::JSCell* cell)
{
    JSNotificationCenter* thisObject = static_cast<JSNotificationCenter*>(cell);
    thisObject->JSNotificationCenter::~JSNotificationCenter();
}

template<> inline JSNotificationCenter* BindingCaller<JSNotificationCenter>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSNotificationCenter*>(state.thisValue());
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionCreateNotificationCaller(JSC::ExecState*, JSNotificationCenter*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionCreateNotification(ExecState* state)
{
    return BindingCaller<JSNotificationCenter>::callOperation<jsNotificationCenterPrototypeFunctionCreateNotificationCaller>(state, "createNotification");
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionCreateNotificationCaller(JSC::ExecState* state, JSNotificationCenter* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 3))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto iconUrl = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto title = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto body = convert<IDLDOMString>(*state, state->uncheckedArgument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<Notification>>(*state, *castedThis->globalObject(), throwScope, impl.createNotification(WTFMove(iconUrl), WTFMove(title), WTFMove(body))));
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionCheckPermissionCaller(JSC::ExecState*, JSNotificationCenter*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionCheckPermission(ExecState* state)
{
    return BindingCaller<JSNotificationCenter>::callOperation<jsNotificationCenterPrototypeFunctionCheckPermissionCaller>(state, "checkPermission");
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionCheckPermissionCaller(JSC::ExecState* state, JSNotificationCenter* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLLong>(impl.checkPermission()));
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionRequestPermissionCaller(JSC::ExecState*, JSNotificationCenter*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationCenterPrototypeFunctionRequestPermission(ExecState* state)
{
    return BindingCaller<JSNotificationCenter>::callOperation<jsNotificationCenterPrototypeFunctionRequestPermissionCaller>(state, "requestPermission");
}

static inline JSC::EncodedJSValue jsNotificationCenterPrototypeFunctionRequestPermissionCaller(JSC::ExecState* state, JSNotificationCenter* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto callback = convert<IDLNullable<IDLCallbackFunction<JSVoidCallback>>>(*state, state->argument(0), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "NotificationCenter", "requestPermission"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.requestPermission(WTFMove(callback));
    return JSValue::encode(jsUndefined());
}

bool JSNotificationCenterOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsNotificationCenter = jsCast<JSNotificationCenter*>(handle.slot()->asCell());
    if (jsNotificationCenter->wrapped().hasPendingActivity())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNotificationCenterOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsNotificationCenter = static_cast<JSNotificationCenter*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsNotificationCenter->wrapped(), jsNotificationCenter);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7NotificationCenter@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore18NotificationCenterE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<NotificationCenter>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7NotificationCenter@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore18NotificationCenterE[2];
#if COMPILER(CLANG)
    // If this fails NotificationCenter does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(NotificationCenter), "NotificationCenter is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // NotificationCenter has subclasses. If NotificationCenter has subclasses that get passed
    // to toJS() we currently require NotificationCenter you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<NotificationCenter>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, NotificationCenter& impl)
{
    return wrap(state, globalObject, impl);
}

NotificationCenter* JSNotificationCenter::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSNotificationCenter*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(LEGACY_NOTIFICATIONS)
