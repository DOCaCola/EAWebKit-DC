/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(DATA_TRANSFER_ITEMS)

#include "JSDataTransferItem.h"

#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include "JSStringCallback.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferItemPrototypeFunctionGetAsString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsDataTransferItemPrototypeFunctionGetAsFile(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsDataTransferItemKind(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsDataTransferItemType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSDataTransferItemConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSDataTransferItemPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSDataTransferItemPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSDataTransferItemPrototype* ptr = new (NotNull, JSC::allocateCell<JSDataTransferItemPrototype>(vm.heap)) JSDataTransferItemPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSDataTransferItemPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSDataTransferItemPrototypeTableValues[] =
{
    { "kind", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferItemKind), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDataTransferItemType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "getAsString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferItemPrototypeFunctionGetAsString), (intptr_t) (0) } },
    { "getAsFile", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsDataTransferItemPrototypeFunctionGetAsFile), (intptr_t) (0) } },
};

const ClassInfo JSDataTransferItemPrototype::s_info = { "DataTransferItemPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDataTransferItemPrototype) };

void JSDataTransferItemPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSDataTransferItemPrototypeTableValues, *this);
}

const ClassInfo JSDataTransferItem::s_info = { "DataTransferItem", &Base::s_info, 0, CREATE_METHOD_TABLE(JSDataTransferItem) };

JSDataTransferItem::JSDataTransferItem(Structure* structure, JSDOMGlobalObject& globalObject, Ref<DataTransferItem>&& impl)
    : JSDOMWrapper<DataTransferItem>(structure, globalObject, WTFMove(impl))
{
}

void JSDataTransferItem::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSDataTransferItem::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSDataTransferItemPrototype::create(vm, globalObject, JSDataTransferItemPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSDataTransferItem::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSDataTransferItem>(vm, globalObject);
}

void JSDataTransferItem::destroy(JSC::JSCell* cell)
{
    JSDataTransferItem* thisObject = static_cast<JSDataTransferItem*>(cell);
    thisObject->JSDataTransferItem::~JSDataTransferItem();
}

template<> inline JSDataTransferItem* BindingCaller<JSDataTransferItem>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSDataTransferItem*>(JSValue::decode(thisValue));
}

template<> inline JSDataTransferItem* BindingCaller<JSDataTransferItem>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSDataTransferItem*>(state.thisValue());
}

static inline JSValue jsDataTransferItemKindGetter(ExecState&, JSDataTransferItem&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferItemKind(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransferItem>::attribute<jsDataTransferItemKindGetter>(state, thisValue, "kind");
}

static inline JSValue jsDataTransferItemKindGetter(ExecState& state, JSDataTransferItem& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.kind());
    return result;
}

static inline JSValue jsDataTransferItemTypeGetter(ExecState&, JSDataTransferItem&, ThrowScope& throwScope);

EncodedJSValue jsDataTransferItemType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSDataTransferItem>::attribute<jsDataTransferItemTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsDataTransferItemTypeGetter(ExecState& state, JSDataTransferItem& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

bool setJSDataTransferItemConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSDataTransferItemPrototype* domObject = jsDynamicDowncast<JSDataTransferItemPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline JSC::EncodedJSValue jsDataTransferItemPrototypeFunctionGetAsStringCaller(JSC::ExecState*, JSDataTransferItem*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferItemPrototypeFunctionGetAsString(ExecState* state)
{
    return BindingCaller<JSDataTransferItem>::callOperation<jsDataTransferItemPrototypeFunctionGetAsStringCaller>(state, "getAsString");
}

static inline JSC::EncodedJSValue jsDataTransferItemPrototypeFunctionGetAsStringCaller(JSC::ExecState* state, JSDataTransferItem* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto callback = convert<IDLNullable<IDLCallbackFunction<JSStringCallback>>>(*state, state->argument(0), *castedThis->globalObject(), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "DataTransferItem", "getAsString"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.getAsString(WTFMove(callback));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsDataTransferItemPrototypeFunctionGetAsFileCaller(JSC::ExecState*, JSDataTransferItem*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsDataTransferItemPrototypeFunctionGetAsFile(ExecState* state)
{
    return BindingCaller<JSDataTransferItem>::callOperation<jsDataTransferItemPrototypeFunctionGetAsFileCaller>(state, "getAsFile");
}

static inline JSC::EncodedJSValue jsDataTransferItemPrototypeFunctionGetAsFileCaller(JSC::ExecState* state, JSDataTransferItem* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Blob>>(*state, *castedThis->globalObject(), impl.getAsFile()));
}

bool JSDataTransferItemOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSDataTransferItemOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsDataTransferItem = static_cast<JSDataTransferItem*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsDataTransferItem->wrapped(), jsDataTransferItem);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<DataTransferItem>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to DataTransferItem.
    static_assert(!__is_polymorphic(DataTransferItem), "DataTransferItem is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<DataTransferItem>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, DataTransferItem& impl)
{
    return wrap(state, globalObject, impl);
}

DataTransferItem* JSDataTransferItem::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSDataTransferItem*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(DATA_TRANSFER_ITEMS)
