/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLAnchorElement.h"

#include "CustomElementReactionQueue.h"
#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMTokenList.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLAnchorElementPrototypeFunctionToString(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLAnchorElementCharset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementCharset(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementCoords(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementCoords(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(DOWNLOAD_ATTRIBUTE)
JSC::EncodedJSValue jsHTMLAnchorElementDownload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementDownload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsHTMLAnchorElementHreflang(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementHreflang(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementPing(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementPing(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementRel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementRel(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementRev(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementRev(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementShape(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementShape(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementText(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementRelList(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementRelList(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementHref(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementHref(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementOrigin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLAnchorElementProtocol(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementProtocol(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementUsername(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementUsername(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementPassword(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementPassword(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementHost(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementHost(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementHostname(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementHostname(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementPort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementPort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementPathname(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementPathname(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementSearch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementSearch(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementHash(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementHash(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLAnchorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLAnchorElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLAnchorElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLAnchorElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLAnchorElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLAnchorElementPrototype>(vm.heap)) JSHTMLAnchorElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLAnchorElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLAnchorElementConstructor = JSDOMConstructorNotConstructable<JSHTMLAnchorElement>;

template<> JSValue JSHTMLAnchorElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLAnchorElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLAnchorElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLAnchorElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLAnchorElementConstructor::s_info = { "HTMLAnchorElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLAnchorElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLAnchorElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementConstructor) } },
    { "charset", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementCharset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementCharset) } },
    { "coords", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementCoords), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementCoords) } },
#if ENABLE(DOWNLOAD_ATTRIBUTE)
    { "download", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementDownload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementDownload) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "hreflang", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementHreflang), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementHreflang) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementName) } },
    { "ping", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementPing), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementPing) } },
    { "rel", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementRel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementRel) } },
    { "rev", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementRev), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementRev) } },
    { "shape", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementShape), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementShape) } },
    { "target", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementTarget) } },
    { "type", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementType) } },
    { "text", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementText) } },
    { "relList", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementRelList), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementRelList) } },
    { "href", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementHref), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementHref) } },
    { "origin", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementOrigin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "protocol", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementProtocol), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementProtocol) } },
    { "username", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementUsername), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementUsername) } },
    { "password", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementPassword), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementPassword) } },
    { "host", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementHost), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementHost) } },
    { "hostname", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementHostname), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementHostname) } },
    { "port", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementPort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementPort) } },
    { "pathname", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementPathname), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementPathname) } },
    { "search", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementSearch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementSearch) } },
    { "hash", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLAnchorElementHash), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLAnchorElementHash) } },
    { "toString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLAnchorElementPrototypeFunctionToString), (intptr_t) (0) } },
};

const ClassInfo JSHTMLAnchorElementPrototype::s_info = { "HTMLAnchorElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLAnchorElementPrototype) };

void JSHTMLAnchorElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLAnchorElementPrototypeTableValues, *this);
#if ENABLE(DOWNLOAD_ATTRIBUTE)
    if (!RuntimeEnabledFeatures::sharedFeatures().downloadAttributeEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("download"), strlen("download"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
#endif
}

const ClassInfo JSHTMLAnchorElement::s_info = { "HTMLAnchorElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLAnchorElement) };

JSHTMLAnchorElement::JSHTMLAnchorElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLAnchorElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLAnchorElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLAnchorElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLAnchorElementPrototype::create(vm, globalObject, JSHTMLAnchorElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLAnchorElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLAnchorElement>(vm, globalObject);
}

template<> inline JSHTMLAnchorElement* BindingCaller<JSHTMLAnchorElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLAnchorElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLAnchorElement* BindingCaller<JSHTMLAnchorElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLAnchorElement*>(state.thisValue());
}

static inline JSValue jsHTMLAnchorElementCharsetGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementCharset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementCharsetGetter>(state, thisValue, "charset");
}

static inline JSValue jsHTMLAnchorElementCharsetGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::charsetAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementCoordsGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementCoords(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementCoordsGetter>(state, thisValue, "coords");
}

static inline JSValue jsHTMLAnchorElementCoordsGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::coordsAttr));
    return result;
}

#if ENABLE(DOWNLOAD_ATTRIBUTE)
static inline JSValue jsHTMLAnchorElementDownloadGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementDownload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementDownloadGetter>(state, thisValue, "download");
}

static inline JSValue jsHTMLAnchorElementDownloadGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::downloadAttr));
    return result;
}

#endif

static inline JSValue jsHTMLAnchorElementHreflangGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementHreflang(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementHreflangGetter>(state, thisValue, "hreflang");
}

static inline JSValue jsHTMLAnchorElementHreflangGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::hreflangAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementNameGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLAnchorElementNameGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLAnchorElementPingGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementPing(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementPingGetter>(state, thisValue, "ping");
}

static inline JSValue jsHTMLAnchorElementPingGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::pingAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementRelGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementRel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementRelGetter>(state, thisValue, "rel");
}

static inline JSValue jsHTMLAnchorElementRelGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::relAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementRevGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementRev(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementRevGetter>(state, thisValue, "rev");
}

static inline JSValue jsHTMLAnchorElementRevGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::revAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementShapeGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementShape(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementShapeGetter>(state, thisValue, "shape");
}

static inline JSValue jsHTMLAnchorElementShapeGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::shapeAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementTargetGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementTargetGetter>(state, thisValue, "target");
}

static inline JSValue jsHTMLAnchorElementTargetGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::targetAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementTypeGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsHTMLAnchorElementTypeGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::typeAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementTextGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementTextGetter>(state, thisValue, "text");
}

static inline JSValue jsHTMLAnchorElementTextGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.text());
    return result;
}

static inline JSValue jsHTMLAnchorElementRelListGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementRelList(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementRelListGetter>(state, thisValue, "relList");
}

static inline JSValue jsHTMLAnchorElementRelListGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMTokenList>>(state, *thisObject.globalObject(), impl.relList());
    return result;
}

static inline JSValue jsHTMLAnchorElementHrefGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementHref(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementHrefGetter>(state, thisValue, "href");
}

static inline JSValue jsHTMLAnchorElementHrefGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.getURLAttribute(WebCore::HTMLNames::hrefAttr));
    return result;
}

static inline JSValue jsHTMLAnchorElementOriginGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementOrigin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementOriginGetter>(state, thisValue, "origin");
}

static inline JSValue jsHTMLAnchorElementOriginGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.origin());
    return result;
}

static inline JSValue jsHTMLAnchorElementProtocolGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementProtocol(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementProtocolGetter>(state, thisValue, "protocol");
}

static inline JSValue jsHTMLAnchorElementProtocolGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.protocol());
    return result;
}

static inline JSValue jsHTMLAnchorElementUsernameGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementUsername(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementUsernameGetter>(state, thisValue, "username");
}

static inline JSValue jsHTMLAnchorElementUsernameGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.username());
    return result;
}

static inline JSValue jsHTMLAnchorElementPasswordGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementPassword(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementPasswordGetter>(state, thisValue, "password");
}

static inline JSValue jsHTMLAnchorElementPasswordGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.password());
    return result;
}

static inline JSValue jsHTMLAnchorElementHostGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementHost(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementHostGetter>(state, thisValue, "host");
}

static inline JSValue jsHTMLAnchorElementHostGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.host());
    return result;
}

static inline JSValue jsHTMLAnchorElementHostnameGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementHostname(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementHostnameGetter>(state, thisValue, "hostname");
}

static inline JSValue jsHTMLAnchorElementHostnameGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.hostname());
    return result;
}

static inline JSValue jsHTMLAnchorElementPortGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementPort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementPortGetter>(state, thisValue, "port");
}

static inline JSValue jsHTMLAnchorElementPortGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.port());
    return result;
}

static inline JSValue jsHTMLAnchorElementPathnameGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementPathname(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementPathnameGetter>(state, thisValue, "pathname");
}

static inline JSValue jsHTMLAnchorElementPathnameGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.pathname());
    return result;
}

static inline JSValue jsHTMLAnchorElementSearchGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementSearch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementSearchGetter>(state, thisValue, "search");
}

static inline JSValue jsHTMLAnchorElementSearchGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.search());
    return result;
}

static inline JSValue jsHTMLAnchorElementHashGetter(ExecState&, JSHTMLAnchorElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLAnchorElementHash(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLAnchorElement>::attribute<jsHTMLAnchorElementHashGetter>(state, thisValue, "hash");
}

static inline JSValue jsHTMLAnchorElementHashGetter(ExecState& state, JSHTMLAnchorElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUSVString>(state, impl.hash());
    return result;
}

EncodedJSValue jsHTMLAnchorElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLAnchorElementPrototype* domObject = jsDynamicDowncast<JSHTMLAnchorElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLAnchorElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLAnchorElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLAnchorElementPrototype* domObject = jsDynamicDowncast<JSHTMLAnchorElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLAnchorElementCharsetFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementCharset(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementCharsetFunction>(state, thisValue, encodedValue, "charset");
}

static inline bool setJSHTMLAnchorElementCharsetFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::charsetAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementCoordsFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementCoords(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementCoordsFunction>(state, thisValue, encodedValue, "coords");
}

static inline bool setJSHTMLAnchorElementCoordsFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::coordsAttr, WTFMove(nativeValue));
    return true;
}


#if ENABLE(DOWNLOAD_ATTRIBUTE)
static inline bool setJSHTMLAnchorElementDownloadFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementDownload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementDownloadFunction>(state, thisValue, encodedValue, "download");
}

static inline bool setJSHTMLAnchorElementDownloadFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::downloadAttr, WTFMove(nativeValue));
    return true;
}

#endif

static inline bool setJSHTMLAnchorElementHreflangFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementHreflang(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementHreflangFunction>(state, thisValue, encodedValue, "hreflang");
}

static inline bool setJSHTMLAnchorElementHreflangFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::hreflangAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementNameFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLAnchorElementNameFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementPingFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementPing(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementPingFunction>(state, thisValue, encodedValue, "ping");
}

static inline bool setJSHTMLAnchorElementPingFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::pingAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementRelFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementRel(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementRelFunction>(state, thisValue, encodedValue, "rel");
}

static inline bool setJSHTMLAnchorElementRelFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::relAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementRevFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementRev(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementRevFunction>(state, thisValue, encodedValue, "rev");
}

static inline bool setJSHTMLAnchorElementRevFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::revAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementShapeFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementShape(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementShapeFunction>(state, thisValue, encodedValue, "shape");
}

static inline bool setJSHTMLAnchorElementShapeFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::shapeAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementTargetFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementTarget(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementTargetFunction>(state, thisValue, encodedValue, "target");
}

static inline bool setJSHTMLAnchorElementTargetFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::targetAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementTypeFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementType(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementTypeFunction>(state, thisValue, encodedValue, "type");
}

static inline bool setJSHTMLAnchorElementTypeFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::typeAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementTextFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementText(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementTextFunction>(state, thisValue, encodedValue, "text");
}

static inline bool setJSHTMLAnchorElementTextFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setText(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementRelListFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementRelList(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementRelListFunction>(state, thisValue, encodedValue, "relList");
}

static inline bool setJSHTMLAnchorElementRelListFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    Ref<DOMTokenList> forwardedImpl = thisObject.wrapped().relList();
    auto& impl = forwardedImpl.get();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementHrefFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementHref(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementHrefFunction>(state, thisValue, encodedValue, "href");
}

static inline bool setJSHTMLAnchorElementHrefFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::hrefAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementProtocolFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementProtocol(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementProtocolFunction>(state, thisValue, encodedValue, "protocol");
}

static inline bool setJSHTMLAnchorElementProtocolFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setProtocol(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementUsernameFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementUsername(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementUsernameFunction>(state, thisValue, encodedValue, "username");
}

static inline bool setJSHTMLAnchorElementUsernameFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setUsername(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementPasswordFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementPassword(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementPasswordFunction>(state, thisValue, encodedValue, "password");
}

static inline bool setJSHTMLAnchorElementPasswordFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPassword(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementHostFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementHost(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementHostFunction>(state, thisValue, encodedValue, "host");
}

static inline bool setJSHTMLAnchorElementHostFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHost(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementHostnameFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementHostname(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementHostnameFunction>(state, thisValue, encodedValue, "hostname");
}

static inline bool setJSHTMLAnchorElementHostnameFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHostname(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementPortFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementPort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementPortFunction>(state, thisValue, encodedValue, "port");
}

static inline bool setJSHTMLAnchorElementPortFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPort(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementPathnameFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementPathname(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementPathnameFunction>(state, thisValue, encodedValue, "pathname");
}

static inline bool setJSHTMLAnchorElementPathnameFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setPathname(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementSearchFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementSearch(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementSearchFunction>(state, thisValue, encodedValue, "search");
}

static inline bool setJSHTMLAnchorElementSearchFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSearch(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLAnchorElementHashFunction(ExecState&, JSHTMLAnchorElement&, JSValue, ThrowScope&);

bool setJSHTMLAnchorElementHash(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLAnchorElement>::setAttribute<setJSHTMLAnchorElementHashFunction>(state, thisValue, encodedValue, "hash");
}

static inline bool setJSHTMLAnchorElementHashFunction(ExecState& state, JSHTMLAnchorElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUSVString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setHash(WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLAnchorElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLAnchorElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLAnchorElementPrototypeFunctionToStringCaller(JSC::ExecState*, JSHTMLAnchorElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLAnchorElementPrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSHTMLAnchorElement>::callOperation<jsHTMLAnchorElementPrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsHTMLAnchorElementPrototypeFunctionToStringCaller(JSC::ExecState* state, JSHTMLAnchorElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLUSVString>(*state, impl.href()));
}

void JSHTMLAnchorElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLAnchorElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
