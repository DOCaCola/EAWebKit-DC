/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(SUBTLE_CRYPTO)

#include "JSCryptoKeyPair.h"

#include "JSCryptoKey.h"

using namespace JSC;

namespace WebCore {

template<> CryptoKeyPair convertDictionary<CryptoKeyPair>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    CryptoKeyPair result;
    JSValue privateKeyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "privateKey"));
    if (!privateKeyValue.isUndefined()) {
        result.privateKey = convert<IDLInterface<CryptoKey>>(state, privateKeyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue publicKeyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "publicKey"));
    if (!publicKeyValue.isUndefined()) {
        result.publicKey = convert<IDLInterface<CryptoKey>>(state, publicKeyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const CryptoKeyPair& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    if (!IDLInterface<CryptoKey>::isNullValue(dictionary.privateKey)) {
        auto privateKeyValue = toJS<IDLInterface<CryptoKey>>(state, globalObject, IDLInterface<CryptoKey>::extractValueFromNullable(dictionary.privateKey));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "privateKey"), privateKeyValue);
    }
    if (!IDLInterface<CryptoKey>::isNullValue(dictionary.publicKey)) {
        auto publicKeyValue = toJS<IDLInterface<CryptoKey>>(state, globalObject, IDLInterface<CryptoKey>::extractValueFromNullable(dictionary.publicKey));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "publicKey"), publicKeyValue);
    }
    return result;
}

} // namespace WebCore

#endif // ENABLE(SUBTLE_CRYPTO)
