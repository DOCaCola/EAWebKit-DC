/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBDatabase.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMStringList.h"
#include "JSEventListener.h"
#include "JSIDBObjectStore.h"
#include "JSIDBTransaction.h"
#include "JSIDBTransactionMode.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

template<> IDBDatabase::ObjectStoreParameters convertDictionary<IDBDatabase::ObjectStoreParameters>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    IDBDatabase::ObjectStoreParameters result;
    JSValue autoIncrementValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "autoIncrement"));
    if (!autoIncrementValue.isUndefined()) {
        result.autoIncrement = convert<IDLBoolean>(state, autoIncrementValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.autoIncrement = false;
    JSValue keyPathValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "keyPath"));
    if (!keyPathValue.isUndefined()) {
        result.keyPath = convert<IDLNullable<IDLUnion<IDLDOMString, IDLSequence<IDLDOMString>>>>(state, keyPathValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.keyPath = std::nullopt;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionCreateObjectStore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionDeleteObjectStore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionTransaction(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionClose(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIDBDatabaseName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBDatabaseVersion(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBDatabaseObjectStoreNames(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBDatabaseOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBDatabaseOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBDatabaseOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBDatabaseOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBDatabaseOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBDatabaseOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBDatabaseOnversionchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBDatabaseOnversionchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBDatabaseConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIDBDatabasePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIDBDatabasePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIDBDatabasePrototype* ptr = new (NotNull, JSC::allocateCell<JSIDBDatabasePrototype>(vm.heap)) JSIDBDatabasePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIDBDatabasePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIDBDatabaseConstructor = JSDOMConstructorNotConstructable<JSIDBDatabase>;

template<> JSValue JSIDBDatabaseConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSIDBDatabaseConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIDBDatabase::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IDBDatabase"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIDBDatabaseConstructor::s_info = { "IDBDatabase", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBDatabaseConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIDBDatabasePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBDatabaseConstructor) } },
    { "name", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "version", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseVersion), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "objectStoreNames", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseObjectStoreNames), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onabort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBDatabaseOnabort) } },
    { "onclose", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseOnclose), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBDatabaseOnclose) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBDatabaseOnerror) } },
    { "onversionchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBDatabaseOnversionchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBDatabaseOnversionchange) } },
    { "createObjectStore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBDatabasePrototypeFunctionCreateObjectStore), (intptr_t) (1) } },
    { "deleteObjectStore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBDatabasePrototypeFunctionDeleteObjectStore), (intptr_t) (1) } },
    { "transaction", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBDatabasePrototypeFunctionTransaction), (intptr_t) (1) } },
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBDatabasePrototypeFunctionClose), (intptr_t) (0) } },
};

const ClassInfo JSIDBDatabasePrototype::s_info = { "IDBDatabasePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBDatabasePrototype) };

void JSIDBDatabasePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIDBDatabasePrototypeTableValues, *this);
}

const ClassInfo JSIDBDatabase::s_info = { "IDBDatabase", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBDatabase) };

JSIDBDatabase::JSIDBDatabase(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IDBDatabase>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSIDBDatabase::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIDBDatabase::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIDBDatabasePrototype::create(vm, globalObject, JSIDBDatabasePrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSIDBDatabase::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBDatabase>(vm, globalObject);
}

template<> inline JSIDBDatabase* BindingCaller<JSIDBDatabase>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIDBDatabase*>(JSValue::decode(thisValue));
}

template<> inline JSIDBDatabase* BindingCaller<JSIDBDatabase>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIDBDatabase*>(state.thisValue());
}

static inline JSValue jsIDBDatabaseNameGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseNameGetter>(state, thisValue, "name");
}

static inline JSValue jsIDBDatabaseNameGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.name());
    return result;
}

static inline JSValue jsIDBDatabaseVersionGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseVersion(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseVersionGetter>(state, thisValue, "version");
}

static inline JSValue jsIDBDatabaseVersionGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLongLong>(impl.version());
    return result;
}

static inline JSValue jsIDBDatabaseObjectStoreNamesGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseObjectStoreNames(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseObjectStoreNamesGetter>(state, thisValue, "objectStoreNames");
}

static inline JSValue jsIDBDatabaseObjectStoreNamesGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMStringList>>(state, *thisObject.globalObject(), impl.objectStoreNames());
    return result;
}

static inline JSValue jsIDBDatabaseOnabortGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseOnabort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseOnabortGetter>(state, thisValue, "onabort");
}

static inline JSValue jsIDBDatabaseOnabortGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().abortEvent);
}

static inline JSValue jsIDBDatabaseOncloseGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseOnclose(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseOncloseGetter>(state, thisValue, "onclose");
}

static inline JSValue jsIDBDatabaseOncloseGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().closeEvent);
}

static inline JSValue jsIDBDatabaseOnerrorGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsIDBDatabaseOnerrorGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsIDBDatabaseOnversionchangeGetter(ExecState&, JSIDBDatabase&, ThrowScope& throwScope);

EncodedJSValue jsIDBDatabaseOnversionchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBDatabase>::attribute<jsIDBDatabaseOnversionchangeGetter>(state, thisValue, "onversionchange");
}

static inline JSValue jsIDBDatabaseOnversionchangeGetter(ExecState& state, JSIDBDatabase& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().versionchangeEvent);
}

EncodedJSValue jsIDBDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIDBDatabasePrototype* domObject = jsDynamicDowncast<JSIDBDatabasePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIDBDatabase::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIDBDatabaseConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIDBDatabasePrototype* domObject = jsDynamicDowncast<JSIDBDatabasePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSIDBDatabaseOnabortFunction(ExecState&, JSIDBDatabase&, JSValue, ThrowScope&);

bool setJSIDBDatabaseOnabort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBDatabase>::setAttribute<setJSIDBDatabaseOnabortFunction>(state, thisValue, encodedValue, "onabort");
}

static inline bool setJSIDBDatabaseOnabortFunction(ExecState& state, JSIDBDatabase& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().abortEvent, value);
    return true;
}


static inline bool setJSIDBDatabaseOncloseFunction(ExecState&, JSIDBDatabase&, JSValue, ThrowScope&);

bool setJSIDBDatabaseOnclose(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBDatabase>::setAttribute<setJSIDBDatabaseOncloseFunction>(state, thisValue, encodedValue, "onclose");
}

static inline bool setJSIDBDatabaseOncloseFunction(ExecState& state, JSIDBDatabase& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().closeEvent, value);
    return true;
}


static inline bool setJSIDBDatabaseOnerrorFunction(ExecState&, JSIDBDatabase&, JSValue, ThrowScope&);

bool setJSIDBDatabaseOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBDatabase>::setAttribute<setJSIDBDatabaseOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSIDBDatabaseOnerrorFunction(ExecState& state, JSIDBDatabase& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSIDBDatabaseOnversionchangeFunction(ExecState&, JSIDBDatabase&, JSValue, ThrowScope&);

bool setJSIDBDatabaseOnversionchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBDatabase>::setAttribute<setJSIDBDatabaseOnversionchangeFunction>(state, thisValue, encodedValue, "onversionchange");
}

static inline bool setJSIDBDatabaseOnversionchangeFunction(ExecState& state, JSIDBDatabase& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().versionchangeEvent, value);
    return true;
}


JSValue JSIDBDatabase::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBDatabaseConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionCreateObjectStoreCaller(JSC::ExecState*, JSIDBDatabase*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionCreateObjectStore(ExecState* state)
{
    return BindingCaller<JSIDBDatabase>::callOperation<jsIDBDatabasePrototypeFunctionCreateObjectStoreCaller>(state, "createObjectStore");
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionCreateObjectStoreCaller(JSC::ExecState* state, JSIDBDatabase* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto parameters = convert<IDLDictionary<IDBDatabase::ObjectStoreParameters>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBObjectStore>>(*state, *castedThis->globalObject(), throwScope, impl.createObjectStore(WTFMove(name), WTFMove(parameters))));
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionDeleteObjectStoreCaller(JSC::ExecState*, JSIDBDatabase*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionDeleteObjectStore(ExecState* state)
{
    return BindingCaller<JSIDBDatabase>::callOperation<jsIDBDatabasePrototypeFunctionDeleteObjectStoreCaller>(state, "deleteObjectStore");
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionDeleteObjectStoreCaller(JSC::ExecState* state, JSIDBDatabase* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.deleteObjectStore(WTFMove(name)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction1Caller(JSC::ExecState*, JSIDBDatabase*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction1(ExecState* state)
{
    return BindingCaller<JSIDBDatabase>::callOperation<jsIDBDatabasePrototypeFunctionTransaction1Caller>(state, "transaction");
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction1Caller(JSC::ExecState* state, JSIDBDatabase* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto storeNames = convert<IDLUnion<IDLDOMString, IDLSequence<IDLDOMString>>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto modeValue = state->argument(1);
    IDBTransactionMode mode;
    if (modeValue.isUndefined())
        mode = IDBTransactionMode::Readonly;
    else {
        auto optionalValue = parseEnumeration<IDBTransactionMode>(*state, modeValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "mode", "IDBDatabase", "transaction", expectedEnumerationValues<IDBTransactionMode>());
        mode = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBTransaction>>(*state, *castedThis->globalObject(), throwScope, impl.transaction(WTFMove(storeNames), mode)));
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction2Caller(JSC::ExecState*, JSIDBDatabase*, JSC::ThrowScope&);

static inline EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction2(ExecState* state)
{
    return BindingCaller<JSIDBDatabase>::callOperation<jsIDBDatabasePrototypeFunctionTransaction2Caller>(state, "transaction");
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionTransaction2Caller(JSC::ExecState* state, JSIDBDatabase* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto storeNames = convert<IDLInterface<DOMStringList>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "storeNames", "IDBDatabase", "transaction", "DOMStringList"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto modeValue = state->argument(1);
    IDBTransactionMode mode;
    if (modeValue.isUndefined())
        mode = IDBTransactionMode::Readonly;
    else {
        auto optionalValue = parseEnumeration<IDBTransactionMode>(*state, modeValue);
        RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
        if (UNLIKELY(!optionalValue))
            return throwArgumentMustBeEnumError(*state, throwScope, 1, "mode", "IDBDatabase", "transaction", expectedEnumerationValues<IDBTransactionMode>());
        mode = optionalValue.value();
    }
    return JSValue::encode(toJS<IDLInterface<IDBTransaction>>(*state, *castedThis->globalObject(), throwScope, impl.transaction(*storeNames, mode)));
}

EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionTransaction(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSDOMStringList::info()))
            return jsIDBDatabasePrototypeFunctionTransaction2(state);
        if (hasIteratorMethod(*state, distinguishingArg))
            return jsIDBDatabasePrototypeFunctionTransaction1(state);
        return jsIDBDatabasePrototypeFunctionTransaction1(state);
    }
    if (argsCount == 2) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSDOMStringList::info()))
            return jsIDBDatabasePrototypeFunctionTransaction2(state);
        if (hasIteratorMethod(*state, distinguishingArg))
            return jsIDBDatabasePrototypeFunctionTransaction1(state);
        return jsIDBDatabasePrototypeFunctionTransaction1(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionCloseCaller(JSC::ExecState*, JSIDBDatabase*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBDatabasePrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSIDBDatabase>::callOperation<jsIDBDatabasePrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsIDBDatabasePrototypeFunctionCloseCaller(JSC::ExecState* state, JSIDBDatabase* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

void JSIDBDatabase::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBDatabase*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSIDBDatabaseOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsIDBDatabase = jsCast<JSIDBDatabase*>(handle.slot()->asCell());
    if (jsIDBDatabase->wrapped().hasPendingActivity())
        return true;
    if (jsIDBDatabase->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBDatabaseOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIDBDatabase = static_cast<JSIDBDatabase*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIDBDatabase->wrapped(), jsIDBDatabase);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IDBDatabase>&& impl)
{
    return createWrapper<IDBDatabase>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IDBDatabase& impl)
{
    return wrap(state, globalObject, impl);
}

IDBDatabase* JSIDBDatabase::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIDBDatabase*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INDEXED_DATABASE)
