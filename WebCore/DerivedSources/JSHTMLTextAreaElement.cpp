/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLTextAreaElement.h"

#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSHTMLFormElement.h"
#include "JSNodeList.h"
#include "JSValidityState.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionCheckValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionReportValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetCustomValidity(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSelect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetRangeText(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetSelectionRange(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLTextAreaElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementAutofocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementDirName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementDirName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementDisabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementForm(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementMinLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementMinLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementMaxLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementMaxLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementName(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementPlaceholder(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementPlaceholder(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementReadOnly(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementReadOnly(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementRows(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementRows(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementCols(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementCols(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementWrap(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementWrap(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementDefaultValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementDefaultValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementTextLength(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementWillValidate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementValidity(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementValidationMessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementLabels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTextAreaElementSelectionStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementSelectionStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementSelectionEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementSelectionEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementSelectionDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementSelectionDirection(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementAutocomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTextAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTextAreaElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLTextAreaElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLTextAreaElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLTextAreaElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLTextAreaElementPrototype>(vm.heap)) JSHTMLTextAreaElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLTextAreaElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLTextAreaElementConstructor = JSDOMConstructorNotConstructable<JSHTMLTextAreaElement>;

template<> JSValue JSHTMLTextAreaElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLTextAreaElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLTextAreaElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLTextAreaElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLTextAreaElementConstructor::s_info = { "HTMLTextAreaElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTextAreaElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLTextAreaElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementConstructor) } },
    { "autofocus", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementAutofocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementAutofocus) } },
    { "dirName", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementDirName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementDirName) } },
    { "disabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementDisabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementDisabled) } },
    { "form", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementForm), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "minLength", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementMinLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementMinLength) } },
    { "maxLength", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementMaxLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementMaxLength) } },
    { "name", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementName) } },
    { "placeholder", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementPlaceholder), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementPlaceholder) } },
    { "readOnly", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementReadOnly), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementReadOnly) } },
    { "required", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementRequired) } },
    { "rows", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementRows), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementRows) } },
    { "cols", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementCols), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementCols) } },
    { "wrap", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementWrap), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementWrap) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "defaultValue", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementDefaultValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementDefaultValue) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementValue) } },
    { "textLength", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementTextLength), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "willValidate", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementWillValidate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validity", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementValidity), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "validationMessage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementValidationMessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "labels", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementLabels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "selectionStart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementSelectionStart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementSelectionStart) } },
    { "selectionEnd", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementSelectionEnd), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementSelectionEnd) } },
    { "selectionDirection", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementSelectionDirection), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementSelectionDirection) } },
    { "autocomplete", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTextAreaElementAutocomplete), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTextAreaElementAutocomplete) } },
    { "checkValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionCheckValidity), (intptr_t) (0) } },
    { "reportValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionReportValidity), (intptr_t) (0) } },
    { "setCustomValidity", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionSetCustomValidity), (intptr_t) (1) } },
    { "select", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionSelect), (intptr_t) (0) } },
    { "setRangeText", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionSetRangeText), (intptr_t) (1) } },
    { "setSelectionRange", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTextAreaElementPrototypeFunctionSetSelectionRange), (intptr_t) (0) } },
};

const ClassInfo JSHTMLTextAreaElementPrototype::s_info = { "HTMLTextAreaElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTextAreaElementPrototype) };

void JSHTMLTextAreaElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLTextAreaElementPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().interactiveFormValidationEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("reportValidity"), strlen("reportValidity"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSHTMLTextAreaElement::s_info = { "HTMLTextAreaElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTextAreaElement) };

JSHTMLTextAreaElement::JSHTMLTextAreaElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLTextAreaElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLTextAreaElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLTextAreaElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLTextAreaElementPrototype::create(vm, globalObject, JSHTMLTextAreaElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLTextAreaElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLTextAreaElement>(vm, globalObject);
}

template<> inline JSHTMLTextAreaElement* BindingCaller<JSHTMLTextAreaElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLTextAreaElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLTextAreaElement* BindingCaller<JSHTMLTextAreaElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLTextAreaElement*>(state.thisValue());
}

static inline JSValue jsHTMLTextAreaElementAutofocusGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementAutofocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementAutofocusGetter>(state, thisValue, "autofocus");
}

static inline JSValue jsHTMLTextAreaElementAutofocusGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::autofocusAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementDirNameGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementDirName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementDirNameGetter>(state, thisValue, "dirName");
}

static inline JSValue jsHTMLTextAreaElementDirNameGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::dirnameAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementDisabledGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementDisabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementDisabledGetter>(state, thisValue, "disabled");
}

static inline JSValue jsHTMLTextAreaElementDisabledGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::disabledAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementFormGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementForm(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementFormGetter>(state, thisValue, "form");
}

static inline JSValue jsHTMLTextAreaElementFormGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLFormElement>>(state, *thisObject.globalObject(), impl.form());
    return result;
}

static inline JSValue jsHTMLTextAreaElementMinLengthGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementMinLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementMinLengthGetter>(state, thisValue, "minLength");
}

static inline JSValue jsHTMLTextAreaElementMinLengthGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.minLength());
    return result;
}

static inline JSValue jsHTMLTextAreaElementMaxLengthGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementMaxLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementMaxLengthGetter>(state, thisValue, "maxLength");
}

static inline JSValue jsHTMLTextAreaElementMaxLengthGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.maxLength());
    return result;
}

static inline JSValue jsHTMLTextAreaElementNameGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementNameGetter>(state, thisValue, "name");
}

static inline JSValue jsHTMLTextAreaElementNameGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.getNameAttribute());
    return result;
}

static inline JSValue jsHTMLTextAreaElementPlaceholderGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementPlaceholder(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementPlaceholderGetter>(state, thisValue, "placeholder");
}

static inline JSValue jsHTMLTextAreaElementPlaceholderGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::placeholderAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementReadOnlyGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementReadOnly(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementReadOnlyGetter>(state, thisValue, "readOnly");
}

static inline JSValue jsHTMLTextAreaElementReadOnlyGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::readonlyAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementRequiredGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementRequiredGetter>(state, thisValue, "required");
}

static inline JSValue jsHTMLTextAreaElementRequiredGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.hasAttributeWithoutSynchronization(WebCore::HTMLNames::requiredAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementRowsGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementRows(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementRowsGetter>(state, thisValue, "rows");
}

static inline JSValue jsHTMLTextAreaElementRowsGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.rows());
    return result;
}

static inline JSValue jsHTMLTextAreaElementColsGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementCols(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementColsGetter>(state, thisValue, "cols");
}

static inline JSValue jsHTMLTextAreaElementColsGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.cols());
    return result;
}

static inline JSValue jsHTMLTextAreaElementWrapGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementWrap(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementWrapGetter>(state, thisValue, "wrap");
}

static inline JSValue jsHTMLTextAreaElementWrapGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::wrapAttr));
    return result;
}

static inline JSValue jsHTMLTextAreaElementTypeGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsHTMLTextAreaElementTypeGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsHTMLTextAreaElementDefaultValueGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementDefaultValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementDefaultValueGetter>(state, thisValue, "defaultValue");
}

static inline JSValue jsHTMLTextAreaElementDefaultValueGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.defaultValue());
    return result;
}

static inline JSValue jsHTMLTextAreaElementValueGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementValueGetter>(state, thisValue, "value");
}

static inline JSValue jsHTMLTextAreaElementValueGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.value());
    return result;
}

static inline JSValue jsHTMLTextAreaElementTextLengthGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementTextLength(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementTextLengthGetter>(state, thisValue, "textLength");
}

static inline JSValue jsHTMLTextAreaElementTextLengthGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.textLength());
    return result;
}

static inline JSValue jsHTMLTextAreaElementWillValidateGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementWillValidate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementWillValidateGetter>(state, thisValue, "willValidate");
}

static inline JSValue jsHTMLTextAreaElementWillValidateGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.willValidate());
    return result;
}

static inline JSValue jsHTMLTextAreaElementValidityGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementValidity(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementValidityGetter>(state, thisValue, "validity");
}

static inline JSValue jsHTMLTextAreaElementValidityGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<ValidityState>>(state, *thisObject.globalObject(), impl.validity());
    return result;
}

static inline JSValue jsHTMLTextAreaElementValidationMessageGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementValidationMessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementValidationMessageGetter>(state, thisValue, "validationMessage");
}

static inline JSValue jsHTMLTextAreaElementValidationMessageGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.validationMessage());
    return result;
}

static inline JSValue jsHTMLTextAreaElementLabelsGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementLabels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementLabelsGetter>(state, thisValue, "labels");
}

static inline JSValue jsHTMLTextAreaElementLabelsGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<NodeList>>(state, *thisObject.globalObject(), impl.labels());
    return result;
}

static inline JSValue jsHTMLTextAreaElementSelectionStartGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementSelectionStart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementSelectionStartGetter>(state, thisValue, "selectionStart");
}

static inline JSValue jsHTMLTextAreaElementSelectionStartGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.selectionStart());
    return result;
}

static inline JSValue jsHTMLTextAreaElementSelectionEndGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementSelectionEnd(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementSelectionEndGetter>(state, thisValue, "selectionEnd");
}

static inline JSValue jsHTMLTextAreaElementSelectionEndGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.selectionEnd());
    return result;
}

static inline JSValue jsHTMLTextAreaElementSelectionDirectionGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementSelectionDirection(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementSelectionDirectionGetter>(state, thisValue, "selectionDirection");
}

static inline JSValue jsHTMLTextAreaElementSelectionDirectionGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.selectionDirection());
    return result;
}

static inline JSValue jsHTMLTextAreaElementAutocompleteGetter(ExecState&, JSHTMLTextAreaElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTextAreaElementAutocomplete(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTextAreaElement>::attribute<jsHTMLTextAreaElementAutocompleteGetter>(state, thisValue, "autocomplete");
}

static inline JSValue jsHTMLTextAreaElementAutocompleteGetter(ExecState& state, JSHTMLTextAreaElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.autocomplete());
    return result;
}

EncodedJSValue jsHTMLTextAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLTextAreaElementPrototype* domObject = jsDynamicDowncast<JSHTMLTextAreaElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLTextAreaElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLTextAreaElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLTextAreaElementPrototype* domObject = jsDynamicDowncast<JSHTMLTextAreaElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLTextAreaElementAutofocusFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementAutofocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementAutofocusFunction>(state, thisValue, encodedValue, "autofocus");
}

static inline bool setJSHTMLTextAreaElementAutofocusFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::autofocusAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementDirNameFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementDirName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementDirNameFunction>(state, thisValue, encodedValue, "dirName");
}

static inline bool setJSHTMLTextAreaElementDirNameFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::dirnameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementDisabledFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementDisabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementDisabledFunction>(state, thisValue, encodedValue, "disabled");
}

static inline bool setJSHTMLTextAreaElementDisabledFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::disabledAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementMinLengthFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementMinLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementMinLengthFunction>(state, thisValue, encodedValue, "minLength");
}

static inline bool setJSHTMLTextAreaElementMinLengthFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMinLength(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLTextAreaElementMaxLengthFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementMaxLength(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementMaxLengthFunction>(state, thisValue, encodedValue, "maxLength");
}

static inline bool setJSHTMLTextAreaElementMaxLengthFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMaxLength(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLTextAreaElementNameFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementName(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementNameFunction>(state, thisValue, encodedValue, "name");
}

static inline bool setJSHTMLTextAreaElementNameFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::nameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementPlaceholderFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementPlaceholder(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementPlaceholderFunction>(state, thisValue, encodedValue, "placeholder");
}

static inline bool setJSHTMLTextAreaElementPlaceholderFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::placeholderAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementReadOnlyFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementReadOnly(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementReadOnlyFunction>(state, thisValue, encodedValue, "readOnly");
}

static inline bool setJSHTMLTextAreaElementReadOnlyFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::readonlyAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementRequiredFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementRequired(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementRequiredFunction>(state, thisValue, encodedValue, "required");
}

static inline bool setJSHTMLTextAreaElementRequiredFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setBooleanAttribute(WebCore::HTMLNames::requiredAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementRowsFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementRows(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementRowsFunction>(state, thisValue, encodedValue, "rows");
}

static inline bool setJSHTMLTextAreaElementRowsFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setRows(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementColsFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementCols(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementColsFunction>(state, thisValue, encodedValue, "cols");
}

static inline bool setJSHTMLTextAreaElementColsFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setCols(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementWrapFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementWrap(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementWrapFunction>(state, thisValue, encodedValue, "wrap");
}

static inline bool setJSHTMLTextAreaElementWrapFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::wrapAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementDefaultValueFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementDefaultValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementDefaultValueFunction>(state, thisValue, encodedValue, "defaultValue");
}

static inline bool setJSHTMLTextAreaElementDefaultValueFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDefaultValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementValueFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSHTMLTextAreaElementValueFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementSelectionStartFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementSelectionStart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementSelectionStartFunction>(state, thisValue, encodedValue, "selectionStart");
}

static inline bool setJSHTMLTextAreaElementSelectionStartFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSelectionStart(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementSelectionEndFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementSelectionEnd(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementSelectionEndFunction>(state, thisValue, encodedValue, "selectionEnd");
}

static inline bool setJSHTMLTextAreaElementSelectionEndFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSelectionEnd(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementSelectionDirectionFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementSelectionDirection(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementSelectionDirectionFunction>(state, thisValue, encodedValue, "selectionDirection");
}

static inline bool setJSHTMLTextAreaElementSelectionDirectionFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSelectionDirection(WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTextAreaElementAutocompleteFunction(ExecState&, JSHTMLTextAreaElement&, JSValue, ThrowScope&);

bool setJSHTMLTextAreaElementAutocomplete(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTextAreaElement>::setAttribute<setJSHTMLTextAreaElementAutocompleteFunction>(state, thisValue, encodedValue, "autocomplete");
}

static inline bool setJSHTMLTextAreaElementAutocompleteFunction(ExecState& state, JSHTMLTextAreaElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAutocomplete(WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLTextAreaElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLTextAreaElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionCheckValidityCaller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionCheckValidity(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionCheckValidityCaller>(state, "checkValidity");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionCheckValidityCaller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.checkValidity()));
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionReportValidityCaller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionReportValidity(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionReportValidityCaller>(state, "reportValidity");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionReportValidityCaller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLBoolean>(impl.reportValidity()));
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetCustomValidity(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionSetCustomValidityCaller>(state, "setCustomValidity");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetCustomValidityCaller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto error = convert<IDLNullable<IDLDOMString>>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setCustomValidity(WTFMove(error));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSelectCaller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSelect(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionSelectCaller>(state, "select");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSelectCaller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.select();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText1Caller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText1(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionSetRangeText1Caller>(state, "setRangeText");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText1Caller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto replacement = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setRangeText(WTFMove(replacement)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText2Caller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

static inline EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText2(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionSetRangeText2Caller>(state, "setRangeText");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetRangeText2Caller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 3))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto replacement = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto start = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto selectionMode = state->argument(3).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(3), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setRangeText(WTFMove(replacement), WTFMove(start), WTFMove(end), WTFMove(selectionMode)));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetRangeText(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(4, state->argumentCount());
    if (argsCount == 1) {
        return jsHTMLTextAreaElementPrototypeFunctionSetRangeText1(state);
    }
    if (argsCount == 3) {
        return jsHTMLTextAreaElementPrototypeFunctionSetRangeText2(state);
    }
    if (argsCount == 4) {
        return jsHTMLTextAreaElementPrototypeFunctionSetRangeText2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetSelectionRangeCaller(JSC::ExecState*, JSHTMLTextAreaElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTextAreaElementPrototypeFunctionSetSelectionRange(ExecState* state)
{
    return BindingCaller<JSHTMLTextAreaElement>::callOperation<jsHTMLTextAreaElementPrototypeFunctionSetSelectionRangeCaller>(state, "setSelectionRange");
}

static inline JSC::EncodedJSValue jsHTMLTextAreaElementPrototypeFunctionSetSelectionRangeCaller(JSC::ExecState* state, JSHTMLTextAreaElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto start = convert<IDLLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = convert<IDLLong>(*state, state->argument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto direction = state->argument(2).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(2), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setSelectionRange(WTFMove(start), WTFMove(end), WTFMove(direction));
    return JSValue::encode(jsUndefined());
}

void JSHTMLTextAreaElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLTextAreaElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
