/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(FETCH_API)

#include "JSFetchHeaders.h"

#include "FetchHeadersBuiltins.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMIterator.h"
#include "JSFetchHeaders.h"
#include "WebCoreJSClientData.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionAppend(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionDelete(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionGet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionHas(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionSet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionAppendFromJS(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionFillFromJS(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionSymbolIterator(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionEntries(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionKeys(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionValues(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionForEach(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFetchHeadersConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFetchHeadersConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFetchHeadersPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFetchHeadersPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFetchHeadersPrototype* ptr = new (NotNull, JSC::allocateCell<JSFetchHeadersPrototype>(vm.heap)) JSFetchHeadersPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFetchHeadersPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFetchHeadersConstructor = JSBuiltinConstructor<JSFetchHeaders>;

template<> JSValue JSFetchHeadersConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSFetchHeadersConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFetchHeaders::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Headers"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> FunctionExecutable* JSFetchHeadersConstructor::initializeExecutable(VM& vm)
{
    return fetchHeadersInitializeFetchHeadersCodeGenerator(vm);
}

template<> const ClassInfo JSFetchHeadersConstructor::s_info = { "Headers", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchHeadersConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFetchHeadersPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFetchHeadersConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFetchHeadersConstructor) } },
    { "append", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionAppend), (intptr_t) (2) } },
    { "delete", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionDelete), (intptr_t) (1) } },
    { "get", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionGet), (intptr_t) (1) } },
    { "has", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionHas), (intptr_t) (1) } },
    { "set", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionSet), (intptr_t) (2) } },
    { "entries", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionEntries), (intptr_t) (0) } },
    { "keys", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionKeys), (intptr_t) (0) } },
    { "values", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionValues), (intptr_t) (0) } },
    { "forEach", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFetchHeadersPrototypeFunctionForEach), (intptr_t) (1) } },
};

const ClassInfo JSFetchHeadersPrototype::s_info = { "HeadersPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchHeadersPrototype) };

void JSFetchHeadersPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFetchHeadersPrototypeTableValues, *this);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().appendFromJSPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchHeadersPrototypeFunctionAppendFromJS), ReadOnly | DontEnum);
    putDirect(vm, static_cast<JSVMClientData*>(vm.clientData)->builtinNames().fillFromJSPrivateName(), JSFunction::create(vm, globalObject(), 0, String(), jsFetchHeadersPrototypeFunctionFillFromJS), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->iteratorSymbol, JSFunction::create(vm, globalObject(), 0, ASCIILiteral("[Symbol.Iterator]"), jsFetchHeadersPrototypeFunctionSymbolIterator), DontEnum);
}

const ClassInfo JSFetchHeaders::s_info = { "Headers", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFetchHeaders) };

JSFetchHeaders::JSFetchHeaders(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FetchHeaders>&& impl)
    : JSDOMWrapper<FetchHeaders>(structure, globalObject, WTFMove(impl))
{
}

void JSFetchHeaders::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFetchHeaders::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFetchHeadersPrototype::create(vm, globalObject, JSFetchHeadersPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFetchHeaders::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFetchHeaders>(vm, globalObject);
}

void JSFetchHeaders::destroy(JSC::JSCell* cell)
{
    JSFetchHeaders* thisObject = static_cast<JSFetchHeaders*>(cell);
    thisObject->JSFetchHeaders::~JSFetchHeaders();
}

template<> inline JSFetchHeaders* BindingCaller<JSFetchHeaders>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFetchHeaders*>(state.thisValue());
}

EncodedJSValue jsFetchHeadersConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFetchHeadersPrototype* domObject = jsDynamicDowncast<JSFetchHeadersPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFetchHeaders::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFetchHeadersConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFetchHeadersPrototype* domObject = jsDynamicDowncast<JSFetchHeadersPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSFetchHeaders::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFetchHeadersConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionAppendCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionAppend(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionAppendCaller>(state, "append");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionAppendCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.append(WTFMove(name), WTFMove(value)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionDeleteCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionDelete(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionDeleteCaller>(state, "delete");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionDeleteCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.remove(WTFMove(name)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionGetCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionGet(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionGetCaller>(state, "get");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionGetCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLNullable<IDLDOMString>>(*state, throwScope, impl.get(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionHasCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionHas(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionHasCaller>(state, "has");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionHasCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(*state, throwScope, impl.has(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionSetCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionSet(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionSetCaller>(state, "set");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionSetCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.set(WTFMove(name), WTFMove(value)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionAppendFromJSCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionAppendFromJS(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionAppendFromJSCaller, CastedThisErrorBehavior::Assert>(state, "appendFromJS");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionAppendFromJSCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto value = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.append(WTFMove(name), WTFMove(value)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionFillFromJSCaller(JSC::ExecState*, JSFetchHeaders*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionFillFromJS(ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionFillFromJSCaller, CastedThisErrorBehavior::Assert>(state, "fillFromJS");
}

static inline JSC::EncodedJSValue jsFetchHeadersPrototypeFunctionFillFromJSCaller(JSC::ExecState* state, JSFetchHeaders* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto headers = convert<IDLNullable<IDLInterface<FetchHeaders>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "headers", "Headers", "fillFromJS", "FetchHeaders"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.fill(WTFMove(headers));
    return JSValue::encode(jsUndefined());
}

struct FetchHeadersIteratorTraits {
    static constexpr JSDOMIteratorType type = JSDOMIteratorType::Map;
    using KeyType = IDLDOMString;
    using ValueType = IDLDOMString;
};

using FetchHeadersIterator = JSDOMIterator<JSFetchHeaders, FetchHeadersIteratorTraits>;
using FetchHeadersIteratorPrototype = JSDOMIteratorPrototype<JSFetchHeaders, FetchHeadersIteratorTraits>;

template<>
const JSC::ClassInfo FetchHeadersIterator::s_info = { "Headers Iterator", &Base::s_info, 0, CREATE_METHOD_TABLE(FetchHeadersIterator) };

template<>
const JSC::ClassInfo FetchHeadersIteratorPrototype::s_info = { "Headers Iterator", &Base::s_info, 0, CREATE_METHOD_TABLE(FetchHeadersIteratorPrototype) };

static inline EncodedJSValue jsFetchHeadersPrototypeFunctionSymbolIteratorCaller(ExecState*, JSFetchHeaders* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<FetchHeadersIterator>(*thisObject, IterationKind::KeyValue));
}

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionSymbolIterator(JSC::ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionSymbolIteratorCaller>(state, "[Symbol.Iterator]");
}

static inline EncodedJSValue jsFetchHeadersPrototypeFunctionEntriesCaller(ExecState*, JSFetchHeaders* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<FetchHeadersIterator>(*thisObject, IterationKind::KeyValue));
}

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionEntries(JSC::ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionEntriesCaller>(state, "entries");
}

static inline EncodedJSValue jsFetchHeadersPrototypeFunctionKeysCaller(ExecState*, JSFetchHeaders* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<FetchHeadersIterator>(*thisObject, IterationKind::Key));
}

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionKeys(JSC::ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionKeysCaller>(state, "keys");
}

static inline EncodedJSValue jsFetchHeadersPrototypeFunctionValuesCaller(ExecState*, JSFetchHeaders* thisObject, JSC::ThrowScope&)
{
    return JSValue::encode(iteratorCreate<FetchHeadersIterator>(*thisObject, IterationKind::Value));
}

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionValues(JSC::ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionValuesCaller>(state, "values");
}

static inline EncodedJSValue jsFetchHeadersPrototypeFunctionForEachCaller(ExecState* state, JSFetchHeaders* thisObject, JSC::ThrowScope& throwScope)
{
    return JSValue::encode(iteratorForEach<FetchHeadersIterator>(*state, *thisObject, throwScope));
}

JSC::EncodedJSValue JSC_HOST_CALL jsFetchHeadersPrototypeFunctionForEach(JSC::ExecState* state)
{
    return BindingCaller<JSFetchHeaders>::callOperation<jsFetchHeadersPrototypeFunctionForEachCaller>(state, "forEach");
}

void JSFetchHeaders::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFetchHeaders*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
}

bool JSFetchHeadersOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSFetchHeadersOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFetchHeaders = static_cast<JSFetchHeaders*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFetchHeaders->wrapped(), jsFetchHeaders);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FetchHeaders>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to FetchHeaders.
    static_assert(!__is_polymorphic(FetchHeaders), "FetchHeaders is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<FetchHeaders>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FetchHeaders& impl)
{
    return wrap(state, globalObject, impl);
}

FetchHeaders* JSFetchHeaders::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFetchHeaders*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(FETCH_API)
