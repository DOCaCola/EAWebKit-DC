/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(VIDEO_TRACK)

#include "JSVTTRegion.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSTextTrack.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsVTTRegionTrack(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsVTTRegionId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionId(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionRegionAnchorX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionRegionAnchorX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionRegionAnchorY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionRegionAnchorY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionViewportAnchorX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionViewportAnchorX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionViewportAnchorY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionViewportAnchorY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionScroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionScroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsVTTRegionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSVTTRegionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSVTTRegionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSVTTRegionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSVTTRegionPrototype* ptr = new (NotNull, JSC::allocateCell<JSVTTRegionPrototype>(vm.heap)) JSVTTRegionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSVTTRegionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSVTTRegionConstructor = JSDOMConstructor<JSVTTRegion>;

template<> EncodedJSValue JSC_HOST_CALL JSVTTRegionConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSVTTRegionConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "VTTRegion");
    auto object = VTTRegion::create(*context);
    return JSValue::encode(toJSNewlyCreated<IDLInterface<VTTRegion>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSVTTRegionConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSVTTRegionConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSVTTRegion::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("VTTRegion"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSVTTRegionConstructor::s_info = { "VTTRegion", &Base::s_info, 0, CREATE_METHOD_TABLE(JSVTTRegionConstructor) };

/* Hash table for prototype */

static const HashTableValue JSVTTRegionPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionConstructor) } },
    { "track", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionTrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "id", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionId) } },
    { "width", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionWidth) } },
    { "height", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionHeight) } },
    { "regionAnchorX", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionRegionAnchorX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionRegionAnchorX) } },
    { "regionAnchorY", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionRegionAnchorY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionRegionAnchorY) } },
    { "viewportAnchorX", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionViewportAnchorX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionViewportAnchorX) } },
    { "viewportAnchorY", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionViewportAnchorY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionViewportAnchorY) } },
    { "scroll", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsVTTRegionScroll), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSVTTRegionScroll) } },
};

const ClassInfo JSVTTRegionPrototype::s_info = { "VTTRegionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSVTTRegionPrototype) };

void JSVTTRegionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSVTTRegionPrototypeTableValues, *this);
}

const ClassInfo JSVTTRegion::s_info = { "VTTRegion", &Base::s_info, 0, CREATE_METHOD_TABLE(JSVTTRegion) };

JSVTTRegion::JSVTTRegion(Structure* structure, JSDOMGlobalObject& globalObject, Ref<VTTRegion>&& impl)
    : JSDOMWrapper<VTTRegion>(structure, globalObject, WTFMove(impl))
{
}

void JSVTTRegion::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSVTTRegion::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSVTTRegionPrototype::create(vm, globalObject, JSVTTRegionPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSVTTRegion::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSVTTRegion>(vm, globalObject);
}

void JSVTTRegion::destroy(JSC::JSCell* cell)
{
    JSVTTRegion* thisObject = static_cast<JSVTTRegion*>(cell);
    thisObject->JSVTTRegion::~JSVTTRegion();
}

template<> inline JSVTTRegion* BindingCaller<JSVTTRegion>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSVTTRegion*>(JSValue::decode(thisValue));
}

static inline JSValue jsVTTRegionTrackGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionTrack(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionTrackGetter>(state, thisValue, "track");
}

static inline JSValue jsVTTRegionTrackGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TextTrack>>(state, *thisObject.globalObject(), impl.track());
    return result;
}

static inline JSValue jsVTTRegionIdGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionIdGetter>(state, thisValue, "id");
}

static inline JSValue jsVTTRegionIdGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.id());
    return result;
}

static inline JSValue jsVTTRegionWidthGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsVTTRegionWidthGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.width());
    return result;
}

static inline JSValue jsVTTRegionHeightGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsVTTRegionHeightGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.height());
    return result;
}

static inline JSValue jsVTTRegionRegionAnchorXGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionRegionAnchorX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionRegionAnchorXGetter>(state, thisValue, "regionAnchorX");
}

static inline JSValue jsVTTRegionRegionAnchorXGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.regionAnchorX());
    return result;
}

static inline JSValue jsVTTRegionRegionAnchorYGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionRegionAnchorY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionRegionAnchorYGetter>(state, thisValue, "regionAnchorY");
}

static inline JSValue jsVTTRegionRegionAnchorYGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.regionAnchorY());
    return result;
}

static inline JSValue jsVTTRegionViewportAnchorXGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionViewportAnchorX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionViewportAnchorXGetter>(state, thisValue, "viewportAnchorX");
}

static inline JSValue jsVTTRegionViewportAnchorXGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.viewportAnchorX());
    return result;
}

static inline JSValue jsVTTRegionViewportAnchorYGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionViewportAnchorY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionViewportAnchorYGetter>(state, thisValue, "viewportAnchorY");
}

static inline JSValue jsVTTRegionViewportAnchorYGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.viewportAnchorY());
    return result;
}

static inline JSValue jsVTTRegionScrollGetter(ExecState&, JSVTTRegion&, ThrowScope& throwScope);

EncodedJSValue jsVTTRegionScroll(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSVTTRegion>::attribute<jsVTTRegionScrollGetter>(state, thisValue, "scroll");
}

static inline JSValue jsVTTRegionScrollGetter(ExecState& state, JSVTTRegion& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.scroll());
    return result;
}

EncodedJSValue jsVTTRegionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSVTTRegionPrototype* domObject = jsDynamicDowncast<JSVTTRegionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSVTTRegion::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSVTTRegionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSVTTRegionPrototype* domObject = jsDynamicDowncast<JSVTTRegionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSVTTRegionIdFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionId(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionIdFunction>(state, thisValue, encodedValue, "id");
}

static inline bool setJSVTTRegionIdFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setId(WTFMove(nativeValue));
    return true;
}


static inline bool setJSVTTRegionWidthFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionWidthFunction>(state, thisValue, encodedValue, "width");
}

static inline bool setJSVTTRegionWidthFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setWidth(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionHeightFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionHeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionHeightFunction>(state, thisValue, encodedValue, "height");
}

static inline bool setJSVTTRegionHeightFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setHeight(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionRegionAnchorXFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionRegionAnchorX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionRegionAnchorXFunction>(state, thisValue, encodedValue, "regionAnchorX");
}

static inline bool setJSVTTRegionRegionAnchorXFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setRegionAnchorX(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionRegionAnchorYFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionRegionAnchorY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionRegionAnchorYFunction>(state, thisValue, encodedValue, "regionAnchorY");
}

static inline bool setJSVTTRegionRegionAnchorYFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setRegionAnchorY(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionViewportAnchorXFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionViewportAnchorX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionViewportAnchorXFunction>(state, thisValue, encodedValue, "viewportAnchorX");
}

static inline bool setJSVTTRegionViewportAnchorXFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setViewportAnchorX(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionViewportAnchorYFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionViewportAnchorY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionViewportAnchorYFunction>(state, thisValue, encodedValue, "viewportAnchorY");
}

static inline bool setJSVTTRegionViewportAnchorYFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setViewportAnchorY(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSVTTRegionScrollFunction(ExecState&, JSVTTRegion&, JSValue, ThrowScope&);

bool setJSVTTRegionScroll(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSVTTRegion>::setAttribute<setJSVTTRegionScrollFunction>(state, thisValue, encodedValue, "scroll");
}

static inline bool setJSVTTRegionScrollFunction(ExecState& state, JSVTTRegion& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setScroll(WTFMove(nativeValue)));
    return true;
}


JSValue JSVTTRegion::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSVTTRegionConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSVTTRegionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSVTTRegionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsVTTRegion = static_cast<JSVTTRegion*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsVTTRegion->wrapped(), jsVTTRegion);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7VTTRegion@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore9VTTRegionE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<VTTRegion>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7VTTRegion@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore9VTTRegionE[2];
#if COMPILER(CLANG)
    // If this fails VTTRegion does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(VTTRegion), "VTTRegion is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // VTTRegion has subclasses. If VTTRegion has subclasses that get passed
    // to toJS() we currently require VTTRegion you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<VTTRegion>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, VTTRegion& impl)
{
    return wrap(state, globalObject, impl);
}

VTTRegion* JSVTTRegion::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSVTTRegion*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(VIDEO_TRACK)
