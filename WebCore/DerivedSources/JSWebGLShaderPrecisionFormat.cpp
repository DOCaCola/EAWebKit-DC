/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEBGL)

#include "JSWebGLShaderPrecisionFormat.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsWebGLShaderPrecisionFormatRangeMin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebGLShaderPrecisionFormatRangeMax(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebGLShaderPrecisionFormatPrecision(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsWebGLShaderPrecisionFormatConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSWebGLShaderPrecisionFormatConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSWebGLShaderPrecisionFormatPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSWebGLShaderPrecisionFormatPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSWebGLShaderPrecisionFormatPrototype* ptr = new (NotNull, JSC::allocateCell<JSWebGLShaderPrecisionFormatPrototype>(vm.heap)) JSWebGLShaderPrecisionFormatPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSWebGLShaderPrecisionFormatPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSWebGLShaderPrecisionFormatConstructor = JSDOMConstructorNotConstructable<JSWebGLShaderPrecisionFormat>;

template<> JSValue JSWebGLShaderPrecisionFormatConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSWebGLShaderPrecisionFormatConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSWebGLShaderPrecisionFormat::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("WebGLShaderPrecisionFormat"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSWebGLShaderPrecisionFormatConstructor::s_info = { "WebGLShaderPrecisionFormat", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormatConstructor) };

/* Hash table for prototype */

static const HashTableValue JSWebGLShaderPrecisionFormatPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSWebGLShaderPrecisionFormatConstructor) } },
    { "rangeMin", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatRangeMin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rangeMax", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatRangeMax), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "precision", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsWebGLShaderPrecisionFormatPrecision), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSWebGLShaderPrecisionFormatPrototype::s_info = { "WebGLShaderPrecisionFormatPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormatPrototype) };

void JSWebGLShaderPrecisionFormatPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSWebGLShaderPrecisionFormatPrototypeTableValues, *this);
}

const ClassInfo JSWebGLShaderPrecisionFormat::s_info = { "WebGLShaderPrecisionFormat", &Base::s_info, 0, CREATE_METHOD_TABLE(JSWebGLShaderPrecisionFormat) };

JSWebGLShaderPrecisionFormat::JSWebGLShaderPrecisionFormat(Structure* structure, JSDOMGlobalObject& globalObject, Ref<WebGLShaderPrecisionFormat>&& impl)
    : JSDOMWrapper<WebGLShaderPrecisionFormat>(structure, globalObject, WTFMove(impl))
{
}

void JSWebGLShaderPrecisionFormat::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSWebGLShaderPrecisionFormat::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSWebGLShaderPrecisionFormatPrototype::create(vm, globalObject, JSWebGLShaderPrecisionFormatPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSWebGLShaderPrecisionFormat::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSWebGLShaderPrecisionFormat>(vm, globalObject);
}

void JSWebGLShaderPrecisionFormat::destroy(JSC::JSCell* cell)
{
    JSWebGLShaderPrecisionFormat* thisObject = static_cast<JSWebGLShaderPrecisionFormat*>(cell);
    thisObject->JSWebGLShaderPrecisionFormat::~JSWebGLShaderPrecisionFormat();
}

template<> inline JSWebGLShaderPrecisionFormat* BindingCaller<JSWebGLShaderPrecisionFormat>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSWebGLShaderPrecisionFormat*>(JSValue::decode(thisValue));
}

static inline JSValue jsWebGLShaderPrecisionFormatRangeMinGetter(ExecState&, JSWebGLShaderPrecisionFormat&, ThrowScope& throwScope);

EncodedJSValue jsWebGLShaderPrecisionFormatRangeMin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebGLShaderPrecisionFormat>::attribute<jsWebGLShaderPrecisionFormatRangeMinGetter>(state, thisValue, "rangeMin");
}

static inline JSValue jsWebGLShaderPrecisionFormatRangeMinGetter(ExecState& state, JSWebGLShaderPrecisionFormat& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.rangeMin());
    return result;
}

static inline JSValue jsWebGLShaderPrecisionFormatRangeMaxGetter(ExecState&, JSWebGLShaderPrecisionFormat&, ThrowScope& throwScope);

EncodedJSValue jsWebGLShaderPrecisionFormatRangeMax(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebGLShaderPrecisionFormat>::attribute<jsWebGLShaderPrecisionFormatRangeMaxGetter>(state, thisValue, "rangeMax");
}

static inline JSValue jsWebGLShaderPrecisionFormatRangeMaxGetter(ExecState& state, JSWebGLShaderPrecisionFormat& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.rangeMax());
    return result;
}

static inline JSValue jsWebGLShaderPrecisionFormatPrecisionGetter(ExecState&, JSWebGLShaderPrecisionFormat&, ThrowScope& throwScope);

EncodedJSValue jsWebGLShaderPrecisionFormatPrecision(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSWebGLShaderPrecisionFormat>::attribute<jsWebGLShaderPrecisionFormatPrecisionGetter>(state, thisValue, "precision");
}

static inline JSValue jsWebGLShaderPrecisionFormatPrecisionGetter(ExecState& state, JSWebGLShaderPrecisionFormat& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.precision());
    return result;
}

EncodedJSValue jsWebGLShaderPrecisionFormatConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSWebGLShaderPrecisionFormatPrototype* domObject = jsDynamicDowncast<JSWebGLShaderPrecisionFormatPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSWebGLShaderPrecisionFormat::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSWebGLShaderPrecisionFormatConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSWebGLShaderPrecisionFormatPrototype* domObject = jsDynamicDowncast<JSWebGLShaderPrecisionFormatPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSWebGLShaderPrecisionFormat::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSWebGLShaderPrecisionFormatConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

bool JSWebGLShaderPrecisionFormatOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSWebGLShaderPrecisionFormatOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsWebGLShaderPrecisionFormat = static_cast<JSWebGLShaderPrecisionFormat*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsWebGLShaderPrecisionFormat->wrapped(), jsWebGLShaderPrecisionFormat);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<WebGLShaderPrecisionFormat>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to WebGLShaderPrecisionFormat.
    static_assert(!__is_polymorphic(WebGLShaderPrecisionFormat), "WebGLShaderPrecisionFormat is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<WebGLShaderPrecisionFormat>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, WebGLShaderPrecisionFormat& impl)
{
    return wrap(state, globalObject, impl);
}

WebGLShaderPrecisionFormat* JSWebGLShaderPrecisionFormat::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSWebGLShaderPrecisionFormat*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(WEBGL)
