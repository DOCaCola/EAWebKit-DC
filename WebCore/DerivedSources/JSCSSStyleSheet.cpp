/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSCSSStyleSheet.h"

#include "JSCSSRule.h"
#include "JSCSSRuleList.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionInsertRule(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionDeleteRule(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionAddRule(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionRemoveRule(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsCSSStyleSheetOwnerRule(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCSSStyleSheetCssRules(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCSSStyleSheetRules(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsCSSStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSCSSStyleSheetConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSCSSStyleSheetPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSCSSStyleSheetPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSCSSStyleSheetPrototype* ptr = new (NotNull, JSC::allocateCell<JSCSSStyleSheetPrototype>(vm.heap)) JSCSSStyleSheetPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSCSSStyleSheetPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSCSSStyleSheetConstructor = JSDOMConstructorNotConstructable<JSCSSStyleSheet>;

template<> JSValue JSCSSStyleSheetConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSStyleSheet::getConstructor(vm, &globalObject);
}

template<> void JSCSSStyleSheetConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSCSSStyleSheet::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("CSSStyleSheet"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSCSSStyleSheetConstructor::s_info = { "CSSStyleSheet", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCSSStyleSheetConstructor) };

/* Hash table for prototype */

static const HashTableValue JSCSSStyleSheetPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSStyleSheetConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSCSSStyleSheetConstructor) } },
    { "ownerRule", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSStyleSheetOwnerRule), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "cssRules", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSStyleSheetCssRules), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rules", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsCSSStyleSheetRules), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "insertRule", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsCSSStyleSheetPrototypeFunctionInsertRule), (intptr_t) (1) } },
    { "deleteRule", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsCSSStyleSheetPrototypeFunctionDeleteRule), (intptr_t) (1) } },
    { "addRule", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsCSSStyleSheetPrototypeFunctionAddRule), (intptr_t) (0) } },
    { "removeRule", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsCSSStyleSheetPrototypeFunctionRemoveRule), (intptr_t) (0) } },
};

const ClassInfo JSCSSStyleSheetPrototype::s_info = { "CSSStyleSheetPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCSSStyleSheetPrototype) };

void JSCSSStyleSheetPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSCSSStyleSheetPrototypeTableValues, *this);
}

const ClassInfo JSCSSStyleSheet::s_info = { "CSSStyleSheet", &Base::s_info, 0, CREATE_METHOD_TABLE(JSCSSStyleSheet) };

JSCSSStyleSheet::JSCSSStyleSheet(Structure* structure, JSDOMGlobalObject& globalObject, Ref<CSSStyleSheet>&& impl)
    : JSStyleSheet(structure, globalObject, WTFMove(impl))
{
}

void JSCSSStyleSheet::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSCSSStyleSheet::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSCSSStyleSheetPrototype::create(vm, globalObject, JSCSSStyleSheetPrototype::createStructure(vm, globalObject, JSStyleSheet::prototype(vm, globalObject)));
}

JSObject* JSCSSStyleSheet::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSCSSStyleSheet>(vm, globalObject);
}

template<> inline JSCSSStyleSheet* BindingCaller<JSCSSStyleSheet>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSCSSStyleSheet*>(JSValue::decode(thisValue));
}

template<> inline JSCSSStyleSheet* BindingCaller<JSCSSStyleSheet>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSCSSStyleSheet*>(state.thisValue());
}

static inline JSValue jsCSSStyleSheetOwnerRuleGetter(ExecState&, JSCSSStyleSheet&, ThrowScope& throwScope);

EncodedJSValue jsCSSStyleSheetOwnerRule(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSCSSStyleSheet>::attribute<jsCSSStyleSheetOwnerRuleGetter>(state, thisValue, "ownerRule");
}

static inline JSValue jsCSSStyleSheetOwnerRuleGetter(ExecState& state, JSCSSStyleSheet& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<CSSRule>>(state, *thisObject.globalObject(), impl.ownerRule());
    return result;
}

static inline JSValue jsCSSStyleSheetCssRulesGetter(ExecState&, JSCSSStyleSheet&, ThrowScope& throwScope);

EncodedJSValue jsCSSStyleSheetCssRules(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSCSSStyleSheet>::attribute<jsCSSStyleSheetCssRulesGetter>(state, thisValue, "cssRules");
}

static inline JSValue jsCSSStyleSheetCssRulesGetter(ExecState& state, JSCSSStyleSheet& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<CSSRuleList>>(state, *thisObject.globalObject(), impl.cssRules());
    return result;
}

static inline JSValue jsCSSStyleSheetRulesGetter(ExecState&, JSCSSStyleSheet&, ThrowScope& throwScope);

EncodedJSValue jsCSSStyleSheetRules(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSCSSStyleSheet>::attribute<jsCSSStyleSheetRulesGetter>(state, thisValue, "rules");
}

static inline JSValue jsCSSStyleSheetRulesGetter(ExecState& state, JSCSSStyleSheet& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<CSSRuleList>>(state, *thisObject.globalObject(), impl.rules());
    return result;
}

EncodedJSValue jsCSSStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSCSSStyleSheetPrototype* domObject = jsDynamicDowncast<JSCSSStyleSheetPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSCSSStyleSheet::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSCSSStyleSheetConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSCSSStyleSheetPrototype* domObject = jsDynamicDowncast<JSCSSStyleSheetPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSCSSStyleSheet::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSCSSStyleSheetConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule1Caller(JSC::ExecState*, JSCSSStyleSheet*, JSC::ThrowScope&);

static inline EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule1(ExecState* state)
{
    return BindingCaller<JSCSSStyleSheet>::callOperation<jsCSSStyleSheetPrototypeFunctionInsertRule1Caller>(state, "insertRule");
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule1Caller(JSC::ExecState* state, JSCSSStyleSheet* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto rule = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUnsignedLong>(*state, throwScope, impl.insertRule(WTFMove(rule), WTFMove(index))));
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule2Caller(JSC::ExecState*, JSCSSStyleSheet*, JSC::ThrowScope&);

static inline EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule2(ExecState* state)
{
    return BindingCaller<JSCSSStyleSheet>::callOperation<jsCSSStyleSheetPrototypeFunctionInsertRule2Caller>(state, "insertRule");
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionInsertRule2Caller(JSC::ExecState* state, JSCSSStyleSheet* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto rule = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUnsignedLong>(*state, throwScope, impl.deprecatedInsertRule(WTFMove(rule))));
}

EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionInsertRule(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(2, state->argumentCount());
    if (argsCount == 1) {
        return jsCSSStyleSheetPrototypeFunctionInsertRule2(state);
    }
    if (argsCount == 2) {
        return jsCSSStyleSheetPrototypeFunctionInsertRule1(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionDeleteRuleCaller(JSC::ExecState*, JSCSSStyleSheet*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionDeleteRule(ExecState* state)
{
    return BindingCaller<JSCSSStyleSheet>::callOperation<jsCSSStyleSheetPrototypeFunctionDeleteRuleCaller>(state, "deleteRule");
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionDeleteRuleCaller(JSC::ExecState* state, JSCSSStyleSheet* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.deleteRule(WTFMove(index)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionAddRuleCaller(JSC::ExecState*, JSCSSStyleSheet*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionAddRule(ExecState* state)
{
    return BindingCaller<JSCSSStyleSheet>::callOperation<jsCSSStyleSheetPrototypeFunctionAddRuleCaller>(state, "addRule");
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionAddRuleCaller(JSC::ExecState* state, JSCSSStyleSheet* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto selector = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto style = convert<IDLDOMString>(*state, state->argument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto index = state->argument(2).isUndefined() ? std::optional<uint32_t>() : convert<IDLUnsignedLong>(*state, state->uncheckedArgument(2), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLLong>(*state, throwScope, impl.addRule(WTFMove(selector), WTFMove(style), WTFMove(index))));
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionRemoveRuleCaller(JSC::ExecState*, JSCSSStyleSheet*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsCSSStyleSheetPrototypeFunctionRemoveRule(ExecState* state)
{
    return BindingCaller<JSCSSStyleSheet>::callOperation<jsCSSStyleSheetPrototypeFunctionRemoveRuleCaller>(state, "removeRule");
}

static inline JSC::EncodedJSValue jsCSSStyleSheetPrototypeFunctionRemoveRuleCaller(JSC::ExecState* state, JSCSSStyleSheet* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto index = convert<IDLUnsignedLong>(*state, state->argument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.removeRule(WTFMove(index)));
    return JSValue::encode(jsUndefined());
}


}
