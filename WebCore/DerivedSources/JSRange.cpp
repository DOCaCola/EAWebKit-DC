/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSRange.h"

#include "CustomElementReactionQueue.h"
#include "Document.h"
#include "JSClientRect.h"
#include "JSClientRectList.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDocumentFragment.h"
#include "JSNode.h"
#include "JSRange.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStart(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEnd(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartAfter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndBefore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndAfter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCollapse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExpand(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNodeContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareBoundaryPoints(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDeleteContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExtractContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionInsertNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSurroundContents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneRange(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionToString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDetach(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetClientRects(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetBoundingClientRect(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCreateContextualFragment(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIntersectsNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionComparePoint(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIsPointInRange(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRangeStartContainer(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeStartOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeEndContainer(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeEndOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeCollapsed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeCommonAncestorContainer(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSRangeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRangePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSRangePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRangePrototype* ptr = new (NotNull, JSC::allocateCell<JSRangePrototype>(vm.heap)) JSRangePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRangePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSRangeConstructor = JSDOMConstructor<JSRange>;

/* Hash table for constructor */

static const HashTableValue JSRangeConstructorTableValues[] =
{
    { "START_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "START_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "END_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "END_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "NODE_BEFORE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "NODE_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "NODE_BEFORE_AND_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "NODE_INSIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

static_assert(Range::START_TO_START == 0, "START_TO_START in Range does not match value from IDL");
static_assert(Range::START_TO_END == 1, "START_TO_END in Range does not match value from IDL");
static_assert(Range::END_TO_END == 2, "END_TO_END in Range does not match value from IDL");
static_assert(Range::END_TO_START == 3, "END_TO_START in Range does not match value from IDL");
static_assert(Range::NODE_BEFORE == 0, "NODE_BEFORE in Range does not match value from IDL");
static_assert(Range::NODE_AFTER == 1, "NODE_AFTER in Range does not match value from IDL");
static_assert(Range::NODE_BEFORE_AND_AFTER == 2, "NODE_BEFORE_AND_AFTER in Range does not match value from IDL");
static_assert(Range::NODE_INSIDE == 3, "NODE_INSIDE in Range does not match value from IDL");

template<> EncodedJSValue JSC_HOST_CALL JSRangeConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSRangeConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "Range");
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto object = Range::create(document);
    return JSValue::encode(toJSNewlyCreated<IDLInterface<Range>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSRangeConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSRangeConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSRange::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Range"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSRangeConstructorTableValues, *this);
}

template<> const ClassInfo JSRangeConstructor::s_info = { "Range", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRangeConstructor) };

/* Hash table for prototype */

static const HashTableValue JSRangePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRangeConstructor) } },
    { "startContainer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeStartContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "startOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeStartOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "endContainer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeEndContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "endOffset", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeEndOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "collapsed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeCollapsed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "commonAncestorContainer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRangeCommonAncestorContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "setStart", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStart), (intptr_t) (2) } },
    { "setEnd", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEnd), (intptr_t) (2) } },
    { "setStartBefore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStartBefore), (intptr_t) (1) } },
    { "setStartAfter", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetStartAfter), (intptr_t) (1) } },
    { "setEndBefore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEndBefore), (intptr_t) (1) } },
    { "setEndAfter", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSetEndAfter), (intptr_t) (1) } },
    { "collapse", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCollapse), (intptr_t) (0) } },
    { "expand", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionExpand), (intptr_t) (0) } },
    { "selectNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSelectNode), (intptr_t) (1) } },
    { "selectNodeContents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSelectNodeContents), (intptr_t) (1) } },
    { "compareBoundaryPoints", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCompareBoundaryPoints), (intptr_t) (2) } },
    { "deleteContents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionDeleteContents), (intptr_t) (0) } },
    { "extractContents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionExtractContents), (intptr_t) (0) } },
    { "cloneContents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCloneContents), (intptr_t) (0) } },
    { "insertNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionInsertNode), (intptr_t) (1) } },
    { "surroundContents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionSurroundContents), (intptr_t) (1) } },
    { "cloneRange", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCloneRange), (intptr_t) (0) } },
    { "toString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionToString), (intptr_t) (0) } },
    { "detach", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionDetach), (intptr_t) (0) } },
    { "getClientRects", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionGetClientRects), (intptr_t) (0) } },
    { "getBoundingClientRect", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionGetBoundingClientRect), (intptr_t) (0) } },
    { "createContextualFragment", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCreateContextualFragment), (intptr_t) (1) } },
    { "compareNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionCompareNode), (intptr_t) (1) } },
    { "intersectsNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionIntersectsNode), (intptr_t) (1) } },
    { "comparePoint", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionComparePoint), (intptr_t) (2) } },
    { "isPointInRange", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRangePrototypeFunctionIsPointInRange), (intptr_t) (2) } },
    { "START_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "START_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "END_TO_END", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "END_TO_START", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "NODE_BEFORE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "NODE_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "NODE_BEFORE_AND_AFTER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "NODE_INSIDE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
};

const ClassInfo JSRangePrototype::s_info = { "RangePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRangePrototype) };

void JSRangePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRangePrototypeTableValues, *this);
}

const ClassInfo JSRange::s_info = { "Range", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRange) };

JSRange::JSRange(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Range>&& impl)
    : JSDOMWrapper<Range>(structure, globalObject, WTFMove(impl))
{
}

void JSRange::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSRange::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRangePrototype::create(vm, globalObject, JSRangePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRange::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRange>(vm, globalObject);
}

void JSRange::destroy(JSC::JSCell* cell)
{
    JSRange* thisObject = static_cast<JSRange*>(cell);
    thisObject->JSRange::~JSRange();
}

template<> inline JSRange* BindingCaller<JSRange>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSRange*>(JSValue::decode(thisValue));
}

template<> inline JSRange* BindingCaller<JSRange>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSRange*>(state.thisValue());
}

static inline JSValue jsRangeStartContainerGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeStartContainer(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeStartContainerGetter>(state, thisValue, "startContainer");
}

static inline JSValue jsRangeStartContainerGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Node>>(state, *thisObject.globalObject(), impl.startContainer());
    return result;
}

static inline JSValue jsRangeStartOffsetGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeStartOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeStartOffsetGetter>(state, thisValue, "startOffset");
}

static inline JSValue jsRangeStartOffsetGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.startOffset());
    return result;
}

static inline JSValue jsRangeEndContainerGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeEndContainer(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeEndContainerGetter>(state, thisValue, "endContainer");
}

static inline JSValue jsRangeEndContainerGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Node>>(state, *thisObject.globalObject(), impl.endContainer());
    return result;
}

static inline JSValue jsRangeEndOffsetGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeEndOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeEndOffsetGetter>(state, thisValue, "endOffset");
}

static inline JSValue jsRangeEndOffsetGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLLong>(impl.endOffset());
    return result;
}

static inline JSValue jsRangeCollapsedGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeCollapsed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeCollapsedGetter>(state, thisValue, "collapsed");
}

static inline JSValue jsRangeCollapsedGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.collapsed());
    return result;
}

static inline JSValue jsRangeCommonAncestorContainerGetter(ExecState&, JSRange&, ThrowScope& throwScope);

EncodedJSValue jsRangeCommonAncestorContainer(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSRange>::attribute<jsRangeCommonAncestorContainerGetter>(state, thisValue, "commonAncestorContainer");
}

static inline JSValue jsRangeCommonAncestorContainerGetter(ExecState& state, JSRange& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Node>>(state, *thisObject.globalObject(), impl.commonAncestorContainer());
    return result;
}

EncodedJSValue jsRangeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSRangePrototype* domObject = jsDynamicDowncast<JSRangePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSRange::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSRangeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSRangePrototype* domObject = jsDynamicDowncast<JSRangePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSRange::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSRangeConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStart(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetStartCaller>(state, "setStart");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setStart", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setStart(*refNode, WTFMove(offset)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEnd(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetEndCaller>(state, "setEnd");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setEnd", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setEnd(*refNode, WTFMove(offset)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartBeforeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartBefore(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetStartBeforeCaller>(state, "setStartBefore");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartBeforeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setStartBefore", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setStartBefore(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartAfterCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetStartAfter(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetStartAfterCaller>(state, "setStartAfter");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetStartAfterCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setStartAfter", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setStartAfter(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndBeforeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndBefore(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetEndBeforeCaller>(state, "setEndBefore");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndBeforeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setEndBefore", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setEndBefore(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndAfterCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSetEndAfter(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSetEndAfterCaller>(state, "setEndAfter");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSetEndAfterCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "setEndAfter", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.setEndAfter(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCollapseCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCollapse(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCollapseCaller>(state, "collapse");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCollapseCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto toStart = convert<IDLBoolean>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.collapse(WTFMove(toStart));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionExpandCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExpand(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionExpandCaller>(state, "expand");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionExpandCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto unit = state->argument(0).isUndefined() ? emptyString() : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.expand(WTFMove(unit)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSelectNodeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNode(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSelectNodeCaller>(state, "selectNode");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSelectNodeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "selectNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.selectNode(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSelectNodeContentsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSelectNodeContents(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSelectNodeContentsCaller>(state, "selectNodeContents");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSelectNodeContentsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "selectNodeContents", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.selectNodeContents(*refNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCompareBoundaryPointsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareBoundaryPoints(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCompareBoundaryPointsCaller>(state, "compareBoundaryPoints");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCompareBoundaryPointsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto how = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto sourceRange = convert<IDLInterface<Range>>(*state, state->uncheckedArgument(1), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 1, "sourceRange", "Range", "compareBoundaryPoints", "Range"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLShort>(*state, throwScope, impl.compareBoundaryPointsForBindings(WTFMove(how), *sourceRange)));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionDeleteContentsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDeleteContents(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionDeleteContentsCaller>(state, "deleteContents");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionDeleteContentsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.deleteContents());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionExtractContentsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionExtractContents(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionExtractContentsCaller>(state, "extractContents");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionExtractContentsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DocumentFragment>>(*state, *castedThis->globalObject(), throwScope, impl.extractContents()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCloneContentsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneContents(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCloneContentsCaller>(state, "cloneContents");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCloneContentsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DocumentFragment>>(*state, *castedThis->globalObject(), throwScope, impl.cloneContents()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionInsertNodeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionInsertNode(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionInsertNodeCaller>(state, "insertNode");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionInsertNodeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto newNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "newNode", "Range", "insertNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.insertNode(*newNode));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSurroundContentsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionSurroundContents(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionSurroundContentsCaller>(state, "surroundContents");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionSurroundContentsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto newParent = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "newParent", "Range", "surroundContents", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.surroundContents(*newParent));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCloneRangeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCloneRange(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCloneRangeCaller>(state, "cloneRange");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCloneRangeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<Range>>(*state, *castedThis->globalObject(), impl.cloneRange()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionToStringCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionToString(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionToStringCaller>(state, "toString");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionToStringCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.toString()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionDetachCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionDetach(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionDetachCaller>(state, "detach");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionDetachCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.detach();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionGetClientRectsCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetClientRects(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionGetClientRectsCaller>(state, "getClientRects");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionGetClientRectsCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<ClientRectList>>(*state, *castedThis->globalObject(), impl.getClientRects()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionGetBoundingClientRectCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionGetBoundingClientRect(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionGetBoundingClientRectCaller>(state, "getBoundingClientRect");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionGetBoundingClientRectCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<ClientRect>>(*state, *castedThis->globalObject(), impl.getBoundingClientRect()));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCreateContextualFragmentCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCreateContextualFragment(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCreateContextualFragmentCaller>(state, "createContextualFragment");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCreateContextualFragmentCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto html = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<DocumentFragment>>(*state, *castedThis->globalObject(), throwScope, impl.createContextualFragment(WTFMove(html))));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCompareNodeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionCompareNode(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionCompareNodeCaller>(state, "compareNode");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionCompareNodeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "compareNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLShort>(*state, throwScope, impl.compareNode(*refNode)));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionIntersectsNodeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIntersectsNode(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionIntersectsNodeCaller>(state, "intersectsNode");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionIntersectsNodeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "intersectsNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(*state, throwScope, impl.intersectsNode(*refNode)));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionComparePointCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionComparePoint(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionComparePointCaller>(state, "comparePoint");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionComparePointCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "comparePoint", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLShort>(*state, throwScope, impl.comparePoint(*refNode, WTFMove(offset))));
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionIsPointInRangeCaller(JSC::ExecState*, JSRange*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsRangePrototypeFunctionIsPointInRange(ExecState* state)
{
    return BindingCaller<JSRange>::callOperation<jsRangePrototypeFunctionIsPointInRangeCaller>(state, "isPointInRange");
}

static inline JSC::EncodedJSValue jsRangePrototypeFunctionIsPointInRangeCaller(JSC::ExecState* state, JSRange* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto refNode = convert<IDLInterface<Node>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "refNode", "Range", "isPointInRange", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto offset = convert<IDLUnsignedLong>(*state, state->uncheckedArgument(1), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(*state, throwScope, impl.isPointInRange(*refNode, WTFMove(offset))));
}

bool JSRangeOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSRangeOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRange = static_cast<JSRange*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRange->wrapped(), jsRange);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<Range>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to Range.
    static_assert(!__is_polymorphic(Range), "Range is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<Range>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, Range& impl)
{
    return wrap(state, globalObject, impl);
}

Range* JSRange::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSRange*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
