/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGMatrix.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGMatrix.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionMultiply(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionInverse(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionTranslate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionScale(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionScaleNonUniform(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionRotate(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionRotateFromVector(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionFlipX(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionFlipY(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionSkewX(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionSkewY(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGMatrixA(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixA(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixB(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixB(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixC(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixC(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixD(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixD(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixE(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixE(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixF(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixF(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGMatrixConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGMatrixPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGMatrixPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGMatrixPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGMatrixPrototype>(vm.heap)) JSSVGMatrixPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGMatrixPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGMatrixConstructor = JSDOMConstructorNotConstructable<JSSVGMatrix>;

template<> JSValue JSSVGMatrixConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSSVGMatrixConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGMatrix::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGMatrix"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGMatrixConstructor::s_info = { "SVGMatrix", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGMatrixConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGMatrixPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixConstructor) } },
    { "a", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixA), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixA) } },
    { "b", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixB), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixB) } },
    { "c", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixC), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixC) } },
    { "d", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixD), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixD) } },
    { "e", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixE), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixE) } },
    { "f", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGMatrixF), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGMatrixF) } },
    { "multiply", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionMultiply), (intptr_t) (1) } },
    { "inverse", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionInverse), (intptr_t) (0) } },
    { "translate", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionTranslate), (intptr_t) (2) } },
    { "scale", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionScale), (intptr_t) (1) } },
    { "scaleNonUniform", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionScaleNonUniform), (intptr_t) (2) } },
    { "rotate", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionRotate), (intptr_t) (1) } },
    { "rotateFromVector", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionRotateFromVector), (intptr_t) (2) } },
    { "flipX", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionFlipX), (intptr_t) (0) } },
    { "flipY", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionFlipY), (intptr_t) (0) } },
    { "skewX", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionSkewX), (intptr_t) (1) } },
    { "skewY", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGMatrixPrototypeFunctionSkewY), (intptr_t) (1) } },
};

const ClassInfo JSSVGMatrixPrototype::s_info = { "SVGMatrixPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGMatrixPrototype) };

void JSSVGMatrixPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGMatrixPrototypeTableValues, *this);
}

const ClassInfo JSSVGMatrix::s_info = { "SVGMatrix", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGMatrix) };

JSSVGMatrix::JSSVGMatrix(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGMatrix>&& impl)
    : JSDOMWrapper<SVGMatrix>(structure, globalObject, WTFMove(impl))
{
}

void JSSVGMatrix::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGMatrix::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGMatrixPrototype::create(vm, globalObject, JSSVGMatrixPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSVGMatrix::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGMatrix>(vm, globalObject);
}

void JSSVGMatrix::destroy(JSC::JSCell* cell)
{
    JSSVGMatrix* thisObject = static_cast<JSSVGMatrix*>(cell);
    thisObject->JSSVGMatrix::~JSSVGMatrix();
}

template<> inline JSSVGMatrix* BindingCaller<JSSVGMatrix>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGMatrix*>(JSValue::decode(thisValue));
}

template<> inline JSSVGMatrix* BindingCaller<JSSVGMatrix>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGMatrix*>(state.thisValue());
}

static inline JSValue jsSVGMatrixAGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixA(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixAGetter>(state, thisValue, "a");
}

static inline JSValue jsSVGMatrixAGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.a());
    return result;
}

static inline JSValue jsSVGMatrixBGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixB(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixBGetter>(state, thisValue, "b");
}

static inline JSValue jsSVGMatrixBGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.b());
    return result;
}

static inline JSValue jsSVGMatrixCGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixC(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixCGetter>(state, thisValue, "c");
}

static inline JSValue jsSVGMatrixCGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.c());
    return result;
}

static inline JSValue jsSVGMatrixDGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixD(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixDGetter>(state, thisValue, "d");
}

static inline JSValue jsSVGMatrixDGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.d());
    return result;
}

static inline JSValue jsSVGMatrixEGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixE(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixEGetter>(state, thisValue, "e");
}

static inline JSValue jsSVGMatrixEGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.e());
    return result;
}

static inline JSValue jsSVGMatrixFGetter(ExecState&, JSSVGMatrix&, ThrowScope& throwScope);

EncodedJSValue jsSVGMatrixF(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGMatrix>::attribute<jsSVGMatrixFGetter>(state, thisValue, "f");
}

static inline JSValue jsSVGMatrixFGetter(ExecState& state, JSSVGMatrix& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.f());
    return result;
}

EncodedJSValue jsSVGMatrixConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGMatrixPrototype* domObject = jsDynamicDowncast<JSSVGMatrixPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGMatrix::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGMatrixConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGMatrixPrototype* domObject = jsDynamicDowncast<JSSVGMatrixPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGMatrixAFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixA(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixAFunction>(state, thisValue, encodedValue, "a");
}

static inline bool setJSSVGMatrixAFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setA(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGMatrixBFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixB(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixBFunction>(state, thisValue, encodedValue, "b");
}

static inline bool setJSSVGMatrixBFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setB(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGMatrixCFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixC(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixCFunction>(state, thisValue, encodedValue, "c");
}

static inline bool setJSSVGMatrixCFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setC(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGMatrixDFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixD(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixDFunction>(state, thisValue, encodedValue, "d");
}

static inline bool setJSSVGMatrixDFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setD(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGMatrixEFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixE(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixEFunction>(state, thisValue, encodedValue, "e");
}

static inline bool setJSSVGMatrixEFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setE(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGMatrixFFunction(ExecState&, JSSVGMatrix&, JSValue, ThrowScope&);

bool setJSSVGMatrixF(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGMatrix>::setAttribute<setJSSVGMatrixFFunction>(state, thisValue, encodedValue, "f");
}

static inline bool setJSSVGMatrixFFunction(ExecState& state, JSSVGMatrix& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setF(WTFMove(nativeValue)));
    return true;
}


JSValue JSSVGMatrix::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGMatrixConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionMultiplyCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionMultiply(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionMultiplyCaller>(state, "multiply");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionMultiplyCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto secondMatrix = convert<IDLInterface<SVGMatrix>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "secondMatrix", "SVGMatrix", "multiply", "SVGMatrix"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.multiply(*secondMatrix)));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionInverseCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionInverse(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionInverseCaller>(state, "inverse");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionInverseCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.inverse()));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionTranslateCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionTranslate(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionTranslateCaller>(state, "translate");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionTranslateCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto x = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.translate(WTFMove(x), WTFMove(y))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionScaleCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionScale(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionScaleCaller>(state, "scale");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionScaleCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto scaleFactor = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.scale(WTFMove(scaleFactor))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionScaleNonUniformCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionScaleNonUniform(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionScaleNonUniformCaller>(state, "scaleNonUniform");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionScaleNonUniformCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto scaleFactorX = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto scaleFactorY = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.scaleNonUniform(WTFMove(scaleFactorX), WTFMove(scaleFactorY))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionRotateCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionRotate(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionRotateCaller>(state, "rotate");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionRotateCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto angle = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.rotate(WTFMove(angle))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionRotateFromVectorCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionRotateFromVector(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionRotateFromVectorCaller>(state, "rotateFromVector");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionRotateFromVectorCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto x = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto y = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.rotateFromVector(WTFMove(x), WTFMove(y))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionFlipXCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionFlipX(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionFlipXCaller>(state, "flipX");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionFlipXCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.flipX()));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionFlipYCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionFlipY(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionFlipYCaller>(state, "flipY");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionFlipYCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.flipY()));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionSkewXCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionSkewX(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionSkewXCaller>(state, "skewX");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionSkewXCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto angle = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.skewX(WTFMove(angle))));
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionSkewYCaller(JSC::ExecState*, JSSVGMatrix*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGMatrixPrototypeFunctionSkewY(ExecState* state)
{
    return BindingCaller<JSSVGMatrix>::callOperation<jsSVGMatrixPrototypeFunctionSkewYCaller>(state, "skewY");
}

static inline JSC::EncodedJSValue jsSVGMatrixPrototypeFunctionSkewYCaller(JSC::ExecState* state, JSSVGMatrix* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto angle = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.skewY(WTFMove(angle))));
}

bool JSSVGMatrixOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSSVGMatrixOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSVGMatrix = static_cast<JSSVGMatrix*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSVGMatrix->wrapped(), jsSVGMatrix);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SVGMatrix>&& impl)
{
    return createWrapper<SVGMatrix>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SVGMatrix& impl)
{
    return wrap(state, globalObject, impl);
}

SVGMatrix* JSSVGMatrix::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSVGMatrix*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
