/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGGraphicsElement.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSSVGAnimatedTransformList.h"
#include "JSSVGMatrix.h"
#include "JSSVGRect.h"
#include "JSSVGStringList.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetBBox(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetCTM(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetScreenCTM(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetTransformToElement(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionHasExtension(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGGraphicsElementTransform(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementNearestViewportElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementFarthestViewportElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementRequiredFeatures(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementRequiredExtensions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementSystemLanguage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGGraphicsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGGraphicsElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGGraphicsElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGGraphicsElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGGraphicsElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGGraphicsElementPrototype>(vm.heap)) JSSVGGraphicsElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGGraphicsElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGGraphicsElementConstructor = JSDOMConstructorNotConstructable<JSSVGGraphicsElement>;

template<> JSValue JSSVGGraphicsElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGElement::getConstructor(vm, &globalObject);
}

template<> void JSSVGGraphicsElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGGraphicsElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGGraphicsElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGGraphicsElementConstructor::s_info = { "SVGGraphicsElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGGraphicsElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGGraphicsElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGGraphicsElementConstructor) } },
    { "transform", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementTransform), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "nearestViewportElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementNearestViewportElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "farthestViewportElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementFarthestViewportElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredFeatures", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementRequiredFeatures), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "requiredExtensions", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementRequiredExtensions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "systemLanguage", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGGraphicsElementSystemLanguage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "getBBox", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGGraphicsElementPrototypeFunctionGetBBox), (intptr_t) (0) } },
    { "getCTM", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGGraphicsElementPrototypeFunctionGetCTM), (intptr_t) (0) } },
    { "getScreenCTM", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGGraphicsElementPrototypeFunctionGetScreenCTM), (intptr_t) (0) } },
    { "getTransformToElement", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGGraphicsElementPrototypeFunctionGetTransformToElement), (intptr_t) (0) } },
    { "hasExtension", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGGraphicsElementPrototypeFunctionHasExtension), (intptr_t) (0) } },
};

const ClassInfo JSSVGGraphicsElementPrototype::s_info = { "SVGGraphicsElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGGraphicsElementPrototype) };

void JSSVGGraphicsElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGGraphicsElementPrototypeTableValues, *this);
}

const ClassInfo JSSVGGraphicsElement::s_info = { "SVGGraphicsElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGGraphicsElement) };

JSSVGGraphicsElement::JSSVGGraphicsElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGGraphicsElement>&& impl)
    : JSSVGElement(structure, globalObject, WTFMove(impl))
{
}

void JSSVGGraphicsElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGGraphicsElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGGraphicsElementPrototype::create(vm, globalObject, JSSVGGraphicsElementPrototype::createStructure(vm, globalObject, JSSVGElement::prototype(vm, globalObject)));
}

JSObject* JSSVGGraphicsElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGGraphicsElement>(vm, globalObject);
}

template<> inline JSSVGGraphicsElement* BindingCaller<JSSVGGraphicsElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGGraphicsElement*>(JSValue::decode(thisValue));
}

template<> inline JSSVGGraphicsElement* BindingCaller<JSSVGGraphicsElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGGraphicsElement*>(state.thisValue());
}

static inline JSValue jsSVGGraphicsElementTransformGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementTransform(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementTransformGetter>(state, thisValue, "transform");
}

static inline JSValue jsSVGGraphicsElementTransformGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGAnimatedTransformList>>(state, *thisObject.globalObject(), impl.transformAnimated());
    return result;
}

static inline JSValue jsSVGGraphicsElementNearestViewportElementGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementNearestViewportElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementNearestViewportElementGetter>(state, thisValue, "nearestViewportElement");
}

static inline JSValue jsSVGGraphicsElementNearestViewportElementGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGElement>>(state, *thisObject.globalObject(), impl.nearestViewportElement());
    return result;
}

static inline JSValue jsSVGGraphicsElementFarthestViewportElementGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementFarthestViewportElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementFarthestViewportElementGetter>(state, thisValue, "farthestViewportElement");
}

static inline JSValue jsSVGGraphicsElementFarthestViewportElementGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<SVGElement>>(state, *thisObject.globalObject(), impl.farthestViewportElement());
    return result;
}

static inline JSValue jsSVGGraphicsElementRequiredFeaturesGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementRequiredFeatures(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementRequiredFeaturesGetter>(state, thisValue, "requiredFeatures");
}

static inline JSValue jsSVGGraphicsElementRequiredFeaturesGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredFeatures());
    return result;
}

static inline JSValue jsSVGGraphicsElementRequiredExtensionsGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementRequiredExtensions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementRequiredExtensionsGetter>(state, thisValue, "requiredExtensions");
}

static inline JSValue jsSVGGraphicsElementRequiredExtensionsGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.requiredExtensions());
    return result;
}

static inline JSValue jsSVGGraphicsElementSystemLanguageGetter(ExecState&, JSSVGGraphicsElement&, ThrowScope& throwScope);

EncodedJSValue jsSVGGraphicsElementSystemLanguage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGGraphicsElement>::attribute<jsSVGGraphicsElementSystemLanguageGetter>(state, thisValue, "systemLanguage");
}

static inline JSValue jsSVGGraphicsElementSystemLanguageGetter(ExecState& state, JSSVGGraphicsElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJSNewlyCreated<IDLInterface<SVGStringList>>(state, *thisObject.globalObject(), impl.systemLanguage());
    return result;
}

EncodedJSValue jsSVGGraphicsElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGGraphicsElementPrototype* domObject = jsDynamicDowncast<JSSVGGraphicsElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGGraphicsElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGGraphicsElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGGraphicsElementPrototype* domObject = jsDynamicDowncast<JSSVGGraphicsElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSSVGGraphicsElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGGraphicsElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetBBoxCaller(JSC::ExecState*, JSSVGGraphicsElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetBBox(ExecState* state)
{
    return BindingCaller<JSSVGGraphicsElement>::callOperation<jsSVGGraphicsElementPrototypeFunctionGetBBoxCaller>(state, "getBBox");
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetBBoxCaller(JSC::ExecState* state, JSSVGGraphicsElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGRect>>(*state, *castedThis->globalObject(), impl.getBBoxForBindings()));
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetCTMCaller(JSC::ExecState*, JSSVGGraphicsElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetCTM(ExecState* state)
{
    return BindingCaller<JSSVGGraphicsElement>::callOperation<jsSVGGraphicsElementPrototypeFunctionGetCTMCaller>(state, "getCTM");
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetCTMCaller(JSC::ExecState* state, JSSVGGraphicsElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), impl.getCTMForBindings()));
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetScreenCTMCaller(JSC::ExecState*, JSSVGGraphicsElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetScreenCTM(ExecState* state)
{
    return BindingCaller<JSSVGGraphicsElement>::callOperation<jsSVGGraphicsElementPrototypeFunctionGetScreenCTMCaller>(state, "getScreenCTM");
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetScreenCTMCaller(JSC::ExecState* state, JSSVGGraphicsElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), impl.getScreenCTMForBindings()));
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetTransformToElementCaller(JSC::ExecState*, JSSVGGraphicsElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionGetTransformToElement(ExecState* state)
{
    return BindingCaller<JSSVGGraphicsElement>::callOperation<jsSVGGraphicsElementPrototypeFunctionGetTransformToElementCaller>(state, "getTransformToElement");
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionGetTransformToElementCaller(JSC::ExecState* state, JSSVGGraphicsElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto element = convert<IDLNullable<IDLInterface<SVGElement>>>(*state, state->argument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "element", "SVGGraphicsElement", "getTransformToElement", "SVGElement"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<SVGMatrix>>(*state, *castedThis->globalObject(), throwScope, impl.getTransformToElement(WTFMove(element))));
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionHasExtensionCaller(JSC::ExecState*, JSSVGGraphicsElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGGraphicsElementPrototypeFunctionHasExtension(ExecState* state)
{
    return BindingCaller<JSSVGGraphicsElement>::callOperation<jsSVGGraphicsElementPrototypeFunctionHasExtensionCaller>(state, "hasExtension");
}

static inline JSC::EncodedJSValue jsSVGGraphicsElementPrototypeFunctionHasExtensionCaller(JSC::ExecState* state, JSSVGGraphicsElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto extension = convert<IDLDOMString>(*state, state->argument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLBoolean>(impl.hasExtension(WTFMove(extension))));
}

void JSSVGGraphicsElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSVGGraphicsElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
