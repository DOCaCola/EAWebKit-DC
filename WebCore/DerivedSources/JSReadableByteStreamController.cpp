/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(READABLE_BYTE_STREAM_API) && ENABLE(READABLE_STREAM_API)

#include "JSReadableByteStreamController.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "ReadableByteStreamControllerBuiltins.h"
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions


// Attributes

JSC::EncodedJSValue jsReadableByteStreamControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSReadableByteStreamControllerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSReadableByteStreamControllerPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSReadableByteStreamControllerPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSReadableByteStreamControllerPrototype* ptr = new (NotNull, JSC::allocateCell<JSReadableByteStreamControllerPrototype>(vm.heap)) JSReadableByteStreamControllerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSReadableByteStreamControllerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSReadableByteStreamControllerConstructor = JSDOMConstructor<JSReadableByteStreamController>;

template<> JSC::EncodedJSValue JSC_HOST_CALL JSReadableByteStreamControllerConstructor::construct(JSC::ExecState* exec)
{
    ASSERT(exec);
    return constructJSReadableByteStreamController(*exec);
}

template<> JSValue JSReadableByteStreamControllerConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSReadableByteStreamControllerConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSReadableByteStreamController::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("ReadableByteStreamController"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(3), ReadOnly | DontEnum);
}

template<> const ClassInfo JSReadableByteStreamControllerConstructor::s_info = { "ReadableByteStreamController", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableByteStreamControllerConstructor) };

/* Hash table for prototype */

static const HashTableValue JSReadableByteStreamControllerPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsReadableByteStreamControllerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSReadableByteStreamControllerConstructor) } },
    { "desiredSize", DontEnum | ReadOnly | Accessor | Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(readableByteStreamControllerDesiredSizeCodeGenerator), (intptr_t) (0) } },
    { "enqueue", DontEnum | JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(readableByteStreamControllerEnqueueCodeGenerator), (intptr_t) (0) } },
    { "close", DontEnum | JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(readableByteStreamControllerCloseCodeGenerator), (intptr_t) (0) } },
    { "error", DontEnum | JSC::Builtin, NoIntrinsic, { (intptr_t)static_cast<BuiltinGenerator>(readableByteStreamControllerErrorCodeGenerator), (intptr_t) (0) } },
};

const ClassInfo JSReadableByteStreamControllerPrototype::s_info = { "ReadableByteStreamControllerPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableByteStreamControllerPrototype) };

void JSReadableByteStreamControllerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSReadableByteStreamControllerPrototypeTableValues, *this);
}

const ClassInfo JSReadableByteStreamController::s_info = { "ReadableByteStreamController", &Base::s_info, 0, CREATE_METHOD_TABLE(JSReadableByteStreamController) };

JSReadableByteStreamController::JSReadableByteStreamController(Structure* structure, JSDOMGlobalObject& globalObject)
    : JSDOMObject(structure, globalObject) { }

void JSReadableByteStreamController::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSReadableByteStreamController::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSReadableByteStreamControllerPrototype::create(vm, globalObject, JSReadableByteStreamControllerPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSReadableByteStreamController::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSReadableByteStreamController>(vm, globalObject);
}

void JSReadableByteStreamController::destroy(JSC::JSCell* cell)
{
    JSReadableByteStreamController* thisObject = static_cast<JSReadableByteStreamController*>(cell);
    thisObject->JSReadableByteStreamController::~JSReadableByteStreamController();
}

template<> inline JSReadableByteStreamController* BindingCaller<JSReadableByteStreamController>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSReadableByteStreamController*>(JSValue::decode(thisValue));
}

template<> inline JSReadableByteStreamController* BindingCaller<JSReadableByteStreamController>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSReadableByteStreamController*>(state.thisValue());
}

EncodedJSValue jsReadableByteStreamControllerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSReadableByteStreamControllerPrototype* domObject = jsDynamicDowncast<JSReadableByteStreamControllerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    JSValue constructor = JSReadableByteStreamControllerConstructor::create(state->vm(), JSReadableByteStreamControllerConstructor::createStructure(state->vm(), *domObject->globalObject(), domObject->globalObject()->objectPrototype()), *jsCast<JSDOMGlobalObject*>(domObject->globalObject()));
    // Shadowing constructor property to ensure reusing the same constructor object
    domObject->putDirect(state->vm(), state->propertyNames().constructor, constructor, DontEnum | ReadOnly);
    return JSValue::encode(constructor);
}

bool setJSReadableByteStreamControllerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSReadableByteStreamControllerPrototype* domObject = jsDynamicDowncast<JSReadableByteStreamControllerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}


}

#endif // ENABLE(READABLE_BYTE_STREAM_API) && ENABLE(READABLE_STREAM_API)
