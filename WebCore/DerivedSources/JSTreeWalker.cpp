/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTreeWalker.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSNode.h"
#include "JSNodeFilter.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionParentNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionFirstChild(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionLastChild(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionPreviousSibling(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionNextSibling(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionPreviousNode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionNextNode(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsTreeWalkerRoot(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTreeWalkerWhatToShow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTreeWalkerFilter(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTreeWalkerCurrentNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTreeWalkerCurrentNode(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsTreeWalkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTreeWalkerConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSTreeWalkerPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTreeWalkerPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTreeWalkerPrototype* ptr = new (NotNull, JSC::allocateCell<JSTreeWalkerPrototype>(vm.heap)) JSTreeWalkerPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTreeWalkerPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSTreeWalkerConstructor = JSDOMConstructorNotConstructable<JSTreeWalker>;

template<> JSValue JSTreeWalkerConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSTreeWalkerConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSTreeWalker::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("TreeWalker"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSTreeWalkerConstructor::s_info = { "TreeWalker", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTreeWalkerConstructor) };

/* Hash table for prototype */

static const HashTableValue JSTreeWalkerPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTreeWalkerConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTreeWalkerConstructor) } },
    { "root", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTreeWalkerRoot), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "whatToShow", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTreeWalkerWhatToShow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "filter", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTreeWalkerFilter), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "currentNode", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTreeWalkerCurrentNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTreeWalkerCurrentNode) } },
    { "parentNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionParentNode), (intptr_t) (0) } },
    { "firstChild", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionFirstChild), (intptr_t) (0) } },
    { "lastChild", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionLastChild), (intptr_t) (0) } },
    { "previousSibling", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionPreviousSibling), (intptr_t) (0) } },
    { "nextSibling", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionNextSibling), (intptr_t) (0) } },
    { "previousNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionPreviousNode), (intptr_t) (0) } },
    { "nextNode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTreeWalkerPrototypeFunctionNextNode), (intptr_t) (0) } },
};

const ClassInfo JSTreeWalkerPrototype::s_info = { "TreeWalkerPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTreeWalkerPrototype) };

void JSTreeWalkerPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTreeWalkerPrototypeTableValues, *this);
}

const ClassInfo JSTreeWalker::s_info = { "TreeWalker", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTreeWalker) };

JSTreeWalker::JSTreeWalker(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TreeWalker>&& impl)
    : JSDOMWrapper<TreeWalker>(structure, globalObject, WTFMove(impl))
{
}

void JSTreeWalker::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSTreeWalker::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTreeWalkerPrototype::create(vm, globalObject, JSTreeWalkerPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSTreeWalker::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTreeWalker>(vm, globalObject);
}

void JSTreeWalker::destroy(JSC::JSCell* cell)
{
    JSTreeWalker* thisObject = static_cast<JSTreeWalker*>(cell);
    thisObject->JSTreeWalker::~JSTreeWalker();
}

template<> inline JSTreeWalker* BindingCaller<JSTreeWalker>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSTreeWalker*>(JSValue::decode(thisValue));
}

template<> inline JSTreeWalker* BindingCaller<JSTreeWalker>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSTreeWalker*>(state.thisValue());
}

static inline JSValue jsTreeWalkerRootGetter(ExecState&, JSTreeWalker&, ThrowScope& throwScope);

EncodedJSValue jsTreeWalkerRoot(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTreeWalker>::attribute<jsTreeWalkerRootGetter>(state, thisValue, "root");
}

static inline JSValue jsTreeWalkerRootGetter(ExecState& state, JSTreeWalker& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Node>>(state, *thisObject.globalObject(), impl.root());
    return result;
}

static inline JSValue jsTreeWalkerWhatToShowGetter(ExecState&, JSTreeWalker&, ThrowScope& throwScope);

EncodedJSValue jsTreeWalkerWhatToShow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTreeWalker>::attribute<jsTreeWalkerWhatToShowGetter>(state, thisValue, "whatToShow");
}

static inline JSValue jsTreeWalkerWhatToShowGetter(ExecState& state, JSTreeWalker& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.whatToShow());
    return result;
}

static inline JSValue jsTreeWalkerFilterGetter(ExecState&, JSTreeWalker&, ThrowScope& throwScope);

EncodedJSValue jsTreeWalkerFilter(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTreeWalker>::attribute<jsTreeWalkerFilterGetter>(state, thisValue, "filter");
}

static inline JSValue jsTreeWalkerFilterGetter(ExecState& state, JSTreeWalker& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLCallbackInterface<JSNodeFilter>>(state, *thisObject.globalObject(), impl.filter());
    return result;
}

static inline JSValue jsTreeWalkerCurrentNodeGetter(ExecState&, JSTreeWalker&, ThrowScope& throwScope);

EncodedJSValue jsTreeWalkerCurrentNode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTreeWalker>::attribute<jsTreeWalkerCurrentNodeGetter>(state, thisValue, "currentNode");
}

static inline JSValue jsTreeWalkerCurrentNodeGetter(ExecState& state, JSTreeWalker& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<Node>>(state, *thisObject.globalObject(), impl.currentNode());
    return result;
}

EncodedJSValue jsTreeWalkerConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSTreeWalkerPrototype* domObject = jsDynamicDowncast<JSTreeWalkerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSTreeWalker::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSTreeWalkerConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSTreeWalkerPrototype* domObject = jsDynamicDowncast<JSTreeWalkerPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSTreeWalkerCurrentNodeFunction(ExecState&, JSTreeWalker&, JSValue, ThrowScope&);

bool setJSTreeWalkerCurrentNode(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSTreeWalker>::setAttribute<setJSTreeWalkerCurrentNodeFunction>(state, thisValue, encodedValue, "currentNode");
}

static inline bool setJSTreeWalkerCurrentNodeFunction(ExecState& state, JSTreeWalker& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLInterface<Node>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "TreeWalker", "currentNode", "Node"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setCurrentNode(*nativeValue);
    return true;
}


JSValue JSTreeWalker::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTreeWalkerConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionParentNodeCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionParentNode(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionParentNodeCaller>(state, "parentNode");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionParentNodeCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.parentNode()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionFirstChildCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionFirstChild(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionFirstChildCaller>(state, "firstChild");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionFirstChildCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.firstChild()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionLastChildCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionLastChild(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionLastChildCaller>(state, "lastChild");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionLastChildCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.lastChild()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionPreviousSiblingCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionPreviousSibling(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionPreviousSiblingCaller>(state, "previousSibling");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionPreviousSiblingCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.previousSibling()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionNextSiblingCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionNextSibling(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionNextSiblingCaller>(state, "nextSibling");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionNextSiblingCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.nextSibling()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionPreviousNodeCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionPreviousNode(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionPreviousNodeCaller>(state, "previousNode");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionPreviousNodeCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.previousNode()));
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionNextNodeCaller(JSC::ExecState*, JSTreeWalker*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTreeWalkerPrototypeFunctionNextNode(ExecState* state)
{
    return BindingCaller<JSTreeWalker>::callOperation<jsTreeWalkerPrototypeFunctionNextNodeCaller>(state, "nextNode");
}

static inline JSC::EncodedJSValue jsTreeWalkerPrototypeFunctionNextNodeCaller(JSC::ExecState* state, JSTreeWalker* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<Node>>(*state, *castedThis->globalObject(), impl.nextNode()));
}

void JSTreeWalker::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSTreeWalker*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSTreeWalker::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSTreeWalker*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

bool JSTreeWalkerOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSTreeWalkerOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTreeWalker = static_cast<JSTreeWalker*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsTreeWalker->wrapped(), jsTreeWalker);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<TreeWalker>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to TreeWalker.
    static_assert(!__is_polymorphic(TreeWalker), "TreeWalker is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<TreeWalker>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, TreeWalker& impl)
{
    return wrap(state, globalObject, impl);
}

TreeWalker* JSTreeWalker::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSTreeWalker*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
