/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFileReader.h"

#include "EventNames.h"
#include "JSBlob.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include "JSFileError.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsArrayBuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsBinaryString(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsText(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsDataURL(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionAbort(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFileReaderReadyState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileReaderResult(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileReaderError(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFileReaderOnloadstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnloadstart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderOnprogress(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnprogress(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderOnloadend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderOnloadend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFileReaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFileReaderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFileReaderPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFileReaderPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFileReaderPrototype* ptr = new (NotNull, JSC::allocateCell<JSFileReaderPrototype>(vm.heap)) JSFileReaderPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFileReaderPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFileReaderConstructor = JSDOMConstructor<JSFileReader>;

/* Hash table for constructor */

static const HashTableValue JSFileReaderConstructorTableValues[] =
{
    { "EMPTY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "LOADING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "DONE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

static_assert(FileReader::EMPTY == 0, "EMPTY in FileReader does not match value from IDL");
static_assert(FileReader::LOADING == 1, "LOADING in FileReader does not match value from IDL");
static_assert(FileReader::DONE == 2, "DONE in FileReader does not match value from IDL");

template<> EncodedJSValue JSC_HOST_CALL JSFileReaderConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSFileReaderConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "FileReader");
    auto object = FileReader::create(*context);
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FileReader>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSFileReaderConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSFileReaderConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFileReader::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("FileReader"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSFileReaderConstructorTableValues, *this);
}

template<> const ClassInfo JSFileReaderConstructor::s_info = { "FileReader", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFileReaderConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFileReaderPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderConstructor) } },
    { "readyState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderReadyState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "result", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderResult), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "error", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderError), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onloadstart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnloadstart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnloadstart) } },
    { "onprogress", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnprogress), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnprogress) } },
    { "onload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnload) } },
    { "onabort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnabort) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnerror) } },
    { "onloadend", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFileReaderOnloadend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFileReaderOnloadend) } },
    { "readAsArrayBuffer", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileReaderPrototypeFunctionReadAsArrayBuffer), (intptr_t) (1) } },
    { "readAsBinaryString", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileReaderPrototypeFunctionReadAsBinaryString), (intptr_t) (1) } },
    { "readAsText", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileReaderPrototypeFunctionReadAsText), (intptr_t) (1) } },
    { "readAsDataURL", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileReaderPrototypeFunctionReadAsDataURL), (intptr_t) (1) } },
    { "abort", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFileReaderPrototypeFunctionAbort), (intptr_t) (0) } },
    { "EMPTY", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "LOADING", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "DONE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
};

const ClassInfo JSFileReaderPrototype::s_info = { "FileReaderPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFileReaderPrototype) };

void JSFileReaderPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFileReaderPrototypeTableValues, *this);
}

const ClassInfo JSFileReader::s_info = { "FileReader", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFileReader) };

JSFileReader::JSFileReader(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FileReader>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSFileReader::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFileReader::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFileReaderPrototype::create(vm, globalObject, JSFileReaderPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSFileReader::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFileReader>(vm, globalObject);
}

template<> inline JSFileReader* BindingCaller<JSFileReader>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFileReader*>(JSValue::decode(thisValue));
}

template<> inline JSFileReader* BindingCaller<JSFileReader>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFileReader*>(state.thisValue());
}

static inline JSValue jsFileReaderReadyStateGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderReadyState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderReadyStateGetter>(state, thisValue, "readyState");
}

static inline JSValue jsFileReaderReadyStateGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.readyState());
    return result;
}

static inline JSValue jsFileReaderResultGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderResult(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderResultGetter>(state, thisValue, "result");
}

static inline JSValue jsFileReaderResultGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLUnion<IDLDOMString, IDLInterface<ArrayBuffer>>>>(state, *thisObject.globalObject(), impl.result());
    return result;
}

static inline JSValue jsFileReaderErrorGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderError(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderErrorGetter>(state, thisValue, "error");
}

static inline JSValue jsFileReaderErrorGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<FileError>>(state, *thisObject.globalObject(), impl.error());
    return result;
}

static inline JSValue jsFileReaderOnloadstartGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnloadstart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnloadstartGetter>(state, thisValue, "onloadstart");
}

static inline JSValue jsFileReaderOnloadstartGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadstartEvent);
}

static inline JSValue jsFileReaderOnprogressGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnprogress(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnprogressGetter>(state, thisValue, "onprogress");
}

static inline JSValue jsFileReaderOnprogressGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().progressEvent);
}

static inline JSValue jsFileReaderOnloadGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnloadGetter>(state, thisValue, "onload");
}

static inline JSValue jsFileReaderOnloadGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadEvent);
}

static inline JSValue jsFileReaderOnabortGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnabort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnabortGetter>(state, thisValue, "onabort");
}

static inline JSValue jsFileReaderOnabortGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().abortEvent);
}

static inline JSValue jsFileReaderOnerrorGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsFileReaderOnerrorGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsFileReaderOnloadendGetter(ExecState&, JSFileReader&, ThrowScope& throwScope);

EncodedJSValue jsFileReaderOnloadend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFileReader>::attribute<jsFileReaderOnloadendGetter>(state, thisValue, "onloadend");
}

static inline JSValue jsFileReaderOnloadendGetter(ExecState& state, JSFileReader& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().loadendEvent);
}

EncodedJSValue jsFileReaderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFileReaderPrototype* domObject = jsDynamicDowncast<JSFileReaderPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFileReader::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFileReaderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFileReaderPrototype* domObject = jsDynamicDowncast<JSFileReaderPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSFileReaderOnloadstartFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnloadstart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnloadstartFunction>(state, thisValue, encodedValue, "onloadstart");
}

static inline bool setJSFileReaderOnloadstartFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadstartEvent, value);
    return true;
}


static inline bool setJSFileReaderOnprogressFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnprogress(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnprogressFunction>(state, thisValue, encodedValue, "onprogress");
}

static inline bool setJSFileReaderOnprogressFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().progressEvent, value);
    return true;
}


static inline bool setJSFileReaderOnloadFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnloadFunction>(state, thisValue, encodedValue, "onload");
}

static inline bool setJSFileReaderOnloadFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadEvent, value);
    return true;
}


static inline bool setJSFileReaderOnabortFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnabort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnabortFunction>(state, thisValue, encodedValue, "onabort");
}

static inline bool setJSFileReaderOnabortFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().abortEvent, value);
    return true;
}


static inline bool setJSFileReaderOnerrorFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSFileReaderOnerrorFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSFileReaderOnloadendFunction(ExecState&, JSFileReader&, JSValue, ThrowScope&);

bool setJSFileReaderOnloadend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFileReader>::setAttribute<setJSFileReaderOnloadendFunction>(state, thisValue, encodedValue, "onloadend");
}

static inline bool setJSFileReaderOnloadendFunction(ExecState& state, JSFileReader& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadendEvent, value);
    return true;
}


JSValue JSFileReader::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFileReaderConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsArrayBufferCaller(JSC::ExecState*, JSFileReader*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsArrayBuffer(ExecState* state)
{
    return BindingCaller<JSFileReader>::callOperation<jsFileReaderPrototypeFunctionReadAsArrayBufferCaller>(state, "readAsArrayBuffer");
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsArrayBufferCaller(JSC::ExecState* state, JSFileReader* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto blob = convert<IDLNullable<IDLInterface<Blob>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "blob", "FileReader", "readAsArrayBuffer", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.readAsArrayBuffer(WTFMove(blob)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsBinaryStringCaller(JSC::ExecState*, JSFileReader*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsBinaryString(ExecState* state)
{
    return BindingCaller<JSFileReader>::callOperation<jsFileReaderPrototypeFunctionReadAsBinaryStringCaller>(state, "readAsBinaryString");
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsBinaryStringCaller(JSC::ExecState* state, JSFileReader* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto blob = convert<IDLNullable<IDLInterface<Blob>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "blob", "FileReader", "readAsBinaryString", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.readAsBinaryString(WTFMove(blob)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsTextCaller(JSC::ExecState*, JSFileReader*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsText(ExecState* state)
{
    return BindingCaller<JSFileReader>::callOperation<jsFileReaderPrototypeFunctionReadAsTextCaller>(state, "readAsText");
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsTextCaller(JSC::ExecState* state, JSFileReader* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto blob = convert<IDLNullable<IDLInterface<Blob>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "blob", "FileReader", "readAsText", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto encoding = state->argument(1).isUndefined() ? String() : convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.readAsText(WTFMove(blob), WTFMove(encoding)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsDataURLCaller(JSC::ExecState*, JSFileReader*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionReadAsDataURL(ExecState* state)
{
    return BindingCaller<JSFileReader>::callOperation<jsFileReaderPrototypeFunctionReadAsDataURLCaller>(state, "readAsDataURL");
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionReadAsDataURLCaller(JSC::ExecState* state, JSFileReader* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto blob = convert<IDLNullable<IDLInterface<Blob>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "blob", "FileReader", "readAsDataURL", "Blob"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.readAsDataURL(WTFMove(blob)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionAbortCaller(JSC::ExecState*, JSFileReader*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFileReaderPrototypeFunctionAbort(ExecState* state)
{
    return BindingCaller<JSFileReader>::callOperation<jsFileReaderPrototypeFunctionAbortCaller>(state, "abort");
}

static inline JSC::EncodedJSValue jsFileReaderPrototypeFunctionAbortCaller(JSC::ExecState* state, JSFileReader* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.abort();
    return JSValue::encode(jsUndefined());
}

void JSFileReader::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFileReader*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSFileReaderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsFileReader = jsCast<JSFileReader*>(handle.slot()->asCell());
    if (jsFileReader->wrapped().hasPendingActivity())
        return true;
    if (jsFileReader->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSFileReaderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFileReader = static_cast<JSFileReader*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFileReader->wrapped(), jsFileReader);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FileReader@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore10FileReaderE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FileReader>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FileReader@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore10FileReaderE[2];
#if COMPILER(CLANG)
    // If this fails FileReader does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(FileReader), "FileReader is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FileReader has subclasses. If FileReader has subclasses that get passed
    // to toJS() we currently require FileReader you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<FileReader>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FileReader& impl)
{
    return wrap(state, globalObject, impl);
}

FileReader* JSFileReader::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFileReader*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
