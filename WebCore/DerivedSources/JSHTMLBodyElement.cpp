/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLBodyElement.h"

#include "EventNames.h"
#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventListener.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsHTMLBodyElementALink(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementALink(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementBackground(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementBackground(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementLink(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementLink(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementText(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementVLink(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementVLink(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnblur(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnblur(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnfocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnfocus(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnfocusin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnfocusin(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnfocusout(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnfocusout(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnresize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnresize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnscroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnscroll(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcechanged(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitmouseforcechanged(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitmouseforcedown(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcewillbegin(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitmouseforcewillbegin(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitmouseforceup(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitmouseforceup(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealbottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitwillrevealbottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealleft(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitwillrevealleft(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealright(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitwillrevealright(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealtop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnwebkitwillrevealtop(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsHTMLBodyElementOnselectionchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnselectionchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnbeforeunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnbeforeunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnhashchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnhashchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnlanguagechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnlanguagechange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnmessage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnoffline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnoffline(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnonline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnonline(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnpagehide(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnpagehide(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnpageshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnpageshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnpopstate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnpopstate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnstorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnstorage(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLBodyElementOnunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnunload(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(ORIENTATION_EVENTS)
JSC::EncodedJSValue jsHTMLBodyElementOnorientationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementOnorientationchange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsHTMLBodyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLBodyElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLBodyElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLBodyElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLBodyElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLBodyElementPrototype>(vm.heap)) JSHTMLBodyElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLBodyElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLBodyElementConstructor = JSDOMConstructorNotConstructable<JSHTMLBodyElement>;

template<> JSValue JSHTMLBodyElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLBodyElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLBodyElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLBodyElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLBodyElementConstructor::s_info = { "HTMLBodyElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLBodyElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLBodyElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementConstructor) } },
    { "aLink", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementALink), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementALink) } },
    { "background", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementBackground), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementBackground) } },
    { "bgColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementBgColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementBgColor) } },
    { "link", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementLink), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementLink) } },
    { "text", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementText) } },
    { "vLink", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementVLink), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementVLink) } },
    { "onblur", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnblur), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnblur) } },
    { "onerror", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnerror) } },
    { "onfocus", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnfocus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnfocus) } },
    { "onfocusin", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnfocusin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnfocusin) } },
    { "onfocusout", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnfocusout), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnfocusout) } },
    { "onload", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnload) } },
    { "onresize", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnresize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnresize) } },
    { "onscroll", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnscroll), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnscroll) } },
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcechanged", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitmouseforcechanged), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitmouseforcechanged) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcedown", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitmouseforcedown), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitmouseforcedown) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforcewillbegin", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitmouseforcewillbegin), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitmouseforcewillbegin) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(MOUSE_FORCE_EVENTS)
    { "onwebkitmouseforceup", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitmouseforceup), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitmouseforceup) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealbottom", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitwillrevealbottom), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitwillrevealbottom) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealleft", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitwillrevealleft), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitwillrevealleft) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealright", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitwillrevealright), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitwillrevealright) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
    { "onwebkitwillrevealtop", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnwebkitwillrevealtop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnwebkitwillrevealtop) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "onselectionchange", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnselectionchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnselectionchange) } },
    { "onbeforeunload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnbeforeunload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnbeforeunload) } },
    { "onhashchange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnhashchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnhashchange) } },
    { "onlanguagechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnlanguagechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnlanguagechange) } },
    { "onmessage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnmessage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnmessage) } },
    { "onoffline", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnoffline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnoffline) } },
    { "ononline", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnonline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnonline) } },
    { "onpagehide", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnpagehide), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnpagehide) } },
    { "onpageshow", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnpageshow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnpageshow) } },
    { "onpopstate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnpopstate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnpopstate) } },
    { "onstorage", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnstorage), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnstorage) } },
    { "onunload", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnunload), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnunload) } },
#if ENABLE(ORIENTATION_EVENTS)
    { "onorientationchange", DontEnum | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLBodyElementOnorientationchange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLBodyElementOnorientationchange) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
};

const ClassInfo JSHTMLBodyElementPrototype::s_info = { "HTMLBodyElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLBodyElementPrototype) };

void JSHTMLBodyElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLBodyElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLBodyElement::s_info = { "HTMLBodyElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLBodyElement) };

JSHTMLBodyElement::JSHTMLBodyElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLBodyElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLBodyElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLBodyElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLBodyElementPrototype::create(vm, globalObject, JSHTMLBodyElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLBodyElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLBodyElement>(vm, globalObject);
}

template<> inline JSHTMLBodyElement* BindingCaller<JSHTMLBodyElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLBodyElement*>(JSValue::decode(thisValue));
}

static inline JSValue jsHTMLBodyElementALinkGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementALink(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementALinkGetter>(state, thisValue, "aLink");
}

static inline JSValue jsHTMLBodyElementALinkGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::alinkAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementBackgroundGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementBackground(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementBackgroundGetter>(state, thisValue, "background");
}

static inline JSValue jsHTMLBodyElementBackgroundGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::backgroundAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementBgColorGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementBgColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementBgColorGetter>(state, thisValue, "bgColor");
}

static inline JSValue jsHTMLBodyElementBgColorGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementLinkGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementLink(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementLinkGetter>(state, thisValue, "link");
}

static inline JSValue jsHTMLBodyElementLinkGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::linkAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementTextGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementTextGetter>(state, thisValue, "text");
}

static inline JSValue jsHTMLBodyElementTextGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::textAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementVLinkGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementVLink(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementVLinkGetter>(state, thisValue, "vLink");
}

static inline JSValue jsHTMLBodyElementVLinkGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::vlinkAttr));
    return result;
}

static inline JSValue jsHTMLBodyElementOnblurGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnblur(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnblurGetter>(state, thisValue, "onblur");
}

static inline JSValue jsHTMLBodyElementOnblurGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().blurEvent);
}

static inline JSValue jsHTMLBodyElementOnerrorGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsHTMLBodyElementOnerrorGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsHTMLBodyElementOnfocusGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnfocus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnfocusGetter>(state, thisValue, "onfocus");
}

static inline JSValue jsHTMLBodyElementOnfocusGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().focusEvent);
}

static inline JSValue jsHTMLBodyElementOnfocusinGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnfocusin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnfocusinGetter>(state, thisValue, "onfocusin");
}

static inline JSValue jsHTMLBodyElementOnfocusinGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().focusinEvent);
}

static inline JSValue jsHTMLBodyElementOnfocusoutGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnfocusout(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnfocusoutGetter>(state, thisValue, "onfocusout");
}

static inline JSValue jsHTMLBodyElementOnfocusoutGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().focusoutEvent);
}

static inline JSValue jsHTMLBodyElementOnloadGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnloadGetter>(state, thisValue, "onload");
}

static inline JSValue jsHTMLBodyElementOnloadGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().loadEvent);
}

static inline JSValue jsHTMLBodyElementOnresizeGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnresize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnresizeGetter>(state, thisValue, "onresize");
}

static inline JSValue jsHTMLBodyElementOnresizeGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().resizeEvent);
}

static inline JSValue jsHTMLBodyElementOnscrollGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnscroll(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnscrollGetter>(state, thisValue, "onscroll");
}

static inline JSValue jsHTMLBodyElementOnscrollGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().scrollEvent);
}

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitmouseforcechangedGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcechanged(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitmouseforcechangedGetter>(state, thisValue, "onwebkitmouseforcechanged");
}

static inline JSValue jsHTMLBodyElementOnwebkitmouseforcechangedGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcechangedEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitmouseforcedownGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcedown(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitmouseforcedownGetter>(state, thisValue, "onwebkitmouseforcedown");
}

static inline JSValue jsHTMLBodyElementOnwebkitmouseforcedownGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcedownEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitmouseforcewillbeginGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitmouseforcewillbegin(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitmouseforcewillbeginGetter>(state, thisValue, "onwebkitmouseforcewillbegin");
}

static inline JSValue jsHTMLBodyElementOnwebkitmouseforcewillbeginGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforcewillbeginEvent);
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitmouseforceupGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitmouseforceup(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitmouseforceupGetter>(state, thisValue, "onwebkitmouseforceup");
}

static inline JSValue jsHTMLBodyElementOnwebkitmouseforceupGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitmouseforceupEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitwillrevealbottomGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealbottom(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitwillrevealbottomGetter>(state, thisValue, "onwebkitwillrevealbottom");
}

static inline JSValue jsHTMLBodyElementOnwebkitwillrevealbottomGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealbottomEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitwillrevealleftGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealleft(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitwillrevealleftGetter>(state, thisValue, "onwebkitwillrevealleft");
}

static inline JSValue jsHTMLBodyElementOnwebkitwillrevealleftGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealleftEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitwillrevealrightGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealright(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitwillrevealrightGetter>(state, thisValue, "onwebkitwillrevealright");
}

static inline JSValue jsHTMLBodyElementOnwebkitwillrevealrightGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealrightEvent);
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline JSValue jsHTMLBodyElementOnwebkitwillrevealtopGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnwebkitwillrevealtop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnwebkitwillrevealtopGetter>(state, thisValue, "onwebkitwillrevealtop");
}

static inline JSValue jsHTMLBodyElementOnwebkitwillrevealtopGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().webkitwillrevealtopEvent);
}

#endif

static inline JSValue jsHTMLBodyElementOnselectionchangeGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnselectionchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnselectionchangeGetter>(state, thisValue, "onselectionchange");
}

static inline JSValue jsHTMLBodyElementOnselectionchangeGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return documentEventHandlerAttribute(thisObject.wrapped(), eventNames().selectionchangeEvent);
}

static inline JSValue jsHTMLBodyElementOnbeforeunloadGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnbeforeunload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnbeforeunloadGetter>(state, thisValue, "onbeforeunload");
}

static inline JSValue jsHTMLBodyElementOnbeforeunloadGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().beforeunloadEvent);
}

static inline JSValue jsHTMLBodyElementOnhashchangeGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnhashchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnhashchangeGetter>(state, thisValue, "onhashchange");
}

static inline JSValue jsHTMLBodyElementOnhashchangeGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().hashchangeEvent);
}

static inline JSValue jsHTMLBodyElementOnlanguagechangeGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnlanguagechange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnlanguagechangeGetter>(state, thisValue, "onlanguagechange");
}

static inline JSValue jsHTMLBodyElementOnlanguagechangeGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().languagechangeEvent);
}

static inline JSValue jsHTMLBodyElementOnmessageGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnmessage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnmessageGetter>(state, thisValue, "onmessage");
}

static inline JSValue jsHTMLBodyElementOnmessageGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().messageEvent);
}

static inline JSValue jsHTMLBodyElementOnofflineGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnoffline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnofflineGetter>(state, thisValue, "onoffline");
}

static inline JSValue jsHTMLBodyElementOnofflineGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().offlineEvent);
}

static inline JSValue jsHTMLBodyElementOnonlineGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnonline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnonlineGetter>(state, thisValue, "ononline");
}

static inline JSValue jsHTMLBodyElementOnonlineGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().onlineEvent);
}

static inline JSValue jsHTMLBodyElementOnpagehideGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnpagehide(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnpagehideGetter>(state, thisValue, "onpagehide");
}

static inline JSValue jsHTMLBodyElementOnpagehideGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().pagehideEvent);
}

static inline JSValue jsHTMLBodyElementOnpageshowGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnpageshow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnpageshowGetter>(state, thisValue, "onpageshow");
}

static inline JSValue jsHTMLBodyElementOnpageshowGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().pageshowEvent);
}

static inline JSValue jsHTMLBodyElementOnpopstateGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnpopstate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnpopstateGetter>(state, thisValue, "onpopstate");
}

static inline JSValue jsHTMLBodyElementOnpopstateGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().popstateEvent);
}

static inline JSValue jsHTMLBodyElementOnstorageGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnstorage(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnstorageGetter>(state, thisValue, "onstorage");
}

static inline JSValue jsHTMLBodyElementOnstorageGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().storageEvent);
}

static inline JSValue jsHTMLBodyElementOnunloadGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnunload(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnunloadGetter>(state, thisValue, "onunload");
}

static inline JSValue jsHTMLBodyElementOnunloadGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().unloadEvent);
}

#if ENABLE(ORIENTATION_EVENTS)
static inline JSValue jsHTMLBodyElementOnorientationchangeGetter(ExecState&, JSHTMLBodyElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLBodyElementOnorientationchange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLBodyElement>::attribute<jsHTMLBodyElementOnorientationchangeGetter>(state, thisValue, "onorientationchange");
}

static inline JSValue jsHTMLBodyElementOnorientationchangeGetter(ExecState& state, JSHTMLBodyElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return windowEventHandlerAttribute(thisObject.wrapped(), eventNames().orientationchangeEvent);
}

#endif

EncodedJSValue jsHTMLBodyElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLBodyElementPrototype* domObject = jsDynamicDowncast<JSHTMLBodyElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLBodyElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLBodyElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLBodyElementPrototype* domObject = jsDynamicDowncast<JSHTMLBodyElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLBodyElementALinkFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementALink(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementALinkFunction>(state, thisValue, encodedValue, "aLink");
}

static inline bool setJSHTMLBodyElementALinkFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::alinkAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementBackgroundFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementBackground(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementBackgroundFunction>(state, thisValue, encodedValue, "background");
}

static inline bool setJSHTMLBodyElementBackgroundFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::backgroundAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementBgColorFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementBgColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementBgColorFunction>(state, thisValue, encodedValue, "bgColor");
}

static inline bool setJSHTMLBodyElementBgColorFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementLinkFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementLink(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementLinkFunction>(state, thisValue, encodedValue, "link");
}

static inline bool setJSHTMLBodyElementLinkFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::linkAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementTextFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementText(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementTextFunction>(state, thisValue, encodedValue, "text");
}

static inline bool setJSHTMLBodyElementTextFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::textAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementVLinkFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementVLink(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementVLinkFunction>(state, thisValue, encodedValue, "vLink");
}

static inline bool setJSHTMLBodyElementVLinkFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::vlinkAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLBodyElementOnblurFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnblur(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnblurFunction>(state, thisValue, encodedValue, "onblur");
}

static inline bool setJSHTMLBodyElementOnblurFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().blurEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnerrorFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSHTMLBodyElementOnerrorFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnfocusFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnfocus(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnfocusFunction>(state, thisValue, encodedValue, "onfocus");
}

static inline bool setJSHTMLBodyElementOnfocusFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().focusEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnfocusinFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnfocusin(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnfocusinFunction>(state, thisValue, encodedValue, "onfocusin");
}

static inline bool setJSHTMLBodyElementOnfocusinFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().focusinEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnfocusoutFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnfocusout(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnfocusoutFunction>(state, thisValue, encodedValue, "onfocusout");
}

static inline bool setJSHTMLBodyElementOnfocusoutFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().focusoutEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnloadFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnloadFunction>(state, thisValue, encodedValue, "onload");
}

static inline bool setJSHTMLBodyElementOnloadFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().loadEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnresizeFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnresize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnresizeFunction>(state, thisValue, encodedValue, "onresize");
}

static inline bool setJSHTMLBodyElementOnresizeFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().resizeEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnscrollFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnscroll(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnscrollFunction>(state, thisValue, encodedValue, "onscroll");
}

static inline bool setJSHTMLBodyElementOnscrollFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().scrollEvent, value);
    return true;
}


#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitmouseforcechangedFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitmouseforcechanged(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitmouseforcechangedFunction>(state, thisValue, encodedValue, "onwebkitmouseforcechanged");
}

static inline bool setJSHTMLBodyElementOnwebkitmouseforcechangedFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcechangedEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitmouseforcedownFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitmouseforcedown(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitmouseforcedownFunction>(state, thisValue, encodedValue, "onwebkitmouseforcedown");
}

static inline bool setJSHTMLBodyElementOnwebkitmouseforcedownFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcedownEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitmouseforcewillbeginFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitmouseforcewillbegin(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitmouseforcewillbeginFunction>(state, thisValue, encodedValue, "onwebkitmouseforcewillbegin");
}

static inline bool setJSHTMLBodyElementOnwebkitmouseforcewillbeginFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforcewillbeginEvent, value);
    return true;
}

#endif

#if ENABLE(MOUSE_FORCE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitmouseforceupFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitmouseforceup(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitmouseforceupFunction>(state, thisValue, encodedValue, "onwebkitmouseforceup");
}

static inline bool setJSHTMLBodyElementOnwebkitmouseforceupFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitmouseforceupEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitwillrevealbottomFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitwillrevealbottom(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitwillrevealbottomFunction>(state, thisValue, encodedValue, "onwebkitwillrevealbottom");
}

static inline bool setJSHTMLBodyElementOnwebkitwillrevealbottomFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealbottomEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitwillrevealleftFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitwillrevealleft(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitwillrevealleftFunction>(state, thisValue, encodedValue, "onwebkitwillrevealleft");
}

static inline bool setJSHTMLBodyElementOnwebkitwillrevealleftFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealleftEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitwillrevealrightFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitwillrevealright(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitwillrevealrightFunction>(state, thisValue, encodedValue, "onwebkitwillrevealright");
}

static inline bool setJSHTMLBodyElementOnwebkitwillrevealrightFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealrightEvent, value);
    return true;
}

#endif

#if ENABLE(WILL_REVEAL_EDGE_EVENTS)
static inline bool setJSHTMLBodyElementOnwebkitwillrevealtopFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnwebkitwillrevealtop(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnwebkitwillrevealtopFunction>(state, thisValue, encodedValue, "onwebkitwillrevealtop");
}

static inline bool setJSHTMLBodyElementOnwebkitwillrevealtopFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().webkitwillrevealtopEvent, value);
    return true;
}

#endif

static inline bool setJSHTMLBodyElementOnselectionchangeFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnselectionchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnselectionchangeFunction>(state, thisValue, encodedValue, "onselectionchange");
}

static inline bool setJSHTMLBodyElementOnselectionchangeFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setDocumentEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().selectionchangeEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnbeforeunloadFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnbeforeunload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnbeforeunloadFunction>(state, thisValue, encodedValue, "onbeforeunload");
}

static inline bool setJSHTMLBodyElementOnbeforeunloadFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().beforeunloadEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnhashchangeFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnhashchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnhashchangeFunction>(state, thisValue, encodedValue, "onhashchange");
}

static inline bool setJSHTMLBodyElementOnhashchangeFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().hashchangeEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnlanguagechangeFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnlanguagechange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnlanguagechangeFunction>(state, thisValue, encodedValue, "onlanguagechange");
}

static inline bool setJSHTMLBodyElementOnlanguagechangeFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().languagechangeEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnmessageFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnmessage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnmessageFunction>(state, thisValue, encodedValue, "onmessage");
}

static inline bool setJSHTMLBodyElementOnmessageFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().messageEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnofflineFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnoffline(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnofflineFunction>(state, thisValue, encodedValue, "onoffline");
}

static inline bool setJSHTMLBodyElementOnofflineFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().offlineEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnonlineFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnonline(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnonlineFunction>(state, thisValue, encodedValue, "ononline");
}

static inline bool setJSHTMLBodyElementOnonlineFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().onlineEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnpagehideFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnpagehide(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnpagehideFunction>(state, thisValue, encodedValue, "onpagehide");
}

static inline bool setJSHTMLBodyElementOnpagehideFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pagehideEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnpageshowFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnpageshow(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnpageshowFunction>(state, thisValue, encodedValue, "onpageshow");
}

static inline bool setJSHTMLBodyElementOnpageshowFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().pageshowEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnpopstateFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnpopstate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnpopstateFunction>(state, thisValue, encodedValue, "onpopstate");
}

static inline bool setJSHTMLBodyElementOnpopstateFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().popstateEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnstorageFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnstorage(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnstorageFunction>(state, thisValue, encodedValue, "onstorage");
}

static inline bool setJSHTMLBodyElementOnstorageFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().storageEvent, value);
    return true;
}


static inline bool setJSHTMLBodyElementOnunloadFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnunload(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnunloadFunction>(state, thisValue, encodedValue, "onunload");
}

static inline bool setJSHTMLBodyElementOnunloadFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().unloadEvent, value);
    return true;
}


#if ENABLE(ORIENTATION_EVENTS)
static inline bool setJSHTMLBodyElementOnorientationchangeFunction(ExecState&, JSHTMLBodyElement&, JSValue, ThrowScope&);

bool setJSHTMLBodyElementOnorientationchange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLBodyElement>::setAttribute<setJSHTMLBodyElementOnorientationchangeFunction>(state, thisValue, encodedValue, "onorientationchange");
}

static inline bool setJSHTMLBodyElementOnorientationchangeFunction(ExecState& state, JSHTMLBodyElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setWindowEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().orientationchangeEvent, value);
    return true;
}

#endif

JSValue JSHTMLBodyElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLBodyElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

void JSHTMLBodyElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLBodyElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
