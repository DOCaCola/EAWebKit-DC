/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)

#include "JSNotification.h"

#include "Document.h"
#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSEventListener.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

#if ENABLE(NOTIFICATIONS)
#include "JSNotificationPermissionCallback.h"
#endif

using namespace JSC;

namespace WebCore {

#if ENABLE(NOTIFICATIONS)

template<> JSString* convertEnumerationToJS(ExecState& state, Notification::Direction enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("auto"),
        ASCIILiteral("ltr"),
        ASCIILiteral("rtl"),
    };
    static_assert(static_cast<size_t>(Notification::Direction::Auto) == 0, "Notification::Direction::Auto is not 0 as expected");
    static_assert(static_cast<size_t>(Notification::Direction::Ltr) == 1, "Notification::Direction::Ltr is not 1 as expected");
    static_assert(static_cast<size_t>(Notification::Direction::Rtl) == 2, "Notification::Direction::Rtl is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<Notification::Direction> parseEnumeration<Notification::Direction>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "auto")
        return Notification::Direction::Auto;
    if (stringValue == "ltr")
        return Notification::Direction::Ltr;
    if (stringValue == "rtl")
        return Notification::Direction::Rtl;
    return std::nullopt;
}

template<> Notification::Direction convertEnumeration<Notification::Direction>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<Notification::Direction>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<Notification::Direction>()
{
    return "\"auto\", \"ltr\", \"rtl\"";
}

#endif

#if ENABLE(NOTIFICATIONS)

template<> Notification::Options convertDictionary<Notification::Options>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    Notification::Options result;
    JSValue bodyValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "body"));
    if (!bodyValue.isUndefined()) {
        result.body = convert<IDLDOMString>(state, bodyValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.body = emptyString();
    JSValue dirValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "dir"));
    if (!dirValue.isUndefined()) {
        result.dir = convert<IDLEnumeration<Notification::Direction>>(state, dirValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.dir = Notification::Direction::Auto;
    JSValue iconValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "icon"));
    if (!iconValue.isUndefined()) {
        result.icon = convert<IDLDOMString>(state, iconValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue langValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "lang"));
    if (!langValue.isUndefined()) {
        result.lang = convert<IDLDOMString>(state, langValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.lang = emptyString();
    JSValue tagValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "tag"));
    if (!tagValue.isUndefined()) {
        result.tag = convert<IDLDOMString>(state, tagValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.tag = emptyString();
    return result;
}

#endif

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionShow(JSC::ExecState*);
#if ENABLE(LEGACY_NOTIFICATIONS)
JSC::EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionCancel(JSC::ExecState*);
#endif
#if ENABLE(NOTIFICATIONS)
JSC::EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionClose(JSC::ExecState*);
#endif
#if ENABLE(NOTIFICATIONS)
JSC::EncodedJSValue JSC_HOST_CALL jsNotificationConstructorFunctionRequestPermission(JSC::ExecState*);
#endif

// Attributes

#if ENABLE(NOTIFICATIONS)
JSC::EncodedJSValue jsNotificationConstructorPermission(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsNotificationOnclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationOnclick(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNotificationOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationOnclose(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNotificationOndisplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationOndisplay(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNotificationOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsNotificationOnshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationOnshow(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(LEGACY_NOTIFICATIONS)
JSC::EncodedJSValue jsNotificationDir(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationDir(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(LEGACY_NOTIFICATIONS)
JSC::EncodedJSValue jsNotificationReplaceId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationReplaceId(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
#if ENABLE(NOTIFICATIONS)
JSC::EncodedJSValue jsNotificationTag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationTag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#endif
JSC::EncodedJSValue jsNotificationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSNotificationConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSNotificationPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSNotificationPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSNotificationPrototype* ptr = new (NotNull, JSC::allocateCell<JSNotificationPrototype>(vm.heap)) JSNotificationPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSNotificationPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSNotificationConstructor = JSDOMConstructorNotConstructable<JSNotification>;

/* Hash table for constructor */

static const HashTableValue JSNotificationConstructorTableValues[] =
{
#if ENABLE(NOTIFICATIONS)
    { "permission", ReadOnly, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationConstructorPermission), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(NOTIFICATIONS)
    { "requestPermission", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationConstructorFunctionRequestPermission), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
};

template<> JSValue JSNotificationConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSNotificationConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSNotification::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Notification"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSNotificationConstructorTableValues, *this);
}

template<> const ClassInfo JSNotificationConstructor::s_info = { "Notification", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNotificationConstructor) };

/* Hash table for prototype */

static const HashTableValue JSNotificationPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationConstructor) } },
    { "onclick", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnclick), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationOnclick) } },
    { "onclose", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnclose), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationOnclose) } },
    { "ondisplay", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOndisplay), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationOndisplay) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationOnerror) } },
    { "onshow", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationOnshow), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationOnshow) } },
#if ENABLE(LEGACY_NOTIFICATIONS)
    { "dir", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationDir), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationDir) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(LEGACY_NOTIFICATIONS)
    { "replaceId", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationReplaceId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationReplaceId) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(NOTIFICATIONS)
    { "tag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsNotificationTag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSNotificationTag) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "show", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionShow), (intptr_t) (0) } },
#if ENABLE(LEGACY_NOTIFICATIONS)
    { "cancel", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionCancel), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(NOTIFICATIONS)
    { "close", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsNotificationPrototypeFunctionClose), (intptr_t) (0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
};

const ClassInfo JSNotificationPrototype::s_info = { "NotificationPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNotificationPrototype) };

void JSNotificationPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSNotificationPrototypeTableValues, *this);
}

const ClassInfo JSNotification::s_info = { "Notification", &Base::s_info, 0, CREATE_METHOD_TABLE(JSNotification) };

JSNotification::JSNotification(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Notification>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSNotification::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSNotification::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSNotificationPrototype::create(vm, globalObject, JSNotificationPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSNotification::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSNotification>(vm, globalObject);
}

template<> inline JSNotification* BindingCaller<JSNotification>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSNotification*>(JSValue::decode(thisValue));
}

template<> inline JSNotification* BindingCaller<JSNotification>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSNotification*>(state.thisValue());
}

#if ENABLE(NOTIFICATIONS)
static inline JSValue jsNotificationConstructorPermissionGetter(ExecState&);

EncodedJSValue jsNotificationConstructorPermission(ExecState* state, EncodedJSValue, PropertyName)
{
    ASSERT(state);
    return JSValue::encode(jsNotificationConstructorPermissionGetter(*state));
}

static inline JSValue jsNotificationConstructorPermissionGetter(ExecState& state)
{
    UNUSED_PARAM(state);
    auto* context = jsCast<JSDOMGlobalObject*>(state.lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return jsUndefined();
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    JSValue result = toJS<IDLDOMString>(state, Notification::permission(document));
    return result;
}

#endif

static inline JSValue jsNotificationOnclickGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationOnclick(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationOnclickGetter>(state, thisValue, "onclick");
}

static inline JSValue jsNotificationOnclickGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().clickEvent);
}

static inline JSValue jsNotificationOncloseGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationOnclose(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationOncloseGetter>(state, thisValue, "onclose");
}

static inline JSValue jsNotificationOncloseGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().closeEvent);
}

static inline JSValue jsNotificationOndisplayGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationOndisplay(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationOndisplayGetter>(state, thisValue, "ondisplay");
}

static inline JSValue jsNotificationOndisplayGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().showEvent);
}

static inline JSValue jsNotificationOnerrorGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsNotificationOnerrorGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsNotificationOnshowGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationOnshow(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationOnshowGetter>(state, thisValue, "onshow");
}

static inline JSValue jsNotificationOnshowGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().showEvent);
}

#if ENABLE(LEGACY_NOTIFICATIONS)
static inline JSValue jsNotificationDirGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationDir(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationDirGetter>(state, thisValue, "dir");
}

static inline JSValue jsNotificationDirGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.dir());
    return result;
}

#endif

#if ENABLE(LEGACY_NOTIFICATIONS)
static inline JSValue jsNotificationReplaceIdGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationReplaceId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationReplaceIdGetter>(state, thisValue, "replaceId");
}

static inline JSValue jsNotificationReplaceIdGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.replaceId());
    return result;
}

#endif

#if ENABLE(NOTIFICATIONS)
static inline JSValue jsNotificationTagGetter(ExecState&, JSNotification&, ThrowScope& throwScope);

EncodedJSValue jsNotificationTag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSNotification>::attribute<jsNotificationTagGetter>(state, thisValue, "tag");
}

static inline JSValue jsNotificationTagGetter(ExecState& state, JSNotification& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.tag());
    return result;
}

#endif

EncodedJSValue jsNotificationConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSNotificationPrototype* domObject = jsDynamicDowncast<JSNotificationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSNotification::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSNotificationConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSNotificationPrototype* domObject = jsDynamicDowncast<JSNotificationPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSNotificationOnclickFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationOnclick(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationOnclickFunction>(state, thisValue, encodedValue, "onclick");
}

static inline bool setJSNotificationOnclickFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().clickEvent, value);
    return true;
}


static inline bool setJSNotificationOncloseFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationOnclose(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationOncloseFunction>(state, thisValue, encodedValue, "onclose");
}

static inline bool setJSNotificationOncloseFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().closeEvent, value);
    return true;
}


static inline bool setJSNotificationOndisplayFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationOndisplay(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationOndisplayFunction>(state, thisValue, encodedValue, "ondisplay");
}

static inline bool setJSNotificationOndisplayFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().showEvent, value);
    return true;
}


static inline bool setJSNotificationOnerrorFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSNotificationOnerrorFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSNotificationOnshowFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationOnshow(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationOnshowFunction>(state, thisValue, encodedValue, "onshow");
}

static inline bool setJSNotificationOnshowFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().showEvent, value);
    return true;
}


#if ENABLE(LEGACY_NOTIFICATIONS)
static inline bool setJSNotificationDirFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationDir(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationDirFunction>(state, thisValue, encodedValue, "dir");
}

static inline bool setJSNotificationDirFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setDir(WTFMove(nativeValue));
    return true;
}

#endif

#if ENABLE(LEGACY_NOTIFICATIONS)
static inline bool setJSNotificationReplaceIdFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationReplaceId(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationReplaceIdFunction>(state, thisValue, encodedValue, "replaceId");
}

static inline bool setJSNotificationReplaceIdFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setReplaceId(WTFMove(nativeValue));
    return true;
}

#endif

#if ENABLE(NOTIFICATIONS)
static inline bool setJSNotificationTagFunction(ExecState&, JSNotification&, JSValue, ThrowScope&);

bool setJSNotificationTag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSNotification>::setAttribute<setJSNotificationTagFunction>(state, thisValue, encodedValue, "tag");
}

static inline bool setJSNotificationTagFunction(ExecState& state, JSNotification& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setTag(WTFMove(nativeValue));
    return true;
}

#endif

JSValue JSNotification::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSNotificationConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionShowCaller(JSC::ExecState*, JSNotification*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionShow(ExecState* state)
{
    return BindingCaller<JSNotification>::callOperation<jsNotificationPrototypeFunctionShowCaller>(state, "show");
}

static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionShowCaller(JSC::ExecState* state, JSNotification* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.show();
    return JSValue::encode(jsUndefined());
}

#if ENABLE(LEGACY_NOTIFICATIONS)
static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionCancelCaller(JSC::ExecState*, JSNotification*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionCancel(ExecState* state)
{
    return BindingCaller<JSNotification>::callOperation<jsNotificationPrototypeFunctionCancelCaller>(state, "cancel");
}

static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionCancelCaller(JSC::ExecState* state, JSNotification* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(NOTIFICATIONS)
static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionCloseCaller(JSC::ExecState*, JSNotification*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsNotificationPrototypeFunctionClose(ExecState* state)
{
    return BindingCaller<JSNotification>::callOperation<jsNotificationPrototypeFunctionCloseCaller>(state, "close");
}

static inline JSC::EncodedJSValue jsNotificationPrototypeFunctionCloseCaller(JSC::ExecState* state, JSNotification* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.close();
    return JSValue::encode(jsUndefined());
}

#endif

#if ENABLE(NOTIFICATIONS)
EncodedJSValue JSC_HOST_CALL jsNotificationConstructorFunctionRequestPermission(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* context = jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject())->scriptExecutionContext();
    if (!context)
        return JSValue::encode(jsUndefined());
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto callback = convert<IDLNullable<IDLCallbackFunction<JSNotificationPermissionCallback>>>(*state, state->argument(0), *jsCast<JSDOMGlobalObject*>(state->lexicalGlobalObject()), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentMustBeFunctionError(state, scope, 0, "callback", "Notification", "requestPermission"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    Notification::requestPermission(document, WTFMove(callback));
    return JSValue::encode(jsUndefined());
}

#endif

void JSNotification::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSNotification*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSNotificationOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsNotification = jsCast<JSNotification*>(handle.slot()->asCell());
    if (jsNotification->wrapped().hasPendingActivity())
        return true;
    if (jsNotification->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSNotificationOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsNotification = static_cast<JSNotification*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsNotification->wrapped(), jsNotification);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7Notification@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12NotificationE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<Notification>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7Notification@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12NotificationE[2];
#if COMPILER(CLANG)
    // If this fails Notification does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(Notification), "Notification is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // Notification has subclasses. If Notification has subclasses that get passed
    // to toJS() we currently require Notification you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<Notification>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, Notification& impl)
{
    return wrap(state, globalObject, impl);
}

Notification* JSNotification::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSNotification*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(LEGACY_NOTIFICATIONS) || ENABLE(NOTIFICATIONS)
