/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGPathSegArcAbs.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGPathSegArcAbsX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsR1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsR1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsR2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsR2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsAngle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsAngle(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsLargeArcFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsLargeArcFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsSweepFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsSweepFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcAbsConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGPathSegArcAbsPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGPathSegArcAbsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGPathSegArcAbsPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGPathSegArcAbsPrototype>(vm.heap)) JSSVGPathSegArcAbsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGPathSegArcAbsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGPathSegArcAbsConstructor = JSDOMConstructorNotConstructable<JSSVGPathSegArcAbs>;

template<> JSValue JSSVGPathSegArcAbsConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGPathSeg::getConstructor(vm, &globalObject);
}

template<> void JSSVGPathSegArcAbsConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGPathSegArcAbs::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGPathSegArcAbs"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGPathSegArcAbsConstructor::s_info = { "SVGPathSegArcAbs", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcAbsConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegArcAbsPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsY) } },
    { "r1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsR1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsR1) } },
    { "r2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsR2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsR2) } },
    { "angle", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsAngle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsAngle) } },
    { "largeArcFlag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsLargeArcFlag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsLargeArcFlag) } },
    { "sweepFlag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcAbsSweepFlag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcAbsSweepFlag) } },
};

const ClassInfo JSSVGPathSegArcAbsPrototype::s_info = { "SVGPathSegArcAbsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcAbsPrototype) };

void JSSVGPathSegArcAbsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGPathSegArcAbsPrototypeTableValues, *this);
}

const ClassInfo JSSVGPathSegArcAbs::s_info = { "SVGPathSegArcAbs", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcAbs) };

JSSVGPathSegArcAbs::JSSVGPathSegArcAbs(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGPathSegArcAbs>&& impl)
    : JSSVGPathSeg(structure, globalObject, WTFMove(impl))
{
}

void JSSVGPathSegArcAbs::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGPathSegArcAbs::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGPathSegArcAbsPrototype::create(vm, globalObject, JSSVGPathSegArcAbsPrototype::createStructure(vm, globalObject, JSSVGPathSeg::prototype(vm, globalObject)));
}

JSObject* JSSVGPathSegArcAbs::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGPathSegArcAbs>(vm, globalObject);
}

template<> inline JSSVGPathSegArcAbs* BindingCaller<JSSVGPathSegArcAbs>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGPathSegArcAbs*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGPathSegArcAbsXGetter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGPathSegArcAbsXGetter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsYGetter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGPathSegArcAbsYGetter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsR1Getter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsR1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsR1Getter>(state, thisValue, "r1");
}

static inline JSValue jsSVGPathSegArcAbsR1Getter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.r1());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsR2Getter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsR2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsR2Getter>(state, thisValue, "r2");
}

static inline JSValue jsSVGPathSegArcAbsR2Getter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.r2());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsAngleGetter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsAngle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsAngleGetter>(state, thisValue, "angle");
}

static inline JSValue jsSVGPathSegArcAbsAngleGetter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.angle());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsLargeArcFlagGetter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsLargeArcFlag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsLargeArcFlagGetter>(state, thisValue, "largeArcFlag");
}

static inline JSValue jsSVGPathSegArcAbsLargeArcFlagGetter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.largeArcFlag());
    return result;
}

static inline JSValue jsSVGPathSegArcAbsSweepFlagGetter(ExecState&, JSSVGPathSegArcAbs&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcAbsSweepFlag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcAbs>::attribute<jsSVGPathSegArcAbsSweepFlagGetter>(state, thisValue, "sweepFlag");
}

static inline JSValue jsSVGPathSegArcAbsSweepFlagGetter(ExecState& state, JSSVGPathSegArcAbs& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.sweepFlag());
    return result;
}

EncodedJSValue jsSVGPathSegArcAbsConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGPathSegArcAbsPrototype* domObject = jsDynamicDowncast<JSSVGPathSegArcAbsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGPathSegArcAbs::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGPathSegArcAbsConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGPathSegArcAbsPrototype* domObject = jsDynamicDowncast<JSSVGPathSegArcAbsPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGPathSegArcAbsXFunction(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSSVGPathSegArcAbsXFunction(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsYFunction(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSSVGPathSegArcAbsYFunction(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsR1Function(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsR1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsR1Function>(state, thisValue, encodedValue, "r1");
}

static inline bool setJSSVGPathSegArcAbsR1Function(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setR1(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsR2Function(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsR2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsR2Function>(state, thisValue, encodedValue, "r2");
}

static inline bool setJSSVGPathSegArcAbsR2Function(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setR2(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsAngleFunction(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsAngle(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsAngleFunction>(state, thisValue, encodedValue, "angle");
}

static inline bool setJSSVGPathSegArcAbsAngleFunction(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAngle(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsLargeArcFlagFunction(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsLargeArcFlag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsLargeArcFlagFunction>(state, thisValue, encodedValue, "largeArcFlag");
}

static inline bool setJSSVGPathSegArcAbsLargeArcFlagFunction(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLargeArcFlag(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcAbsSweepFlagFunction(ExecState&, JSSVGPathSegArcAbs&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcAbsSweepFlag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcAbs>::setAttribute<setJSSVGPathSegArcAbsSweepFlagFunction>(state, thisValue, encodedValue, "sweepFlag");
}

static inline bool setJSSVGPathSegArcAbsSweepFlagFunction(ExecState& state, JSSVGPathSegArcAbs& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSweepFlag(WTFMove(nativeValue));
    return true;
}


JSValue JSSVGPathSegArcAbs::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGPathSegArcAbsConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}


}
