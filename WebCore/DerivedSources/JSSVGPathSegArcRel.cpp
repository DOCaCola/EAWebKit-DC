/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGPathSegArcRel.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGPathSegArcRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelR1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelR1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelR2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelR2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelAngle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelAngle(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelLargeArcFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelLargeArcFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelSweepFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelSweepFlag(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegArcRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegArcRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGPathSegArcRelPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGPathSegArcRelPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGPathSegArcRelPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGPathSegArcRelPrototype>(vm.heap)) JSSVGPathSegArcRelPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGPathSegArcRelPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGPathSegArcRelConstructor = JSDOMConstructorNotConstructable<JSSVGPathSegArcRel>;

template<> JSValue JSSVGPathSegArcRelConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGPathSeg::getConstructor(vm, &globalObject);
}

template<> void JSSVGPathSegArcRelConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGPathSegArcRel::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGPathSegArcRel"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGPathSegArcRelConstructor::s_info = { "SVGPathSegArcRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcRelConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegArcRelPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelY) } },
    { "r1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelR1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelR1) } },
    { "r2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelR2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelR2) } },
    { "angle", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelAngle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelAngle) } },
    { "largeArcFlag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelLargeArcFlag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelLargeArcFlag) } },
    { "sweepFlag", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegArcRelSweepFlag), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegArcRelSweepFlag) } },
};

const ClassInfo JSSVGPathSegArcRelPrototype::s_info = { "SVGPathSegArcRelPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcRelPrototype) };

void JSSVGPathSegArcRelPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGPathSegArcRelPrototypeTableValues, *this);
}

const ClassInfo JSSVGPathSegArcRel::s_info = { "SVGPathSegArcRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegArcRel) };

JSSVGPathSegArcRel::JSSVGPathSegArcRel(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGPathSegArcRel>&& impl)
    : JSSVGPathSeg(structure, globalObject, WTFMove(impl))
{
}

void JSSVGPathSegArcRel::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGPathSegArcRel::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGPathSegArcRelPrototype::create(vm, globalObject, JSSVGPathSegArcRelPrototype::createStructure(vm, globalObject, JSSVGPathSeg::prototype(vm, globalObject)));
}

JSObject* JSSVGPathSegArcRel::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGPathSegArcRel>(vm, globalObject);
}

template<> inline JSSVGPathSegArcRel* BindingCaller<JSSVGPathSegArcRel>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGPathSegArcRel*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGPathSegArcRelXGetter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGPathSegArcRelXGetter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x());
    return result;
}

static inline JSValue jsSVGPathSegArcRelYGetter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGPathSegArcRelYGetter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y());
    return result;
}

static inline JSValue jsSVGPathSegArcRelR1Getter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelR1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelR1Getter>(state, thisValue, "r1");
}

static inline JSValue jsSVGPathSegArcRelR1Getter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.r1());
    return result;
}

static inline JSValue jsSVGPathSegArcRelR2Getter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelR2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelR2Getter>(state, thisValue, "r2");
}

static inline JSValue jsSVGPathSegArcRelR2Getter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.r2());
    return result;
}

static inline JSValue jsSVGPathSegArcRelAngleGetter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelAngle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelAngleGetter>(state, thisValue, "angle");
}

static inline JSValue jsSVGPathSegArcRelAngleGetter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.angle());
    return result;
}

static inline JSValue jsSVGPathSegArcRelLargeArcFlagGetter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelLargeArcFlag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelLargeArcFlagGetter>(state, thisValue, "largeArcFlag");
}

static inline JSValue jsSVGPathSegArcRelLargeArcFlagGetter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.largeArcFlag());
    return result;
}

static inline JSValue jsSVGPathSegArcRelSweepFlagGetter(ExecState&, JSSVGPathSegArcRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegArcRelSweepFlag(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegArcRel>::attribute<jsSVGPathSegArcRelSweepFlagGetter>(state, thisValue, "sweepFlag");
}

static inline JSValue jsSVGPathSegArcRelSweepFlagGetter(ExecState& state, JSSVGPathSegArcRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.sweepFlag());
    return result;
}

EncodedJSValue jsSVGPathSegArcRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGPathSegArcRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegArcRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGPathSegArcRel::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGPathSegArcRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGPathSegArcRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegArcRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGPathSegArcRelXFunction(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSSVGPathSegArcRelXFunction(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelYFunction(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSSVGPathSegArcRelYFunction(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelR1Function(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelR1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelR1Function>(state, thisValue, encodedValue, "r1");
}

static inline bool setJSSVGPathSegArcRelR1Function(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setR1(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelR2Function(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelR2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelR2Function>(state, thisValue, encodedValue, "r2");
}

static inline bool setJSSVGPathSegArcRelR2Function(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setR2(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelAngleFunction(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelAngle(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelAngleFunction>(state, thisValue, encodedValue, "angle");
}

static inline bool setJSSVGPathSegArcRelAngleFunction(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAngle(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelLargeArcFlagFunction(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelLargeArcFlag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelLargeArcFlagFunction>(state, thisValue, encodedValue, "largeArcFlag");
}

static inline bool setJSSVGPathSegArcRelLargeArcFlagFunction(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLargeArcFlag(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegArcRelSweepFlagFunction(ExecState&, JSSVGPathSegArcRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegArcRelSweepFlag(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegArcRel>::setAttribute<setJSSVGPathSegArcRelSweepFlagFunction>(state, thisValue, encodedValue, "sweepFlag");
}

static inline bool setJSSVGPathSegArcRelSweepFlagFunction(ExecState& state, JSSVGPathSegArcRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSweepFlag(WTFMove(nativeValue));
    return true;
}


JSValue JSSVGPathSegArcRel::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGPathSegArcRelConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}


}
