/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(WEB_AUDIO)

#include "JSAnalyserNode.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetFloatFrequencyData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetByteFrequencyData(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetByteTimeDomainData(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsAnalyserNodeFftSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAnalyserNodeFftSize(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAnalyserNodeFrequencyBinCount(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsAnalyserNodeMinDecibels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAnalyserNodeMinDecibels(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAnalyserNodeMaxDecibels(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAnalyserNodeMaxDecibels(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAnalyserNodeSmoothingTimeConstant(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAnalyserNodeSmoothingTimeConstant(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsAnalyserNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSAnalyserNodeConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSAnalyserNodePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSAnalyserNodePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSAnalyserNodePrototype* ptr = new (NotNull, JSC::allocateCell<JSAnalyserNodePrototype>(vm.heap)) JSAnalyserNodePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSAnalyserNodePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSAnalyserNodeConstructor = JSDOMConstructorNotConstructable<JSAnalyserNode>;

template<> JSValue JSAnalyserNodeConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSAudioNode::getConstructor(vm, &globalObject);
}

template<> void JSAnalyserNodeConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSAnalyserNode::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("AnalyserNode"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSAnalyserNodeConstructor::s_info = { "AnalyserNode", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAnalyserNodeConstructor) };

/* Hash table for prototype */

static const HashTableValue JSAnalyserNodePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAnalyserNodeConstructor) } },
    { "fftSize", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeFftSize), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAnalyserNodeFftSize) } },
    { "frequencyBinCount", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeFrequencyBinCount), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "minDecibels", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeMinDecibels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAnalyserNodeMinDecibels) } },
    { "maxDecibels", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeMaxDecibels), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAnalyserNodeMaxDecibels) } },
    { "smoothingTimeConstant", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsAnalyserNodeSmoothingTimeConstant), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSAnalyserNodeSmoothingTimeConstant) } },
    { "getFloatFrequencyData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsAnalyserNodePrototypeFunctionGetFloatFrequencyData), (intptr_t) (1) } },
    { "getByteFrequencyData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsAnalyserNodePrototypeFunctionGetByteFrequencyData), (intptr_t) (1) } },
    { "getByteTimeDomainData", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsAnalyserNodePrototypeFunctionGetByteTimeDomainData), (intptr_t) (1) } },
};

const ClassInfo JSAnalyserNodePrototype::s_info = { "AnalyserNodePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAnalyserNodePrototype) };

void JSAnalyserNodePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSAnalyserNodePrototypeTableValues, *this);
}

const ClassInfo JSAnalyserNode::s_info = { "AnalyserNode", &Base::s_info, 0, CREATE_METHOD_TABLE(JSAnalyserNode) };

JSAnalyserNode::JSAnalyserNode(Structure* structure, JSDOMGlobalObject& globalObject, Ref<AnalyserNode>&& impl)
    : JSAudioNode(structure, globalObject, WTFMove(impl))
{
}

void JSAnalyserNode::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSAnalyserNode::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSAnalyserNodePrototype::create(vm, globalObject, JSAnalyserNodePrototype::createStructure(vm, globalObject, JSAudioNode::prototype(vm, globalObject)));
}

JSObject* JSAnalyserNode::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSAnalyserNode>(vm, globalObject);
}

template<> inline JSAnalyserNode* BindingCaller<JSAnalyserNode>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSAnalyserNode*>(JSValue::decode(thisValue));
}

template<> inline JSAnalyserNode* BindingCaller<JSAnalyserNode>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSAnalyserNode*>(state.thisValue());
}

static inline JSValue jsAnalyserNodeFftSizeGetter(ExecState&, JSAnalyserNode&, ThrowScope& throwScope);

EncodedJSValue jsAnalyserNodeFftSize(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSAnalyserNode>::attribute<jsAnalyserNodeFftSizeGetter>(state, thisValue, "fftSize");
}

static inline JSValue jsAnalyserNodeFftSizeGetter(ExecState& state, JSAnalyserNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.fftSize());
    return result;
}

static inline JSValue jsAnalyserNodeFrequencyBinCountGetter(ExecState&, JSAnalyserNode&, ThrowScope& throwScope);

EncodedJSValue jsAnalyserNodeFrequencyBinCount(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSAnalyserNode>::attribute<jsAnalyserNodeFrequencyBinCountGetter>(state, thisValue, "frequencyBinCount");
}

static inline JSValue jsAnalyserNodeFrequencyBinCountGetter(ExecState& state, JSAnalyserNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLong>(impl.frequencyBinCount());
    return result;
}

static inline JSValue jsAnalyserNodeMinDecibelsGetter(ExecState&, JSAnalyserNode&, ThrowScope& throwScope);

EncodedJSValue jsAnalyserNodeMinDecibels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSAnalyserNode>::attribute<jsAnalyserNodeMinDecibelsGetter>(state, thisValue, "minDecibels");
}

static inline JSValue jsAnalyserNodeMinDecibelsGetter(ExecState& state, JSAnalyserNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.minDecibels());
    return result;
}

static inline JSValue jsAnalyserNodeMaxDecibelsGetter(ExecState&, JSAnalyserNode&, ThrowScope& throwScope);

EncodedJSValue jsAnalyserNodeMaxDecibels(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSAnalyserNode>::attribute<jsAnalyserNodeMaxDecibelsGetter>(state, thisValue, "maxDecibels");
}

static inline JSValue jsAnalyserNodeMaxDecibelsGetter(ExecState& state, JSAnalyserNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.maxDecibels());
    return result;
}

static inline JSValue jsAnalyserNodeSmoothingTimeConstantGetter(ExecState&, JSAnalyserNode&, ThrowScope& throwScope);

EncodedJSValue jsAnalyserNodeSmoothingTimeConstant(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSAnalyserNode>::attribute<jsAnalyserNodeSmoothingTimeConstantGetter>(state, thisValue, "smoothingTimeConstant");
}

static inline JSValue jsAnalyserNodeSmoothingTimeConstantGetter(ExecState& state, JSAnalyserNode& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.smoothingTimeConstant());
    return result;
}

EncodedJSValue jsAnalyserNodeConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSAnalyserNodePrototype* domObject = jsDynamicDowncast<JSAnalyserNodePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSAnalyserNode::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSAnalyserNodeConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSAnalyserNodePrototype* domObject = jsDynamicDowncast<JSAnalyserNodePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSAnalyserNodeFftSizeFunction(ExecState&, JSAnalyserNode&, JSValue, ThrowScope&);

bool setJSAnalyserNodeFftSize(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSAnalyserNode>::setAttribute<setJSAnalyserNodeFftSizeFunction>(state, thisValue, encodedValue, "fftSize");
}

static inline bool setJSAnalyserNodeFftSizeFunction(ExecState& state, JSAnalyserNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnsignedLong>(state, value, IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setFftSize(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSAnalyserNodeMinDecibelsFunction(ExecState&, JSAnalyserNode&, JSValue, ThrowScope&);

bool setJSAnalyserNodeMinDecibels(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSAnalyserNode>::setAttribute<setJSAnalyserNodeMinDecibelsFunction>(state, thisValue, encodedValue, "minDecibels");
}

static inline bool setJSAnalyserNodeMinDecibelsFunction(ExecState& state, JSAnalyserNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMinDecibels(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSAnalyserNodeMaxDecibelsFunction(ExecState&, JSAnalyserNode&, JSValue, ThrowScope&);

bool setJSAnalyserNodeMaxDecibels(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSAnalyserNode>::setAttribute<setJSAnalyserNodeMaxDecibelsFunction>(state, thisValue, encodedValue, "maxDecibels");
}

static inline bool setJSAnalyserNodeMaxDecibelsFunction(ExecState& state, JSAnalyserNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setMaxDecibels(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSAnalyserNodeSmoothingTimeConstantFunction(ExecState&, JSAnalyserNode&, JSValue, ThrowScope&);

bool setJSAnalyserNodeSmoothingTimeConstant(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSAnalyserNode>::setAttribute<setJSAnalyserNodeSmoothingTimeConstantFunction>(state, thisValue, encodedValue, "smoothingTimeConstant");
}

static inline bool setJSAnalyserNodeSmoothingTimeConstantFunction(ExecState& state, JSAnalyserNode& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setSmoothingTimeConstant(WTFMove(nativeValue)));
    return true;
}


JSValue JSAnalyserNode::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSAnalyserNodeConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetFloatFrequencyDataCaller(JSC::ExecState*, JSAnalyserNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetFloatFrequencyData(ExecState* state)
{
    return BindingCaller<JSAnalyserNode>::callOperation<jsAnalyserNodePrototypeFunctionGetFloatFrequencyDataCaller>(state, "getFloatFrequencyData");
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetFloatFrequencyDataCaller(JSC::ExecState* state, JSAnalyserNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto array = convert<IDLNullable<IDLInterface<Float32Array>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "array", "AnalyserNode", "getFloatFrequencyData", "Float32Array"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.getFloatFrequencyData(WTFMove(array));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetByteFrequencyDataCaller(JSC::ExecState*, JSAnalyserNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetByteFrequencyData(ExecState* state)
{
    return BindingCaller<JSAnalyserNode>::callOperation<jsAnalyserNodePrototypeFunctionGetByteFrequencyDataCaller>(state, "getByteFrequencyData");
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetByteFrequencyDataCaller(JSC::ExecState* state, JSAnalyserNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto array = convert<IDLNullable<IDLInterface<Uint8Array>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "array", "AnalyserNode", "getByteFrequencyData", "Uint8Array"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.getByteFrequencyData(WTFMove(array));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetByteTimeDomainDataCaller(JSC::ExecState*, JSAnalyserNode*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsAnalyserNodePrototypeFunctionGetByteTimeDomainData(ExecState* state)
{
    return BindingCaller<JSAnalyserNode>::callOperation<jsAnalyserNodePrototypeFunctionGetByteTimeDomainDataCaller>(state, "getByteTimeDomainData");
}

static inline JSC::EncodedJSValue jsAnalyserNodePrototypeFunctionGetByteTimeDomainDataCaller(JSC::ExecState* state, JSAnalyserNode* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto array = convert<IDLNullable<IDLInterface<Uint8Array>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "array", "AnalyserNode", "getByteTimeDomainData", "Uint8Array"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.getByteTimeDomainData(WTFMove(array));
    return JSValue::encode(jsUndefined());
}

void JSAnalyserNode::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSAnalyserNode*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7AnalyserNode@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12AnalyserNodeE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<AnalyserNode>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7AnalyserNode@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12AnalyserNodeE[2];
#if COMPILER(CLANG)
    // If this fails AnalyserNode does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(AnalyserNode), "AnalyserNode is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // AnalyserNode has subclasses. If AnalyserNode has subclasses that get passed
    // to toJS() we currently require AnalyserNode you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<AnalyserNode>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, AnalyserNode& impl)
{
    return wrap(state, globalObject, impl);
}


}

#endif // ENABLE(WEB_AUDIO)
