/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSInternalSettingsGenerated.h"

#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDOMPasteAllowed(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAccelerated2dCanvasEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositedAnimationsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForFixedPositionEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForOverflowScrollEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedDrawingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedFiltersEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAggressiveTileRetentionEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowCustomScrollbarInMainFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowDisplayOfInsecureContent(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowFileAccessFromFileURLs(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowMultiElementImplicitSubmission(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowRunningOfInsecureContent(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowScriptsToCloseWindows(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowUniversalAccessFromFileURLs(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsAirPlayForMediaPlayback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsInlineMediaPlayback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsPictureInPictureMediaPlayback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAlwaysUseAcceleratedOverflowScroll(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAntialiased2dCanvasEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAppleMailPaginationQuirkEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAsynchronousSpellCheckingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAttachmentElementEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAudioPlaybackRequiresUserGesture(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAuthorAndUserStylesEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutoscrollForDragAndDropEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutostartOriginPlugInSnapshottingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackForwardCacheExpirationInterval(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackspaceKeyNavigationEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCanvasUsesAcceleratedDrawing(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetContentDispositionAttachmentSandboxEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCookieEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCrossOriginCheckInGetMatchedCSSRulesDisabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFixedFontSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFontSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultTextEncodingName(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultVideoPosterURL(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDelegatesPageScaling(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeveloperExtrasEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceHeight(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceWidth(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDiagnosticLoggingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDOMTimersThrottlingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDownloadableBinaryFontsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetEnableInheritURIQueryComponent(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetEnforceCSSMIMETypeInNoQuirksMode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetExperimentalNotificationsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedBackgroundsPaintRelativeToDocument(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedElementsLayoutRelativeToFrame(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedPositionCreatesStackingContext(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceCompositingMode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceFTPDirectoryListings(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceSoftwareWebGLRendering(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceUpdateScrollbarsOnMainThreadForPerformanceTesting(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFrameFlatteningEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFTPDirectoryTemplatePath(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFullScreenEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetHttpEquivEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetHyperlinkAuditingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetImageControlsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetImageSubsamplingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetIncrementalRenderingSuppressionTimeoutInSeconds(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInlineMediaPlaybackRequiresPlaysInlineAttribute(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInteractiveFormValidationEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInvisibleAutoplayNotPermitted(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanAccessClipboard(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanOpenWindowsAutomatically(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLayoutFallbackWidth(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadDeferringEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadsSiteIconsIgnoringImageLoadingSetting(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalFileContentSniffingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageDatabasePath(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLogsPageMessagesToSystemConsoleEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaxParseDuration(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumHTMLParserDOMTreeDepth(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumPlugInSnapshotAttempts(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumSourceBufferSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaControlsScaleWithPageZoom(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaDataLoadsAutomatically(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaSourceEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaStreamEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumAccelerated2dCanvasSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumFontSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumLogicalFontSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumZoomFontSize(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsIsLoadingInAPISenseQuirk(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsKeyboardEventDisambiguationQuirks(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsSiteSpecificQuirks(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNewBlockInsideInlineModelEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNotificationsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOfflineWebApplicationCacheEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOpenGLMultisamplingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPageCacheSupportsPlugins(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPaginateDuringLayoutEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoDurationInSeconds(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPlugInSnapshottingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPreventKeyboardDOMEventDispatch(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPrimaryPlugInSnapshotDetectionEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRequestAnimationFrameEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRequiresUserGestureForMediaPlayback(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRubberBandingForSubScrollableRegionsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScriptMarkupEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollAnimatorEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollingCoordinatorEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollingTreeIncludesFrames(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectTrailingWhitespaceEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectionIncludesAltImageText(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetServiceControlsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSessionStorageQuota(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldConvertPositionStyleOnCopy(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDispatchJavaScriptWindowOnErrorEvents(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayCaptions(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplaySubtitles(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayTextDescriptions(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldInjectUserScriptsInInitialEmptyDocument(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldPrintBackgrounds(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldRespectImageOrientation(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldTransformsAffectOverflow(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowDebugBorders(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowRepaintCounter(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsToolTipOverTruncatedText(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsURLsInToolTips(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShrinksStandaloneImagesToFit(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutDebugBordersEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSmartInsertDeleteEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSnapshotAllPlugIns(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSpatialNavigationEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetStandalone(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSubpixelCSSOMElementMetricsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSuppressesIncrementalRendering(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSyncXHRInDocumentsEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTelephoneNumberParsingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTemporaryTileCohortRetentionEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTextAreasAreResizable(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTreatsAnyTextCSSLinkAsStylesheet(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnifiedTextCheckerEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnsafePluginPastingEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseGiantTiles(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseImageDocumentForSubframePDF(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyTextAlignPositionedElementBehavior(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsePreHTML5ParserQuirks(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesDashboardBackwardCompatibilityMode(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesEncodingDetector(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetValidationMessageTimerMagnification(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWantsBalancedSetDefersLoadingBehavior(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebArchiveDebugModeEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebAudioEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLErrorsToConsoleEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebSecurityEnabled(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWindowFocusRestricted(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetXSSAuditorEnabled(JSC::ExecState*);

class JSInternalSettingsGeneratedPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSInternalSettingsGeneratedPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSInternalSettingsGeneratedPrototype* ptr = new (NotNull, JSC::allocateCell<JSInternalSettingsGeneratedPrototype>(vm.heap)) JSInternalSettingsGeneratedPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSInternalSettingsGeneratedPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSInternalSettingsGeneratedPrototypeTableValues[] =
{
    { "setDOMPasteAllowed", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDOMPasteAllowed), (intptr_t) (1) } },
    { "setAccelerated2dCanvasEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAccelerated2dCanvasEnabled), (intptr_t) (1) } },
    { "setAcceleratedCompositedAnimationsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositedAnimationsEnabled), (intptr_t) (1) } },
    { "setAcceleratedCompositingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingEnabled), (intptr_t) (1) } },
    { "setAcceleratedCompositingForFixedPositionEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForFixedPositionEnabled), (intptr_t) (1) } },
    { "setAcceleratedCompositingForOverflowScrollEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForOverflowScrollEnabled), (intptr_t) (1) } },
    { "setAcceleratedDrawingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedDrawingEnabled), (intptr_t) (1) } },
    { "setAcceleratedFiltersEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedFiltersEnabled), (intptr_t) (1) } },
    { "setAggressiveTileRetentionEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAggressiveTileRetentionEnabled), (intptr_t) (1) } },
    { "setAllowCustomScrollbarInMainFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowCustomScrollbarInMainFrame), (intptr_t) (1) } },
    { "setAllowDisplayOfInsecureContent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowDisplayOfInsecureContent), (intptr_t) (1) } },
    { "setAllowFileAccessFromFileURLs", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowFileAccessFromFileURLs), (intptr_t) (1) } },
    { "setAllowMultiElementImplicitSubmission", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowMultiElementImplicitSubmission), (intptr_t) (1) } },
    { "setAllowRunningOfInsecureContent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowRunningOfInsecureContent), (intptr_t) (1) } },
    { "setAllowScriptsToCloseWindows", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowScriptsToCloseWindows), (intptr_t) (1) } },
    { "setAllowUniversalAccessFromFileURLs", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowUniversalAccessFromFileURLs), (intptr_t) (1) } },
    { "setAllowsAirPlayForMediaPlayback", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowsAirPlayForMediaPlayback), (intptr_t) (1) } },
    { "setAllowsInlineMediaPlayback", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowsInlineMediaPlayback), (intptr_t) (1) } },
    { "setAllowsPictureInPictureMediaPlayback", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAllowsPictureInPictureMediaPlayback), (intptr_t) (1) } },
    { "setAlwaysUseAcceleratedOverflowScroll", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAlwaysUseAcceleratedOverflowScroll), (intptr_t) (1) } },
    { "setAntialiased2dCanvasEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAntialiased2dCanvasEnabled), (intptr_t) (1) } },
    { "setAppleMailPaginationQuirkEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAppleMailPaginationQuirkEnabled), (intptr_t) (1) } },
    { "setAsynchronousSpellCheckingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAsynchronousSpellCheckingEnabled), (intptr_t) (1) } },
    { "setAttachmentElementEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAttachmentElementEnabled), (intptr_t) (1) } },
    { "setAudioPlaybackRequiresUserGesture", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAudioPlaybackRequiresUserGesture), (intptr_t) (1) } },
    { "setAuthorAndUserStylesEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAuthorAndUserStylesEnabled), (intptr_t) (1) } },
    { "setAutoscrollForDragAndDropEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAutoscrollForDragAndDropEnabled), (intptr_t) (1) } },
    { "setAutostartOriginPlugInSnapshottingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetAutostartOriginPlugInSnapshottingEnabled), (intptr_t) (1) } },
    { "setBackForwardCacheExpirationInterval", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetBackForwardCacheExpirationInterval), (intptr_t) (1) } },
    { "setBackspaceKeyNavigationEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetBackspaceKeyNavigationEnabled), (intptr_t) (1) } },
    { "setCanvasUsesAcceleratedDrawing", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCanvasUsesAcceleratedDrawing), (intptr_t) (1) } },
    { "setCaretBrowsingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabled), (intptr_t) (1) } },
    { "setContentDispositionAttachmentSandboxEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetContentDispositionAttachmentSandboxEnabled), (intptr_t) (1) } },
    { "setCookieEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCookieEnabled), (intptr_t) (1) } },
    { "setCrossOriginCheckInGetMatchedCSSRulesDisabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetCrossOriginCheckInGetMatchedCSSRulesDisabled), (intptr_t) (1) } },
    { "setDefaultFixedFontSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFixedFontSize), (intptr_t) (1) } },
    { "setDefaultFontSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFontSize), (intptr_t) (1) } },
    { "setDefaultTextEncodingName", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultTextEncodingName), (intptr_t) (1) } },
    { "setDefaultVideoPosterURL", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDefaultVideoPosterURL), (intptr_t) (1) } },
    { "setDelegatesPageScaling", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDelegatesPageScaling), (intptr_t) (1) } },
    { "setDeveloperExtrasEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeveloperExtrasEnabled), (intptr_t) (1) } },
    { "setDeviceHeight", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceHeight), (intptr_t) (1) } },
    { "setDeviceWidth", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDeviceWidth), (intptr_t) (1) } },
    { "setDiagnosticLoggingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDiagnosticLoggingEnabled), (intptr_t) (1) } },
    { "setDOMTimersThrottlingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDOMTimersThrottlingEnabled), (intptr_t) (1) } },
    { "setDownloadableBinaryFontsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetDownloadableBinaryFontsEnabled), (intptr_t) (1) } },
    { "setEnableInheritURIQueryComponent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetEnableInheritURIQueryComponent), (intptr_t) (1) } },
    { "setEnforceCSSMIMETypeInNoQuirksMode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetEnforceCSSMIMETypeInNoQuirksMode), (intptr_t) (1) } },
    { "setExperimentalNotificationsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetExperimentalNotificationsEnabled), (intptr_t) (1) } },
    { "setFixedBackgroundsPaintRelativeToDocument", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFixedBackgroundsPaintRelativeToDocument), (intptr_t) (1) } },
    { "setFixedElementsLayoutRelativeToFrame", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFixedElementsLayoutRelativeToFrame), (intptr_t) (1) } },
    { "setFixedPositionCreatesStackingContext", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFixedPositionCreatesStackingContext), (intptr_t) (1) } },
    { "setForceCompositingMode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceCompositingMode), (intptr_t) (1) } },
    { "setForceFTPDirectoryListings", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceFTPDirectoryListings), (intptr_t) (1) } },
    { "setForceSoftwareWebGLRendering", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceSoftwareWebGLRendering), (intptr_t) (1) } },
    { "setForceUpdateScrollbarsOnMainThreadForPerformanceTesting", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetForceUpdateScrollbarsOnMainThreadForPerformanceTesting), (intptr_t) (1) } },
    { "setFrameFlatteningEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFrameFlatteningEnabled), (intptr_t) (1) } },
    { "setFTPDirectoryTemplatePath", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFTPDirectoryTemplatePath), (intptr_t) (1) } },
    { "setFullScreenEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetFullScreenEnabled), (intptr_t) (1) } },
    { "setHttpEquivEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetHttpEquivEnabled), (intptr_t) (1) } },
    { "setHyperlinkAuditingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetHyperlinkAuditingEnabled), (intptr_t) (1) } },
    { "setImageControlsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetImageControlsEnabled), (intptr_t) (1) } },
    { "setImageSubsamplingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetImageSubsamplingEnabled), (intptr_t) (1) } },
    { "setIncrementalRenderingSuppressionTimeoutInSeconds", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetIncrementalRenderingSuppressionTimeoutInSeconds), (intptr_t) (1) } },
    { "setInlineMediaPlaybackRequiresPlaysInlineAttribute", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetInlineMediaPlaybackRequiresPlaysInlineAttribute), (intptr_t) (1) } },
    { "setInteractiveFormValidationEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetInteractiveFormValidationEnabled), (intptr_t) (1) } },
    { "setInvisibleAutoplayNotPermitted", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetInvisibleAutoplayNotPermitted), (intptr_t) (1) } },
    { "setJavaScriptCanAccessClipboard", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanAccessClipboard), (intptr_t) (1) } },
    { "setJavaScriptCanOpenWindowsAutomatically", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanOpenWindowsAutomatically), (intptr_t) (1) } },
    { "setLayoutFallbackWidth", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLayoutFallbackWidth), (intptr_t) (1) } },
    { "setLoadDeferringEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLoadDeferringEnabled), (intptr_t) (1) } },
    { "setLoadsSiteIconsIgnoringImageLoadingSetting", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLoadsSiteIconsIgnoringImageLoadingSetting), (intptr_t) (1) } },
    { "setLocalFileContentSniffingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalFileContentSniffingEnabled), (intptr_t) (1) } },
    { "setLocalStorageDatabasePath", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageDatabasePath), (intptr_t) (1) } },
    { "setLocalStorageEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageEnabled), (intptr_t) (1) } },
    { "setLogsPageMessagesToSystemConsoleEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetLogsPageMessagesToSystemConsoleEnabled), (intptr_t) (1) } },
    { "setMaxParseDuration", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaxParseDuration), (intptr_t) (1) } },
    { "setMaximumHTMLParserDOMTreeDepth", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumHTMLParserDOMTreeDepth), (intptr_t) (1) } },
    { "setMaximumPlugInSnapshotAttempts", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumPlugInSnapshotAttempts), (intptr_t) (1) } },
    { "setMaximumSourceBufferSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMaximumSourceBufferSize), (intptr_t) (1) } },
    { "setMediaControlsScaleWithPageZoom", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaControlsScaleWithPageZoom), (intptr_t) (1) } },
    { "setMediaDataLoadsAutomatically", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaDataLoadsAutomatically), (intptr_t) (1) } },
    { "setMediaEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaEnabled), (intptr_t) (1) } },
    { "setMediaSourceEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaSourceEnabled), (intptr_t) (1) } },
    { "setMediaStreamEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMediaStreamEnabled), (intptr_t) (1) } },
    { "setMinimumAccelerated2dCanvasSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumAccelerated2dCanvasSize), (intptr_t) (1) } },
    { "setMinimumFontSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumFontSize), (intptr_t) (1) } },
    { "setMinimumLogicalFontSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumLogicalFontSize), (intptr_t) (1) } },
    { "setMinimumZoomFontSize", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetMinimumZoomFontSize), (intptr_t) (1) } },
    { "setNeedsIsLoadingInAPISenseQuirk", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsIsLoadingInAPISenseQuirk), (intptr_t) (1) } },
    { "setNeedsKeyboardEventDisambiguationQuirks", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsKeyboardEventDisambiguationQuirks), (intptr_t) (1) } },
    { "setNeedsSiteSpecificQuirks", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNeedsSiteSpecificQuirks), (intptr_t) (1) } },
    { "setNewBlockInsideInlineModelEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNewBlockInsideInlineModelEnabled), (intptr_t) (1) } },
    { "setNotificationsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetNotificationsEnabled), (intptr_t) (1) } },
    { "setOfflineWebApplicationCacheEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetOfflineWebApplicationCacheEnabled), (intptr_t) (1) } },
    { "setOpenGLMultisamplingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetOpenGLMultisamplingEnabled), (intptr_t) (1) } },
    { "setPageCacheSupportsPlugins", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPageCacheSupportsPlugins), (intptr_t) (1) } },
    { "setPaginateDuringLayoutEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPaginateDuringLayoutEnabled), (intptr_t) (1) } },
    { "setPasswordEchoDurationInSeconds", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoDurationInSeconds), (intptr_t) (1) } },
    { "setPasswordEchoEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoEnabled), (intptr_t) (1) } },
    { "setPlugInSnapshottingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPlugInSnapshottingEnabled), (intptr_t) (1) } },
    { "setPreventKeyboardDOMEventDispatch", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPreventKeyboardDOMEventDispatch), (intptr_t) (1) } },
    { "setPrimaryPlugInSnapshotDetectionEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetPrimaryPlugInSnapshotDetectionEnabled), (intptr_t) (1) } },
    { "setRequestAnimationFrameEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetRequestAnimationFrameEnabled), (intptr_t) (1) } },
    { "setRequiresUserGestureForMediaPlayback", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetRequiresUserGestureForMediaPlayback), (intptr_t) (1) } },
    { "setRubberBandingForSubScrollableRegionsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetRubberBandingForSubScrollableRegionsEnabled), (intptr_t) (1) } },
    { "setScriptMarkupEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScriptMarkupEnabled), (intptr_t) (1) } },
    { "setScrollAnimatorEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScrollAnimatorEnabled), (intptr_t) (1) } },
    { "setScrollingCoordinatorEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScrollingCoordinatorEnabled), (intptr_t) (1) } },
    { "setScrollingTreeIncludesFrames", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetScrollingTreeIncludesFrames), (intptr_t) (1) } },
    { "setSelectTrailingWhitespaceEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSelectTrailingWhitespaceEnabled), (intptr_t) (1) } },
    { "setSelectionIncludesAltImageText", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSelectionIncludesAltImageText), (intptr_t) (1) } },
    { "setServiceControlsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetServiceControlsEnabled), (intptr_t) (1) } },
    { "setSessionStorageQuota", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSessionStorageQuota), (intptr_t) (1) } },
    { "setShouldConvertPositionStyleOnCopy", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldConvertPositionStyleOnCopy), (intptr_t) (1) } },
    { "setShouldDispatchJavaScriptWindowOnErrorEvents", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDispatchJavaScriptWindowOnErrorEvents), (intptr_t) (1) } },
    { "setShouldDisplayCaptions", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayCaptions), (intptr_t) (1) } },
    { "setShouldDisplaySubtitles", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplaySubtitles), (intptr_t) (1) } },
    { "setShouldDisplayTextDescriptions", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayTextDescriptions), (intptr_t) (1) } },
    { "setShouldInjectUserScriptsInInitialEmptyDocument", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldInjectUserScriptsInInitialEmptyDocument), (intptr_t) (1) } },
    { "setShouldPrintBackgrounds", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldPrintBackgrounds), (intptr_t) (1) } },
    { "setShouldRespectImageOrientation", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldRespectImageOrientation), (intptr_t) (1) } },
    { "setShouldTransformsAffectOverflow", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShouldTransformsAffectOverflow), (intptr_t) (1) } },
    { "setShowDebugBorders", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowDebugBorders), (intptr_t) (1) } },
    { "setShowRepaintCounter", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowRepaintCounter), (intptr_t) (1) } },
    { "setShowsToolTipOverTruncatedText", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowsToolTipOverTruncatedText), (intptr_t) (1) } },
    { "setShowsURLsInToolTips", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShowsURLsInToolTips), (intptr_t) (1) } },
    { "setShrinksStandaloneImagesToFit", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetShrinksStandaloneImagesToFit), (intptr_t) (1) } },
    { "setSimpleLineLayoutDebugBordersEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutDebugBordersEnabled), (intptr_t) (1) } },
    { "setSimpleLineLayoutEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutEnabled), (intptr_t) (1) } },
    { "setSmartInsertDeleteEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSmartInsertDeleteEnabled), (intptr_t) (1) } },
    { "setSnapshotAllPlugIns", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSnapshotAllPlugIns), (intptr_t) (1) } },
    { "setSpatialNavigationEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSpatialNavigationEnabled), (intptr_t) (1) } },
    { "setStandalone", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetStandalone), (intptr_t) (1) } },
    { "setSubpixelCSSOMElementMetricsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSubpixelCSSOMElementMetricsEnabled), (intptr_t) (1) } },
    { "setSuppressesIncrementalRendering", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSuppressesIncrementalRendering), (intptr_t) (1) } },
    { "setSyncXHRInDocumentsEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetSyncXHRInDocumentsEnabled), (intptr_t) (1) } },
    { "setTelephoneNumberParsingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTelephoneNumberParsingEnabled), (intptr_t) (1) } },
    { "setTemporaryTileCohortRetentionEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTemporaryTileCohortRetentionEnabled), (intptr_t) (1) } },
    { "setTextAreasAreResizable", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTextAreasAreResizable), (intptr_t) (1) } },
    { "setTreatsAnyTextCSSLinkAsStylesheet", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetTreatsAnyTextCSSLinkAsStylesheet), (intptr_t) (1) } },
    { "setUnifiedTextCheckerEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUnifiedTextCheckerEnabled), (intptr_t) (1) } },
    { "setUnsafePluginPastingEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUnsafePluginPastingEnabled), (intptr_t) (1) } },
    { "setUseGiantTiles", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseGiantTiles), (intptr_t) (1) } },
    { "setUseImageDocumentForSubframePDF", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseImageDocumentForSubframePDF), (intptr_t) (1) } },
    { "setUseLegacyBackgroundSizeShorthandBehavior", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior), (intptr_t) (1) } },
    { "setUseLegacyTextAlignPositionedElementBehavior", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyTextAlignPositionedElementBehavior), (intptr_t) (1) } },
    { "setUsePreHTML5ParserQuirks", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsePreHTML5ParserQuirks), (intptr_t) (1) } },
    { "setUsesDashboardBackwardCompatibilityMode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsesDashboardBackwardCompatibilityMode), (intptr_t) (1) } },
    { "setUsesEncodingDetector", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetUsesEncodingDetector), (intptr_t) (1) } },
    { "setValidationMessageTimerMagnification", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetValidationMessageTimerMagnification), (intptr_t) (1) } },
    { "setWantsBalancedSetDefersLoadingBehavior", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWantsBalancedSetDefersLoadingBehavior), (intptr_t) (1) } },
    { "setWebArchiveDebugModeEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebArchiveDebugModeEnabled), (intptr_t) (1) } },
    { "setWebAudioEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebAudioEnabled), (intptr_t) (1) } },
    { "setWebGLEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebGLEnabled), (intptr_t) (1) } },
    { "setWebGLErrorsToConsoleEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebGLErrorsToConsoleEnabled), (intptr_t) (1) } },
    { "setWebSecurityEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWebSecurityEnabled), (intptr_t) (1) } },
    { "setWindowFocusRestricted", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetWindowFocusRestricted), (intptr_t) (1) } },
    { "setXSSAuditorEnabled", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsInternalSettingsGeneratedPrototypeFunctionSetXSSAuditorEnabled), (intptr_t) (1) } },
};

const ClassInfo JSInternalSettingsGeneratedPrototype::s_info = { "InternalSettingsGeneratedPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSInternalSettingsGeneratedPrototype) };

void JSInternalSettingsGeneratedPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSInternalSettingsGeneratedPrototypeTableValues, *this);
}

const ClassInfo JSInternalSettingsGenerated::s_info = { "InternalSettingsGenerated", &Base::s_info, 0, CREATE_METHOD_TABLE(JSInternalSettingsGenerated) };

JSInternalSettingsGenerated::JSInternalSettingsGenerated(Structure* structure, JSDOMGlobalObject& globalObject, Ref<InternalSettingsGenerated>&& impl)
    : JSDOMWrapper<InternalSettingsGenerated>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSInternalSettingsGenerated::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSInternalSettingsGeneratedPrototype::create(vm, globalObject, JSInternalSettingsGeneratedPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSInternalSettingsGenerated::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSInternalSettingsGenerated>(vm, globalObject);
}

void JSInternalSettingsGenerated::destroy(JSC::JSCell* cell)
{
    JSInternalSettingsGenerated* thisObject = static_cast<JSInternalSettingsGenerated*>(cell);
    thisObject->JSInternalSettingsGenerated::~JSInternalSettingsGenerated();
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDOMPasteAllowed(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDOMPasteAllowed");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool DOMPasteAllowed = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDOMPasteAllowed(DOMPasteAllowed);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAccelerated2dCanvasEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAccelerated2dCanvasEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool accelerated2dCanvasEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAccelerated2dCanvasEnabled(accelerated2dCanvasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositedAnimationsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedCompositedAnimationsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedCompositedAnimationsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositedAnimationsEnabled(acceleratedCompositedAnimationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedCompositingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedCompositingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingEnabled(acceleratedCompositingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForFixedPositionEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedCompositingForFixedPositionEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedCompositingForFixedPositionEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingForFixedPositionEnabled(acceleratedCompositingForFixedPositionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedCompositingForOverflowScrollEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedCompositingForOverflowScrollEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedCompositingForOverflowScrollEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedCompositingForOverflowScrollEnabled(acceleratedCompositingForOverflowScrollEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedDrawingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedDrawingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedDrawingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedDrawingEnabled(acceleratedDrawingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAcceleratedFiltersEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAcceleratedFiltersEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool acceleratedFiltersEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAcceleratedFiltersEnabled(acceleratedFiltersEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAggressiveTileRetentionEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAggressiveTileRetentionEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool aggressiveTileRetentionEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAggressiveTileRetentionEnabled(aggressiveTileRetentionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowCustomScrollbarInMainFrame(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowCustomScrollbarInMainFrame");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowCustomScrollbarInMainFrame = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowCustomScrollbarInMainFrame(allowCustomScrollbarInMainFrame);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowDisplayOfInsecureContent(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowDisplayOfInsecureContent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowDisplayOfInsecureContent = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowDisplayOfInsecureContent(allowDisplayOfInsecureContent);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowFileAccessFromFileURLs(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowFileAccessFromFileURLs");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowFileAccessFromFileURLs = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowFileAccessFromFileURLs(allowFileAccessFromFileURLs);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowMultiElementImplicitSubmission(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowMultiElementImplicitSubmission");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowMultiElementImplicitSubmission = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowMultiElementImplicitSubmission(allowMultiElementImplicitSubmission);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowRunningOfInsecureContent(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowRunningOfInsecureContent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowRunningOfInsecureContent = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowRunningOfInsecureContent(allowRunningOfInsecureContent);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowScriptsToCloseWindows(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowScriptsToCloseWindows");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowScriptsToCloseWindows = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowScriptsToCloseWindows(allowScriptsToCloseWindows);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowUniversalAccessFromFileURLs(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowUniversalAccessFromFileURLs");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowUniversalAccessFromFileURLs = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowUniversalAccessFromFileURLs(allowUniversalAccessFromFileURLs);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsAirPlayForMediaPlayback(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowsAirPlayForMediaPlayback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowsAirPlayForMediaPlayback = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowsAirPlayForMediaPlayback(allowsAirPlayForMediaPlayback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsInlineMediaPlayback(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowsInlineMediaPlayback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowsInlineMediaPlayback = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowsInlineMediaPlayback(allowsInlineMediaPlayback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAllowsPictureInPictureMediaPlayback(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAllowsPictureInPictureMediaPlayback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool allowsPictureInPictureMediaPlayback = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAllowsPictureInPictureMediaPlayback(allowsPictureInPictureMediaPlayback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAlwaysUseAcceleratedOverflowScroll(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAlwaysUseAcceleratedOverflowScroll");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool alwaysUseAcceleratedOverflowScroll = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAlwaysUseAcceleratedOverflowScroll(alwaysUseAcceleratedOverflowScroll);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAntialiased2dCanvasEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAntialiased2dCanvasEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool antialiased2dCanvasEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAntialiased2dCanvasEnabled(antialiased2dCanvasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAppleMailPaginationQuirkEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAppleMailPaginationQuirkEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool appleMailPaginationQuirkEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAppleMailPaginationQuirkEnabled(appleMailPaginationQuirkEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAsynchronousSpellCheckingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAsynchronousSpellCheckingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool asynchronousSpellCheckingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAsynchronousSpellCheckingEnabled(asynchronousSpellCheckingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAttachmentElementEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAttachmentElementEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool attachmentElementEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAttachmentElementEnabled(attachmentElementEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAudioPlaybackRequiresUserGesture(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAudioPlaybackRequiresUserGesture");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool audioPlaybackRequiresUserGesture = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAudioPlaybackRequiresUserGesture(audioPlaybackRequiresUserGesture);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAuthorAndUserStylesEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAuthorAndUserStylesEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool authorAndUserStylesEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAuthorAndUserStylesEnabled(authorAndUserStylesEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutoscrollForDragAndDropEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAutoscrollForDragAndDropEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool autoscrollForDragAndDropEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAutoscrollForDragAndDropEnabled(autoscrollForDragAndDropEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetAutostartOriginPlugInSnapshottingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setAutostartOriginPlugInSnapshottingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool autostartOriginPlugInSnapshottingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setAutostartOriginPlugInSnapshottingEnabled(autostartOriginPlugInSnapshottingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackForwardCacheExpirationInterval(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setBackForwardCacheExpirationInterval");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    double backForwardCacheExpirationInterval = state->argument(0).toNumber(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (!std::isfinite(backForwardCacheExpirationInterval)) {
        setDOMException(state, TypeError);
        return JSValue::encode(jsUndefined());
    }
    impl.setBackForwardCacheExpirationInterval(backForwardCacheExpirationInterval);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetBackspaceKeyNavigationEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setBackspaceKeyNavigationEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool backspaceKeyNavigationEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setBackspaceKeyNavigationEnabled(backspaceKeyNavigationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCanvasUsesAcceleratedDrawing(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setCanvasUsesAcceleratedDrawing");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool canvasUsesAcceleratedDrawing = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCanvasUsesAcceleratedDrawing(canvasUsesAcceleratedDrawing);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCaretBrowsingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setCaretBrowsingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool caretBrowsingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCaretBrowsingEnabled(caretBrowsingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetContentDispositionAttachmentSandboxEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setContentDispositionAttachmentSandboxEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool contentDispositionAttachmentSandboxEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setContentDispositionAttachmentSandboxEnabled(contentDispositionAttachmentSandboxEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCookieEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setCookieEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool cookieEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCookieEnabled(cookieEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetCrossOriginCheckInGetMatchedCSSRulesDisabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setCrossOriginCheckInGetMatchedCSSRulesDisabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool crossOriginCheckInGetMatchedCSSRulesDisabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setCrossOriginCheckInGetMatchedCSSRulesDisabled(crossOriginCheckInGetMatchedCSSRulesDisabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFixedFontSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDefaultFixedFontSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int defaultFixedFontSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDefaultFixedFontSize(defaultFixedFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultFontSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDefaultFontSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int defaultFontSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDefaultFontSize(defaultFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultTextEncodingName(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDefaultTextEncodingName");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    String defaultTextEncodingName = state->argument(0).toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDefaultTextEncodingName(defaultTextEncodingName);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDefaultVideoPosterURL(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDefaultVideoPosterURL");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    String defaultVideoPosterURL = state->argument(0).toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDefaultVideoPosterURL(defaultVideoPosterURL);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDelegatesPageScaling(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDelegatesPageScaling");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool delegatesPageScaling = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDelegatesPageScaling(delegatesPageScaling);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeveloperExtrasEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDeveloperExtrasEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool developerExtrasEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDeveloperExtrasEnabled(developerExtrasEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceHeight(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDeviceHeight");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int deviceHeight = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDeviceHeight(deviceHeight);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDeviceWidth(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDeviceWidth");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int deviceWidth = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDeviceWidth(deviceWidth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDiagnosticLoggingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDiagnosticLoggingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool diagnosticLoggingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDiagnosticLoggingEnabled(diagnosticLoggingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDOMTimersThrottlingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDOMTimersThrottlingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool domTimersThrottlingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDOMTimersThrottlingEnabled(domTimersThrottlingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetDownloadableBinaryFontsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setDownloadableBinaryFontsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool downloadableBinaryFontsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setDownloadableBinaryFontsEnabled(downloadableBinaryFontsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetEnableInheritURIQueryComponent(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setEnableInheritURIQueryComponent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool enableInheritURIQueryComponent = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEnableInheritURIQueryComponent(enableInheritURIQueryComponent);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetEnforceCSSMIMETypeInNoQuirksMode(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setEnforceCSSMIMETypeInNoQuirksMode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool enforceCSSMIMETypeInNoQuirksMode = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setEnforceCSSMIMETypeInNoQuirksMode(enforceCSSMIMETypeInNoQuirksMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetExperimentalNotificationsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setExperimentalNotificationsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool experimentalNotificationsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setExperimentalNotificationsEnabled(experimentalNotificationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedBackgroundsPaintRelativeToDocument(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFixedBackgroundsPaintRelativeToDocument");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool fixedBackgroundsPaintRelativeToDocument = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFixedBackgroundsPaintRelativeToDocument(fixedBackgroundsPaintRelativeToDocument);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedElementsLayoutRelativeToFrame(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFixedElementsLayoutRelativeToFrame");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool fixedElementsLayoutRelativeToFrame = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFixedElementsLayoutRelativeToFrame(fixedElementsLayoutRelativeToFrame);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFixedPositionCreatesStackingContext(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFixedPositionCreatesStackingContext");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool fixedPositionCreatesStackingContext = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFixedPositionCreatesStackingContext(fixedPositionCreatesStackingContext);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceCompositingMode(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setForceCompositingMode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool forceCompositingMode = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setForceCompositingMode(forceCompositingMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceFTPDirectoryListings(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setForceFTPDirectoryListings");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool forceFTPDirectoryListings = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setForceFTPDirectoryListings(forceFTPDirectoryListings);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceSoftwareWebGLRendering(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setForceSoftwareWebGLRendering");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool forceSoftwareWebGLRendering = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setForceSoftwareWebGLRendering(forceSoftwareWebGLRendering);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetForceUpdateScrollbarsOnMainThreadForPerformanceTesting(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setForceUpdateScrollbarsOnMainThreadForPerformanceTesting");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool forceUpdateScrollbarsOnMainThreadForPerformanceTesting = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setForceUpdateScrollbarsOnMainThreadForPerformanceTesting(forceUpdateScrollbarsOnMainThreadForPerformanceTesting);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFrameFlatteningEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFrameFlatteningEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool frameFlatteningEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFrameFlatteningEnabled(frameFlatteningEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFTPDirectoryTemplatePath(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFTPDirectoryTemplatePath");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    String ftpDirectoryTemplatePath = state->argument(0).toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFTPDirectoryTemplatePath(ftpDirectoryTemplatePath);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetFullScreenEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setFullScreenEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool fullScreenEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setFullScreenEnabled(fullScreenEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetHttpEquivEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setHttpEquivEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool httpEquivEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setHttpEquivEnabled(httpEquivEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetHyperlinkAuditingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setHyperlinkAuditingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool hyperlinkAuditingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setHyperlinkAuditingEnabled(hyperlinkAuditingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetImageControlsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setImageControlsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool imageControlsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setImageControlsEnabled(imageControlsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetImageSubsamplingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setImageSubsamplingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool imageSubsamplingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setImageSubsamplingEnabled(imageSubsamplingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetIncrementalRenderingSuppressionTimeoutInSeconds(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setIncrementalRenderingSuppressionTimeoutInSeconds");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    double incrementalRenderingSuppressionTimeoutInSeconds = state->argument(0).toNumber(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (!std::isfinite(incrementalRenderingSuppressionTimeoutInSeconds)) {
        setDOMException(state, TypeError);
        return JSValue::encode(jsUndefined());
    }
    impl.setIncrementalRenderingSuppressionTimeoutInSeconds(incrementalRenderingSuppressionTimeoutInSeconds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInlineMediaPlaybackRequiresPlaysInlineAttribute(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setInlineMediaPlaybackRequiresPlaysInlineAttribute");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool inlineMediaPlaybackRequiresPlaysInlineAttribute = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setInlineMediaPlaybackRequiresPlaysInlineAttribute(inlineMediaPlaybackRequiresPlaysInlineAttribute);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInteractiveFormValidationEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setInteractiveFormValidationEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool interactiveFormValidationEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setInteractiveFormValidationEnabled(interactiveFormValidationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetInvisibleAutoplayNotPermitted(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setInvisibleAutoplayNotPermitted");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool invisibleAutoplayNotPermitted = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setInvisibleAutoplayNotPermitted(invisibleAutoplayNotPermitted);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanAccessClipboard(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setJavaScriptCanAccessClipboard");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool javaScriptCanAccessClipboard = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setJavaScriptCanAccessClipboard(javaScriptCanAccessClipboard);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetJavaScriptCanOpenWindowsAutomatically(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setJavaScriptCanOpenWindowsAutomatically");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool javaScriptCanOpenWindowsAutomatically = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setJavaScriptCanOpenWindowsAutomatically(javaScriptCanOpenWindowsAutomatically);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLayoutFallbackWidth(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLayoutFallbackWidth");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int layoutFallbackWidth = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLayoutFallbackWidth(layoutFallbackWidth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadDeferringEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLoadDeferringEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool loadDeferringEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLoadDeferringEnabled(loadDeferringEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLoadsSiteIconsIgnoringImageLoadingSetting(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLoadsSiteIconsIgnoringImageLoadingSetting");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool loadsSiteIconsIgnoringImageLoadingSetting = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLoadsSiteIconsIgnoringImageLoadingSetting(loadsSiteIconsIgnoringImageLoadingSetting);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalFileContentSniffingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLocalFileContentSniffingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool localFileContentSniffingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLocalFileContentSniffingEnabled(localFileContentSniffingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageDatabasePath(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLocalStorageDatabasePath");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    String localStorageDatabasePath = state->argument(0).toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLocalStorageDatabasePath(localStorageDatabasePath);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLocalStorageEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLocalStorageEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool localStorageEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLocalStorageEnabled(localStorageEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetLogsPageMessagesToSystemConsoleEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setLogsPageMessagesToSystemConsoleEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool logsPageMessagesToSystemConsoleEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setLogsPageMessagesToSystemConsoleEnabled(logsPageMessagesToSystemConsoleEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaxParseDuration(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMaxParseDuration");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    double maxParseDuration = state->argument(0).toNumber(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (!std::isfinite(maxParseDuration)) {
        setDOMException(state, TypeError);
        return JSValue::encode(jsUndefined());
    }
    impl.setMaxParseDuration(maxParseDuration);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumHTMLParserDOMTreeDepth(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMaximumHTMLParserDOMTreeDepth");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    unsigned maximumHTMLParserDOMTreeDepth = toUInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMaximumHTMLParserDOMTreeDepth(maximumHTMLParserDOMTreeDepth);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumPlugInSnapshotAttempts(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMaximumPlugInSnapshotAttempts");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    unsigned maximumPlugInSnapshotAttempts = toUInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMaximumPlugInSnapshotAttempts(maximumPlugInSnapshotAttempts);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMaximumSourceBufferSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMaximumSourceBufferSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int maximumSourceBufferSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMaximumSourceBufferSize(maximumSourceBufferSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaControlsScaleWithPageZoom(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMediaControlsScaleWithPageZoom");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool mediaControlsScaleWithPageZoom = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaControlsScaleWithPageZoom(mediaControlsScaleWithPageZoom);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaDataLoadsAutomatically(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMediaDataLoadsAutomatically");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool mediaDataLoadsAutomatically = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaDataLoadsAutomatically(mediaDataLoadsAutomatically);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMediaEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool mediaEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaEnabled(mediaEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaSourceEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMediaSourceEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool mediaSourceEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaSourceEnabled(mediaSourceEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMediaStreamEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMediaStreamEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool mediaStreamEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMediaStreamEnabled(mediaStreamEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumAccelerated2dCanvasSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMinimumAccelerated2dCanvasSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int minimumAccelerated2dCanvasSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMinimumAccelerated2dCanvasSize(minimumAccelerated2dCanvasSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumFontSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMinimumFontSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int minimumFontSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMinimumFontSize(minimumFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumLogicalFontSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMinimumLogicalFontSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int minimumLogicalFontSize = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setMinimumLogicalFontSize(minimumLogicalFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetMinimumZoomFontSize(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setMinimumZoomFontSize");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    float minimumZoomFontSize = state->argument(0).toFloat(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (!std::isfinite(minimumZoomFontSize)) {
        setDOMException(state, TypeError);
        return JSValue::encode(jsUndefined());
    }
    impl.setMinimumZoomFontSize(minimumZoomFontSize);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsIsLoadingInAPISenseQuirk(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setNeedsIsLoadingInAPISenseQuirk");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool needsIsLoadingInAPISenseQuirk = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setNeedsIsLoadingInAPISenseQuirk(needsIsLoadingInAPISenseQuirk);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsKeyboardEventDisambiguationQuirks(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setNeedsKeyboardEventDisambiguationQuirks");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool needsKeyboardEventDisambiguationQuirks = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setNeedsKeyboardEventDisambiguationQuirks(needsKeyboardEventDisambiguationQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNeedsSiteSpecificQuirks(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setNeedsSiteSpecificQuirks");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool needsSiteSpecificQuirks = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setNeedsSiteSpecificQuirks(needsSiteSpecificQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNewBlockInsideInlineModelEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setNewBlockInsideInlineModelEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool newBlockInsideInlineModelEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setNewBlockInsideInlineModelEnabled(newBlockInsideInlineModelEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetNotificationsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setNotificationsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool notificationsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setNotificationsEnabled(notificationsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOfflineWebApplicationCacheEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setOfflineWebApplicationCacheEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool offlineWebApplicationCacheEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setOfflineWebApplicationCacheEnabled(offlineWebApplicationCacheEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetOpenGLMultisamplingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setOpenGLMultisamplingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool openGLMultisamplingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setOpenGLMultisamplingEnabled(openGLMultisamplingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPageCacheSupportsPlugins(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPageCacheSupportsPlugins");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool pageCacheSupportsPlugins = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPageCacheSupportsPlugins(pageCacheSupportsPlugins);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPaginateDuringLayoutEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPaginateDuringLayoutEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool paginateDuringLayoutEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPaginateDuringLayoutEnabled(paginateDuringLayoutEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoDurationInSeconds(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPasswordEchoDurationInSeconds");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    double passwordEchoDurationInSeconds = state->argument(0).toNumber(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (!std::isfinite(passwordEchoDurationInSeconds)) {
        setDOMException(state, TypeError);
        return JSValue::encode(jsUndefined());
    }
    impl.setPasswordEchoDurationInSeconds(passwordEchoDurationInSeconds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPasswordEchoEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPasswordEchoEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool passwordEchoEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPasswordEchoEnabled(passwordEchoEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPlugInSnapshottingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPlugInSnapshottingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool plugInSnapshottingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPlugInSnapshottingEnabled(plugInSnapshottingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPreventKeyboardDOMEventDispatch(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPreventKeyboardDOMEventDispatch");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool preventKeyboardDOMEventDispatch = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPreventKeyboardDOMEventDispatch(preventKeyboardDOMEventDispatch);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetPrimaryPlugInSnapshotDetectionEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setPrimaryPlugInSnapshotDetectionEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool primaryPlugInSnapshotDetectionEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setPrimaryPlugInSnapshotDetectionEnabled(primaryPlugInSnapshotDetectionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRequestAnimationFrameEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setRequestAnimationFrameEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool requestAnimationFrameEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setRequestAnimationFrameEnabled(requestAnimationFrameEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRequiresUserGestureForMediaPlayback(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setRequiresUserGestureForMediaPlayback");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool requiresUserGestureForMediaPlayback = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setRequiresUserGestureForMediaPlayback(requiresUserGestureForMediaPlayback);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetRubberBandingForSubScrollableRegionsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setRubberBandingForSubScrollableRegionsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool rubberBandingForSubScrollableRegionsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setRubberBandingForSubScrollableRegionsEnabled(rubberBandingForSubScrollableRegionsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScriptMarkupEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setScriptMarkupEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool scriptMarkupEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setScriptMarkupEnabled(scriptMarkupEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollAnimatorEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setScrollAnimatorEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool scrollAnimatorEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setScrollAnimatorEnabled(scrollAnimatorEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollingCoordinatorEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setScrollingCoordinatorEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool scrollingCoordinatorEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setScrollingCoordinatorEnabled(scrollingCoordinatorEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetScrollingTreeIncludesFrames(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setScrollingTreeIncludesFrames");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool scrollingTreeIncludesFrames = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setScrollingTreeIncludesFrames(scrollingTreeIncludesFrames);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectTrailingWhitespaceEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSelectTrailingWhitespaceEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool selectTrailingWhitespaceEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSelectTrailingWhitespaceEnabled(selectTrailingWhitespaceEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSelectionIncludesAltImageText(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSelectionIncludesAltImageText");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool selectionIncludesAltImageText = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSelectionIncludesAltImageText(selectionIncludesAltImageText);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetServiceControlsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setServiceControlsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool serviceControlsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setServiceControlsEnabled(serviceControlsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSessionStorageQuota(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSessionStorageQuota");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    unsigned sessionStorageQuota = toUInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSessionStorageQuota(sessionStorageQuota);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldConvertPositionStyleOnCopy(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldConvertPositionStyleOnCopy");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldConvertPositionStyleOnCopy = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldConvertPositionStyleOnCopy(shouldConvertPositionStyleOnCopy);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDispatchJavaScriptWindowOnErrorEvents(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldDispatchJavaScriptWindowOnErrorEvents");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldDispatchJavaScriptWindowOnErrorEvents = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldDispatchJavaScriptWindowOnErrorEvents(shouldDispatchJavaScriptWindowOnErrorEvents);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayCaptions(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldDisplayCaptions");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldDisplayCaptions = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplayCaptions(shouldDisplayCaptions);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplaySubtitles(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldDisplaySubtitles");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldDisplaySubtitles = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplaySubtitles(shouldDisplaySubtitles);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldDisplayTextDescriptions(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldDisplayTextDescriptions");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldDisplayTextDescriptions = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldDisplayTextDescriptions(shouldDisplayTextDescriptions);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldInjectUserScriptsInInitialEmptyDocument(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldInjectUserScriptsInInitialEmptyDocument");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldInjectUserScriptsInInitialEmptyDocument = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldInjectUserScriptsInInitialEmptyDocument(shouldInjectUserScriptsInInitialEmptyDocument);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldPrintBackgrounds(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldPrintBackgrounds");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldPrintBackgrounds = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldPrintBackgrounds(shouldPrintBackgrounds);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldRespectImageOrientation(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldRespectImageOrientation");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldRespectImageOrientation = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldRespectImageOrientation(shouldRespectImageOrientation);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShouldTransformsAffectOverflow(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShouldTransformsAffectOverflow");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shouldTransformsAffectOverflow = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShouldTransformsAffectOverflow(shouldTransformsAffectOverflow);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowDebugBorders(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShowDebugBorders");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool showDebugBorders = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShowDebugBorders(showDebugBorders);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowRepaintCounter(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShowRepaintCounter");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool showRepaintCounter = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShowRepaintCounter(showRepaintCounter);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsToolTipOverTruncatedText(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShowsToolTipOverTruncatedText");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool showsToolTipOverTruncatedText = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShowsToolTipOverTruncatedText(showsToolTipOverTruncatedText);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShowsURLsInToolTips(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShowsURLsInToolTips");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool showsURLsInToolTips = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShowsURLsInToolTips(showsURLsInToolTips);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetShrinksStandaloneImagesToFit(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setShrinksStandaloneImagesToFit");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool shrinksStandaloneImagesToFit = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setShrinksStandaloneImagesToFit(shrinksStandaloneImagesToFit);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutDebugBordersEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSimpleLineLayoutDebugBordersEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool simpleLineLayoutDebugBordersEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSimpleLineLayoutDebugBordersEnabled(simpleLineLayoutDebugBordersEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSimpleLineLayoutEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSimpleLineLayoutEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool simpleLineLayoutEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSimpleLineLayoutEnabled(simpleLineLayoutEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSmartInsertDeleteEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSmartInsertDeleteEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool smartInsertDeleteEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSmartInsertDeleteEnabled(smartInsertDeleteEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSnapshotAllPlugIns(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSnapshotAllPlugIns");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool snapshotAllPlugIns = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSnapshotAllPlugIns(snapshotAllPlugIns);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSpatialNavigationEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSpatialNavigationEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool spatialNavigationEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSpatialNavigationEnabled(spatialNavigationEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetStandalone(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setStandalone");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool standalone = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setStandalone(standalone);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSubpixelCSSOMElementMetricsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSubpixelCSSOMElementMetricsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool subpixelCSSOMElementMetricsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSubpixelCSSOMElementMetricsEnabled(subpixelCSSOMElementMetricsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSuppressesIncrementalRendering(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSuppressesIncrementalRendering");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool suppressesIncrementalRendering = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSuppressesIncrementalRendering(suppressesIncrementalRendering);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetSyncXHRInDocumentsEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setSyncXHRInDocumentsEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool syncXHRInDocumentsEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setSyncXHRInDocumentsEnabled(syncXHRInDocumentsEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTelephoneNumberParsingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setTelephoneNumberParsingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool telephoneNumberParsingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTelephoneNumberParsingEnabled(telephoneNumberParsingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTemporaryTileCohortRetentionEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setTemporaryTileCohortRetentionEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool temporaryTileCohortRetentionEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTemporaryTileCohortRetentionEnabled(temporaryTileCohortRetentionEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTextAreasAreResizable(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setTextAreasAreResizable");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool textAreasAreResizable = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTextAreasAreResizable(textAreasAreResizable);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetTreatsAnyTextCSSLinkAsStylesheet(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setTreatsAnyTextCSSLinkAsStylesheet");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool treatsAnyTextCSSLinkAsStylesheet = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setTreatsAnyTextCSSLinkAsStylesheet(treatsAnyTextCSSLinkAsStylesheet);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnifiedTextCheckerEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUnifiedTextCheckerEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool unifiedTextCheckerEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUnifiedTextCheckerEnabled(unifiedTextCheckerEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUnsafePluginPastingEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUnsafePluginPastingEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool unsafePluginPastingEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUnsafePluginPastingEnabled(unsafePluginPastingEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseGiantTiles(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUseGiantTiles");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool useGiantTiles = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUseGiantTiles(useGiantTiles);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseImageDocumentForSubframePDF(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUseImageDocumentForSubframePDF");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool useImageDocumentForSubframePDF = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUseImageDocumentForSubframePDF(useImageDocumentForSubframePDF);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyBackgroundSizeShorthandBehavior(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUseLegacyBackgroundSizeShorthandBehavior");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool useLegacyBackgroundSizeShorthandBehavior = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUseLegacyBackgroundSizeShorthandBehavior(useLegacyBackgroundSizeShorthandBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUseLegacyTextAlignPositionedElementBehavior(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUseLegacyTextAlignPositionedElementBehavior");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool useLegacyTextAlignPositionedElementBehavior = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUseLegacyTextAlignPositionedElementBehavior(useLegacyTextAlignPositionedElementBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsePreHTML5ParserQuirks(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUsePreHTML5ParserQuirks");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool usePreHTML5ParserQuirks = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUsePreHTML5ParserQuirks(usePreHTML5ParserQuirks);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesDashboardBackwardCompatibilityMode(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUsesDashboardBackwardCompatibilityMode");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool usesDashboardBackwardCompatibilityMode = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUsesDashboardBackwardCompatibilityMode(usesDashboardBackwardCompatibilityMode);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetUsesEncodingDetector(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setUsesEncodingDetector");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool usesEncodingDetector = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setUsesEncodingDetector(usesEncodingDetector);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetValidationMessageTimerMagnification(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setValidationMessageTimerMagnification");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    int validationMessageTimerMagnification = toInt32(state, state->argument(0), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setValidationMessageTimerMagnification(validationMessageTimerMagnification);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWantsBalancedSetDefersLoadingBehavior(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWantsBalancedSetDefersLoadingBehavior");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool wantsBalancedSetDefersLoadingBehavior = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWantsBalancedSetDefersLoadingBehavior(wantsBalancedSetDefersLoadingBehavior);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebArchiveDebugModeEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWebArchiveDebugModeEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool webArchiveDebugModeEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWebArchiveDebugModeEnabled(webArchiveDebugModeEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebAudioEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWebAudioEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool webAudioEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWebAudioEnabled(webAudioEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWebGLEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool webGLEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWebGLEnabled(webGLEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebGLErrorsToConsoleEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWebGLErrorsToConsoleEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool webGLErrorsToConsoleEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWebGLErrorsToConsoleEnabled(webGLErrorsToConsoleEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWebSecurityEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWebSecurityEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool webSecurityEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWebSecurityEnabled(webSecurityEnabled);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetWindowFocusRestricted(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setWindowFocusRestricted");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool windowFocusRestricted = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setWindowFocusRestricted(windowFocusRestricted);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsInternalSettingsGeneratedPrototypeFunctionSetXSSAuditorEnabled(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSInternalSettingsGenerated* castedThis = jsDynamicCast<JSInternalSettingsGenerated*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "InternalSettingsGenerated", "setXSSAuditorEnabled");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSInternalSettingsGenerated::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    bool xssAuditorEnabled = state->argument(0).toBoolean(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.setXSSAuditorEnabled(xssAuditorEnabled);
    return JSValue::encode(jsUndefined());
}

bool JSInternalSettingsGeneratedOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSInternalSettingsGeneratedOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsInternalSettingsGenerated = jsCast<JSInternalSettingsGenerated*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsInternalSettingsGenerated->wrapped(), jsInternalSettingsGenerated);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7InternalSettingsGenerated@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore25InternalSettingsGeneratedE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, InternalSettingsGenerated* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSInternalSettingsGenerated>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, InternalSettingsGenerated* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSInternalSettingsGenerated>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7InternalSettingsGenerated@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore25InternalSettingsGeneratedE[2];
#if COMPILER(CLANG)
    // If this fails InternalSettingsGenerated does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(InternalSettingsGenerated), InternalSettingsGenerated_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // InternalSettingsGenerated has subclasses. If InternalSettingsGenerated has subclasses that get passed
    // to toJS() we currently require InternalSettingsGenerated you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSInternalSettingsGenerated>(globalObject, impl);
}

InternalSettingsGenerated* JSInternalSettingsGenerated::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSInternalSettingsGenerated*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
