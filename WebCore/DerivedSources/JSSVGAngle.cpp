/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGAngle.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnglePrototypeFunctionNewValueSpecifiedUnits(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSVGAnglePrototypeFunctionConvertToSpecifiedUnits(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSVGAngleUnitType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSVGAngleValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGAngleValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGAngleValueInSpecifiedUnits(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGAngleValueInSpecifiedUnits(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGAngleValueAsString(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGAngleValueAsString(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGAngleConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGAnglePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGAnglePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGAnglePrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGAnglePrototype>(vm.heap)) JSSVGAnglePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGAnglePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGAngleConstructor = JSDOMConstructorNotConstructable<JSSVGAngle>;

/* Hash table for constructor */

static const HashTableValue JSSVGAngleConstructorTableValues[] =
{
    { "SVG_ANGLETYPE_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "SVG_ANGLETYPE_UNSPECIFIED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "SVG_ANGLETYPE_DEG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "SVG_ANGLETYPE_RAD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "SVG_ANGLETYPE_GRAD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
};

static_assert(SVGAngleValue::SVG_ANGLETYPE_UNKNOWN == 0, "SVG_ANGLETYPE_UNKNOWN in SVGAngleValue does not match value from IDL");
static_assert(SVGAngleValue::SVG_ANGLETYPE_UNSPECIFIED == 1, "SVG_ANGLETYPE_UNSPECIFIED in SVGAngleValue does not match value from IDL");
static_assert(SVGAngleValue::SVG_ANGLETYPE_DEG == 2, "SVG_ANGLETYPE_DEG in SVGAngleValue does not match value from IDL");
static_assert(SVGAngleValue::SVG_ANGLETYPE_RAD == 3, "SVG_ANGLETYPE_RAD in SVGAngleValue does not match value from IDL");
static_assert(SVGAngleValue::SVG_ANGLETYPE_GRAD == 4, "SVG_ANGLETYPE_GRAD in SVGAngleValue does not match value from IDL");

template<> JSValue JSSVGAngleConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSSVGAngleConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGAngle::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGAngle"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSSVGAngleConstructorTableValues, *this);
}

template<> const ClassInfo JSSVGAngleConstructor::s_info = { "SVGAngle", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAngleConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGAnglePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAngleConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGAngleConstructor) } },
    { "unitType", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAngleUnitType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "value", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAngleValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGAngleValue) } },
    { "valueInSpecifiedUnits", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAngleValueInSpecifiedUnits), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGAngleValueInSpecifiedUnits) } },
    { "valueAsString", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGAngleValueAsString), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGAngleValueAsString) } },
    { "newValueSpecifiedUnits", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnglePrototypeFunctionNewValueSpecifiedUnits), (intptr_t) (2) } },
    { "convertToSpecifiedUnits", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSVGAnglePrototypeFunctionConvertToSpecifiedUnits), (intptr_t) (1) } },
    { "SVG_ANGLETYPE_UNKNOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "SVG_ANGLETYPE_UNSPECIFIED", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "SVG_ANGLETYPE_DEG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "SVG_ANGLETYPE_RAD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "SVG_ANGLETYPE_GRAD", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
};

const ClassInfo JSSVGAnglePrototype::s_info = { "SVGAnglePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAnglePrototype) };

void JSSVGAnglePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGAnglePrototypeTableValues, *this);
}

const ClassInfo JSSVGAngle::s_info = { "SVGAngle", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGAngle) };

JSSVGAngle::JSSVGAngle(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGAngle>&& impl)
    : JSDOMWrapper<SVGAngle>(structure, globalObject, WTFMove(impl))
{
}

void JSSVGAngle::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGAngle::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGAnglePrototype::create(vm, globalObject, JSSVGAnglePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSSVGAngle::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGAngle>(vm, globalObject);
}

void JSSVGAngle::destroy(JSC::JSCell* cell)
{
    JSSVGAngle* thisObject = static_cast<JSSVGAngle*>(cell);
    thisObject->JSSVGAngle::~JSSVGAngle();
}

template<> inline JSSVGAngle* BindingCaller<JSSVGAngle>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGAngle*>(JSValue::decode(thisValue));
}

template<> inline JSSVGAngle* BindingCaller<JSSVGAngle>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSVGAngle*>(state.thisValue());
}

static inline JSValue jsSVGAngleUnitTypeGetter(ExecState&, JSSVGAngle&, ThrowScope& throwScope);

EncodedJSValue jsSVGAngleUnitType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAngle>::attribute<jsSVGAngleUnitTypeGetter>(state, thisValue, "unitType");
}

static inline JSValue jsSVGAngleUnitTypeGetter(ExecState& state, JSSVGAngle& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.unitType());
    return result;
}

static inline JSValue jsSVGAngleValueGetter(ExecState&, JSSVGAngle&, ThrowScope& throwScope);

EncodedJSValue jsSVGAngleValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAngle>::attribute<jsSVGAngleValueGetter>(state, thisValue, "value");
}

static inline JSValue jsSVGAngleValueGetter(ExecState& state, JSSVGAngle& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.valueForBindings());
    return result;
}

static inline JSValue jsSVGAngleValueInSpecifiedUnitsGetter(ExecState&, JSSVGAngle&, ThrowScope& throwScope);

EncodedJSValue jsSVGAngleValueInSpecifiedUnits(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAngle>::attribute<jsSVGAngleValueInSpecifiedUnitsGetter>(state, thisValue, "valueInSpecifiedUnits");
}

static inline JSValue jsSVGAngleValueInSpecifiedUnitsGetter(ExecState& state, JSSVGAngle& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.valueInSpecifiedUnits());
    return result;
}

static inline JSValue jsSVGAngleValueAsStringGetter(ExecState&, JSSVGAngle&, ThrowScope& throwScope);

EncodedJSValue jsSVGAngleValueAsString(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGAngle>::attribute<jsSVGAngleValueAsStringGetter>(state, thisValue, "valueAsString");
}

static inline JSValue jsSVGAngleValueAsStringGetter(ExecState& state, JSSVGAngle& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.valueAsString());
    return result;
}

EncodedJSValue jsSVGAngleConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGAnglePrototype* domObject = jsDynamicDowncast<JSSVGAnglePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGAngle::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGAngleConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGAnglePrototype* domObject = jsDynamicDowncast<JSSVGAnglePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGAngleValueFunction(ExecState&, JSSVGAngle&, JSValue, ThrowScope&);

bool setJSSVGAngleValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGAngle>::setAttribute<setJSSVGAngleValueFunction>(state, thisValue, encodedValue, "value");
}

static inline bool setJSSVGAngleValueFunction(ExecState& state, JSSVGAngle& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValueForBindings(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGAngleValueInSpecifiedUnitsFunction(ExecState&, JSSVGAngle&, JSValue, ThrowScope&);

bool setJSSVGAngleValueInSpecifiedUnits(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGAngle>::setAttribute<setJSSVGAngleValueInSpecifiedUnitsFunction>(state, thisValue, encodedValue, "valueInSpecifiedUnits");
}

static inline bool setJSSVGAngleValueInSpecifiedUnitsFunction(ExecState& state, JSSVGAngle& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValueInSpecifiedUnits(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSVGAngleValueAsStringFunction(ExecState&, JSSVGAngle&, JSValue, ThrowScope&);

bool setJSSVGAngleValueAsString(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGAngle>::setAttribute<setJSSVGAngleValueAsStringFunction>(state, thisValue, encodedValue, "valueAsString");
}

static inline bool setJSSVGAngleValueAsStringFunction(ExecState& state, JSSVGAngle& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setValueAsString(WTFMove(nativeValue)));
    return true;
}


JSValue JSSVGAngle::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGAngleConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSVGAnglePrototypeFunctionNewValueSpecifiedUnitsCaller(JSC::ExecState*, JSSVGAngle*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnglePrototypeFunctionNewValueSpecifiedUnits(ExecState* state)
{
    return BindingCaller<JSSVGAngle>::callOperation<jsSVGAnglePrototypeFunctionNewValueSpecifiedUnitsCaller>(state, "newValueSpecifiedUnits");
}

static inline JSC::EncodedJSValue jsSVGAnglePrototypeFunctionNewValueSpecifiedUnitsCaller(JSC::ExecState* state, JSSVGAngle* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto unitType = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto valueInSpecifiedUnits = convert<IDLUnrestrictedFloat>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.newValueSpecifiedUnits(WTFMove(unitType), WTFMove(valueInSpecifiedUnits)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSVGAnglePrototypeFunctionConvertToSpecifiedUnitsCaller(JSC::ExecState*, JSSVGAngle*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSVGAnglePrototypeFunctionConvertToSpecifiedUnits(ExecState* state)
{
    return BindingCaller<JSSVGAngle>::callOperation<jsSVGAnglePrototypeFunctionConvertToSpecifiedUnitsCaller>(state, "convertToSpecifiedUnits");
}

static inline JSC::EncodedJSValue jsSVGAnglePrototypeFunctionConvertToSpecifiedUnitsCaller(JSC::ExecState* state, JSSVGAngle* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto unitType = convert<IDLUnsignedShort>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.convertToSpecifiedUnits(WTFMove(unitType)));
    return JSValue::encode(jsUndefined());
}

bool JSSVGAngleOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSSVGAngleOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSVGAngle = static_cast<JSSVGAngle*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSVGAngle->wrapped(), jsSVGAngle);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SVGAngle@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore8SVGAngleE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SVGAngle>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SVGAngle@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore8SVGAngleE[2];
#if COMPILER(CLANG)
    // If this fails SVGAngle does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(SVGAngle), "SVGAngle is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SVGAngle has subclasses. If SVGAngle has subclasses that get passed
    // to toJS() we currently require SVGAngle you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<SVGAngle>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SVGAngle& impl)
{
    return wrap(state, globalObject, impl);
}

SVGAngle* JSSVGAngle::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSVGAngle*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
