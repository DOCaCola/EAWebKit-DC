/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSFontFace.h"

#include "Document.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMPromise.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, FontFace::LoadStatus enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("unloaded"),
        ASCIILiteral("loading"),
        ASCIILiteral("loaded"),
        ASCIILiteral("error"),
    };
    static_assert(static_cast<size_t>(FontFace::LoadStatus::Unloaded) == 0, "FontFace::LoadStatus::Unloaded is not 0 as expected");
    static_assert(static_cast<size_t>(FontFace::LoadStatus::Loading) == 1, "FontFace::LoadStatus::Loading is not 1 as expected");
    static_assert(static_cast<size_t>(FontFace::LoadStatus::Loaded) == 2, "FontFace::LoadStatus::Loaded is not 2 as expected");
    static_assert(static_cast<size_t>(FontFace::LoadStatus::Error) == 3, "FontFace::LoadStatus::Error is not 3 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<FontFace::LoadStatus> parseEnumeration<FontFace::LoadStatus>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "unloaded")
        return FontFace::LoadStatus::Unloaded;
    if (stringValue == "loading")
        return FontFace::LoadStatus::Loading;
    if (stringValue == "loaded")
        return FontFace::LoadStatus::Loaded;
    if (stringValue == "error")
        return FontFace::LoadStatus::Error;
    return std::nullopt;
}

template<> FontFace::LoadStatus convertEnumeration<FontFace::LoadStatus>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<FontFace::LoadStatus>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<FontFace::LoadStatus>()
{
    return "\"unloaded\", \"loading\", \"loaded\", \"error\"";
}

template<> FontFace::Descriptors convertDictionary<FontFace::Descriptors>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    FontFace::Descriptors result;
    JSValue featureSettingsValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "featureSettings"));
    if (!featureSettingsValue.isUndefined()) {
        result.featureSettings = convert<IDLDOMString>(state, featureSettingsValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.featureSettings = ASCIILiteral("normal");
    JSValue stretchValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "stretch"));
    if (!stretchValue.isUndefined()) {
        result.stretch = convert<IDLDOMString>(state, stretchValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.stretch = ASCIILiteral("normal");
    JSValue styleValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "style"));
    if (!styleValue.isUndefined()) {
        result.style = convert<IDLDOMString>(state, styleValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.style = ASCIILiteral("normal");
    JSValue unicodeRangeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "unicodeRange"));
    if (!unicodeRangeValue.isUndefined()) {
        result.unicodeRange = convert<IDLDOMString>(state, unicodeRangeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.unicodeRange = ASCIILiteral("U+0-10FFFF");
    JSValue variantValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "variant"));
    if (!variantValue.isUndefined()) {
        result.variant = convert<IDLDOMString>(state, variantValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.variant = ASCIILiteral("normal");
    JSValue weightValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "weight"));
    if (!weightValue.isUndefined()) {
        result.weight = convert<IDLDOMString>(state, weightValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.weight = ASCIILiteral("normal");
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsFontFacePrototypeFunctionLoad(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsFontFaceFamily(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceFamily(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceStyle(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceStyle(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceWeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceWeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceStretch(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceStretch(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceUnicodeRange(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceUnicodeRange(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceVariant(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceVariant(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceFeatureSettings(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceFeatureSettings(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsFontFaceStatus(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFontFaceLoaded(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsFontFaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSFontFaceConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSFontFacePrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSFontFacePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSFontFacePrototype* ptr = new (NotNull, JSC::allocateCell<JSFontFacePrototype>(vm.heap)) JSFontFacePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSFontFacePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSFontFaceConstructor = JSDOMConstructor<JSFontFace>;

template<> EncodedJSValue JSC_HOST_CALL JSFontFaceConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSFontFaceConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto family = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto source = convert<IDLAny>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto descriptors = convert<IDLDictionary<FontFace::Descriptors>>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    ScriptExecutionContext* context = castedThis->scriptExecutionContext();
    if (UNLIKELY(!context))
        return throwConstructorScriptExecutionContextUnavailableError(*state, throwScope, "FontFace");
    ASSERT(context->isDocument());
    auto& document = downcast<Document>(*context);
    auto object = FontFace::create(*state, document, WTFMove(family), WTFMove(source), WTFMove(descriptors));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJSNewlyCreated<IDLInterface<FontFace>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSFontFaceConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSFontFaceConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSFontFace::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("FontFace"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(2), ReadOnly | DontEnum);
}

template<> const ClassInfo JSFontFaceConstructor::s_info = { "FontFace", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFontFaceConstructor) };

/* Hash table for prototype */

static const HashTableValue JSFontFacePrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceConstructor) } },
    { "family", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceFamily), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceFamily) } },
    { "style", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceStyle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceStyle) } },
    { "weight", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceWeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceWeight) } },
    { "stretch", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceStretch), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceStretch) } },
    { "unicodeRange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceUnicodeRange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceUnicodeRange) } },
    { "variant", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceVariant), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceVariant) } },
    { "featureSettings", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceFeatureSettings), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSFontFaceFeatureSettings) } },
    { "status", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceStatus), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "loaded", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsFontFaceLoaded), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "load", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsFontFacePrototypeFunctionLoad), (intptr_t) (0) } },
};

const ClassInfo JSFontFacePrototype::s_info = { "FontFacePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFontFacePrototype) };

void JSFontFacePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSFontFacePrototypeTableValues, *this);
}

const ClassInfo JSFontFace::s_info = { "FontFace", &Base::s_info, 0, CREATE_METHOD_TABLE(JSFontFace) };

JSFontFace::JSFontFace(Structure* structure, JSDOMGlobalObject& globalObject, Ref<FontFace>&& impl)
    : JSDOMWrapper<FontFace>(structure, globalObject, WTFMove(impl))
{
}

void JSFontFace::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSFontFace::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSFontFacePrototype::create(vm, globalObject, JSFontFacePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSFontFace::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSFontFace>(vm, globalObject);
}

void JSFontFace::destroy(JSC::JSCell* cell)
{
    JSFontFace* thisObject = static_cast<JSFontFace*>(cell);
    thisObject->JSFontFace::~JSFontFace();
}

template<> inline JSFontFace* BindingCaller<JSFontFace>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSFontFace*>(JSValue::decode(thisValue));
}

template<> inline JSFontFace* BindingCaller<JSFontFace>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSFontFace*>(state.thisValue());
}

static inline JSValue jsFontFaceFamilyGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceFamily(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceFamilyGetter>(state, thisValue, "family");
}

static inline JSValue jsFontFaceFamilyGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.family());
    return result;
}

static inline JSValue jsFontFaceStyleGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceStyle(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceStyleGetter>(state, thisValue, "style");
}

static inline JSValue jsFontFaceStyleGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.style());
    return result;
}

static inline JSValue jsFontFaceWeightGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceWeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceWeightGetter>(state, thisValue, "weight");
}

static inline JSValue jsFontFaceWeightGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.weight());
    return result;
}

static inline JSValue jsFontFaceStretchGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceStretch(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceStretchGetter>(state, thisValue, "stretch");
}

static inline JSValue jsFontFaceStretchGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.stretch());
    return result;
}

static inline JSValue jsFontFaceUnicodeRangeGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceUnicodeRange(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceUnicodeRangeGetter>(state, thisValue, "unicodeRange");
}

static inline JSValue jsFontFaceUnicodeRangeGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.unicodeRange());
    return result;
}

static inline JSValue jsFontFaceVariantGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceVariant(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceVariantGetter>(state, thisValue, "variant");
}

static inline JSValue jsFontFaceVariantGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.variant());
    return result;
}

static inline JSValue jsFontFaceFeatureSettingsGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceFeatureSettings(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceFeatureSettingsGetter>(state, thisValue, "featureSettings");
}

static inline JSValue jsFontFaceFeatureSettingsGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.featureSettings());
    return result;
}

static inline JSValue jsFontFaceStatusGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceStatus(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceStatusGetter>(state, thisValue, "status");
}

static inline JSValue jsFontFaceStatusGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<FontFace::LoadStatus>>(state, impl.status());
    return result;
}

static inline JSValue jsFontFaceLoadedGetter(ExecState&, JSFontFace&, ThrowScope& throwScope);

EncodedJSValue jsFontFaceLoaded(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSFontFace>::attribute<jsFontFaceLoadedGetter, CastedThisErrorBehavior::RejectPromise>(state, thisValue, "loaded");
}

static inline JSValue jsFontFaceLoadedGetter(ExecState& state, JSFontFace& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return thisObject.loaded(state);
}

EncodedJSValue jsFontFaceConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSFontFacePrototype* domObject = jsDynamicDowncast<JSFontFacePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSFontFace::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSFontFaceConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSFontFacePrototype* domObject = jsDynamicDowncast<JSFontFacePrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSFontFaceFamilyFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceFamily(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceFamilyFunction>(state, thisValue, encodedValue, "family");
}

static inline bool setJSFontFaceFamilyFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setFamily(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceStyleFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceStyle(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceStyleFunction>(state, thisValue, encodedValue, "style");
}

static inline bool setJSFontFaceStyleFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setStyle(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceWeightFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceWeight(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceWeightFunction>(state, thisValue, encodedValue, "weight");
}

static inline bool setJSFontFaceWeightFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setWeight(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceStretchFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceStretch(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceStretchFunction>(state, thisValue, encodedValue, "stretch");
}

static inline bool setJSFontFaceStretchFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setStretch(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceUnicodeRangeFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceUnicodeRange(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceUnicodeRangeFunction>(state, thisValue, encodedValue, "unicodeRange");
}

static inline bool setJSFontFaceUnicodeRangeFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setUnicodeRange(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceVariantFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceVariant(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceVariantFunction>(state, thisValue, encodedValue, "variant");
}

static inline bool setJSFontFaceVariantFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setVariant(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSFontFaceFeatureSettingsFunction(ExecState&, JSFontFace&, JSValue, ThrowScope&);

bool setJSFontFaceFeatureSettings(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSFontFace>::setAttribute<setJSFontFaceFeatureSettingsFunction>(state, thisValue, encodedValue, "featureSettings");
}

static inline bool setJSFontFaceFeatureSettingsFunction(ExecState& state, JSFontFace& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setFeatureSettings(WTFMove(nativeValue)));
    return true;
}


JSValue JSFontFace::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSFontFaceConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsFontFacePrototypeFunctionLoadCaller(JSC::ExecState*, JSFontFace*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsFontFacePrototypeFunctionLoad(ExecState* state)
{
    return BindingCaller<JSFontFace>::callOperation<jsFontFacePrototypeFunctionLoadCaller, CastedThisErrorBehavior::RejectPromise>(state, "load");
}

static inline JSC::EncodedJSValue jsFontFacePrototypeFunctionLoadCaller(JSC::ExecState* state, JSFontFace* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    return JSValue::encode(castedThis->load(*state));
}

void JSFontFace::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSFontFace*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    visitor.append(thisObject->m_loaded);
}

bool JSFontFaceOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSFontFaceOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsFontFace = static_cast<JSFontFace*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsFontFace->wrapped(), jsFontFace);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7FontFace@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore8FontFaceE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<FontFace>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7FontFace@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore8FontFaceE[2];
#if COMPILER(CLANG)
    // If this fails FontFace does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(FontFace), "FontFace is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // FontFace has subclasses. If FontFace has subclasses that get passed
    // to toJS() we currently require FontFace you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<FontFace>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, FontFace& impl)
{
    return wrap(state, globalObject, impl);
}

FontFace* JSFontFace::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSFontFace*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
