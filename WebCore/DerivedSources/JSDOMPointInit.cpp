/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMPointInit.h"


using namespace JSC;

namespace WebCore {

template<> DOMPointInit convertDictionary<DOMPointInit>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    DOMPointInit result;
    JSValue wValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "w"));
    if (!wValue.isUndefined()) {
        result.w = convert<IDLUnrestrictedDouble>(state, wValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.w = 1;
    JSValue xValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "x"));
    if (!xValue.isUndefined()) {
        result.x = convert<IDLUnrestrictedDouble>(state, xValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.x = 0;
    JSValue yValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "y"));
    if (!yValue.isUndefined()) {
        result.y = convert<IDLUnrestrictedDouble>(state, yValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.y = 0;
    JSValue zValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "z"));
    if (!zValue.isUndefined()) {
        result.z = convert<IDLUnrestrictedDouble>(state, zValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.z = 0;
    return result;
}

} // namespace WebCore
