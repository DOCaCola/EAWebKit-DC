/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSHTMLTableElement.h"

#include "CustomElementReactionQueue.h"
#include "HTMLNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSHTMLCollection.h"
#include "JSHTMLTableCaptionElement.h"
#include "JSHTMLTableSectionElement.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTHead(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteTHead(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTFoot(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteTFoot(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTBody(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateCaption(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteCaption(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionInsertRow(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteRow(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsHTMLTableElementCaption(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementCaption(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementTHead(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementTHead(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementTFoot(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementTFoot(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementRows(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTableElementTBodies(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsHTMLTableElementAlign(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementAlign(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementBgColor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementBorder(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementBorder(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementCellPadding(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementCellPadding(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementCellSpacing(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementCellSpacing(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementFrame(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementFrame(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementRules(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementRules(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementSummary(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementSummary(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsHTMLTableElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSHTMLTableElementConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSHTMLTableElementPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSHTMLTableElementPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSHTMLTableElementPrototype* ptr = new (NotNull, JSC::allocateCell<JSHTMLTableElementPrototype>(vm.heap)) JSHTMLTableElementPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSHTMLTableElementPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSHTMLTableElementConstructor = JSDOMConstructorNotConstructable<JSHTMLTableElement>;

template<> JSValue JSHTMLTableElementConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSHTMLElement::getConstructor(vm, &globalObject);
}

template<> void JSHTMLTableElementConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSHTMLTableElement::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("HTMLTableElement"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSHTMLTableElementConstructor::s_info = { "HTMLTableElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTableElementConstructor) };

/* Hash table for prototype */

static const HashTableValue JSHTMLTableElementPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementConstructor) } },
    { "caption", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementCaption), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementCaption) } },
    { "tHead", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementTHead), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementTHead) } },
    { "tFoot", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementTFoot), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementTFoot) } },
    { "rows", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementRows), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "tBodies", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementTBodies), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "align", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementAlign), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementAlign) } },
    { "bgColor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementBgColor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementBgColor) } },
    { "border", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementBorder), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementBorder) } },
    { "cellPadding", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementCellPadding), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementCellPadding) } },
    { "cellSpacing", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementCellSpacing), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementCellSpacing) } },
    { "frame", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementFrame), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementFrame) } },
    { "rules", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementRules), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementRules) } },
    { "summary", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementSummary), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementSummary) } },
    { "width", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsHTMLTableElementWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSHTMLTableElementWidth) } },
    { "createTHead", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionCreateTHead), (intptr_t) (0) } },
    { "deleteTHead", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionDeleteTHead), (intptr_t) (0) } },
    { "createTFoot", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionCreateTFoot), (intptr_t) (0) } },
    { "deleteTFoot", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionDeleteTFoot), (intptr_t) (0) } },
    { "createTBody", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionCreateTBody), (intptr_t) (0) } },
    { "createCaption", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionCreateCaption), (intptr_t) (0) } },
    { "deleteCaption", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionDeleteCaption), (intptr_t) (0) } },
    { "insertRow", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionInsertRow), (intptr_t) (0) } },
    { "deleteRow", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsHTMLTableElementPrototypeFunctionDeleteRow), (intptr_t) (1) } },
};

const ClassInfo JSHTMLTableElementPrototype::s_info = { "HTMLTableElementPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTableElementPrototype) };

void JSHTMLTableElementPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSHTMLTableElementPrototypeTableValues, *this);
}

const ClassInfo JSHTMLTableElement::s_info = { "HTMLTableElement", &Base::s_info, 0, CREATE_METHOD_TABLE(JSHTMLTableElement) };

JSHTMLTableElement::JSHTMLTableElement(Structure* structure, JSDOMGlobalObject& globalObject, Ref<HTMLTableElement>&& impl)
    : JSHTMLElement(structure, globalObject, WTFMove(impl))
{
}

void JSHTMLTableElement::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSHTMLTableElement::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSHTMLTableElementPrototype::create(vm, globalObject, JSHTMLTableElementPrototype::createStructure(vm, globalObject, JSHTMLElement::prototype(vm, globalObject)));
}

JSObject* JSHTMLTableElement::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSHTMLTableElement>(vm, globalObject);
}

template<> inline JSHTMLTableElement* BindingCaller<JSHTMLTableElement>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSHTMLTableElement*>(JSValue::decode(thisValue));
}

template<> inline JSHTMLTableElement* BindingCaller<JSHTMLTableElement>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSHTMLTableElement*>(state.thisValue());
}

static inline JSValue jsHTMLTableElementCaptionGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementCaption(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementCaptionGetter>(state, thisValue, "caption");
}

static inline JSValue jsHTMLTableElementCaptionGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<HTMLTableCaptionElement>>>(state, *thisObject.globalObject(), impl.caption());
    return result;
}

static inline JSValue jsHTMLTableElementTHeadGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementTHead(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementTHeadGetter>(state, thisValue, "tHead");
}

static inline JSValue jsHTMLTableElementTHeadGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<HTMLTableSectionElement>>>(state, *thisObject.globalObject(), impl.tHead());
    return result;
}

static inline JSValue jsHTMLTableElementTFootGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementTFoot(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementTFootGetter>(state, thisValue, "tFoot");
}

static inline JSValue jsHTMLTableElementTFootGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLNullable<IDLInterface<HTMLTableSectionElement>>>(state, *thisObject.globalObject(), impl.tFoot());
    return result;
}

static inline JSValue jsHTMLTableElementRowsGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementRows(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementRowsGetter>(state, thisValue, "rows");
}

static inline JSValue jsHTMLTableElementRowsGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLCollection>>(state, *thisObject.globalObject(), impl.rows());
    return result;
}

static inline JSValue jsHTMLTableElementTBodiesGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementTBodies(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementTBodiesGetter>(state, thisValue, "tBodies");
}

static inline JSValue jsHTMLTableElementTBodiesGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLCollection>>(state, *thisObject.globalObject(), impl.tBodies());
    return result;
}

static inline JSValue jsHTMLTableElementAlignGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementAlign(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementAlignGetter>(state, thisValue, "align");
}

static inline JSValue jsHTMLTableElementAlignGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::alignAttr));
    return result;
}

static inline JSValue jsHTMLTableElementBgColorGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementBgColor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementBgColorGetter>(state, thisValue, "bgColor");
}

static inline JSValue jsHTMLTableElementBgColorGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr));
    return result;
}

static inline JSValue jsHTMLTableElementBorderGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementBorder(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementBorderGetter>(state, thisValue, "border");
}

static inline JSValue jsHTMLTableElementBorderGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::borderAttr));
    return result;
}

static inline JSValue jsHTMLTableElementCellPaddingGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementCellPadding(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementCellPaddingGetter>(state, thisValue, "cellPadding");
}

static inline JSValue jsHTMLTableElementCellPaddingGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::cellpaddingAttr));
    return result;
}

static inline JSValue jsHTMLTableElementCellSpacingGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementCellSpacing(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementCellSpacingGetter>(state, thisValue, "cellSpacing");
}

static inline JSValue jsHTMLTableElementCellSpacingGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::cellspacingAttr));
    return result;
}

static inline JSValue jsHTMLTableElementFrameGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementFrame(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementFrameGetter>(state, thisValue, "frame");
}

static inline JSValue jsHTMLTableElementFrameGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::frameAttr));
    return result;
}

static inline JSValue jsHTMLTableElementRulesGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementRules(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementRulesGetter>(state, thisValue, "rules");
}

static inline JSValue jsHTMLTableElementRulesGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::rulesAttr));
    return result;
}

static inline JSValue jsHTMLTableElementSummaryGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementSummary(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementSummaryGetter>(state, thisValue, "summary");
}

static inline JSValue jsHTMLTableElementSummaryGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::summaryAttr));
    return result;
}

static inline JSValue jsHTMLTableElementWidthGetter(ExecState&, JSHTMLTableElement&, ThrowScope& throwScope);

EncodedJSValue jsHTMLTableElementWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSHTMLTableElement>::attribute<jsHTMLTableElementWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsHTMLTableElementWidthGetter(ExecState& state, JSHTMLTableElement& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.attributeWithoutSynchronization(WebCore::HTMLNames::widthAttr));
    return result;
}

EncodedJSValue jsHTMLTableElementConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSHTMLTableElementPrototype* domObject = jsDynamicDowncast<JSHTMLTableElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSHTMLTableElement::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSHTMLTableElementConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSHTMLTableElementPrototype* domObject = jsDynamicDowncast<JSHTMLTableElementPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSHTMLTableElementCaptionFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementCaption(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementCaptionFunction>(state, thisValue, encodedValue, "caption");
}

static inline bool setJSHTMLTableElementCaptionFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLInterface<HTMLTableCaptionElement>>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "HTMLTableElement", "caption", "HTMLTableCaptionElement"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setCaption(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLTableElementTHeadFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementTHead(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementTHeadFunction>(state, thisValue, encodedValue, "tHead");
}

static inline bool setJSHTMLTableElementTHeadFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLInterface<HTMLTableSectionElement>>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "HTMLTableElement", "tHead", "HTMLTableSectionElement"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setTHead(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLTableElementTFootFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementTFoot(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementTFootFunction>(state, thisValue, encodedValue, "tFoot");
}

static inline bool setJSHTMLTableElementTFootFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    CustomElementReactionStack customElementReactionStack;
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLNullable<IDLInterface<HTMLTableSectionElement>>>(state, value, [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwAttributeTypeError(state, scope, "HTMLTableElement", "tFoot", "HTMLTableSectionElement"); });
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setTFoot(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSHTMLTableElementAlignFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementAlign(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementAlignFunction>(state, thisValue, encodedValue, "align");
}

static inline bool setJSHTMLTableElementAlignFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::alignAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementBgColorFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementBgColor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementBgColorFunction>(state, thisValue, encodedValue, "bgColor");
}

static inline bool setJSHTMLTableElementBgColorFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::bgcolorAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementBorderFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementBorder(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementBorderFunction>(state, thisValue, encodedValue, "border");
}

static inline bool setJSHTMLTableElementBorderFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::borderAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementCellPaddingFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementCellPadding(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementCellPaddingFunction>(state, thisValue, encodedValue, "cellPadding");
}

static inline bool setJSHTMLTableElementCellPaddingFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::cellpaddingAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementCellSpacingFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementCellSpacing(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementCellSpacingFunction>(state, thisValue, encodedValue, "cellSpacing");
}

static inline bool setJSHTMLTableElementCellSpacingFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::TreatNullAsEmptyString);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::cellspacingAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementFrameFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementFrame(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementFrameFunction>(state, thisValue, encodedValue, "frame");
}

static inline bool setJSHTMLTableElementFrameFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::frameAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementRulesFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementRules(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementRulesFunction>(state, thisValue, encodedValue, "rules");
}

static inline bool setJSHTMLTableElementRulesFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::rulesAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementSummaryFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementSummary(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementSummaryFunction>(state, thisValue, encodedValue, "summary");
}

static inline bool setJSHTMLTableElementSummaryFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::summaryAttr, WTFMove(nativeValue));
    return true;
}


static inline bool setJSHTMLTableElementWidthFunction(ExecState&, JSHTMLTableElement&, JSValue, ThrowScope&);

bool setJSHTMLTableElementWidth(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSHTMLTableElement>::setAttribute<setJSHTMLTableElementWidthFunction>(state, thisValue, encodedValue, "width");
}

static inline bool setJSHTMLTableElementWidthFunction(ExecState& state, JSHTMLTableElement& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDOMString>(state, value, StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setAttributeWithoutSynchronization(WebCore::HTMLNames::widthAttr, WTFMove(nativeValue));
    return true;
}


JSValue JSHTMLTableElement::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSHTMLTableElementConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTHeadCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTHead(ExecState* state)
{
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionCreateTHeadCaller>(state, "createTHead");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTHeadCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<HTMLElement>>(*state, *castedThis->globalObject(), impl.createTHead()));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteTHeadCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteTHead(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionDeleteTHeadCaller>(state, "deleteTHead");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteTHeadCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.deleteTHead();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTFootCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTFoot(ExecState* state)
{
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionCreateTFootCaller>(state, "createTFoot");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTFootCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<HTMLElement>>(*state, *castedThis->globalObject(), impl.createTFoot()));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteTFootCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteTFoot(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionDeleteTFootCaller>(state, "deleteTFoot");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteTFootCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.deleteTFoot();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTBodyCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateTBody(ExecState* state)
{
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionCreateTBodyCaller>(state, "createTBody");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateTBodyCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<HTMLElement>>(*state, *castedThis->globalObject(), impl.createTBody()));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateCaptionCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionCreateCaption(ExecState* state)
{
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionCreateCaptionCaller>(state, "createCaption");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionCreateCaptionCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<HTMLElement>>(*state, *castedThis->globalObject(), impl.createCaption()));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteCaptionCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteCaption(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionDeleteCaptionCaller>(state, "deleteCaption");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteCaptionCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.deleteCaption();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionInsertRowCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionInsertRow(ExecState* state)
{
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionInsertRowCaller>(state, "insertRow");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionInsertRowCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto index = state->argument(0).isUndefined() ? -1 : convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<HTMLElement>>(*state, *castedThis->globalObject(), throwScope, impl.insertRow(WTFMove(index))));
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteRowCaller(JSC::ExecState*, JSHTMLTableElement*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsHTMLTableElementPrototypeFunctionDeleteRow(ExecState* state)
{
    CustomElementReactionStack customElementReactionStack;
    return BindingCaller<JSHTMLTableElement>::callOperation<jsHTMLTableElementPrototypeFunctionDeleteRowCaller>(state, "deleteRow");
}

static inline JSC::EncodedJSValue jsHTMLTableElementPrototypeFunctionDeleteRowCaller(JSC::ExecState* state, JSHTMLTableElement* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto index = convert<IDLLong>(*state, state->uncheckedArgument(0), IntegerConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.deleteRow(WTFMove(index)));
    return JSValue::encode(jsUndefined());
}

void JSHTMLTableElement::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSHTMLTableElement*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}


}
