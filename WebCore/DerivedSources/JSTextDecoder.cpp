/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSTextDecoder.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> TextDecoder::Options convertDictionary<TextDecoder::Options>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    TextDecoder::Options result;
    JSValue fatalValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "fatal"));
    if (!fatalValue.isUndefined()) {
        result.fatal = convert<IDLBoolean>(state, fatalValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.fatal = false;
    JSValue ignoreBOMValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "ignoreBOM"));
    if (!ignoreBOMValue.isUndefined()) {
        result.ignoreBOM = convert<IDLBoolean>(state, ignoreBOMValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.ignoreBOM = false;
    return result;
}

template<> TextDecoder::DecodeOptions convertDictionary<TextDecoder::DecodeOptions>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    TextDecoder::DecodeOptions result;
    JSValue streamValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "stream"));
    if (!streamValue.isUndefined()) {
        result.stream = convert<IDLBoolean>(state, streamValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    } else
        result.stream = false;
    return result;
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsTextDecoderPrototypeFunctionDecode(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsTextDecoderEncoding(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTextDecoderFatal(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTextDecoderIgnoreBOM(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsTextDecoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSTextDecoderConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSTextDecoderPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSTextDecoderPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSTextDecoderPrototype* ptr = new (NotNull, JSC::allocateCell<JSTextDecoderPrototype>(vm.heap)) JSTextDecoderPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSTextDecoderPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSTextDecoderConstructor = JSDOMConstructor<JSTextDecoder>;

template<> EncodedJSValue JSC_HOST_CALL JSTextDecoderConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSTextDecoderConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    auto label = state->argument(0).isUndefined() ? ASCIILiteral("utf-8") : convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<TextDecoder::Options>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = TextDecoder::create(WTFMove(label), WTFMove(options));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<TextDecoder>>(*state, *castedThis->globalObject(), throwScope, WTFMove(object)));
}

template<> JSValue JSTextDecoderConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSTextDecoderConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSTextDecoder::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("TextDecoder"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSTextDecoderConstructor::s_info = { "TextDecoder", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextDecoderConstructor) };

/* Hash table for prototype */

static const HashTableValue JSTextDecoderPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextDecoderConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSTextDecoderConstructor) } },
    { "encoding", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextDecoderEncoding), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "fatal", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextDecoderFatal), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "ignoreBOM", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsTextDecoderIgnoreBOM), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "decode", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsTextDecoderPrototypeFunctionDecode), (intptr_t) (0) } },
};

const ClassInfo JSTextDecoderPrototype::s_info = { "TextDecoderPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextDecoderPrototype) };

void JSTextDecoderPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSTextDecoderPrototypeTableValues, *this);
}

const ClassInfo JSTextDecoder::s_info = { "TextDecoder", &Base::s_info, 0, CREATE_METHOD_TABLE(JSTextDecoder) };

JSTextDecoder::JSTextDecoder(Structure* structure, JSDOMGlobalObject& globalObject, Ref<TextDecoder>&& impl)
    : JSDOMWrapper<TextDecoder>(structure, globalObject, WTFMove(impl))
{
}

void JSTextDecoder::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSTextDecoder::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSTextDecoderPrototype::create(vm, globalObject, JSTextDecoderPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSTextDecoder::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSTextDecoder>(vm, globalObject);
}

void JSTextDecoder::destroy(JSC::JSCell* cell)
{
    JSTextDecoder* thisObject = static_cast<JSTextDecoder*>(cell);
    thisObject->JSTextDecoder::~JSTextDecoder();
}

template<> inline JSTextDecoder* BindingCaller<JSTextDecoder>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSTextDecoder*>(JSValue::decode(thisValue));
}

template<> inline JSTextDecoder* BindingCaller<JSTextDecoder>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSTextDecoder*>(state.thisValue());
}

static inline JSValue jsTextDecoderEncodingGetter(ExecState&, JSTextDecoder&, ThrowScope& throwScope);

EncodedJSValue jsTextDecoderEncoding(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextDecoder>::attribute<jsTextDecoderEncodingGetter>(state, thisValue, "encoding");
}

static inline JSValue jsTextDecoderEncodingGetter(ExecState& state, JSTextDecoder& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.encoding());
    return result;
}

static inline JSValue jsTextDecoderFatalGetter(ExecState&, JSTextDecoder&, ThrowScope& throwScope);

EncodedJSValue jsTextDecoderFatal(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextDecoder>::attribute<jsTextDecoderFatalGetter>(state, thisValue, "fatal");
}

static inline JSValue jsTextDecoderFatalGetter(ExecState& state, JSTextDecoder& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.fatal());
    return result;
}

static inline JSValue jsTextDecoderIgnoreBOMGetter(ExecState&, JSTextDecoder&, ThrowScope& throwScope);

EncodedJSValue jsTextDecoderIgnoreBOM(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSTextDecoder>::attribute<jsTextDecoderIgnoreBOMGetter>(state, thisValue, "ignoreBOM");
}

static inline JSValue jsTextDecoderIgnoreBOMGetter(ExecState& state, JSTextDecoder& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.ignoreBOM());
    return result;
}

EncodedJSValue jsTextDecoderConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSTextDecoderPrototype* domObject = jsDynamicDowncast<JSTextDecoderPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSTextDecoder::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSTextDecoderConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSTextDecoderPrototype* domObject = jsDynamicDowncast<JSTextDecoderPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSTextDecoder::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSTextDecoderConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsTextDecoderPrototypeFunctionDecodeCaller(JSC::ExecState*, JSTextDecoder*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsTextDecoderPrototypeFunctionDecode(ExecState* state)
{
    return BindingCaller<JSTextDecoder>::callOperation<jsTextDecoderPrototypeFunctionDecodeCaller>(state, "decode");
}

static inline JSC::EncodedJSValue jsTextDecoderPrototypeFunctionDecodeCaller(JSC::ExecState* state, JSTextDecoder* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto input = state->argument(0).isUndefined() ? std::nullopt : convert<IDLNullable<IDLBufferSource>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto options = convert<IDLDictionary<TextDecoder::DecodeOptions>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLUSVString>(*state, throwScope, impl.decode(WTFMove(input), WTFMove(options))));
}

bool JSTextDecoderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSTextDecoderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsTextDecoder = static_cast<JSTextDecoder*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsTextDecoder->wrapped(), jsTextDecoder);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<TextDecoder>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to TextDecoder.
    static_assert(!__is_polymorphic(TextDecoder), "TextDecoder is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<TextDecoder>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, TextDecoder& impl)
{
    return wrap(state, globalObject, impl);
}

TextDecoder* JSTextDecoder::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSTextDecoder*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
