/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_CONTROLS_SCRIPT)

#include "JSMediaControlsHost.h"

#include "JSAudioTrack.h"
#include "JSAudioTrackList.h"
#include "JSDOMBinding.h"
#include "JSHTMLElement.h"
#include "JSTextTrack.h"
#include "JSTextTrackList.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>
#include <wtf/Variant.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, MediaControlsHost::DeviceType enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("none"),
        ASCIILiteral("airplay"),
        ASCIILiteral("tvout"),
    };
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::None) == 0, "MediaControlsHost::DeviceType::None is not 0 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::Airplay) == 1, "MediaControlsHost::DeviceType::Airplay is not 1 as expected");
    static_assert(static_cast<size_t>(MediaControlsHost::DeviceType::Tvout) == 2, "MediaControlsHost::DeviceType::Tvout is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<MediaControlsHost::DeviceType> parseEnumeration<MediaControlsHost::DeviceType>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "none")
        return MediaControlsHost::DeviceType::None;
    if (stringValue == "airplay")
        return MediaControlsHost::DeviceType::Airplay;
    if (stringValue == "tvout")
        return MediaControlsHost::DeviceType::Tvout;
    return std::nullopt;
}

template<> MediaControlsHost::DeviceType convertEnumeration<MediaControlsHost::DeviceType>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<MediaControlsHost::DeviceType>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<MediaControlsHost::DeviceType>()
{
    return "\"none\", \"airplay\", \"tvout\"";
}

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionDisplayNameForTrack(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSetSelectedTextTrack(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInline(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionEnteredFullscreen(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionExitedFullscreen(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionGenerateUUID(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatform(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMediaControlsHostCaptionMenuOffItem(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostCaptionMenuAutomaticItem(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostCaptionDisplayMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostTextTrackContainer(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostAllowsInlineMediaPlayback(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostSupportsFullscreen(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostIsVideoLayerInline(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostUserGestureRequired(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostIsInMediaDocument(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostExternalDeviceDisplayName(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostExternalDeviceType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaControlsHostControlsDependOnPageScaleFactor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControlsHostControlsDependOnPageScaleFactor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaControlsHostShadowRootCSSText(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaControlsHostConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMediaControlsHostPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaControlsHostPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaControlsHostPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaControlsHostPrototype>(vm.heap)) JSMediaControlsHostPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaControlsHostPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMediaControlsHostPrototypeTableValues[] =
{
    { "captionMenuOffItem", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostCaptionMenuOffItem), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "captionMenuAutomaticItem", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostCaptionMenuAutomaticItem), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "captionDisplayMode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostCaptionDisplayMode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "textTrackContainer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostTextTrackContainer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "allowsInlineMediaPlayback", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostAllowsInlineMediaPlayback), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "supportsFullscreen", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostSupportsFullscreen), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "isVideoLayerInline", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostIsVideoLayerInline), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "userGestureRequired", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostUserGestureRequired), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "isInMediaDocument", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostIsInMediaDocument), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "externalDeviceDisplayName", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostExternalDeviceDisplayName), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "externalDeviceType", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostExternalDeviceType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "controlsDependOnPageScaleFactor", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostControlsDependOnPageScaleFactor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaControlsHostControlsDependOnPageScaleFactor) } },
    { "shadowRootCSSText", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaControlsHostShadowRootCSSText), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "sortedTrackListForMenu", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu), (intptr_t) (1) } },
    { "displayNameForTrack", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionDisplayNameForTrack), (intptr_t) (1) } },
    { "setSelectedTextTrack", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionSetSelectedTextTrack), (intptr_t) (1) } },
    { "setPreparedToReturnVideoLayerToInline", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInline), (intptr_t) (1) } },
    { "updateTextTrackContainer", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainer), (intptr_t) (0) } },
    { "enteredFullscreen", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionEnteredFullscreen), (intptr_t) (0) } },
    { "exitedFullscreen", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionExitedFullscreen), (intptr_t) (0) } },
    { "generateUUID", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionGenerateUUID), (intptr_t) (0) } },
    { "base64StringForIconAndPlatform", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatform), (intptr_t) (2) } },
};

const ClassInfo JSMediaControlsHostPrototype::s_info = { "MediaControlsHostPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaControlsHostPrototype) };

void JSMediaControlsHostPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaControlsHostPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().modernMediaControlsEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("base64StringForIconAndPlatform"), strlen("base64StringForIconAndPlatform"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
    if (!RuntimeEnabledFeatures::sharedFeatures().modernMediaControlsEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("shadowRootCSSText"), strlen("shadowRootCSSText"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSMediaControlsHost::s_info = { "MediaControlsHost", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaControlsHost) };

JSMediaControlsHost::JSMediaControlsHost(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaControlsHost>&& impl)
    : JSDOMWrapper<MediaControlsHost>(structure, globalObject, WTFMove(impl))
{
}

void JSMediaControlsHost::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMediaControlsHost::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaControlsHostPrototype::create(vm, globalObject, JSMediaControlsHostPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaControlsHost::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaControlsHost>(vm, globalObject);
}

void JSMediaControlsHost::destroy(JSC::JSCell* cell)
{
    JSMediaControlsHost* thisObject = static_cast<JSMediaControlsHost*>(cell);
    thisObject->JSMediaControlsHost::~JSMediaControlsHost();
}

template<> inline JSMediaControlsHost* BindingCaller<JSMediaControlsHost>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMediaControlsHost*>(JSValue::decode(thisValue));
}

template<> inline JSMediaControlsHost* BindingCaller<JSMediaControlsHost>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMediaControlsHost*>(state.thisValue());
}

static inline JSValue jsMediaControlsHostCaptionMenuOffItemGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostCaptionMenuOffItem(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostCaptionMenuOffItemGetter>(state, thisValue, "captionMenuOffItem");
}

static inline JSValue jsMediaControlsHostCaptionMenuOffItemGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TextTrack>>(state, *thisObject.globalObject(), impl.captionMenuOffItem());
    return result;
}

static inline JSValue jsMediaControlsHostCaptionMenuAutomaticItemGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostCaptionMenuAutomaticItem(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostCaptionMenuAutomaticItemGetter>(state, thisValue, "captionMenuAutomaticItem");
}

static inline JSValue jsMediaControlsHostCaptionMenuAutomaticItemGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TextTrack>>(state, *thisObject.globalObject(), impl.captionMenuAutomaticItem());
    return result;
}

static inline JSValue jsMediaControlsHostCaptionDisplayModeGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostCaptionDisplayMode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostCaptionDisplayModeGetter>(state, thisValue, "captionDisplayMode");
}

static inline JSValue jsMediaControlsHostCaptionDisplayModeGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.captionDisplayMode());
    return result;
}

static inline JSValue jsMediaControlsHostTextTrackContainerGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostTextTrackContainer(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostTextTrackContainerGetter>(state, thisValue, "textTrackContainer");
}

static inline JSValue jsMediaControlsHostTextTrackContainerGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<HTMLElement>>(state, *thisObject.globalObject(), impl.textTrackContainer());
    return result;
}

static inline JSValue jsMediaControlsHostAllowsInlineMediaPlaybackGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostAllowsInlineMediaPlayback(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostAllowsInlineMediaPlaybackGetter>(state, thisValue, "allowsInlineMediaPlayback");
}

static inline JSValue jsMediaControlsHostAllowsInlineMediaPlaybackGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.allowsInlineMediaPlayback());
    return result;
}

static inline JSValue jsMediaControlsHostSupportsFullscreenGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostSupportsFullscreen(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostSupportsFullscreenGetter>(state, thisValue, "supportsFullscreen");
}

static inline JSValue jsMediaControlsHostSupportsFullscreenGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.supportsFullscreen());
    return result;
}

static inline JSValue jsMediaControlsHostIsVideoLayerInlineGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostIsVideoLayerInline(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostIsVideoLayerInlineGetter>(state, thisValue, "isVideoLayerInline");
}

static inline JSValue jsMediaControlsHostIsVideoLayerInlineGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isVideoLayerInline());
    return result;
}

static inline JSValue jsMediaControlsHostUserGestureRequiredGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostUserGestureRequired(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostUserGestureRequiredGetter>(state, thisValue, "userGestureRequired");
}

static inline JSValue jsMediaControlsHostUserGestureRequiredGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.userGestureRequired());
    return result;
}

static inline JSValue jsMediaControlsHostIsInMediaDocumentGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostIsInMediaDocument(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostIsInMediaDocumentGetter>(state, thisValue, "isInMediaDocument");
}

static inline JSValue jsMediaControlsHostIsInMediaDocumentGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isInMediaDocument());
    return result;
}

static inline JSValue jsMediaControlsHostExternalDeviceDisplayNameGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostExternalDeviceDisplayName(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostExternalDeviceDisplayNameGetter>(state, thisValue, "externalDeviceDisplayName");
}

static inline JSValue jsMediaControlsHostExternalDeviceDisplayNameGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.externalDeviceDisplayName());
    return result;
}

static inline JSValue jsMediaControlsHostExternalDeviceTypeGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostExternalDeviceType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostExternalDeviceTypeGetter>(state, thisValue, "externalDeviceType");
}

static inline JSValue jsMediaControlsHostExternalDeviceTypeGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<MediaControlsHost::DeviceType>>(state, impl.externalDeviceType());
    return result;
}

static inline JSValue jsMediaControlsHostControlsDependOnPageScaleFactorGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostControlsDependOnPageScaleFactor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostControlsDependOnPageScaleFactorGetter>(state, thisValue, "controlsDependOnPageScaleFactor");
}

static inline JSValue jsMediaControlsHostControlsDependOnPageScaleFactorGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.controlsDependOnPageScaleFactor());
    return result;
}

static inline JSValue jsMediaControlsHostShadowRootCSSTextGetter(ExecState&, JSMediaControlsHost&, ThrowScope& throwScope);

EncodedJSValue jsMediaControlsHostShadowRootCSSText(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaControlsHost>::attribute<jsMediaControlsHostShadowRootCSSTextGetter>(state, thisValue, "shadowRootCSSText");
}

static inline JSValue jsMediaControlsHostShadowRootCSSTextGetter(ExecState& state, JSMediaControlsHost& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.shadowRootCSSText());
    return result;
}

bool setJSMediaControlsHostConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMediaControlsHostPrototype* domObject = jsDynamicDowncast<JSMediaControlsHostPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMediaControlsHostControlsDependOnPageScaleFactorFunction(ExecState&, JSMediaControlsHost&, JSValue, ThrowScope&);

bool setJSMediaControlsHostControlsDependOnPageScaleFactor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaControlsHost>::setAttribute<setJSMediaControlsHostControlsDependOnPageScaleFactorFunction>(state, thisValue, encodedValue, "controlsDependOnPageScaleFactor");
}

static inline bool setJSMediaControlsHostControlsDependOnPageScaleFactorFunction(ExecState& state, JSMediaControlsHost& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setControlsDependOnPageScaleFactor(WTFMove(nativeValue));
    return true;
}


static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu1Caller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

static inline EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu1(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu1Caller>(state, "sortedTrackListForMenu");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu1Caller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto trackList = convert<IDLInterface<TextTrackList>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "trackList", "MediaControlsHost", "sortedTrackListForMenu", "TextTrackList"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLSequence<IDLInterface<TextTrack>>>(*state, *castedThis->globalObject(), impl.sortedTrackListForMenu(*trackList)));
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu2Caller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

static inline EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu2(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu2Caller>(state, "sortedTrackListForMenu");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu2Caller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto trackList = convert<IDLInterface<AudioTrackList>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "trackList", "MediaControlsHost", "sortedTrackListForMenu", "AudioTrackList"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLSequence<IDLInterface<AudioTrack>>>(*state, *castedThis->globalObject(), impl.sortedTrackListForMenu(*trackList)));
}

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    size_t argsCount = std::min<size_t>(1, state->argumentCount());
    if (argsCount == 1) {
        JSValue distinguishingArg = state->uncheckedArgument(0);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSTextTrackList::info()))
            return jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu1(state);
        if (distinguishingArg.isObject() && asObject(distinguishingArg)->inherits(JSAudioTrackList::info()))
            return jsMediaControlsHostPrototypeFunctionSortedTrackListForMenu2(state);
    }
    return argsCount < 1 ? throwVMError(state, throwScope, createNotEnoughArgumentsError(state)) : throwVMTypeError(state, throwScope);
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionDisplayNameForTrackCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionDisplayNameForTrack(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionDisplayNameForTrackCaller>(state, "displayNameForTrack");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionDisplayNameForTrackCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto track = convert<IDLNullable<IDLUnion<IDLInterface<TextTrack>, IDLInterface<AudioTrack>>>>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.displayNameForTrack(WTFMove(track))));
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSetSelectedTextTrackCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSetSelectedTextTrack(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionSetSelectedTextTrackCaller>(state, "setSelectedTextTrack");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSetSelectedTextTrackCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto track = convert<IDLNullable<IDLInterface<TextTrack>>>(*state, state->uncheckedArgument(0), [](JSC::ExecState& state, JSC::ThrowScope& scope) { throwArgumentTypeError(state, scope, 0, "track", "MediaControlsHost", "setSelectedTextTrack", "TextTrack"); });
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setSelectedTextTrack(WTFMove(track));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInlineCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInline(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInlineCaller>(state, "setPreparedToReturnVideoLayerToInline");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionSetPreparedToReturnVideoLayerToInlineCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto prepared = convert<IDLBoolean>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.setPreparedToReturnVideoLayerToInline(WTFMove(prepared));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainerCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainer(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainerCaller>(state, "updateTextTrackContainer");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionUpdateTextTrackContainerCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.updateTextTrackContainer();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionEnteredFullscreenCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionEnteredFullscreen(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionEnteredFullscreenCaller>(state, "enteredFullscreen");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionEnteredFullscreenCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.enteredFullscreen();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionExitedFullscreenCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionExitedFullscreen(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionExitedFullscreenCaller>(state, "exitedFullscreen");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionExitedFullscreenCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.exitedFullscreen();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionGenerateUUIDCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionGenerateUUID(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionGenerateUUIDCaller>(state, "generateUUID");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionGenerateUUIDCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.generateUUID()));
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatformCaller(JSC::ExecState*, JSMediaControlsHost*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatform(ExecState* state)
{
    return BindingCaller<JSMediaControlsHost>::callOperation<jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatformCaller>(state, "base64StringForIconAndPlatform");
}

static inline JSC::EncodedJSValue jsMediaControlsHostPrototypeFunctionBase64StringForIconAndPlatformCaller(JSC::ExecState* state, JSMediaControlsHost* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto iconName = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto platform = convert<IDLDOMString>(*state, state->uncheckedArgument(1), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLDOMString>(*state, impl.base64StringForIconAndPlatform(WTFMove(iconName), WTFMove(platform))));
}

bool JSMediaControlsHostOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaControlsHostOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaControlsHost = static_cast<JSMediaControlsHost*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaControlsHost->wrapped(), jsMediaControlsHost);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MediaControlsHost>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to MediaControlsHost.
    static_assert(!__is_polymorphic(MediaControlsHost), "MediaControlsHost is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<MediaControlsHost>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MediaControlsHost& impl)
{
    return wrap(state, globalObject, impl);
}

MediaControlsHost* JSMediaControlsHost::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMediaControlsHost*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_CONTROLS_SCRIPT)
