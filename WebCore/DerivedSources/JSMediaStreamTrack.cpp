/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaStreamTrack.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMPromise.h"
#include "JSDoubleRange.h"
#include "JSEventListener.h"
#include "JSLongRange.h"
#include "JSMediaStreamTrack.h"
#include "JSMediaTrackConstraints.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

template<> JSString* convertEnumerationToJS(ExecState& state, MediaStreamTrack::State enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("new"),
        ASCIILiteral("live"),
        ASCIILiteral("ended"),
    };
    static_assert(static_cast<size_t>(MediaStreamTrack::State::New) == 0, "MediaStreamTrack::State::New is not 0 as expected");
    static_assert(static_cast<size_t>(MediaStreamTrack::State::Live) == 1, "MediaStreamTrack::State::Live is not 1 as expected");
    static_assert(static_cast<size_t>(MediaStreamTrack::State::Ended) == 2, "MediaStreamTrack::State::Ended is not 2 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<MediaStreamTrack::State> parseEnumeration<MediaStreamTrack::State>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "new")
        return MediaStreamTrack::State::New;
    if (stringValue == "live")
        return MediaStreamTrack::State::Live;
    if (stringValue == "ended")
        return MediaStreamTrack::State::Ended;
    return std::nullopt;
}

template<> MediaStreamTrack::State convertEnumeration<MediaStreamTrack::State>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<MediaStreamTrack::State>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<MediaStreamTrack::State>()
{
    return "\"new\", \"live\", \"ended\"";
}

#if ENABLE(MEDIA_STREAM)

template<> MediaStreamTrack::TrackCapabilities convertDictionary<MediaStreamTrack::TrackCapabilities>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    MediaStreamTrack::TrackCapabilities result;
    JSValue aspectRatioValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "aspectRatio"));
    if (!aspectRatioValue.isUndefined()) {
        result.aspectRatio = convert<IDLDictionary<DoubleRange>>(state, aspectRatioValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue deviceIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "deviceId"));
    if (!deviceIdValue.isUndefined()) {
        result.deviceId = convert<IDLDOMString>(state, deviceIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue echoCancellationValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "echoCancellation"));
    if (!echoCancellationValue.isUndefined()) {
        result.echoCancellation = convert<IDLSequence<IDLBoolean>>(state, echoCancellationValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue facingModeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "facingMode"));
    if (!facingModeValue.isUndefined()) {
        result.facingMode = convert<IDLSequence<IDLDOMString>>(state, facingModeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue frameRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "frameRate"));
    if (!frameRateValue.isUndefined()) {
        result.frameRate = convert<IDLDictionary<DoubleRange>>(state, frameRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue groupIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "groupId"));
    if (!groupIdValue.isUndefined()) {
        result.groupId = convert<IDLDOMString>(state, groupIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue heightValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "height"));
    if (!heightValue.isUndefined()) {
        result.height = convert<IDLDictionary<LongRange>>(state, heightValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue sampleRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleRate"));
    if (!sampleRateValue.isUndefined()) {
        result.sampleRate = convert<IDLDictionary<LongRange>>(state, sampleRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue sampleSizeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleSize"));
    if (!sampleSizeValue.isUndefined()) {
        result.sampleSize = convert<IDLDictionary<LongRange>>(state, sampleSizeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue volumeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "volume"));
    if (!volumeValue.isUndefined()) {
        result.volume = convert<IDLDictionary<DoubleRange>>(state, volumeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue widthValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "width"));
    if (!widthValue.isUndefined()) {
        result.width = convert<IDLDictionary<LongRange>>(state, widthValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const MediaStreamTrack::TrackCapabilities& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    if (!IDLDictionary<DoubleRange>::isNullValue(dictionary.aspectRatio)) {
        auto aspectRatioValue = toJS<IDLDictionary<DoubleRange>>(state, globalObject, IDLDictionary<DoubleRange>::extractValueFromNullable(dictionary.aspectRatio));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "aspectRatio"), aspectRatioValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.deviceId)) {
        auto deviceIdValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.deviceId));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "deviceId"), deviceIdValue);
    }
    if (!IDLSequence<IDLBoolean>::isNullValue(dictionary.echoCancellation)) {
        auto echoCancellationValue = toJS<IDLSequence<IDLBoolean>>(state, globalObject, IDLSequence<IDLBoolean>::extractValueFromNullable(dictionary.echoCancellation));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "echoCancellation"), echoCancellationValue);
    }
    if (!IDLSequence<IDLDOMString>::isNullValue(dictionary.facingMode)) {
        auto facingModeValue = toJS<IDLSequence<IDLDOMString>>(state, globalObject, IDLSequence<IDLDOMString>::extractValueFromNullable(dictionary.facingMode));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "facingMode"), facingModeValue);
    }
    if (!IDLDictionary<DoubleRange>::isNullValue(dictionary.frameRate)) {
        auto frameRateValue = toJS<IDLDictionary<DoubleRange>>(state, globalObject, IDLDictionary<DoubleRange>::extractValueFromNullable(dictionary.frameRate));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "frameRate"), frameRateValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.groupId)) {
        auto groupIdValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.groupId));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "groupId"), groupIdValue);
    }
    if (!IDLDictionary<LongRange>::isNullValue(dictionary.height)) {
        auto heightValue = toJS<IDLDictionary<LongRange>>(state, globalObject, IDLDictionary<LongRange>::extractValueFromNullable(dictionary.height));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "height"), heightValue);
    }
    if (!IDLDictionary<LongRange>::isNullValue(dictionary.sampleRate)) {
        auto sampleRateValue = toJS<IDLDictionary<LongRange>>(state, globalObject, IDLDictionary<LongRange>::extractValueFromNullable(dictionary.sampleRate));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleRate"), sampleRateValue);
    }
    if (!IDLDictionary<LongRange>::isNullValue(dictionary.sampleSize)) {
        auto sampleSizeValue = toJS<IDLDictionary<LongRange>>(state, globalObject, IDLDictionary<LongRange>::extractValueFromNullable(dictionary.sampleSize));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleSize"), sampleSizeValue);
    }
    if (!IDLDictionary<DoubleRange>::isNullValue(dictionary.volume)) {
        auto volumeValue = toJS<IDLDictionary<DoubleRange>>(state, globalObject, IDLDictionary<DoubleRange>::extractValueFromNullable(dictionary.volume));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "volume"), volumeValue);
    }
    if (!IDLDictionary<LongRange>::isNullValue(dictionary.width)) {
        auto widthValue = toJS<IDLDictionary<LongRange>>(state, globalObject, IDLDictionary<LongRange>::extractValueFromNullable(dictionary.width));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "width"), widthValue);
    }
    return result;
}

#endif

#if ENABLE(MEDIA_STREAM)

template<> MediaStreamTrack::TrackSettings convertDictionary<MediaStreamTrack::TrackSettings>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    bool isNullOrUndefined = value.isUndefinedOrNull();
    auto* object = isNullOrUndefined ? nullptr : value.getObject();
    if (UNLIKELY(!isNullOrUndefined && !object)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    if (UNLIKELY(object && object->type() == RegExpObjectType)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    MediaStreamTrack::TrackSettings result;
    JSValue aspectRatioValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "aspectRatio"));
    if (!aspectRatioValue.isUndefined()) {
        result.aspectRatio = convert<IDLDouble>(state, aspectRatioValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue deviceIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "deviceId"));
    if (!deviceIdValue.isUndefined()) {
        result.deviceId = convert<IDLDOMString>(state, deviceIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue echoCancellationValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "echoCancellation"));
    if (!echoCancellationValue.isUndefined()) {
        result.echoCancellation = convert<IDLBoolean>(state, echoCancellationValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue facingModeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "facingMode"));
    if (!facingModeValue.isUndefined()) {
        result.facingMode = convert<IDLDOMString>(state, facingModeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue frameRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "frameRate"));
    if (!frameRateValue.isUndefined()) {
        result.frameRate = convert<IDLDouble>(state, frameRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue groupIdValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "groupId"));
    if (!groupIdValue.isUndefined()) {
        result.groupId = convert<IDLDOMString>(state, groupIdValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue heightValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "height"));
    if (!heightValue.isUndefined()) {
        result.height = convert<IDLLong>(state, heightValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue sampleRateValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleRate"));
    if (!sampleRateValue.isUndefined()) {
        result.sampleRate = convert<IDLLong>(state, sampleRateValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue sampleSizeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "sampleSize"));
    if (!sampleSizeValue.isUndefined()) {
        result.sampleSize = convert<IDLLong>(state, sampleSizeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue volumeValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "volume"));
    if (!volumeValue.isUndefined()) {
        result.volume = convert<IDLDouble>(state, volumeValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    JSValue widthValue = isNullOrUndefined ? jsUndefined() : object->get(&state, Identifier::fromString(&state, "width"));
    if (!widthValue.isUndefined()) {
        result.width = convert<IDLLong>(state, widthValue);
        RETURN_IF_EXCEPTION(throwScope, { });
    }
    return result;
}

JSC::JSObject* convertDictionaryToJS(JSC::ExecState& state, JSDOMGlobalObject& globalObject, const MediaStreamTrack::TrackSettings& dictionary)
{
    auto& vm = state.vm();

    auto result = constructEmptyObject(&state);

    if (!IDLDouble::isNullValue(dictionary.aspectRatio)) {
        auto aspectRatioValue = toJS<IDLDouble>(state, globalObject, IDLDouble::extractValueFromNullable(dictionary.aspectRatio));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "aspectRatio"), aspectRatioValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.deviceId)) {
        auto deviceIdValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.deviceId));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "deviceId"), deviceIdValue);
    }
    if (!IDLBoolean::isNullValue(dictionary.echoCancellation)) {
        auto echoCancellationValue = toJS<IDLBoolean>(state, globalObject, IDLBoolean::extractValueFromNullable(dictionary.echoCancellation));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "echoCancellation"), echoCancellationValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.facingMode)) {
        auto facingModeValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.facingMode));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "facingMode"), facingModeValue);
    }
    if (!IDLDouble::isNullValue(dictionary.frameRate)) {
        auto frameRateValue = toJS<IDLDouble>(state, globalObject, IDLDouble::extractValueFromNullable(dictionary.frameRate));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "frameRate"), frameRateValue);
    }
    if (!IDLDOMString::isNullValue(dictionary.groupId)) {
        auto groupIdValue = toJS<IDLDOMString>(state, globalObject, IDLDOMString::extractValueFromNullable(dictionary.groupId));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "groupId"), groupIdValue);
    }
    if (!IDLLong::isNullValue(dictionary.height)) {
        auto heightValue = toJS<IDLLong>(state, globalObject, IDLLong::extractValueFromNullable(dictionary.height));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "height"), heightValue);
    }
    if (!IDLLong::isNullValue(dictionary.sampleRate)) {
        auto sampleRateValue = toJS<IDLLong>(state, globalObject, IDLLong::extractValueFromNullable(dictionary.sampleRate));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleRate"), sampleRateValue);
    }
    if (!IDLLong::isNullValue(dictionary.sampleSize)) {
        auto sampleSizeValue = toJS<IDLLong>(state, globalObject, IDLLong::extractValueFromNullable(dictionary.sampleSize));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "sampleSize"), sampleSizeValue);
    }
    if (!IDLDouble::isNullValue(dictionary.volume)) {
        auto volumeValue = toJS<IDLDouble>(state, globalObject, IDLDouble::extractValueFromNullable(dictionary.volume));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "volume"), volumeValue);
    }
    if (!IDLLong::isNullValue(dictionary.width)) {
        auto widthValue = toJS<IDLLong>(state, globalObject, IDLLong::extractValueFromNullable(dictionary.width));
        result->putDirect(vm, JSC::Identifier::fromString(&vm, "width"), widthValue);
    }
    return result;
}

#endif

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionClone(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionStop(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetConstraints(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetSettings(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetCapabilities(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionApplyConstraints(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMediaStreamTrackKind(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackId(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackLabel(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackEnabled(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaStreamTrackMuted(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackOnmute(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackOnmute(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaStreamTrackOnunmute(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackOnunmute(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaStreamTrackReadonly(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackRemote(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackReadyState(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaStreamTrackOnended(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackOnended(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaStreamTrackOnoverconstrained(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackOnoverconstrained(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMediaStreamTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMediaStreamTrackConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMediaStreamTrackPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMediaStreamTrackPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaStreamTrackPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaStreamTrackPrototype>(vm.heap)) JSMediaStreamTrackPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaStreamTrackPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSMediaStreamTrackConstructor = JSDOMConstructorNotConstructable<JSMediaStreamTrack>;

template<> JSValue JSMediaStreamTrackConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSMediaStreamTrackConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSMediaStreamTrack::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("MediaStreamTrack"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSMediaStreamTrackConstructor::s_info = { "MediaStreamTrack", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackConstructor) };

/* Hash table for prototype */

static const HashTableValue JSMediaStreamTrackPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackConstructor) } },
    { "kind", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackKind), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "id", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackId), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "label", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackLabel), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "enabled", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackEnabled), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackEnabled) } },
    { "muted", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackMuted), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onmute", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackOnmute), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackOnmute) } },
    { "onunmute", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackOnunmute), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackOnunmute) } },
    { "readonly", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackReadonly), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "remote", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackRemote), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "readyState", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackReadyState), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onended", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackOnended), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackOnended) } },
    { "onoverconstrained", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaStreamTrackOnoverconstrained), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMediaStreamTrackOnoverconstrained) } },
    { "clone", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionClone), (intptr_t) (0) } },
    { "stop", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionStop), (intptr_t) (0) } },
    { "getConstraints", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionGetConstraints), (intptr_t) (0) } },
    { "getSettings", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionGetSettings), (intptr_t) (0) } },
    { "getCapabilities", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionGetCapabilities), (intptr_t) (0) } },
    { "applyConstraints", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMediaStreamTrackPrototypeFunctionApplyConstraints), (intptr_t) (0) } },
};

const ClassInfo JSMediaStreamTrackPrototype::s_info = { "MediaStreamTrackPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaStreamTrackPrototype) };

void JSMediaStreamTrackPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaStreamTrackPrototypeTableValues, *this);
}

const ClassInfo JSMediaStreamTrack::s_info = { "MediaStreamTrack", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaStreamTrack) };

JSMediaStreamTrack::JSMediaStreamTrack(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaStreamTrack>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSMediaStreamTrack::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMediaStreamTrack::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaStreamTrackPrototype::create(vm, globalObject, JSMediaStreamTrackPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSMediaStreamTrack::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaStreamTrack>(vm, globalObject);
}

template<> inline JSMediaStreamTrack* BindingCaller<JSMediaStreamTrack>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMediaStreamTrack*>(JSValue::decode(thisValue));
}

template<> inline JSMediaStreamTrack* BindingCaller<JSMediaStreamTrack>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMediaStreamTrack*>(state.thisValue());
}

static inline JSValue jsMediaStreamTrackKindGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackKind(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackKindGetter>(state, thisValue, "kind");
}

static inline JSValue jsMediaStreamTrackKindGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.kind());
    return result;
}

static inline JSValue jsMediaStreamTrackIdGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackId(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackIdGetter>(state, thisValue, "id");
}

static inline JSValue jsMediaStreamTrackIdGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.id());
    return result;
}

static inline JSValue jsMediaStreamTrackLabelGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackLabel(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackLabelGetter>(state, thisValue, "label");
}

static inline JSValue jsMediaStreamTrackLabelGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.label());
    return result;
}

static inline JSValue jsMediaStreamTrackEnabledGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackEnabled(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackEnabledGetter>(state, thisValue, "enabled");
}

static inline JSValue jsMediaStreamTrackEnabledGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.enabled());
    return result;
}

static inline JSValue jsMediaStreamTrackMutedGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackMuted(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackMutedGetter>(state, thisValue, "muted");
}

static inline JSValue jsMediaStreamTrackMutedGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.muted());
    return result;
}

static inline JSValue jsMediaStreamTrackOnmuteGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackOnmute(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackOnmuteGetter>(state, thisValue, "onmute");
}

static inline JSValue jsMediaStreamTrackOnmuteGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().muteEvent);
}

static inline JSValue jsMediaStreamTrackOnunmuteGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackOnunmute(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackOnunmuteGetter>(state, thisValue, "onunmute");
}

static inline JSValue jsMediaStreamTrackOnunmuteGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().unmuteEvent);
}

static inline JSValue jsMediaStreamTrackReadonlyGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackReadonly(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackReadonlyGetter>(state, thisValue, "readonly");
}

static inline JSValue jsMediaStreamTrackReadonlyGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.readonly());
    return result;
}

static inline JSValue jsMediaStreamTrackRemoteGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackRemote(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackRemoteGetter>(state, thisValue, "remote");
}

static inline JSValue jsMediaStreamTrackRemoteGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.remote());
    return result;
}

static inline JSValue jsMediaStreamTrackReadyStateGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackReadyState(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackReadyStateGetter>(state, thisValue, "readyState");
}

static inline JSValue jsMediaStreamTrackReadyStateGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<MediaStreamTrack::State>>(state, impl.readyState());
    return result;
}

static inline JSValue jsMediaStreamTrackOnendedGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackOnended(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackOnendedGetter>(state, thisValue, "onended");
}

static inline JSValue jsMediaStreamTrackOnendedGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().endedEvent);
}

static inline JSValue jsMediaStreamTrackOnoverconstrainedGetter(ExecState&, JSMediaStreamTrack&, ThrowScope& throwScope);

EncodedJSValue jsMediaStreamTrackOnoverconstrained(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMediaStreamTrack>::attribute<jsMediaStreamTrackOnoverconstrainedGetter>(state, thisValue, "onoverconstrained");
}

static inline JSValue jsMediaStreamTrackOnoverconstrainedGetter(ExecState& state, JSMediaStreamTrack& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().overconstrainedEvent);
}

EncodedJSValue jsMediaStreamTrackConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSMediaStreamTrackPrototype* domObject = jsDynamicDowncast<JSMediaStreamTrackPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSMediaStreamTrack::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSMediaStreamTrackConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMediaStreamTrackPrototype* domObject = jsDynamicDowncast<JSMediaStreamTrackPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMediaStreamTrackEnabledFunction(ExecState&, JSMediaStreamTrack&, JSValue, ThrowScope&);

bool setJSMediaStreamTrackEnabled(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaStreamTrack>::setAttribute<setJSMediaStreamTrackEnabledFunction>(state, thisValue, encodedValue, "enabled");
}

static inline bool setJSMediaStreamTrackEnabledFunction(ExecState& state, JSMediaStreamTrack& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setEnabled(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMediaStreamTrackOnmuteFunction(ExecState&, JSMediaStreamTrack&, JSValue, ThrowScope&);

bool setJSMediaStreamTrackOnmute(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaStreamTrack>::setAttribute<setJSMediaStreamTrackOnmuteFunction>(state, thisValue, encodedValue, "onmute");
}

static inline bool setJSMediaStreamTrackOnmuteFunction(ExecState& state, JSMediaStreamTrack& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().muteEvent, value);
    return true;
}


static inline bool setJSMediaStreamTrackOnunmuteFunction(ExecState&, JSMediaStreamTrack&, JSValue, ThrowScope&);

bool setJSMediaStreamTrackOnunmute(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaStreamTrack>::setAttribute<setJSMediaStreamTrackOnunmuteFunction>(state, thisValue, encodedValue, "onunmute");
}

static inline bool setJSMediaStreamTrackOnunmuteFunction(ExecState& state, JSMediaStreamTrack& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().unmuteEvent, value);
    return true;
}


static inline bool setJSMediaStreamTrackOnendedFunction(ExecState&, JSMediaStreamTrack&, JSValue, ThrowScope&);

bool setJSMediaStreamTrackOnended(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaStreamTrack>::setAttribute<setJSMediaStreamTrackOnendedFunction>(state, thisValue, encodedValue, "onended");
}

static inline bool setJSMediaStreamTrackOnendedFunction(ExecState& state, JSMediaStreamTrack& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().endedEvent, value);
    return true;
}


static inline bool setJSMediaStreamTrackOnoverconstrainedFunction(ExecState&, JSMediaStreamTrack&, JSValue, ThrowScope&);

bool setJSMediaStreamTrackOnoverconstrained(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMediaStreamTrack>::setAttribute<setJSMediaStreamTrackOnoverconstrainedFunction>(state, thisValue, encodedValue, "onoverconstrained");
}

static inline bool setJSMediaStreamTrackOnoverconstrainedFunction(ExecState& state, JSMediaStreamTrack& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().overconstrainedEvent, value);
    return true;
}


JSValue JSMediaStreamTrack::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSMediaStreamTrackConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionCloneCaller(JSC::ExecState*, JSMediaStreamTrack*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionClone(ExecState* state)
{
    return BindingCaller<JSMediaStreamTrack>::callOperation<jsMediaStreamTrackPrototypeFunctionCloneCaller>(state, "clone");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionCloneCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLInterface<MediaStreamTrack>>(*state, *castedThis->globalObject(), impl.clone()));
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionStopCaller(JSC::ExecState*, JSMediaStreamTrack*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionStop(ExecState* state)
{
    return BindingCaller<JSMediaStreamTrack>::callOperation<jsMediaStreamTrackPrototypeFunctionStopCaller>(state, "stop");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionStopCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.stopProducingData();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetConstraintsCaller(JSC::ExecState*, JSMediaStreamTrack*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetConstraints(ExecState* state)
{
    return BindingCaller<JSMediaStreamTrack>::callOperation<jsMediaStreamTrackPrototypeFunctionGetConstraintsCaller>(state, "getConstraints");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetConstraintsCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDictionary<MediaTrackConstraints>>(*state, *castedThis->globalObject(), impl.getConstraints()));
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetSettingsCaller(JSC::ExecState*, JSMediaStreamTrack*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetSettings(ExecState* state)
{
    return BindingCaller<JSMediaStreamTrack>::callOperation<jsMediaStreamTrackPrototypeFunctionGetSettingsCaller>(state, "getSettings");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetSettingsCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDictionary<MediaStreamTrack::TrackSettings>>(*state, *castedThis->globalObject(), impl.getSettings()));
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetCapabilitiesCaller(JSC::ExecState*, JSMediaStreamTrack*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionGetCapabilities(ExecState* state)
{
    return BindingCaller<JSMediaStreamTrack>::callOperation<jsMediaStreamTrackPrototypeFunctionGetCapabilitiesCaller>(state, "getCapabilities");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionGetCapabilitiesCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLDictionary<MediaStreamTrack::TrackCapabilities>>(*state, *castedThis->globalObject(), impl.getCapabilities()));
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionApplyConstraintsCaller(JSC::ExecState*, JSMediaStreamTrack*, Ref<DeferredPromise>&&, JSC::ThrowScope&);

static EncodedJSValue jsMediaStreamTrackPrototypeFunctionApplyConstraintsPromise(ExecState*, Ref<DeferredPromise>&&);

EncodedJSValue JSC_HOST_CALL jsMediaStreamTrackPrototypeFunctionApplyConstraints(ExecState* state)
{
    ASSERT(state);
    return JSValue::encode(callPromiseFunction<jsMediaStreamTrackPrototypeFunctionApplyConstraintsPromise, PromiseExecutionScope::WindowOnly>(*state));
}

static inline EncodedJSValue jsMediaStreamTrackPrototypeFunctionApplyConstraintsPromise(ExecState* state, Ref<DeferredPromise>&& promise)
{
    return BindingCaller<JSMediaStreamTrack>::callPromiseOperation<jsMediaStreamTrackPrototypeFunctionApplyConstraintsCaller>(state, WTFMove(promise), "applyConstraints");
}

static inline JSC::EncodedJSValue jsMediaStreamTrackPrototypeFunctionApplyConstraintsCaller(JSC::ExecState* state, JSMediaStreamTrack* castedThis, Ref<DeferredPromise>&& promise, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    auto constraints = convert<IDLDictionary<MediaTrackConstraints>>(*state, state->argument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.applyConstraints(WTFMove(constraints), WTFMove(promise));
    return JSValue::encode(jsUndefined());
}

void JSMediaStreamTrack::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSMediaStreamTrack*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSMediaStreamTrackOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsMediaStreamTrack = jsCast<JSMediaStreamTrack*>(handle.slot()->asCell());
    if (jsMediaStreamTrack->wrapped().hasPendingActivity())
        return true;
    if (jsMediaStreamTrack->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaStreamTrackOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaStreamTrack = static_cast<JSMediaStreamTrack*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaStreamTrack->wrapped(), jsMediaStreamTrack);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MediaStreamTrack>&& impl)
{
    return createWrapper<MediaStreamTrack>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MediaStreamTrack& impl)
{
    return wrap(state, globalObject, impl);
}

MediaStreamTrack* JSMediaStreamTrack::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMediaStreamTrack*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
