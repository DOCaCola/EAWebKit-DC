/*
 * Copyright (c) 2015 Ericsson AB. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

// DO NOT EDIT THIS FILE. It is automatically generated from JavaScript files for
// builtins by the script: Source/JavaScriptCore/Scripts/generate-js-builtins.py

#include "config.h"
#include "RTCPeerConnectionBuiltins.h"

#if ENABLE(MEDIA_STREAM)

#include "WebCoreJSClientData.h"
#include <runtime/Executable.h>
#include <runtime/JSCJSValueInlines.h>
#include <runtime/JSCellInlines.h>
#include <runtime/StructureInlines.h>
#include <runtime/VM.h>

namespace WebCore {

const JSC::ConstructAbility s_rtcPeerConnectionCreateOfferCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionCreateOfferCodeLength = 126;
const char* s_rtcPeerConnectionCreateOfferCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return @createOfferOrAnswer(this, this.@queuedCreateOffer, \"createOffer\", arguments);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionCreateAnswerCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionCreateAnswerCodeLength = 128;
const char* s_rtcPeerConnectionCreateAnswerCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return @createOfferOrAnswer(this, this.@queuedCreateAnswer, \"createAnswer\", arguments);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionSetLocalDescriptionCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionSetLocalDescriptionCodeLength = 150;
const char* s_rtcPeerConnectionSetLocalDescriptionCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return @setLocalOrRemoteDescription(this, this.@queuedSetLocalDescription, \"setLocalDescription\", arguments);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionSetRemoteDescriptionCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionSetRemoteDescriptionCodeLength = 152;
const char* s_rtcPeerConnectionSetRemoteDescriptionCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    return @setLocalOrRemoteDescription(this, this.@queuedSetRemoteDescription, \"setRemoteDescription\", arguments);\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionAddIceCandidateCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionAddIceCandidateCodeLength = 991;
const char* s_rtcPeerConnectionAddIceCandidateCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    var peerConnection = this;\n" \
    "    if (arguments.length < 1)\n" \
    "        throw new @TypeError(\"Not enough arguments\");\n" \
    "    var candidate = arguments[0];\n" \
    "    if (!(candidate instanceof RTCIceCandidate))\n" \
    "        throw new @TypeError(\"Argument 1 ('candidate') to RTCPeerConnection.addIceCandidate must be an instance of RTCIceCandidate\");\n" \
    "    if (arguments.length == 1) {\n" \
    "        return @enqueueOperation(peerConnection, function () {\n" \
    "            return peerConnection.@queuedAddIceCandidate(candidate);\n" \
    "        });\n" \
    "    }\n" \
    "    if (arguments.length < 3)\n" \
    "        throw new @TypeError(\"Not enough arguments\");\n" \
    "    var successCallback = @extractCallbackArg(arguments, 1, \"successCallback\", \"addIceCandidate\");\n" \
    "    var errorCallback = @extractCallbackArg(arguments, 2, \"errorCallback\", \"addIceCandidate\");\n" \
    "    @enqueueOperation(peerConnection, function () {\n" \
    "        return peerConnection.@queuedAddIceCandidate(candidate).then(successCallback, errorCallback);\n" \
    "    });\n" \
    "})\n" \
;

const JSC::ConstructAbility s_rtcPeerConnectionGetStatsCodeConstructAbility = JSC::ConstructAbility::CannotConstruct;
const int s_rtcPeerConnectionGetStatsCodeLength = 808;
const char* s_rtcPeerConnectionGetStatsCode =
    "(function ()\n" \
    "{\n" \
    "    \"use strict\";\n" \
    "    var peerConnection = this;\n" \
    "    var selector = null;\n" \
    "    if (arguments.length) {\n" \
    "        selector = arguments[0];\n" \
    "        if (selector != null && !(selector instanceof MediaStreamTrack))\n" \
    "            throw new @TypeError(\"Argument 1 ('selector') to RTCPeerConnection.getStats must be an instance of MediaStreamTrack\");\n" \
    "    }\n" \
    "    if (arguments.length <= 1) {\n" \
    "        return peerConnection.@privateGetStats(selector);\n" \
    "    }\n" \
    "    if (arguments.length < 3)\n" \
    "        throw new @TypeError(\"Not enough arguments\");\n" \
    "    var successCallback = @extractCallbackArg(arguments, 1, \"successCallback\", \"getStats\");\n" \
    "    var errorCallback = @extractCallbackArg(arguments, 2, \"errorCallback\", \"getStats\");\n" \
    "    peerConnection.@privateGetStats(selector).then(successCallback, errorCallback);\n" \
    "})\n" \
;


#define DEFINE_BUILTIN_GENERATOR(codeName, functionName, argumentCount) \
JSC::FunctionExecutable* codeName##Generator(JSC::VM& vm) \
{\
    JSVMClientData* clientData = static_cast<JSVMClientData*>(vm.clientData); \
    return clientData->builtinFunctions().rtcPeerConnectionBuiltins().codeName##Executable()->link(vm, clientData->builtinFunctions().rtcPeerConnectionBuiltins().codeName##Source()); \
}
WEBCORE_FOREACH_RTCPEERCONNECTION_BUILTIN_CODE(DEFINE_BUILTIN_GENERATOR)
#undef DEFINE_BUILTIN_GENERATOR


} // namespace WebCore

#endif // ENABLE(MEDIA_STREAM)
