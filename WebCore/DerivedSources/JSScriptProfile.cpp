/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSScriptProfile.h"

#include "JSDOMBinding.h"
#include "JSScriptProfileNode.h"
#include "ScriptProfileNode.h"
#include "URL.h"
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsScriptProfileTitle(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileUid(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsScriptProfileRootNode(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSScriptProfilePrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSScriptProfilePrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSScriptProfilePrototype* ptr = new (NotNull, JSC::allocateCell<JSScriptProfilePrototype>(vm.heap)) JSScriptProfilePrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSScriptProfilePrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSScriptProfilePrototypeTableValues[] =
{
    { "title", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileTitle), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "uid", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileUid), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "rootNode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsScriptProfileRootNode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSScriptProfilePrototype::s_info = { "ScriptProfilePrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSScriptProfilePrototype) };

void JSScriptProfilePrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSScriptProfilePrototypeTableValues, *this);
}

const ClassInfo JSScriptProfile::s_info = { "ScriptProfile", &Base::s_info, 0, CREATE_METHOD_TABLE(JSScriptProfile) };

JSScriptProfile::JSScriptProfile(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ScriptProfile>&& impl)
    : JSDOMWrapper<ScriptProfile>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSScriptProfile::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSScriptProfilePrototype::create(vm, globalObject, JSScriptProfilePrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSScriptProfile::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSScriptProfile>(vm, globalObject);
}

void JSScriptProfile::destroy(JSC::JSCell* cell)
{
    JSScriptProfile* thisObject = static_cast<JSScriptProfile*>(cell);
    thisObject->JSScriptProfile::~JSScriptProfile();
}

EncodedJSValue jsScriptProfileTitle(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfile* castedThis = jsDynamicCast<JSScriptProfile*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfilePrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "ScriptProfile", "title");
        return throwGetterTypeError(*state, "ScriptProfile", "title");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.title());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileUid(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfile* castedThis = jsDynamicCast<JSScriptProfile*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfilePrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "ScriptProfile", "uid");
        return throwGetterTypeError(*state, "ScriptProfile", "uid");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.uid());
    return JSValue::encode(result);
}


EncodedJSValue jsScriptProfileRootNode(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSScriptProfile* castedThis = jsDynamicCast<JSScriptProfile*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSScriptProfilePrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "ScriptProfile", "rootNode");
        return throwGetterTypeError(*state, "ScriptProfile", "rootNode");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), WTF::getPtr(impl.rootNode()));
    return JSValue::encode(result);
}


bool JSScriptProfileOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSScriptProfileOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsScriptProfile = jsCast<JSScriptProfile*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsScriptProfile->wrapped(), jsScriptProfile);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, ScriptProfile* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSScriptProfile>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, ScriptProfile* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSScriptProfile>(globalObject, impl))
        return result;
    return createNewWrapper<JSScriptProfile>(globalObject, impl);
}

ScriptProfile* JSScriptProfile::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSScriptProfile*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
