/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSMediaTrackConstraints.h"

#include "JSDOMBinding.h"
#include "JSMediaTrackConstraint.h"
#include "JSMediaTrackConstraintSet.h"
#include "MediaTrackConstraint.h"
#include "MediaTrackConstraintSet.h"
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsMediaTrackConstraintsMandatory(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsMediaTrackConstraintsOptional(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);

class JSMediaTrackConstraintsPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSMediaTrackConstraintsPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMediaTrackConstraintsPrototype* ptr = new (NotNull, JSC::allocateCell<JSMediaTrackConstraintsPrototype>(vm.heap)) JSMediaTrackConstraintsPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMediaTrackConstraintsPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMediaTrackConstraintsPrototypeTableValues[] =
{
    { "mandatory", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaTrackConstraintsMandatory), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "optional", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMediaTrackConstraintsOptional), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

const ClassInfo JSMediaTrackConstraintsPrototype::s_info = { "MediaTrackConstraintsPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaTrackConstraintsPrototype) };

void JSMediaTrackConstraintsPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMediaTrackConstraintsPrototypeTableValues, *this);
}

const ClassInfo JSMediaTrackConstraints::s_info = { "MediaTrackConstraints", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMediaTrackConstraints) };

JSMediaTrackConstraints::JSMediaTrackConstraints(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MediaTrackConstraints>&& impl)
    : JSDOMWrapper<MediaTrackConstraints>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSMediaTrackConstraints::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMediaTrackConstraintsPrototype::create(vm, globalObject, JSMediaTrackConstraintsPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMediaTrackConstraints::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMediaTrackConstraints>(vm, globalObject);
}

void JSMediaTrackConstraints::destroy(JSC::JSCell* cell)
{
    JSMediaTrackConstraints* thisObject = static_cast<JSMediaTrackConstraints*>(cell);
    thisObject->JSMediaTrackConstraints::~JSMediaTrackConstraints();
}

EncodedJSValue jsMediaTrackConstraintsMandatory(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaTrackConstraints* castedThis = jsDynamicCast<JSMediaTrackConstraints*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaTrackConstraintsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "MediaTrackConstraints", "mandatory");
        return throwGetterTypeError(*state, "MediaTrackConstraints", "mandatory");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), WTF::getPtr(impl.mandatory()));
    return JSValue::encode(result);
}


EncodedJSValue jsMediaTrackConstraintsOptional(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSMediaTrackConstraints* castedThis = jsDynamicCast<JSMediaTrackConstraints*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSMediaTrackConstraintsPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "MediaTrackConstraints", "optional");
        return throwGetterTypeError(*state, "MediaTrackConstraints", "optional");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsArray(state, castedThis->globalObject(), impl.optional());
    return JSValue::encode(result);
}


bool JSMediaTrackConstraintsOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMediaTrackConstraintsOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMediaTrackConstraints = jsCast<JSMediaTrackConstraints*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMediaTrackConstraints->wrapped(), jsMediaTrackConstraints);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MediaTrackConstraints@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore21MediaTrackConstraintsE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, MediaTrackConstraints* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSMediaTrackConstraints>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, MediaTrackConstraints* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSMediaTrackConstraints>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MediaTrackConstraints@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore21MediaTrackConstraintsE[2];
#if COMPILER(CLANG)
    // If this fails MediaTrackConstraints does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(MediaTrackConstraints), MediaTrackConstraints_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MediaTrackConstraints has subclasses. If MediaTrackConstraints has subclasses that get passed
    // to toJS() we currently require MediaTrackConstraints you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSMediaTrackConstraints>(globalObject, impl);
}

MediaTrackConstraints* JSMediaTrackConstraints::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSMediaTrackConstraints*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
