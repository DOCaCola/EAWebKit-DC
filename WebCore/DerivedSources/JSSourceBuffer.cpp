/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_SOURCE)

#include "JSSourceBuffer.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSEventListener.h"
#include "JSTimeRanges.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

#if ENABLE(VIDEO_TRACK)
#include "JSAudioTrackList.h"
#include "JSTextTrackList.h"
#include "JSVideoTrackList.h"
#endif

using namespace JSC;

namespace WebCore {

#if ENABLE(MEDIA_SOURCE)

template<> JSString* convertEnumerationToJS(ExecState& state, SourceBuffer::AppendMode enumerationValue)
{
    static NeverDestroyed<const String> values[] = {
        ASCIILiteral("segments"),
        ASCIILiteral("sequence"),
    };
    static_assert(static_cast<size_t>(SourceBuffer::AppendMode::Segments) == 0, "SourceBuffer::AppendMode::Segments is not 0 as expected");
    static_assert(static_cast<size_t>(SourceBuffer::AppendMode::Sequence) == 1, "SourceBuffer::AppendMode::Sequence is not 1 as expected");
    ASSERT(static_cast<size_t>(enumerationValue) < WTF_ARRAY_LENGTH(values));
    return jsStringWithCache(&state, values[static_cast<size_t>(enumerationValue)]);
}

template<> std::optional<SourceBuffer::AppendMode> parseEnumeration<SourceBuffer::AppendMode>(ExecState& state, JSValue value)
{
    auto stringValue = value.toWTFString(&state);
    if (stringValue == "segments")
        return SourceBuffer::AppendMode::Segments;
    if (stringValue == "sequence")
        return SourceBuffer::AppendMode::Sequence;
    return std::nullopt;
}

template<> SourceBuffer::AppendMode convertEnumeration<SourceBuffer::AppendMode>(ExecState& state, JSValue value)
{
    VM& vm = state.vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    auto result = parseEnumeration<SourceBuffer::AppendMode>(state, value);
    if (UNLIKELY(!result)) {
        throwTypeError(&state, throwScope);
        return { };
    }
    return result.value();
}

template<> const char* expectedEnumerationValues<SourceBuffer::AppendMode>()
{
    return "\"segments\", \"sequence\"";
}

#endif

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionAppendBuffer(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionAbort(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionRemove(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsSourceBufferMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferUpdating(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSourceBufferBuffered(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsSourceBufferTimestampOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferTimestampOffset(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsSourceBufferAudioTracks(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsSourceBufferVideoTracks(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
#if ENABLE(VIDEO_TRACK)
JSC::EncodedJSValue jsSourceBufferTextTracks(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
#endif
JSC::EncodedJSValue jsSourceBufferAppendWindowStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferAppendWindowStart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferAppendWindowEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferAppendWindowEnd(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferOnupdatestart(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferOnupdatestart(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferOnupdate(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferOnupdate(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferOnupdateend(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferOnupdateend(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSourceBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSourceBufferConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSourceBufferPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSourceBufferPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSourceBufferPrototype* ptr = new (NotNull, JSC::allocateCell<JSSourceBufferPrototype>(vm.heap)) JSSourceBufferPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSourceBufferPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSourceBufferConstructor = JSDOMConstructorNotConstructable<JSSourceBuffer>;

template<> JSValue JSSourceBufferConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSSourceBufferConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSourceBuffer::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SourceBuffer"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSourceBufferConstructor::s_info = { "SourceBuffer", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSourceBufferConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSourceBufferPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferConstructor) } },
    { "mode", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferMode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferMode) } },
    { "updating", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferUpdating), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "buffered", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferBuffered), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "timestampOffset", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferTimestampOffset), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferTimestampOffset) } },
#if ENABLE(VIDEO_TRACK)
    { "audioTracks", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferAudioTracks), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "videoTracks", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferVideoTracks), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
#if ENABLE(VIDEO_TRACK)
    { "textTracks", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferTextTracks), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
#else
    { 0, 0, NoIntrinsic, { 0, 0 } },
#endif
    { "appendWindowStart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferAppendWindowStart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferAppendWindowStart) } },
    { "appendWindowEnd", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferAppendWindowEnd), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferAppendWindowEnd) } },
    { "onupdatestart", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferOnupdatestart), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferOnupdatestart) } },
    { "onupdate", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferOnupdate), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferOnupdate) } },
    { "onupdateend", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferOnupdateend), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferOnupdateend) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferOnerror) } },
    { "onabort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSourceBufferOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSourceBufferOnabort) } },
    { "appendBuffer", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSourceBufferPrototypeFunctionAppendBuffer), (intptr_t) (1) } },
    { "abort", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSourceBufferPrototypeFunctionAbort), (intptr_t) (0) } },
    { "remove", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsSourceBufferPrototypeFunctionRemove), (intptr_t) (2) } },
};

const ClassInfo JSSourceBufferPrototype::s_info = { "SourceBufferPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSourceBufferPrototype) };

void JSSourceBufferPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSourceBufferPrototypeTableValues, *this);
}

const ClassInfo JSSourceBuffer::s_info = { "SourceBuffer", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSourceBuffer) };

JSSourceBuffer::JSSourceBuffer(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SourceBuffer>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSSourceBuffer::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSourceBuffer::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSourceBufferPrototype::create(vm, globalObject, JSSourceBufferPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSSourceBuffer::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSourceBuffer>(vm, globalObject);
}

template<> inline JSSourceBuffer* BindingCaller<JSSourceBuffer>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSourceBuffer*>(JSValue::decode(thisValue));
}

template<> inline JSSourceBuffer* BindingCaller<JSSourceBuffer>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSSourceBuffer*>(state.thisValue());
}

static inline JSValue jsSourceBufferModeGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferMode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferModeGetter>(state, thisValue, "mode");
}

static inline JSValue jsSourceBufferModeGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<SourceBuffer::AppendMode>>(state, impl.mode());
    return result;
}

static inline JSValue jsSourceBufferUpdatingGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferUpdating(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferUpdatingGetter>(state, thisValue, "updating");
}

static inline JSValue jsSourceBufferUpdatingGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.updating());
    return result;
}

static inline JSValue jsSourceBufferBufferedGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferBuffered(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferBufferedGetter>(state, thisValue, "buffered");
}

static inline JSValue jsSourceBufferBufferedGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TimeRanges>>(state, *thisObject.globalObject(), throwScope, impl.buffered());
    return result;
}

static inline JSValue jsSourceBufferTimestampOffsetGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferTimestampOffset(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferTimestampOffsetGetter>(state, thisValue, "timestampOffset");
}

static inline JSValue jsSourceBufferTimestampOffsetGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.timestampOffset());
    return result;
}

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsSourceBufferAudioTracksGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferAudioTracks(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferAudioTracksGetter>(state, thisValue, "audioTracks");
}

static inline JSValue jsSourceBufferAudioTracksGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<AudioTrackList>>(state, *thisObject.globalObject(), impl.audioTracks());
    return result;
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsSourceBufferVideoTracksGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferVideoTracks(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferVideoTracksGetter>(state, thisValue, "videoTracks");
}

static inline JSValue jsSourceBufferVideoTracksGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<VideoTrackList>>(state, *thisObject.globalObject(), impl.videoTracks());
    return result;
}

#endif

#if ENABLE(VIDEO_TRACK)
static inline JSValue jsSourceBufferTextTracksGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferTextTracks(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferTextTracksGetter>(state, thisValue, "textTracks");
}

static inline JSValue jsSourceBufferTextTracksGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<TextTrackList>>(state, *thisObject.globalObject(), impl.textTracks());
    return result;
}

#endif

static inline JSValue jsSourceBufferAppendWindowStartGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferAppendWindowStart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferAppendWindowStartGetter>(state, thisValue, "appendWindowStart");
}

static inline JSValue jsSourceBufferAppendWindowStartGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDouble>(impl.appendWindowStart());
    return result;
}

static inline JSValue jsSourceBufferAppendWindowEndGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferAppendWindowEnd(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferAppendWindowEndGetter>(state, thisValue, "appendWindowEnd");
}

static inline JSValue jsSourceBufferAppendWindowEndGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedDouble>(impl.appendWindowEnd());
    return result;
}

static inline JSValue jsSourceBufferOnupdatestartGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferOnupdatestart(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferOnupdatestartGetter>(state, thisValue, "onupdatestart");
}

static inline JSValue jsSourceBufferOnupdatestartGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().updatestartEvent);
}

static inline JSValue jsSourceBufferOnupdateGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferOnupdate(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferOnupdateGetter>(state, thisValue, "onupdate");
}

static inline JSValue jsSourceBufferOnupdateGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().updateEvent);
}

static inline JSValue jsSourceBufferOnupdateendGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferOnupdateend(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferOnupdateendGetter>(state, thisValue, "onupdateend");
}

static inline JSValue jsSourceBufferOnupdateendGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().updateendEvent);
}

static inline JSValue jsSourceBufferOnerrorGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsSourceBufferOnerrorGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

static inline JSValue jsSourceBufferOnabortGetter(ExecState&, JSSourceBuffer&, ThrowScope& throwScope);

EncodedJSValue jsSourceBufferOnabort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSourceBuffer>::attribute<jsSourceBufferOnabortGetter>(state, thisValue, "onabort");
}

static inline JSValue jsSourceBufferOnabortGetter(ExecState& state, JSSourceBuffer& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().abortEvent);
}

EncodedJSValue jsSourceBufferConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSourceBufferPrototype* domObject = jsDynamicDowncast<JSSourceBufferPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSourceBuffer::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSourceBufferConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSourceBufferPrototype* domObject = jsDynamicDowncast<JSSourceBufferPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSourceBufferModeFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferMode(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferModeFunction>(state, thisValue, encodedValue, "mode");
}

static inline bool setJSSourceBufferModeFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = parseEnumeration<SourceBuffer::AppendMode>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (UNLIKELY(!nativeValue))
        return false;
    propagateException(state, throwScope, impl.setMode(nativeValue.value()));
    return true;
}


static inline bool setJSSourceBufferTimestampOffsetFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferTimestampOffset(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferTimestampOffsetFunction>(state, thisValue, encodedValue, "timestampOffset");
}

static inline bool setJSSourceBufferTimestampOffsetFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setTimestampOffset(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSourceBufferAppendWindowStartFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferAppendWindowStart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferAppendWindowStartFunction>(state, thisValue, encodedValue, "appendWindowStart");
}

static inline bool setJSSourceBufferAppendWindowStartFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setAppendWindowStart(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSourceBufferAppendWindowEndFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferAppendWindowEnd(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferAppendWindowEndFunction>(state, thisValue, encodedValue, "appendWindowEnd");
}

static inline bool setJSSourceBufferAppendWindowEndFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedDouble>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    propagateException(state, throwScope, impl.setAppendWindowEnd(WTFMove(nativeValue)));
    return true;
}


static inline bool setJSSourceBufferOnupdatestartFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferOnupdatestart(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferOnupdatestartFunction>(state, thisValue, encodedValue, "onupdatestart");
}

static inline bool setJSSourceBufferOnupdatestartFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().updatestartEvent, value);
    return true;
}


static inline bool setJSSourceBufferOnupdateFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferOnupdate(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferOnupdateFunction>(state, thisValue, encodedValue, "onupdate");
}

static inline bool setJSSourceBufferOnupdateFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().updateEvent, value);
    return true;
}


static inline bool setJSSourceBufferOnupdateendFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferOnupdateend(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferOnupdateendFunction>(state, thisValue, encodedValue, "onupdateend");
}

static inline bool setJSSourceBufferOnupdateendFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().updateendEvent, value);
    return true;
}


static inline bool setJSSourceBufferOnerrorFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSSourceBufferOnerrorFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


static inline bool setJSSourceBufferOnabortFunction(ExecState&, JSSourceBuffer&, JSValue, ThrowScope&);

bool setJSSourceBufferOnabort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSourceBuffer>::setAttribute<setJSSourceBufferOnabortFunction>(state, thisValue, encodedValue, "onabort");
}

static inline bool setJSSourceBufferOnabortFunction(ExecState& state, JSSourceBuffer& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().abortEvent, value);
    return true;
}


JSValue JSSourceBuffer::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSourceBufferConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionAppendBufferCaller(JSC::ExecState*, JSSourceBuffer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionAppendBuffer(ExecState* state)
{
    return BindingCaller<JSSourceBuffer>::callOperation<jsSourceBufferPrototypeFunctionAppendBufferCaller>(state, "appendBuffer");
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionAppendBufferCaller(JSC::ExecState* state, JSSourceBuffer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto data = convert<IDLBufferSource>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.appendBuffer(WTFMove(data)));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionAbortCaller(JSC::ExecState*, JSSourceBuffer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionAbort(ExecState* state)
{
    return BindingCaller<JSSourceBuffer>::callOperation<jsSourceBufferPrototypeFunctionAbortCaller>(state, "abort");
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionAbortCaller(JSC::ExecState* state, JSSourceBuffer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.abort());
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionRemoveCaller(JSC::ExecState*, JSSourceBuffer*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsSourceBufferPrototypeFunctionRemove(ExecState* state)
{
    return BindingCaller<JSSourceBuffer>::callOperation<jsSourceBufferPrototypeFunctionRemoveCaller>(state, "remove");
}

static inline JSC::EncodedJSValue jsSourceBufferPrototypeFunctionRemoveCaller(JSC::ExecState* state, JSSourceBuffer* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 2))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto start = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(0));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto end = convert<IDLUnrestrictedDouble>(*state, state->uncheckedArgument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    propagateException(*state, throwScope, impl.remove(WTFMove(start), WTFMove(end)));
    return JSValue::encode(jsUndefined());
}

void JSSourceBuffer::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSSourceBuffer*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSSourceBufferOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsSourceBuffer = jsCast<JSSourceBuffer*>(handle.slot()->asCell());
    if (jsSourceBuffer->wrapped().hasPendingActivity())
        return true;
    if (jsSourceBuffer->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSSourceBufferOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsSourceBuffer = static_cast<JSSourceBuffer*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsSourceBuffer->wrapped(), jsSourceBuffer);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7SourceBuffer@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore12SourceBufferE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<SourceBuffer>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7SourceBuffer@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore12SourceBufferE[2];
#if COMPILER(CLANG)
    // If this fails SourceBuffer does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(SourceBuffer), "SourceBuffer is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // SourceBuffer has subclasses. If SourceBuffer has subclasses that get passed
    // to toJS() we currently require SourceBuffer you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<SourceBuffer>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, SourceBuffer& impl)
{
    return wrap(state, globalObject, impl);
}

SourceBuffer* JSSourceBuffer::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSSourceBuffer*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_SOURCE)
