/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(MEDIA_STREAM)

#include "JSRTCDTMFSender.h"

#include "Event.h"
#include "ExceptionCode.h"
#include "JSDOMBinding.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSMediaStreamTrack.h"
#include "MediaStreamTrack.h"
#include "URL.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionInsertDTMF(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionAddEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionRemoveEventListener(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionDispatchEvent(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsRTCDTMFSenderCanInsertDTMF(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDTMFSenderTrack(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDTMFSenderToneBuffer(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDTMFSenderDuration(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDTMFSenderInterToneGap(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsRTCDTMFSenderOntonechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::PropertyName);
void setJSRTCDTMFSenderOntonechange(JSC::ExecState*, JSC::JSObject*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSRTCDTMFSenderPrototype : public JSC::JSNonFinalObject {
public:
    typedef JSC::JSNonFinalObject Base;
    static JSRTCDTMFSenderPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSRTCDTMFSenderPrototype* ptr = new (NotNull, JSC::allocateCell<JSRTCDTMFSenderPrototype>(vm.heap)) JSRTCDTMFSenderPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSRTCDTMFSenderPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSRTCDTMFSenderPrototypeTableValues[] =
{
    { "canInsertDTMF", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderCanInsertDTMF), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "track", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderTrack), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toneBuffer", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderToneBuffer), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "duration", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderDuration), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "interToneGap", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderInterToneGap), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "ontonechange", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsRTCDTMFSenderOntonechange), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSRTCDTMFSenderOntonechange) } },
    { "insertDTMF", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionInsertDTMF), (intptr_t) (1) } },
    { "addEventListener", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionAddEventListener), (intptr_t) (2) } },
    { "removeEventListener", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionRemoveEventListener), (intptr_t) (2) } },
    { "dispatchEvent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsRTCDTMFSenderPrototypeFunctionDispatchEvent), (intptr_t) (1) } },
};

const ClassInfo JSRTCDTMFSenderPrototype::s_info = { "RTCDTMFSenderPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCDTMFSenderPrototype) };

void JSRTCDTMFSenderPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSRTCDTMFSenderPrototypeTableValues, *this);
}

const ClassInfo JSRTCDTMFSender::s_info = { "RTCDTMFSender", &Base::s_info, 0, CREATE_METHOD_TABLE(JSRTCDTMFSender) };

JSRTCDTMFSender::JSRTCDTMFSender(Structure* structure, JSDOMGlobalObject& globalObject, Ref<RTCDTMFSender>&& impl)
    : JSDOMWrapper<RTCDTMFSender>(structure, globalObject, WTF::move(impl))
{
}

JSObject* JSRTCDTMFSender::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSRTCDTMFSenderPrototype::create(vm, globalObject, JSRTCDTMFSenderPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSRTCDTMFSender::getPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSRTCDTMFSender>(vm, globalObject);
}

void JSRTCDTMFSender::destroy(JSC::JSCell* cell)
{
    JSRTCDTMFSender* thisObject = static_cast<JSRTCDTMFSender*>(cell);
    thisObject->JSRTCDTMFSender::~JSRTCDTMFSender();
}

EncodedJSValue jsRTCDTMFSenderCanInsertDTMF(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "canInsertDTMF");
        return throwGetterTypeError(*state, "RTCDTMFSender", "canInsertDTMF");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsBoolean(impl.canInsertDTMF());
    return JSValue::encode(result);
}


EncodedJSValue jsRTCDTMFSenderTrack(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "track");
        return throwGetterTypeError(*state, "RTCDTMFSender", "track");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = toJS(state, castedThis->globalObject(), WTF::getPtr(impl.track()));
    return JSValue::encode(result);
}


EncodedJSValue jsRTCDTMFSenderToneBuffer(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "toneBuffer");
        return throwGetterTypeError(*state, "RTCDTMFSender", "toneBuffer");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsStringWithCache(state, impl.toneBuffer());
    return JSValue::encode(result);
}


EncodedJSValue jsRTCDTMFSenderDuration(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "duration");
        return throwGetterTypeError(*state, "RTCDTMFSender", "duration");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.duration());
    return JSValue::encode(result);
}


EncodedJSValue jsRTCDTMFSenderInterToneGap(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "interToneGap");
        return throwGetterTypeError(*state, "RTCDTMFSender", "interToneGap");
    }
    auto& impl = castedThis->wrapped();
    JSValue result = jsNumber(impl.interToneGap());
    return JSValue::encode(result);
}


EncodedJSValue jsRTCDTMFSenderOntonechange(ExecState* state, JSObject* slotBase, EncodedJSValue thisValue, PropertyName)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(slotBase);
    UNUSED_PARAM(thisValue);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(slotBase))
            return reportDeprecatedGetterError(*state, "RTCDTMFSender", "ontonechange");
        return throwGetterTypeError(*state, "RTCDTMFSender", "ontonechange");
    }
    UNUSED_PARAM(state);
    return JSValue::encode(eventHandlerAttribute(castedThis->wrapped(), eventNames().tonechangeEvent));
}


void setJSRTCDTMFSenderOntonechange(ExecState* state, JSObject* baseObject, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(baseObject);
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(JSValue::decode(thisValue));
    if (UNLIKELY(!castedThis)) {
        if (jsDynamicCast<JSRTCDTMFSenderPrototype*>(JSValue::decode(thisValue)))
            reportDeprecatedSetterError(*state, "RTCDTMFSender", "ontonechange");
        else
            throwSetterTypeError(*state, "RTCDTMFSender", "ontonechange");
        return;
    }
    setEventHandlerAttribute(*state, *castedThis, castedThis->wrapped(), eventNames().tonechangeEvent, value);
}


EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionInsertDTMF(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "RTCDTMFSender", "insertDTMF");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    ExceptionCode ec = 0;
    String tones = state->argument(0).toString(state)->value(state);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());

    size_t argsCount = state->argumentCount();
    if (argsCount <= 1) {
        impl.insertDTMF(tones, ec);
        setDOMException(state, ec);
        return JSValue::encode(jsUndefined());
    }

    int duration = toInt32(state, state->argument(1), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    if (argsCount <= 2) {
        impl.insertDTMF(tones, duration, ec);
        setDOMException(state, ec);
        return JSValue::encode(jsUndefined());
    }

    int interToneGap = toInt32(state, state->argument(2), NormalConversion);
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    impl.insertDTMF(tones, duration, interToneGap, ec);
    setDOMException(state, ec);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionAddEventListener(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "RTCDTMFSender", "addEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    auto& impl = castedThis->wrapped();
    JSValue listener = state->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.addEventListener(state->argument(0).toString(state)->toAtomicString(state), createJSEventListenerForAdd(*state, *asObject(listener), *castedThis), state->argument(2).toBoolean(state));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionRemoveEventListener(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "RTCDTMFSender", "removeEventListener");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    auto& impl = castedThis->wrapped();
    JSValue listener = state->argument(1);
    if (UNLIKELY(!listener.isObject()))
        return JSValue::encode(jsUndefined());
    impl.removeEventListener(state->argument(0).toString(state)->toAtomicString(state), createJSEventListenerForRemove(*state, *asObject(listener), *castedThis).ptr(), state->argument(2).toBoolean(state));
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsRTCDTMFSenderPrototypeFunctionDispatchEvent(ExecState* state)
{
    JSValue thisValue = state->thisValue();
    JSRTCDTMFSender* castedThis = jsDynamicCast<JSRTCDTMFSender*>(thisValue);
    if (UNLIKELY(!castedThis))
        return throwThisTypeError(*state, "RTCDTMFSender", "dispatchEvent");
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSRTCDTMFSender::info());
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, createNotEnoughArgumentsError(state));
    ExceptionCode ec = 0;
    Event* event = JSEvent::toWrapped(state->argument(0));
    if (UNLIKELY(state->hadException()))
        return JSValue::encode(jsUndefined());
    JSValue result = jsBoolean(impl.dispatchEvent(event, ec));

    setDOMException(state, ec);
    return JSValue::encode(result);
}

void JSRTCDTMFSender::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSRTCDTMFSender*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
}

bool JSRTCDTMFSenderOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsRTCDTMFSender = jsCast<JSRTCDTMFSender*>(handle.slot()->asCell());
    if (jsRTCDTMFSender->wrapped().hasPendingActivity())
        return true;
    if (jsRTCDTMFSender->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSRTCDTMFSenderOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsRTCDTMFSender = jsCast<JSRTCDTMFSender*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsRTCDTMFSender->wrapped(), jsRTCDTMFSender);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7RTCDTMFSender@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore13RTCDTMFSenderE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, RTCDTMFSender* impl)
{
    if (!impl)
        return jsNull();
    return createNewWrapper<JSRTCDTMFSender>(globalObject, impl);
}

JSC::JSValue toJS(JSC::ExecState*, JSDOMGlobalObject* globalObject, RTCDTMFSender* impl)
{
    if (!impl)
        return jsNull();
    if (JSValue result = getExistingWrapper<JSRTCDTMFSender>(globalObject, impl))
        return result;

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7RTCDTMFSender@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore13RTCDTMFSenderE[2];
#if COMPILER(CLANG)
    // If this fails RTCDTMFSender does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    COMPILE_ASSERT(__is_polymorphic(RTCDTMFSender), RTCDTMFSender_is_not_polymorphic);
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // RTCDTMFSender has subclasses. If RTCDTMFSender has subclasses that get passed
    // to toJS() we currently require RTCDTMFSender you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createNewWrapper<JSRTCDTMFSender>(globalObject, impl);
}

RTCDTMFSender* JSRTCDTMFSender::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicCast<JSRTCDTMFSender*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(MEDIA_STREAM)
