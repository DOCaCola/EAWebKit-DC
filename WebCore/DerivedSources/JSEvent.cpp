/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSEvent.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSEventInit.h"
#include "JSEventTarget.h"
#include "JSNode.h"
#include "RuntimeEnabledFeatures.h"
#include <runtime/Error.h>
#include <runtime/FunctionPrototype.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionComposedPath(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionStopPropagation(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionPreventDefault(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionInitEvent(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionStopImmediatePropagation(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsEventType(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventCurrentTarget(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventEventPhase(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventBubbles(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventCancelable(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventComposed(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventTimeStamp(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventDefaultPrevented(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventIsTrusted(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventSrcElement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsEventReturnValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventReturnValue(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsEventCancelBubble(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventCancelBubble(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSEventConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSEventPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSEventPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSEventPrototype* ptr = new (NotNull, JSC::allocateCell<JSEventPrototype>(vm.heap)) JSEventPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSEventPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSEventConstructor = JSDOMConstructor<JSEvent>;

/* Hash table */

static const struct CompactHashIndex JSEventTableIndex[2] = {
    { 0, -1 },
    { -1, -1 },
};


static const HashTableValue JSEventTableValues[] =
{
    { "isTrusted", DontDelete | ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventIsTrusted), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
};

static const HashTable JSEventTable = { 1, 1, true, JSEventTableValues, JSEventTableIndex };
/* Hash table for constructor */

static const HashTableValue JSEventConstructorTableValues[] =
{
    { "NONE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "CAPTURING_PHASE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "AT_TARGET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "BUBBLING_PHASE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "MOUSEDOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "MOUSEUP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "MOUSEOVER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "MOUSEOUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8) } },
    { "MOUSEMOVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(16) } },
    { "MOUSEDRAG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(32) } },
    { "CLICK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(64) } },
    { "DBLCLICK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(128) } },
    { "KEYDOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(256) } },
    { "KEYUP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(512) } },
    { "KEYPRESS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1024) } },
    { "DRAGDROP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2048) } },
    { "FOCUS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4096) } },
    { "BLUR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8192) } },
    { "SELECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(16384) } },
    { "CHANGE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(32768) } },
};

static_assert(Event::NONE == 0, "NONE in Event does not match value from IDL");
static_assert(Event::CAPTURING_PHASE == 1, "CAPTURING_PHASE in Event does not match value from IDL");
static_assert(Event::AT_TARGET == 2, "AT_TARGET in Event does not match value from IDL");
static_assert(Event::BUBBLING_PHASE == 3, "BUBBLING_PHASE in Event does not match value from IDL");
static_assert(Event::MOUSEDOWN == 1, "MOUSEDOWN in Event does not match value from IDL");
static_assert(Event::MOUSEUP == 2, "MOUSEUP in Event does not match value from IDL");
static_assert(Event::MOUSEOVER == 4, "MOUSEOVER in Event does not match value from IDL");
static_assert(Event::MOUSEOUT == 8, "MOUSEOUT in Event does not match value from IDL");
static_assert(Event::MOUSEMOVE == 16, "MOUSEMOVE in Event does not match value from IDL");
static_assert(Event::MOUSEDRAG == 32, "MOUSEDRAG in Event does not match value from IDL");
static_assert(Event::CLICK == 64, "CLICK in Event does not match value from IDL");
static_assert(Event::DBLCLICK == 128, "DBLCLICK in Event does not match value from IDL");
static_assert(Event::KEYDOWN == 256, "KEYDOWN in Event does not match value from IDL");
static_assert(Event::KEYUP == 512, "KEYUP in Event does not match value from IDL");
static_assert(Event::KEYPRESS == 1024, "KEYPRESS in Event does not match value from IDL");
static_assert(Event::DRAGDROP == 2048, "DRAGDROP in Event does not match value from IDL");
static_assert(Event::FOCUS == 4096, "FOCUS in Event does not match value from IDL");
static_assert(Event::BLUR == 8192, "BLUR in Event does not match value from IDL");
static_assert(Event::SELECT == 16384, "SELECT in Event does not match value from IDL");
static_assert(Event::CHANGE == 32768, "CHANGE in Event does not match value from IDL");

template<> EncodedJSValue JSC_HOST_CALL JSEventConstructor::construct(ExecState* state)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    UNUSED_PARAM(throwScope);
    auto* castedThis = jsCast<JSEventConstructor*>(state->jsCallee());
    ASSERT(castedThis);
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto type = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto eventInitDict = convert<IDLDictionary<EventInit>>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto object = Event::create(WTFMove(type), WTFMove(eventInitDict));
    return JSValue::encode(toJSNewlyCreated<IDLInterface<Event>>(*state, *castedThis->globalObject(), WTFMove(object)));
}

template<> JSValue JSEventConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSEventConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSEvent::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("Event"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(1), ReadOnly | DontEnum);
    reifyStaticProperties(vm, JSEventConstructorTableValues, *this);
}

template<> const ClassInfo JSEventConstructor::s_info = { "Event", &Base::s_info, 0, CREATE_METHOD_TABLE(JSEventConstructor) };

/* Hash table for prototype */

static const HashTableValue JSEventPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventConstructor) } },
    { "type", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventType), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "target", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "currentTarget", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventCurrentTarget), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "eventPhase", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventEventPhase), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "bubbles", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventBubbles), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "cancelable", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventCancelable), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "composed", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventComposed), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "timeStamp", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventTimeStamp), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "defaultPrevented", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventDefaultPrevented), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "srcElement", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventSrcElement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "returnValue", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventReturnValue), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventReturnValue) } },
    { "cancelBubble", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsEventCancelBubble), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSEventCancelBubble) } },
    { "composedPath", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventPrototypeFunctionComposedPath), (intptr_t) (0) } },
    { "stopPropagation", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventPrototypeFunctionStopPropagation), (intptr_t) (0) } },
    { "preventDefault", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventPrototypeFunctionPreventDefault), (intptr_t) (0) } },
    { "initEvent", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventPrototypeFunctionInitEvent), (intptr_t) (3) } },
    { "stopImmediatePropagation", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsEventPrototypeFunctionStopImmediatePropagation), (intptr_t) (0) } },
    { "NONE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(0) } },
    { "CAPTURING_PHASE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "AT_TARGET", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "BUBBLING_PHASE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(3) } },
    { "MOUSEDOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1) } },
    { "MOUSEUP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2) } },
    { "MOUSEOVER", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4) } },
    { "MOUSEOUT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8) } },
    { "MOUSEMOVE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(16) } },
    { "MOUSEDRAG", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(32) } },
    { "CLICK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(64) } },
    { "DBLCLICK", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(128) } },
    { "KEYDOWN", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(256) } },
    { "KEYUP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(512) } },
    { "KEYPRESS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(1024) } },
    { "DRAGDROP", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(2048) } },
    { "FOCUS", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(4096) } },
    { "BLUR", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(8192) } },
    { "SELECT", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(16384) } },
    { "CHANGE", DontDelete | ReadOnly | ConstantInteger, NoIntrinsic, { (long long)(32768) } },
};

const ClassInfo JSEventPrototype::s_info = { "EventPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSEventPrototype) };

void JSEventPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSEventPrototypeTableValues, *this);
    if (!RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("composedPath"), strlen("composedPath"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
    if (!RuntimeEnabledFeatures::sharedFeatures().shadowDOMEnabled()) {
        Identifier propertyName = Identifier::fromString(&vm, reinterpret_cast<const LChar*>("composed"), strlen("composed"));
        VM::DeletePropertyModeScope scope(vm, VM::DeletePropertyMode::IgnoreConfigurable);
        JSObject::deleteProperty(this, globalObject()->globalExec(), propertyName);
    }
}

const ClassInfo JSEvent::s_info = { "Event", &Base::s_info, &JSEventTable, CREATE_METHOD_TABLE(JSEvent) };

JSEvent::JSEvent(Structure* structure, JSDOMGlobalObject& globalObject, Ref<Event>&& impl)
    : JSDOMWrapper<Event>(structure, globalObject, WTFMove(impl))
{
}

void JSEvent::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSEvent::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSEventPrototype::create(vm, globalObject, JSEventPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSEvent::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSEvent>(vm, globalObject);
}

void JSEvent::destroy(JSC::JSCell* cell)
{
    JSEvent* thisObject = static_cast<JSEvent*>(cell);
    thisObject->JSEvent::~JSEvent();
}

template<> inline JSEvent* BindingCaller<JSEvent>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSEvent*>(JSValue::decode(thisValue));
}

template<> inline JSEvent* BindingCaller<JSEvent>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSEvent*>(state.thisValue());
}

static inline JSValue jsEventTypeGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventType(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventTypeGetter>(state, thisValue, "type");
}

static inline JSValue jsEventTypeGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLDOMString>(state, impl.type());
    return result;
}

static inline JSValue jsEventTargetGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventTargetGetter>(state, thisValue, "target");
}

static inline JSValue jsEventTargetGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<EventTarget>>(state, *thisObject.globalObject(), impl.target());
    return result;
}

static inline JSValue jsEventCurrentTargetGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventCurrentTarget(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventCurrentTargetGetter>(state, thisValue, "currentTarget");
}

static inline JSValue jsEventCurrentTargetGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<EventTarget>>(state, *thisObject.globalObject(), impl.currentTarget());
    return result;
}

static inline JSValue jsEventEventPhaseGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventEventPhase(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventEventPhaseGetter>(state, thisValue, "eventPhase");
}

static inline JSValue jsEventEventPhaseGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedShort>(impl.eventPhase());
    return result;
}

static inline JSValue jsEventBubblesGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventBubbles(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventBubblesGetter>(state, thisValue, "bubbles");
}

static inline JSValue jsEventBubblesGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.bubbles());
    return result;
}

static inline JSValue jsEventCancelableGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventCancelable(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventCancelableGetter>(state, thisValue, "cancelable");
}

static inline JSValue jsEventCancelableGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.cancelable());
    return result;
}

static inline JSValue jsEventComposedGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventComposed(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventComposedGetter>(state, thisValue, "composed");
}

static inline JSValue jsEventComposedGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.composed());
    return result;
}

static inline JSValue jsEventTimeStampGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventTimeStamp(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventTimeStampGetter>(state, thisValue, "timeStamp");
}

static inline JSValue jsEventTimeStampGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnsignedLongLong>(impl.timeStamp());
    return result;
}

static inline JSValue jsEventDefaultPreventedGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventDefaultPrevented(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventDefaultPreventedGetter>(state, thisValue, "defaultPrevented");
}

static inline JSValue jsEventDefaultPreventedGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.defaultPrevented());
    return result;
}

static inline JSValue jsEventIsTrustedGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventIsTrusted(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventIsTrustedGetter>(state, thisValue, "isTrusted");
}

static inline JSValue jsEventIsTrustedGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.isTrusted());
    return result;
}

static inline JSValue jsEventSrcElementGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventSrcElement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventSrcElementGetter>(state, thisValue, "srcElement");
}

static inline JSValue jsEventSrcElementGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<EventTarget>>(state, *thisObject.globalObject(), impl.srcElement());
    return result;
}

static inline JSValue jsEventReturnValueGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventReturnValue(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventReturnValueGetter>(state, thisValue, "returnValue");
}

static inline JSValue jsEventReturnValueGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.legacyReturnValue());
    return result;
}

static inline JSValue jsEventCancelBubbleGetter(ExecState&, JSEvent&, ThrowScope& throwScope);

EncodedJSValue jsEventCancelBubble(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSEvent>::attribute<jsEventCancelBubbleGetter>(state, thisValue, "cancelBubble");
}

static inline JSValue jsEventCancelBubbleGetter(ExecState& state, JSEvent& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.cancelBubble());
    return result;
}

EncodedJSValue jsEventConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSEventPrototype* domObject = jsDynamicDowncast<JSEventPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSEvent::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSEventConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSEventPrototype* domObject = jsDynamicDowncast<JSEventPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSEventReturnValueFunction(ExecState&, JSEvent&, JSValue, ThrowScope&);

bool setJSEventReturnValue(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSEvent>::setAttribute<setJSEventReturnValueFunction>(state, thisValue, encodedValue, "returnValue");
}

static inline bool setJSEventReturnValueFunction(ExecState& state, JSEvent& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setLegacyReturnValue(WTFMove(nativeValue));
    return true;
}


static inline bool setJSEventCancelBubbleFunction(ExecState&, JSEvent&, JSValue, ThrowScope&);

bool setJSEventCancelBubble(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSEvent>::setAttribute<setJSEventCancelBubbleFunction>(state, thisValue, encodedValue, "cancelBubble");
}

static inline bool setJSEventCancelBubbleFunction(ExecState& state, JSEvent& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setCancelBubble(WTFMove(nativeValue));
    return true;
}


JSValue JSEvent::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSEventConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionComposedPathCaller(JSC::ExecState*, JSEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionComposedPath(ExecState* state)
{
    return BindingCaller<JSEvent>::callOperation<jsEventPrototypeFunctionComposedPathCaller>(state, "composedPath");
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionComposedPathCaller(JSC::ExecState* state, JSEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    return JSValue::encode(toJS<IDLSequence<IDLInterface<Node>>>(*state, *castedThis->globalObject(), impl.composedPath()));
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionStopPropagationCaller(JSC::ExecState*, JSEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionStopPropagation(ExecState* state)
{
    return BindingCaller<JSEvent>::callOperation<jsEventPrototypeFunctionStopPropagationCaller>(state, "stopPropagation");
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionStopPropagationCaller(JSC::ExecState* state, JSEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.stopPropagation();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionPreventDefaultCaller(JSC::ExecState*, JSEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionPreventDefault(ExecState* state)
{
    return BindingCaller<JSEvent>::callOperation<jsEventPrototypeFunctionPreventDefaultCaller>(state, "preventDefault");
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionPreventDefaultCaller(JSC::ExecState* state, JSEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.preventDefault();
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionInitEventCaller(JSC::ExecState*, JSEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionInitEvent(ExecState* state)
{
    return BindingCaller<JSEvent>::callOperation<jsEventPrototypeFunctionInitEventCaller>(state, "initEvent");
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionInitEventCaller(JSC::ExecState* state, JSEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto type = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto bubbles = convert<IDLBoolean>(*state, state->argument(1));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    auto cancelable = convert<IDLBoolean>(*state, state->argument(2));
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    impl.initEvent(WTFMove(type), WTFMove(bubbles), WTFMove(cancelable));
    return JSValue::encode(jsUndefined());
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionStopImmediatePropagationCaller(JSC::ExecState*, JSEvent*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsEventPrototypeFunctionStopImmediatePropagation(ExecState* state)
{
    return BindingCaller<JSEvent>::callOperation<jsEventPrototypeFunctionStopImmediatePropagationCaller>(state, "stopImmediatePropagation");
}

static inline JSC::EncodedJSValue jsEventPrototypeFunctionStopImmediatePropagationCaller(JSC::ExecState* state, JSEvent* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.stopImmediatePropagation();
    return JSValue::encode(jsUndefined());
}

bool JSEventOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSEventOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsEvent = static_cast<JSEvent*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsEvent->wrapped(), jsEvent);
}

Event* JSEvent::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSEvent*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
