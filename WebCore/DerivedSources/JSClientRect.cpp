/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSClientRect.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <runtime/FunctionPrototype.h>
#include <runtime/ObjectConstructor.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsClientRectPrototypeFunctionToJSON(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsClientRectTop(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectRight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectBottom(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectLeft(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectWidth(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectHeight(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsClientRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSClientRectConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSClientRectPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSClientRectPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSClientRectPrototype* ptr = new (NotNull, JSC::allocateCell<JSClientRectPrototype>(vm.heap)) JSClientRectPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSClientRectPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSClientRectConstructor = JSDOMConstructorNotConstructable<JSClientRect>;

template<> JSValue JSClientRectConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    UNUSED_PARAM(vm);
    return globalObject.functionPrototype();
}

template<> void JSClientRectConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSClientRect::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("ClientRect"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSClientRectConstructor::s_info = { "ClientRect", &Base::s_info, 0, CREATE_METHOD_TABLE(JSClientRectConstructor) };

/* Hash table for prototype */

static const HashTableValue JSClientRectPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSClientRectConstructor) } },
    { "top", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectTop), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "right", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectRight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "bottom", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectBottom), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "left", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectLeft), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "width", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectWidth), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "height", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsClientRectHeight), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "toJSON", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsClientRectPrototypeFunctionToJSON), (intptr_t) (0) } },
};

const ClassInfo JSClientRectPrototype::s_info = { "ClientRectPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSClientRectPrototype) };

void JSClientRectPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSClientRectPrototypeTableValues, *this);
}

const ClassInfo JSClientRect::s_info = { "ClientRect", &Base::s_info, 0, CREATE_METHOD_TABLE(JSClientRect) };

JSClientRect::JSClientRect(Structure* structure, JSDOMGlobalObject& globalObject, Ref<ClientRect>&& impl)
    : JSDOMWrapper<ClientRect>(structure, globalObject, WTFMove(impl))
{
}

void JSClientRect::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSClientRect::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSClientRectPrototype::create(vm, globalObject, JSClientRectPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSClientRect::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSClientRect>(vm, globalObject);
}

void JSClientRect::destroy(JSC::JSCell* cell)
{
    JSClientRect* thisObject = static_cast<JSClientRect*>(cell);
    thisObject->JSClientRect::~JSClientRect();
}

template<> inline JSClientRect* BindingCaller<JSClientRect>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSClientRect*>(JSValue::decode(thisValue));
}

template<> inline JSClientRect* BindingCaller<JSClientRect>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSClientRect*>(state.thisValue());
}

static inline JSValue jsClientRectTopGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectTop(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectTopGetter>(state, thisValue, "top");
}

static inline JSValue jsClientRectTopGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.top());
    return result;
}

static inline JSValue jsClientRectRightGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectRight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectRightGetter>(state, thisValue, "right");
}

static inline JSValue jsClientRectRightGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.right());
    return result;
}

static inline JSValue jsClientRectBottomGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectBottom(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectBottomGetter>(state, thisValue, "bottom");
}

static inline JSValue jsClientRectBottomGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.bottom());
    return result;
}

static inline JSValue jsClientRectLeftGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectLeft(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectLeftGetter>(state, thisValue, "left");
}

static inline JSValue jsClientRectLeftGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.left());
    return result;
}

static inline JSValue jsClientRectWidthGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectWidth(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectWidthGetter>(state, thisValue, "width");
}

static inline JSValue jsClientRectWidthGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.width());
    return result;
}

static inline JSValue jsClientRectHeightGetter(ExecState&, JSClientRect&, ThrowScope& throwScope);

EncodedJSValue jsClientRectHeight(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSClientRect>::attribute<jsClientRectHeightGetter>(state, thisValue, "height");
}

static inline JSValue jsClientRectHeightGetter(ExecState& state, JSClientRect& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.height());
    return result;
}

EncodedJSValue jsClientRectConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSClientRectPrototype* domObject = jsDynamicDowncast<JSClientRectPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSClientRect::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSClientRectConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSClientRectPrototype* domObject = jsDynamicDowncast<JSClientRectPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

JSValue JSClientRect::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSClientRectConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline EncodedJSValue jsClientRectPrototypeFunctionToJSONCaller(ExecState* state, JSClientRect* thisObject, JSC::ThrowScope& throwScope)
{
    auto& vm = state->vm();
    auto* result = constructEmptyObject(state);

    auto topValue = jsClientRectTopGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "top"), topValue);

    auto rightValue = jsClientRectRightGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "right"), rightValue);

    auto bottomValue = jsClientRectBottomGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "bottom"), bottomValue);

    auto leftValue = jsClientRectLeftGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "left"), leftValue);

    auto widthValue = jsClientRectWidthGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "width"), widthValue);

    auto heightValue = jsClientRectHeightGetter(*state, *thisObject, throwScope);
    ASSERT(!throwScope.exception());
    result->putDirect(vm, Identifier::fromString(&vm, "height"), heightValue);

    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsClientRectPrototypeFunctionToJSON(ExecState* state)
{
    return BindingCaller<JSClientRect>::callOperation<jsClientRectPrototypeFunctionToJSONCaller>(state, "toJSON");
}

bool JSClientRectOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSClientRectOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsClientRect = static_cast<JSClientRect*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsClientRect->wrapped(), jsClientRect);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<ClientRect>&& impl)
{
#if COMPILER(CLANG)
    // If you hit this failure the interface definition has the ImplementationLacksVTable
    // attribute. You should remove that attribute. If the class has subclasses
    // that may be passed through this toJS() function you should use the SkipVTableValidation
    // attribute to ClientRect.
    static_assert(!__is_polymorphic(ClientRect), "ClientRect is polymorphic but the IDL claims it is not");
#endif
    return createWrapper<ClientRect>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, ClientRect& impl)
{
    return wrap(state, globalObject, impl);
}

ClientRect* JSClientRect::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSClientRect*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}
