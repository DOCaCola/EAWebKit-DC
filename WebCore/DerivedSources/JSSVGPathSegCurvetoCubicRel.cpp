/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSSVGPathSegCurvetoCubicRel.h"

#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Attributes

JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelX(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelY(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelX1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelX1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelY1(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelY1(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelX2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelX2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelY2(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelY2(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsSVGPathSegCurvetoCubicRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSSVGPathSegCurvetoCubicRelConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSSVGPathSegCurvetoCubicRelPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSSVGPathSegCurvetoCubicRelPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSSVGPathSegCurvetoCubicRelPrototype* ptr = new (NotNull, JSC::allocateCell<JSSVGPathSegCurvetoCubicRelPrototype>(vm.heap)) JSSVGPathSegCurvetoCubicRelPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSSVGPathSegCurvetoCubicRelPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSSVGPathSegCurvetoCubicRelConstructor = JSDOMConstructorNotConstructable<JSSVGPathSegCurvetoCubicRel>;

template<> JSValue JSSVGPathSegCurvetoCubicRelConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSSVGPathSeg::getConstructor(vm, &globalObject);
}

template<> void JSSVGPathSegCurvetoCubicRelConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSSVGPathSegCurvetoCubicRel::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("SVGPathSegCurvetoCubicRel"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSSVGPathSegCurvetoCubicRelConstructor::s_info = { "SVGPathSegCurvetoCubicRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicRelConstructor) };

/* Hash table for prototype */

static const HashTableValue JSSVGPathSegCurvetoCubicRelPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelConstructor) } },
    { "x", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelX), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelX) } },
    { "y", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelY), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelY) } },
    { "x1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelX1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelX1) } },
    { "y1", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelY1), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelY1) } },
    { "x2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelX2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelX2) } },
    { "y2", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsSVGPathSegCurvetoCubicRelY2), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSSVGPathSegCurvetoCubicRelY2) } },
};

const ClassInfo JSSVGPathSegCurvetoCubicRelPrototype::s_info = { "SVGPathSegCurvetoCubicRelPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicRelPrototype) };

void JSSVGPathSegCurvetoCubicRelPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSSVGPathSegCurvetoCubicRelPrototypeTableValues, *this);
}

const ClassInfo JSSVGPathSegCurvetoCubicRel::s_info = { "SVGPathSegCurvetoCubicRel", &Base::s_info, 0, CREATE_METHOD_TABLE(JSSVGPathSegCurvetoCubicRel) };

JSSVGPathSegCurvetoCubicRel::JSSVGPathSegCurvetoCubicRel(Structure* structure, JSDOMGlobalObject& globalObject, Ref<SVGPathSegCurvetoCubicRel>&& impl)
    : JSSVGPathSeg(structure, globalObject, WTFMove(impl))
{
}

void JSSVGPathSegCurvetoCubicRel::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSSVGPathSegCurvetoCubicRel::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSSVGPathSegCurvetoCubicRelPrototype::create(vm, globalObject, JSSVGPathSegCurvetoCubicRelPrototype::createStructure(vm, globalObject, JSSVGPathSeg::prototype(vm, globalObject)));
}

JSObject* JSSVGPathSegCurvetoCubicRel::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSSVGPathSegCurvetoCubicRel>(vm, globalObject);
}

template<> inline JSSVGPathSegCurvetoCubicRel* BindingCaller<JSSVGPathSegCurvetoCubicRel>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSSVGPathSegCurvetoCubicRel*>(JSValue::decode(thisValue));
}

static inline JSValue jsSVGPathSegCurvetoCubicRelXGetter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelX(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelXGetter>(state, thisValue, "x");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelXGetter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicRelYGetter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelY(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelYGetter>(state, thisValue, "y");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelYGetter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicRelX1Getter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelX1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelX1Getter>(state, thisValue, "x1");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelX1Getter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x1());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicRelY1Getter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelY1(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelY1Getter>(state, thisValue, "y1");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelY1Getter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y1());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicRelX2Getter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelX2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelX2Getter>(state, thisValue, "x2");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelX2Getter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.x2());
    return result;
}

static inline JSValue jsSVGPathSegCurvetoCubicRelY2Getter(ExecState&, JSSVGPathSegCurvetoCubicRel&, ThrowScope& throwScope);

EncodedJSValue jsSVGPathSegCurvetoCubicRelY2(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::attribute<jsSVGPathSegCurvetoCubicRelY2Getter>(state, thisValue, "y2");
}

static inline JSValue jsSVGPathSegCurvetoCubicRelY2Getter(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLUnrestrictedFloat>(impl.y2());
    return result;
}

EncodedJSValue jsSVGPathSegCurvetoCubicRelConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSSVGPathSegCurvetoCubicRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoCubicRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSSVGPathSegCurvetoCubicRel::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSSVGPathSegCurvetoCubicRelConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSSVGPathSegCurvetoCubicRelPrototype* domObject = jsDynamicDowncast<JSSVGPathSegCurvetoCubicRelPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSSVGPathSegCurvetoCubicRelXFunction(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelX(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelXFunction>(state, thisValue, encodedValue, "x");
}

static inline bool setJSSVGPathSegCurvetoCubicRelXFunction(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicRelYFunction(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelY(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelYFunction>(state, thisValue, encodedValue, "y");
}

static inline bool setJSSVGPathSegCurvetoCubicRelYFunction(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicRelX1Function(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelX1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelX1Function>(state, thisValue, encodedValue, "x1");
}

static inline bool setJSSVGPathSegCurvetoCubicRelX1Function(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX1(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicRelY1Function(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelY1(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelY1Function>(state, thisValue, encodedValue, "y1");
}

static inline bool setJSSVGPathSegCurvetoCubicRelY1Function(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY1(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicRelX2Function(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelX2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelX2Function>(state, thisValue, encodedValue, "x2");
}

static inline bool setJSSVGPathSegCurvetoCubicRelX2Function(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setX2(WTFMove(nativeValue));
    return true;
}


static inline bool setJSSVGPathSegCurvetoCubicRelY2Function(ExecState&, JSSVGPathSegCurvetoCubicRel&, JSValue, ThrowScope&);

bool setJSSVGPathSegCurvetoCubicRelY2(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSSVGPathSegCurvetoCubicRel>::setAttribute<setJSSVGPathSegCurvetoCubicRelY2Function>(state, thisValue, encodedValue, "y2");
}

static inline bool setJSSVGPathSegCurvetoCubicRelY2Function(ExecState& state, JSSVGPathSegCurvetoCubicRel& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLUnrestrictedFloat>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setY2(WTFMove(nativeValue));
    return true;
}


JSValue JSSVGPathSegCurvetoCubicRel::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSSVGPathSegCurvetoCubicRelConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}


}
