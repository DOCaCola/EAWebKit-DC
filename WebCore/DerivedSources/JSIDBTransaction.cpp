/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(INDEXED_DATABASE)

#include "JSIDBTransaction.h"

#include "EventNames.h"
#include "JSDOMBinding.h"
#include "JSDOMConstructor.h"
#include "JSDOMConvert.h"
#include "JSDOMError.h"
#include "JSDOMStringList.h"
#include "JSEventListener.h"
#include "JSIDBDatabase.h"
#include "JSIDBObjectStore.h"
#include "JSIDBTransactionMode.h"
#include <runtime/Error.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsIDBTransactionPrototypeFunctionObjectStore(JSC::ExecState*);
JSC::EncodedJSValue JSC_HOST_CALL jsIDBTransactionPrototypeFunctionAbort(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsIDBTransactionObjectStoreNames(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBTransactionMode(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBTransactionDb(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBTransactionError(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
JSC::EncodedJSValue jsIDBTransactionOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBTransactionOnabort(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBTransactionOncomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBTransactionOncomplete(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBTransactionOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBTransactionOnerror(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsIDBTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSIDBTransactionConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSIDBTransactionPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSIDBTransactionPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSIDBTransactionPrototype* ptr = new (NotNull, JSC::allocateCell<JSIDBTransactionPrototype>(vm.heap)) JSIDBTransactionPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSIDBTransactionPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

using JSIDBTransactionConstructor = JSDOMConstructorNotConstructable<JSIDBTransaction>;

template<> JSValue JSIDBTransactionConstructor::prototypeForStructure(JSC::VM& vm, const JSDOMGlobalObject& globalObject)
{
    return JSEventTarget::getConstructor(vm, &globalObject);
}

template<> void JSIDBTransactionConstructor::initializeProperties(VM& vm, JSDOMGlobalObject& globalObject)
{
    putDirect(vm, vm.propertyNames->prototype, JSIDBTransaction::prototype(vm, &globalObject), DontDelete | ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->name, jsNontrivialString(&vm, String(ASCIILiteral("IDBTransaction"))), ReadOnly | DontEnum);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontEnum);
}

template<> const ClassInfo JSIDBTransactionConstructor::s_info = { "IDBTransaction", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBTransactionConstructor) };

/* Hash table for prototype */

static const HashTableValue JSIDBTransactionPrototypeTableValues[] =
{
    { "constructor", DontEnum, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionConstructor), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBTransactionConstructor) } },
    { "objectStoreNames", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionObjectStoreNames), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "mode", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionMode), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "db", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionDb), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "error", ReadOnly | CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionError), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(0) } },
    { "onabort", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionOnabort), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBTransactionOnabort) } },
    { "oncomplete", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionOncomplete), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBTransactionOncomplete) } },
    { "onerror", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsIDBTransactionOnerror), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSIDBTransactionOnerror) } },
    { "objectStore", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBTransactionPrototypeFunctionObjectStore), (intptr_t) (1) } },
    { "abort", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsIDBTransactionPrototypeFunctionAbort), (intptr_t) (0) } },
};

const ClassInfo JSIDBTransactionPrototype::s_info = { "IDBTransactionPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBTransactionPrototype) };

void JSIDBTransactionPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSIDBTransactionPrototypeTableValues, *this);
}

const ClassInfo JSIDBTransaction::s_info = { "IDBTransaction", &Base::s_info, 0, CREATE_METHOD_TABLE(JSIDBTransaction) };

JSIDBTransaction::JSIDBTransaction(Structure* structure, JSDOMGlobalObject& globalObject, Ref<IDBTransaction>&& impl)
    : JSEventTarget(structure, globalObject, WTFMove(impl))
{
}

void JSIDBTransaction::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSIDBTransaction::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSIDBTransactionPrototype::create(vm, globalObject, JSIDBTransactionPrototype::createStructure(vm, globalObject, JSEventTarget::prototype(vm, globalObject)));
}

JSObject* JSIDBTransaction::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSIDBTransaction>(vm, globalObject);
}

template<> inline JSIDBTransaction* BindingCaller<JSIDBTransaction>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSIDBTransaction*>(JSValue::decode(thisValue));
}

template<> inline JSIDBTransaction* BindingCaller<JSIDBTransaction>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSIDBTransaction*>(state.thisValue());
}

static inline JSValue jsIDBTransactionObjectStoreNamesGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionObjectStoreNames(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionObjectStoreNamesGetter>(state, thisValue, "objectStoreNames");
}

static inline JSValue jsIDBTransactionObjectStoreNamesGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMStringList>>(state, *thisObject.globalObject(), impl.objectStoreNames());
    return result;
}

static inline JSValue jsIDBTransactionModeGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionMode(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionModeGetter>(state, thisValue, "mode");
}

static inline JSValue jsIDBTransactionModeGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<IDBTransactionMode>>(state, impl.mode());
    return result;
}

static inline JSValue jsIDBTransactionDbGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionDb(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionDbGetter>(state, thisValue, "db");
}

static inline JSValue jsIDBTransactionDbGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<IDBDatabase>>(state, *thisObject.globalObject(), impl.db());
    return result;
}

static inline JSValue jsIDBTransactionErrorGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionError(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionErrorGetter>(state, thisValue, "error");
}

static inline JSValue jsIDBTransactionErrorGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLInterface<DOMError>>(state, *thisObject.globalObject(), impl.error());
    return result;
}

static inline JSValue jsIDBTransactionOnabortGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionOnabort(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionOnabortGetter>(state, thisValue, "onabort");
}

static inline JSValue jsIDBTransactionOnabortGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().abortEvent);
}

static inline JSValue jsIDBTransactionOncompleteGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionOncomplete(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionOncompleteGetter>(state, thisValue, "oncomplete");
}

static inline JSValue jsIDBTransactionOncompleteGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().completeEvent);
}

static inline JSValue jsIDBTransactionOnerrorGetter(ExecState&, JSIDBTransaction&, ThrowScope& throwScope);

EncodedJSValue jsIDBTransactionOnerror(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSIDBTransaction>::attribute<jsIDBTransactionOnerrorGetter>(state, thisValue, "onerror");
}

static inline JSValue jsIDBTransactionOnerrorGetter(ExecState& state, JSIDBTransaction& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    return eventHandlerAttribute(thisObject.wrapped(), eventNames().errorEvent);
}

EncodedJSValue jsIDBTransactionConstructor(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSIDBTransactionPrototype* domObject = jsDynamicDowncast<JSIDBTransactionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject))
        return throwVMTypeError(state, throwScope);
    return JSValue::encode(JSIDBTransaction::getConstructor(state->vm(), domObject->globalObject()));
}

bool setJSIDBTransactionConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSIDBTransactionPrototype* domObject = jsDynamicDowncast<JSIDBTransactionPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSIDBTransactionOnabortFunction(ExecState&, JSIDBTransaction&, JSValue, ThrowScope&);

bool setJSIDBTransactionOnabort(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBTransaction>::setAttribute<setJSIDBTransactionOnabortFunction>(state, thisValue, encodedValue, "onabort");
}

static inline bool setJSIDBTransactionOnabortFunction(ExecState& state, JSIDBTransaction& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().abortEvent, value);
    return true;
}


static inline bool setJSIDBTransactionOncompleteFunction(ExecState&, JSIDBTransaction&, JSValue, ThrowScope&);

bool setJSIDBTransactionOncomplete(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBTransaction>::setAttribute<setJSIDBTransactionOncompleteFunction>(state, thisValue, encodedValue, "oncomplete");
}

static inline bool setJSIDBTransactionOncompleteFunction(ExecState& state, JSIDBTransaction& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().completeEvent, value);
    return true;
}


static inline bool setJSIDBTransactionOnerrorFunction(ExecState&, JSIDBTransaction&, JSValue, ThrowScope&);

bool setJSIDBTransactionOnerror(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSIDBTransaction>::setAttribute<setJSIDBTransactionOnerrorFunction>(state, thisValue, encodedValue, "onerror");
}

static inline bool setJSIDBTransactionOnerrorFunction(ExecState& state, JSIDBTransaction& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    setEventHandlerAttribute(state, thisObject, thisObject.wrapped(), eventNames().errorEvent, value);
    return true;
}


JSValue JSIDBTransaction::getConstructor(VM& vm, const JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSIDBTransactionConstructor>(vm, *jsCast<const JSDOMGlobalObject*>(globalObject));
}

static inline JSC::EncodedJSValue jsIDBTransactionPrototypeFunctionObjectStoreCaller(JSC::ExecState*, JSIDBTransaction*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBTransactionPrototypeFunctionObjectStore(ExecState* state)
{
    return BindingCaller<JSIDBTransaction>::callOperation<jsIDBTransactionPrototypeFunctionObjectStoreCaller>(state, "objectStore");
}

static inline JSC::EncodedJSValue jsIDBTransactionPrototypeFunctionObjectStoreCaller(JSC::ExecState* state, JSIDBTransaction* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    if (UNLIKELY(state->argumentCount() < 1))
        return throwVMError(state, throwScope, createNotEnoughArgumentsError(state));
    auto name = convert<IDLDOMString>(*state, state->uncheckedArgument(0), StringConversionConfiguration::Normal);
    RETURN_IF_EXCEPTION(throwScope, encodedJSValue());
    return JSValue::encode(toJS<IDLInterface<IDBObjectStore>>(*state, *castedThis->globalObject(), throwScope, impl.objectStore(WTFMove(name))));
}

static inline JSC::EncodedJSValue jsIDBTransactionPrototypeFunctionAbortCaller(JSC::ExecState*, JSIDBTransaction*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsIDBTransactionPrototypeFunctionAbort(ExecState* state)
{
    return BindingCaller<JSIDBTransaction>::callOperation<jsIDBTransactionPrototypeFunctionAbortCaller>(state, "abort");
}

static inline JSC::EncodedJSValue jsIDBTransactionPrototypeFunctionAbortCaller(JSC::ExecState* state, JSIDBTransaction* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    propagateException(*state, throwScope, impl.abort());
    return JSValue::encode(jsUndefined());
}

void JSIDBTransaction::visitChildren(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBTransaction*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitChildren(thisObject, visitor);
    thisObject->wrapped().visitJSEventListeners(visitor);
    thisObject->visitAdditionalChildren(visitor);
}

void JSIDBTransaction::visitOutputConstraints(JSCell* cell, SlotVisitor& visitor)
{
    auto* thisObject = jsCast<JSIDBTransaction*>(cell);
    ASSERT_GC_OBJECT_INHERITS(thisObject, info());
    Base::visitOutputConstraints(thisObject, visitor);
    thisObject->visitAdditionalChildren(visitor);
}

bool JSIDBTransactionOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    auto* jsIDBTransaction = jsCast<JSIDBTransaction*>(handle.slot()->asCell());
    if (jsIDBTransaction->wrapped().hasPendingActivity())
        return true;
    if (jsIDBTransaction->wrapped().isFiringEventListeners())
        return true;
    UNUSED_PARAM(visitor);
    return false;
}

void JSIDBTransactionOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsIDBTransaction = static_cast<JSIDBTransaction*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsIDBTransaction->wrapped(), jsIDBTransaction);
}

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<IDBTransaction>&& impl)
{
    return createWrapper<IDBTransaction>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, IDBTransaction& impl)
{
    return wrap(state, globalObject, impl);
}

IDBTransaction* JSIDBTransaction::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSIDBTransaction*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(INDEXED_DATABASE)
