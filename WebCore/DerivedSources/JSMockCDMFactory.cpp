/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"

#if ENABLE(ENCRYPTED_MEDIA)

#include "JSMockCDMFactory.h"

#include "JSDOMBinding.h"
#include "JSDOMConvert.h"
#include "JSMediaKeySessionType.h"
#include "JSMediaKeysRequirement.h"
#include <runtime/Error.h>
#include <runtime/JSArray.h>
#include <wtf/GetPtr.h>

using namespace JSC;

namespace WebCore {

// Functions

JSC::EncodedJSValue JSC_HOST_CALL jsMockCDMFactoryPrototypeFunctionUnregister(JSC::ExecState*);

// Attributes

JSC::EncodedJSValue jsMockCDMFactorySupportedDataTypes(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactorySupportedDataTypes(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactorySupportedRobustness(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactorySupportedRobustness(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactorySupportedSessionTypes(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactorySupportedSessionTypes(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactoryDistinctiveIdentifiersRequirement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactoryDistinctiveIdentifiersRequirement(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactoryPersistentStateRequirement(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactoryPersistentStateRequirement(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactoryCanCreateInstances(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactoryCanCreateInstances(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactorySupportsServerCertificates(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactorySupportsServerCertificates(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
JSC::EncodedJSValue jsMockCDMFactorySupportsSessions(JSC::ExecState*, JSC::EncodedJSValue, JSC::PropertyName);
bool setJSMockCDMFactorySupportsSessions(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);
bool setJSMockCDMFactoryConstructor(JSC::ExecState*, JSC::EncodedJSValue, JSC::EncodedJSValue);

class JSMockCDMFactoryPrototype : public JSC::JSNonFinalObject {
public:
    using Base = JSC::JSNonFinalObject;
    static JSMockCDMFactoryPrototype* create(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::Structure* structure)
    {
        JSMockCDMFactoryPrototype* ptr = new (NotNull, JSC::allocateCell<JSMockCDMFactoryPrototype>(vm.heap)) JSMockCDMFactoryPrototype(vm, globalObject, structure);
        ptr->finishCreation(vm);
        return ptr;
    }

    DECLARE_INFO;
    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info());
    }

private:
    JSMockCDMFactoryPrototype(JSC::VM& vm, JSC::JSGlobalObject*, JSC::Structure* structure)
        : JSC::JSNonFinalObject(vm, structure)
    {
    }

    void finishCreation(JSC::VM&);
};

/* Hash table for prototype */

static const HashTableValue JSMockCDMFactoryPrototypeTableValues[] =
{
    { "supportedDataTypes", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactorySupportedDataTypes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactorySupportedDataTypes) } },
    { "supportedRobustness", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactorySupportedRobustness), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactorySupportedRobustness) } },
    { "supportedSessionTypes", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactorySupportedSessionTypes), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactorySupportedSessionTypes) } },
    { "distinctiveIdentifiersRequirement", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactoryDistinctiveIdentifiersRequirement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactoryDistinctiveIdentifiersRequirement) } },
    { "persistentStateRequirement", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactoryPersistentStateRequirement), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactoryPersistentStateRequirement) } },
    { "canCreateInstances", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactoryCanCreateInstances), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactoryCanCreateInstances) } },
    { "supportsServerCertificates", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactorySupportsServerCertificates), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactorySupportsServerCertificates) } },
    { "supportsSessions", CustomAccessor, NoIntrinsic, { (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsMockCDMFactorySupportsSessions), (intptr_t) static_cast<PutPropertySlot::PutValueFunc>(setJSMockCDMFactorySupportsSessions) } },
    { "unregister", JSC::Function, NoIntrinsic, { (intptr_t)static_cast<NativeFunction>(jsMockCDMFactoryPrototypeFunctionUnregister), (intptr_t) (0) } },
};

const ClassInfo JSMockCDMFactoryPrototype::s_info = { "MockCDMFactoryPrototype", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMockCDMFactoryPrototype) };

void JSMockCDMFactoryPrototype::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    reifyStaticProperties(vm, JSMockCDMFactoryPrototypeTableValues, *this);
}

const ClassInfo JSMockCDMFactory::s_info = { "MockCDMFactory", &Base::s_info, 0, CREATE_METHOD_TABLE(JSMockCDMFactory) };

JSMockCDMFactory::JSMockCDMFactory(Structure* structure, JSDOMGlobalObject& globalObject, Ref<MockCDMFactory>&& impl)
    : JSDOMWrapper<MockCDMFactory>(structure, globalObject, WTFMove(impl))
{
}

void JSMockCDMFactory::finishCreation(VM& vm)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));

}

JSObject* JSMockCDMFactory::createPrototype(VM& vm, JSGlobalObject* globalObject)
{
    return JSMockCDMFactoryPrototype::create(vm, globalObject, JSMockCDMFactoryPrototype::createStructure(vm, globalObject, globalObject->objectPrototype()));
}

JSObject* JSMockCDMFactory::prototype(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMPrototype<JSMockCDMFactory>(vm, globalObject);
}

void JSMockCDMFactory::destroy(JSC::JSCell* cell)
{
    JSMockCDMFactory* thisObject = static_cast<JSMockCDMFactory*>(cell);
    thisObject->JSMockCDMFactory::~JSMockCDMFactory();
}

template<> inline JSMockCDMFactory* BindingCaller<JSMockCDMFactory>::castForAttribute(ExecState&, EncodedJSValue thisValue)
{
    return jsDynamicDowncast<JSMockCDMFactory*>(JSValue::decode(thisValue));
}

template<> inline JSMockCDMFactory* BindingCaller<JSMockCDMFactory>::castForOperation(ExecState& state)
{
    return jsDynamicDowncast<JSMockCDMFactory*>(state.thisValue());
}

static inline JSValue jsMockCDMFactorySupportedDataTypesGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactorySupportedDataTypes(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactorySupportedDataTypesGetter>(state, thisValue, "supportedDataTypes");
}

static inline JSValue jsMockCDMFactorySupportedDataTypesGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLSequence<IDLDOMString>>(state, *thisObject.globalObject(), impl.supportedDataTypes());
    return result;
}

static inline JSValue jsMockCDMFactorySupportedRobustnessGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactorySupportedRobustness(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactorySupportedRobustnessGetter>(state, thisValue, "supportedRobustness");
}

static inline JSValue jsMockCDMFactorySupportedRobustnessGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLSequence<IDLDOMString>>(state, *thisObject.globalObject(), impl.supportedRobustness());
    return result;
}

static inline JSValue jsMockCDMFactorySupportedSessionTypesGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactorySupportedSessionTypes(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactorySupportedSessionTypesGetter>(state, thisValue, "supportedSessionTypes");
}

static inline JSValue jsMockCDMFactorySupportedSessionTypesGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLSequence<IDLEnumeration<MediaKeySessionType>>>(state, *thisObject.globalObject(), impl.supportedSessionTypes());
    return result;
}

static inline JSValue jsMockCDMFactoryDistinctiveIdentifiersRequirementGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactoryDistinctiveIdentifiersRequirement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactoryDistinctiveIdentifiersRequirementGetter>(state, thisValue, "distinctiveIdentifiersRequirement");
}

static inline JSValue jsMockCDMFactoryDistinctiveIdentifiersRequirementGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<MediaKeysRequirement>>(state, impl.distinctiveIdentifiersRequirement());
    return result;
}

static inline JSValue jsMockCDMFactoryPersistentStateRequirementGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactoryPersistentStateRequirement(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactoryPersistentStateRequirementGetter>(state, thisValue, "persistentStateRequirement");
}

static inline JSValue jsMockCDMFactoryPersistentStateRequirementGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLEnumeration<MediaKeysRequirement>>(state, impl.persistentStateRequirement());
    return result;
}

static inline JSValue jsMockCDMFactoryCanCreateInstancesGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactoryCanCreateInstances(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactoryCanCreateInstancesGetter>(state, thisValue, "canCreateInstances");
}

static inline JSValue jsMockCDMFactoryCanCreateInstancesGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.canCreateInstances());
    return result;
}

static inline JSValue jsMockCDMFactorySupportsServerCertificatesGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactorySupportsServerCertificates(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactorySupportsServerCertificatesGetter>(state, thisValue, "supportsServerCertificates");
}

static inline JSValue jsMockCDMFactorySupportsServerCertificatesGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.supportsServerCertificates());
    return result;
}

static inline JSValue jsMockCDMFactorySupportsSessionsGetter(ExecState&, JSMockCDMFactory&, ThrowScope& throwScope);

EncodedJSValue jsMockCDMFactorySupportsSessions(ExecState* state, EncodedJSValue thisValue, PropertyName)
{
    return BindingCaller<JSMockCDMFactory>::attribute<jsMockCDMFactorySupportsSessionsGetter>(state, thisValue, "supportsSessions");
}

static inline JSValue jsMockCDMFactorySupportsSessionsGetter(ExecState& state, JSMockCDMFactory& thisObject, ThrowScope& throwScope)
{
    UNUSED_PARAM(throwScope);
    UNUSED_PARAM(state);
    auto& impl = thisObject.wrapped();
    JSValue result = toJS<IDLBoolean>(impl.supportsSessions());
    return result;
}

bool setJSMockCDMFactoryConstructor(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    VM& vm = state->vm();
    auto throwScope = DECLARE_THROW_SCOPE(vm);
    JSValue value = JSValue::decode(encodedValue);
    JSMockCDMFactoryPrototype* domObject = jsDynamicDowncast<JSMockCDMFactoryPrototype*>(JSValue::decode(thisValue));
    if (UNLIKELY(!domObject)) {
        throwVMTypeError(state, throwScope);
        return false;
    }
    // Shadowing a built-in constructor
    return domObject->putDirect(state->vm(), state->propertyNames().constructor, value);
}

static inline bool setJSMockCDMFactorySupportedDataTypesFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactorySupportedDataTypes(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactorySupportedDataTypesFunction>(state, thisValue, encodedValue, "supportedDataTypes");
}

static inline bool setJSMockCDMFactorySupportedDataTypesFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLSequence<IDLDOMString>>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSupportedDataTypes(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockCDMFactorySupportedRobustnessFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactorySupportedRobustness(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactorySupportedRobustnessFunction>(state, thisValue, encodedValue, "supportedRobustness");
}

static inline bool setJSMockCDMFactorySupportedRobustnessFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLSequence<IDLDOMString>>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSupportedRobustness(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockCDMFactorySupportedSessionTypesFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactorySupportedSessionTypes(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactorySupportedSessionTypesFunction>(state, thisValue, encodedValue, "supportedSessionTypes");
}

static inline bool setJSMockCDMFactorySupportedSessionTypesFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLSequence<IDLEnumeration<MediaKeySessionType>>>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSupportedSessionTypes(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockCDMFactoryDistinctiveIdentifiersRequirementFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactoryDistinctiveIdentifiersRequirement(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactoryDistinctiveIdentifiersRequirementFunction>(state, thisValue, encodedValue, "distinctiveIdentifiersRequirement");
}

static inline bool setJSMockCDMFactoryDistinctiveIdentifiersRequirementFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = parseEnumeration<MediaKeysRequirement>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (UNLIKELY(!nativeValue))
        return false;
    impl.setDistinctiveIdentifiersRequirement(nativeValue.value());
    return true;
}


static inline bool setJSMockCDMFactoryPersistentStateRequirementFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactoryPersistentStateRequirement(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactoryPersistentStateRequirementFunction>(state, thisValue, encodedValue, "persistentStateRequirement");
}

static inline bool setJSMockCDMFactoryPersistentStateRequirementFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = parseEnumeration<MediaKeysRequirement>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    if (UNLIKELY(!nativeValue))
        return false;
    impl.setPersistentStateRequirement(nativeValue.value());
    return true;
}


static inline bool setJSMockCDMFactoryCanCreateInstancesFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactoryCanCreateInstances(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactoryCanCreateInstancesFunction>(state, thisValue, encodedValue, "canCreateInstances");
}

static inline bool setJSMockCDMFactoryCanCreateInstancesFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setCanCreateInstances(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockCDMFactorySupportsServerCertificatesFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactorySupportsServerCertificates(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactorySupportsServerCertificatesFunction>(state, thisValue, encodedValue, "supportsServerCertificates");
}

static inline bool setJSMockCDMFactorySupportsServerCertificatesFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSupportsServerCertificates(WTFMove(nativeValue));
    return true;
}


static inline bool setJSMockCDMFactorySupportsSessionsFunction(ExecState&, JSMockCDMFactory&, JSValue, ThrowScope&);

bool setJSMockCDMFactorySupportsSessions(ExecState* state, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    return BindingCaller<JSMockCDMFactory>::setAttribute<setJSMockCDMFactorySupportsSessionsFunction>(state, thisValue, encodedValue, "supportsSessions");
}

static inline bool setJSMockCDMFactorySupportsSessionsFunction(ExecState& state, JSMockCDMFactory& thisObject, JSValue value, ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = thisObject.wrapped();
    auto nativeValue = convert<IDLBoolean>(state, value);
    RETURN_IF_EXCEPTION(throwScope, false);
    impl.setSupportsSessions(WTFMove(nativeValue));
    return true;
}


static inline JSC::EncodedJSValue jsMockCDMFactoryPrototypeFunctionUnregisterCaller(JSC::ExecState*, JSMockCDMFactory*, JSC::ThrowScope&);

EncodedJSValue JSC_HOST_CALL jsMockCDMFactoryPrototypeFunctionUnregister(ExecState* state)
{
    return BindingCaller<JSMockCDMFactory>::callOperation<jsMockCDMFactoryPrototypeFunctionUnregisterCaller>(state, "unregister");
}

static inline JSC::EncodedJSValue jsMockCDMFactoryPrototypeFunctionUnregisterCaller(JSC::ExecState* state, JSMockCDMFactory* castedThis, JSC::ThrowScope& throwScope)
{
    UNUSED_PARAM(state);
    UNUSED_PARAM(throwScope);
    auto& impl = castedThis->wrapped();
    impl.unregister();
    return JSValue::encode(jsUndefined());
}

bool JSMockCDMFactoryOwner::isReachableFromOpaqueRoots(JSC::Handle<JSC::Unknown> handle, void*, SlotVisitor& visitor)
{
    UNUSED_PARAM(handle);
    UNUSED_PARAM(visitor);
    return false;
}

void JSMockCDMFactoryOwner::finalize(JSC::Handle<JSC::Unknown> handle, void* context)
{
    auto* jsMockCDMFactory = static_cast<JSMockCDMFactory*>(handle.slot()->asCell());
    auto& world = *static_cast<DOMWrapperWorld*>(context);
    uncacheWrapper(world, &jsMockCDMFactory->wrapped(), jsMockCDMFactory);
}

#if ENABLE(BINDING_INTEGRITY)
#if PLATFORM(WIN)
#pragma warning(disable: 4483)
extern "C" { extern void (*const __identifier("??_7MockCDMFactory@WebCore@@6B@")[])(); }
#else
extern "C" { extern void* _ZTVN7WebCore14MockCDMFactoryE[]; }
#endif
#endif

JSC::JSValue toJSNewlyCreated(JSC::ExecState*, JSDOMGlobalObject* globalObject, Ref<MockCDMFactory>&& impl)
{

#if ENABLE(BINDING_INTEGRITY)
    void* actualVTablePointer = *(reinterpret_cast<void**>(impl.ptr()));
#if PLATFORM(WIN)
    void* expectedVTablePointer = reinterpret_cast<void*>(__identifier("??_7MockCDMFactory@WebCore@@6B@"));
#else
    void* expectedVTablePointer = &_ZTVN7WebCore14MockCDMFactoryE[2];
#if COMPILER(CLANG)
    // If this fails MockCDMFactory does not have a vtable, so you need to add the
    // ImplementationLacksVTable attribute to the interface definition
    static_assert(__is_polymorphic(MockCDMFactory), "MockCDMFactory is not polymorphic");
#endif
#endif
    // If you hit this assertion you either have a use after free bug, or
    // MockCDMFactory has subclasses. If MockCDMFactory has subclasses that get passed
    // to toJS() we currently require MockCDMFactory you to opt out of binding hardening
    // by adding the SkipVTableValidation attribute to the interface IDL definition
    RELEASE_ASSERT(actualVTablePointer == expectedVTablePointer);
#endif
    return createWrapper<MockCDMFactory>(globalObject, WTFMove(impl));
}

JSC::JSValue toJS(JSC::ExecState* state, JSDOMGlobalObject* globalObject, MockCDMFactory& impl)
{
    return wrap(state, globalObject, impl);
}

MockCDMFactory* JSMockCDMFactory::toWrapped(JSC::JSValue value)
{
    if (auto* wrapper = jsDynamicDowncast<JSMockCDMFactory*>(value))
        return &wrapper->wrapped();
    return nullptr;
}

}

#endif // ENABLE(ENCRYPTED_MEDIA)
