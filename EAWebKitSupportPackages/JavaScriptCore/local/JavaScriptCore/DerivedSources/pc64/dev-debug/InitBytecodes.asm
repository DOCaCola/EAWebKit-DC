# SHA1Hash: cb0378af5f2063f3b43431c9b4f005941fde36b8
# Copyright (C) 2014 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Autogenerated from C:/Webkit2016/WebKit/Source/JavaScriptCore/bytecode/BytecodeList.json, do not modify.

setEntryAddress(0, _llint_op_enter)
setEntryAddress(1, _llint_op_get_scope)
setEntryAddress(2, _llint_op_create_direct_arguments)
setEntryAddress(3, _llint_op_create_scoped_arguments)
setEntryAddress(4, _llint_op_create_out_of_band_arguments)
setEntryAddress(5, _llint_op_create_this)
setEntryAddress(6, _llint_op_to_this)
setEntryAddress(7, _llint_op_check_tdz)
setEntryAddress(8, _llint_op_new_object)
setEntryAddress(9, _llint_op_new_array)
setEntryAddress(10, _llint_op_new_array_with_size)
setEntryAddress(11, _llint_op_new_array_buffer)
setEntryAddress(12, _llint_op_new_regexp)
setEntryAddress(13, _llint_op_mov)
setEntryAddress(14, _llint_op_not)
setEntryAddress(15, _llint_op_eq)
setEntryAddress(16, _llint_op_eq_null)
setEntryAddress(17, _llint_op_neq)
setEntryAddress(18, _llint_op_neq_null)
setEntryAddress(19, _llint_op_stricteq)
setEntryAddress(20, _llint_op_nstricteq)
setEntryAddress(21, _llint_op_less)
setEntryAddress(22, _llint_op_lesseq)
setEntryAddress(23, _llint_op_greater)
setEntryAddress(24, _llint_op_greatereq)
setEntryAddress(25, _llint_op_inc)
setEntryAddress(26, _llint_op_dec)
setEntryAddress(27, _llint_op_to_number)
setEntryAddress(28, _llint_op_to_string)
setEntryAddress(29, _llint_op_negate)
setEntryAddress(30, _llint_op_add)
setEntryAddress(31, _llint_op_mul)
setEntryAddress(32, _llint_op_div)
setEntryAddress(33, _llint_op_mod)
setEntryAddress(34, _llint_op_sub)
setEntryAddress(35, _llint_op_lshift)
setEntryAddress(36, _llint_op_rshift)
setEntryAddress(37, _llint_op_urshift)
setEntryAddress(38, _llint_op_unsigned)
setEntryAddress(39, _llint_op_bitand)
setEntryAddress(40, _llint_op_bitxor)
setEntryAddress(41, _llint_op_bitor)
setEntryAddress(42, _llint_op_overrides_has_instance)
setEntryAddress(43, _llint_op_instanceof)
setEntryAddress(44, _llint_op_instanceof_custom)
setEntryAddress(45, _llint_op_typeof)
setEntryAddress(46, _llint_op_is_undefined)
setEntryAddress(47, _llint_op_is_boolean)
setEntryAddress(48, _llint_op_is_number)
setEntryAddress(49, _llint_op_is_string)
setEntryAddress(50, _llint_op_is_object)
setEntryAddress(51, _llint_op_is_object_or_null)
setEntryAddress(52, _llint_op_is_function)
setEntryAddress(53, _llint_op_in)
setEntryAddress(54, _llint_op_get_by_id)
setEntryAddress(55, _llint_op_get_array_length)
setEntryAddress(56, _llint_op_put_by_id)
setEntryAddress(57, _llint_op_del_by_id)
setEntryAddress(58, _llint_op_get_by_val)
setEntryAddress(59, _llint_op_put_by_val)
setEntryAddress(60, _llint_op_put_by_val_direct)
setEntryAddress(61, _llint_op_del_by_val)
setEntryAddress(62, _llint_op_put_by_index)
setEntryAddress(63, _llint_op_put_getter_by_id)
setEntryAddress(64, _llint_op_put_setter_by_id)
setEntryAddress(65, _llint_op_put_getter_setter_by_id)
setEntryAddress(66, _llint_op_put_getter_by_val)
setEntryAddress(67, _llint_op_put_setter_by_val)
setEntryAddress(68, _llint_op_jmp)
setEntryAddress(69, _llint_op_jtrue)
setEntryAddress(70, _llint_op_jfalse)
setEntryAddress(71, _llint_op_jeq_null)
setEntryAddress(72, _llint_op_jneq_null)
setEntryAddress(73, _llint_op_jneq_ptr)
setEntryAddress(74, _llint_op_jless)
setEntryAddress(75, _llint_op_jlesseq)
setEntryAddress(76, _llint_op_jgreater)
setEntryAddress(77, _llint_op_jgreatereq)
setEntryAddress(78, _llint_op_jnless)
setEntryAddress(79, _llint_op_jnlesseq)
setEntryAddress(80, _llint_op_jngreater)
setEntryAddress(81, _llint_op_jngreatereq)
setEntryAddress(82, _llint_op_loop_hint)
setEntryAddress(83, _llint_op_switch_imm)
setEntryAddress(84, _llint_op_switch_char)
setEntryAddress(85, _llint_op_switch_string)
setEntryAddress(86, _llint_op_new_func)
setEntryAddress(87, _llint_op_new_func_exp)
setEntryAddress(88, _llint_op_new_generator_func)
setEntryAddress(89, _llint_op_new_generator_func_exp)
setEntryAddress(90, _llint_op_new_arrow_func_exp)
setEntryAddress(91, _llint_op_call)
setEntryAddress(92, _llint_op_tail_call)
setEntryAddress(93, _llint_op_call_eval)
setEntryAddress(94, _llint_op_call_varargs)
setEntryAddress(95, _llint_op_tail_call_varargs)
setEntryAddress(96, _llint_op_ret)
setEntryAddress(97, _llint_op_construct)
setEntryAddress(98, _llint_op_construct_varargs)
setEntryAddress(99, _llint_op_strcat)
setEntryAddress(100, _llint_op_to_primitive)
setEntryAddress(101, _llint_op_resolve_scope)
setEntryAddress(102, _llint_op_get_from_scope)
setEntryAddress(103, _llint_op_put_to_scope)
setEntryAddress(104, _llint_op_get_from_arguments)
setEntryAddress(105, _llint_op_put_to_arguments)
setEntryAddress(106, _llint_op_push_with_scope)
setEntryAddress(107, _llint_op_create_lexical_environment)
setEntryAddress(108, _llint_op_get_parent_scope)
setEntryAddress(109, _llint_op_catch)
setEntryAddress(110, _llint_op_throw)
setEntryAddress(111, _llint_op_throw_static_error)
setEntryAddress(112, _llint_op_debug)
setEntryAddress(113, _llint_op_profile_will_call)
setEntryAddress(114, _llint_op_profile_did_call)
setEntryAddress(115, _llint_op_end)
setEntryAddress(116, _llint_op_profile_type)
setEntryAddress(117, _llint_op_profile_control_flow)
setEntryAddress(118, _llint_op_get_enumerable_length)
setEntryAddress(119, _llint_op_has_indexed_property)
setEntryAddress(120, _llint_op_has_structure_property)
setEntryAddress(121, _llint_op_has_generic_property)
setEntryAddress(122, _llint_op_get_direct_pname)
setEntryAddress(123, _llint_op_get_property_enumerator)
setEntryAddress(124, _llint_op_enumerator_structure_pname)
setEntryAddress(125, _llint_op_enumerator_generic_pname)
setEntryAddress(126, _llint_op_to_index_string)
setEntryAddress(127, _llint_op_assert)
setEntryAddress(128, _llint_op_copy_rest)
setEntryAddress(129, _llint_op_get_rest_length)
setEntryAddress(130, _llint_op_save)
setEntryAddress(131, _llint_op_resume)
setEntryAddress(132, _llint_op_watchdog)
setEntryAddress(133, _llint_program_prologue)
setEntryAddress(134, _llint_eval_prologue)
setEntryAddress(135, _llint_module_program_prologue)
setEntryAddress(136, _llint_function_for_call_prologue)
setEntryAddress(137, _llint_function_for_construct_prologue)
setEntryAddress(138, _llint_function_for_call_arity_check)
setEntryAddress(139, _llint_function_for_construct_arity_check)
setEntryAddress(140, _llint_generic_return_point)
setEntryAddress(141, _llint_throw_from_slow_path_trampoline)
setEntryAddress(142, _llint_throw_during_call_trampoline)
setEntryAddress(143, _llint_native_call_trampoline)
setEntryAddress(144, _llint_native_construct_trampoline)
setEntryAddress(145, _handleUncaughtException)
