// Generated by opcode_generator.rb from C:/Webkit2016/WebKit/Source/JavaScriptCore/b3/air/AirOpcode.opcodes -- do not edit!
#ifndef AirOpcodeUtils_h
#define AirOpcodeUtils_h
#include "AirInst.h"
#include "AirSpecial.h"
namespace JSC { namespace B3 { namespace Air {
inline bool opgenHiddenTruth() { return true; }
template<typename T>
inline T* opgenHiddenPtrIdentity(T* pointer) { return pointer; }
#define OPGEN_RETURN(value) do {\
    if (opgenHiddenTruth())\
        return value;\
} while (false)
template<typename Functor>
void Inst::forEachArg(const Functor& functor)
{
switch (this->opcode) {
case Nop:
break;
case Add32:
switch (this->args.size()) {
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case Add64:
switch (this->args.size()) {
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Def, Arg::GP, Arg::Width64);
break;
default:
break;
}
break;
case AddDouble:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Def, Arg::FP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
default:
break;
}
break;
case AddFloat:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
default:
break;
}
break;
case Sub32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case Sub64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case SubDouble:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Def, Arg::FP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
default:
break;
}
break;
case SubFloat:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
default:
break;
}
break;
case Neg32:
functor(args[0], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case Neg64:
functor(args[0], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case Mul32:
switch (this->args.size()) {
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case Mul64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case MulDouble:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Def, Arg::FP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
default:
break;
}
break;
case MulFloat:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
default:
break;
}
break;
case DivDouble:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
default:
break;
}
break;
case DivFloat:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
default:
break;
}
break;
case X86ConvertToDoubleWord32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case X86ConvertToQuadWord64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Def, Arg::GP, Arg::Width64);
break;
case X86Div32:
functor(args[0], Arg::UseZDef, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
break;
case X86Div64:
functor(args[0], Arg::UseZDef, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
break;
case Lea:
functor(args[0], Arg::UseAddr, Arg::GP, Arg::pointerWidth());
functor(args[1], Arg::Def, Arg::GP, Arg::pointerWidth());
break;
case And32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case And64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case AndDouble:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Def, Arg::FP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
default:
break;
}
break;
case AndFloat:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Def, Arg::FP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
default:
break;
}
break;
case Lshift32:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case Lshift64:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
default:
break;
}
break;
case Rshift32:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case Rshift64:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
default:
break;
}
break;
case urshift32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Urshift32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case Urshift64:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::ZDef, Arg::GP, Arg::Width64);
break;
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
default:
break;
}
break;
case Or32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case Or64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case Xor32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case Xor64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case Not32:
switch (this->args.size()) {
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case 1:
functor(args[0], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case Not64:
switch (this->args.size()) {
case 2:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Def, Arg::GP, Arg::Width64);
break;
case 1:
functor(args[0], Arg::UseDef, Arg::GP, Arg::Width64);
break;
default:
break;
}
break;
case CeilDouble:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case CeilFloat:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
case SqrtDouble:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case SqrtFloat:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::UseDef, Arg::FP, Arg::Width32);
break;
case ConvertInt32ToDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Def, Arg::FP, Arg::Width64);
break;
case ConvertInt64ToDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Def, Arg::FP, Arg::Width64);
break;
case CountLeadingZeros32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case CountLeadingZeros64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Def, Arg::GP, Arg::Width64);
break;
case ConvertDoubleToFloat:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Def, Arg::FP, Arg::Width32);
break;
case ConvertFloatToDouble:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Def, Arg::FP, Arg::Width64);
break;
case Move:
functor(args[0], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[1], Arg::Def, Arg::GP, Arg::pointerWidth());
break;
case Move32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case SignExtend32ToPtr:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Def, Arg::GP, Arg::pointerWidth());
break;
case ZeroExtend8To32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width8);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case SignExtend8To32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width8);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case ZeroExtend16To32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width16);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case SignExtend16To32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width16);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case MoveFloat:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Def, Arg::FP, Arg::Width32);
break;
case MoveDouble:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Def, Arg::FP, Arg::Width64);
break;
case MoveZeroToDouble:
functor(args[0], Arg::Def, Arg::FP, Arg::Width64);
break;
case Move64ToDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width64);
functor(args[1], Arg::Def, Arg::FP, Arg::Width64);
break;
case Move32ToFloat:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Def, Arg::FP, Arg::Width32);
break;
case MoveDoubleTo64:
functor(args[0], Arg::Use, Arg::FP, Arg::Width64);
functor(args[1], Arg::Def, Arg::GP, Arg::Width64);
break;
case MoveFloatTo32:
functor(args[0], Arg::Use, Arg::FP, Arg::Width32);
functor(args[1], Arg::Def, Arg::GP, Arg::Width32);
break;
case Load8:
functor(args[0], Arg::Use, Arg::GP, Arg::Width8);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Store8:
functor(args[0], Arg::Use, Arg::GP, Arg::Width8);
functor(args[1], Arg::Def, Arg::GP, Arg::Width8);
break;
case Load8SignedExtendTo32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width8);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Load16:
functor(args[0], Arg::Use, Arg::GP, Arg::Width16);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Load16SignedExtendTo32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width16);
functor(args[1], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Store16:
functor(args[0], Arg::Use, Arg::GP, Arg::Width16);
functor(args[1], Arg::Def, Arg::GP, Arg::Width16);
break;
case Compare32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Compare64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Test32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Test64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case CompareDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Use, Arg::FP, Arg::Width64);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case CompareFloat:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Use, Arg::FP, Arg::Width32);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
case Branch8:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width8);
functor(args[2], Arg::Use, Arg::GP, Arg::Width8);
break;
case Branch32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
break;
case Branch64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
break;
case BranchTest8:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width8);
functor(args[2], Arg::Use, Arg::GP, Arg::Width8);
break;
case BranchTest32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
break;
case BranchTest64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
break;
case BranchDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Use, Arg::FP, Arg::Width64);
break;
case BranchFloat:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Use, Arg::FP, Arg::Width32);
break;
case BranchAdd32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case BranchAdd64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case BranchMul32:
switch (this->args.size()) {
case 3:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case 4:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::ZDef, Arg::GP, Arg::Width32);
break;
default:
break;
}
break;
case BranchMul64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::UseZDef, Arg::GP, Arg::Width64);
break;
case BranchSub32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case BranchSub64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::UseDef, Arg::GP, Arg::Width64);
break;
case BranchNeg32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width32);
break;
case BranchNeg64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::UseZDef, Arg::GP, Arg::Width64);
break;
case MoveConditionally32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveConditionally64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveConditionallyTest32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveConditionallyTest64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveConditionallyDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Use, Arg::FP, Arg::Width64);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveConditionallyFloat:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Use, Arg::FP, Arg::Width32);
functor(args[3], Arg::Use, Arg::GP, Arg::pointerWidth());
functor(args[4], Arg::UseDef, Arg::GP, Arg::pointerWidth());
break;
case MoveDoubleConditionally32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case MoveDoubleConditionally64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case MoveDoubleConditionallyTest32:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width32);
functor(args[2], Arg::Use, Arg::GP, Arg::Width32);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case MoveDoubleConditionallyTest64:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::GP, Arg::Width64);
functor(args[2], Arg::Use, Arg::GP, Arg::Width64);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case MoveDoubleConditionallyDouble:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width64);
functor(args[2], Arg::Use, Arg::FP, Arg::Width64);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case MoveDoubleConditionallyFloat:
functor(args[0], Arg::Use, Arg::GP, Arg::Width32);
functor(args[1], Arg::Use, Arg::FP, Arg::Width32);
functor(args[2], Arg::Use, Arg::FP, Arg::Width32);
functor(args[3], Arg::Use, Arg::FP, Arg::Width64);
functor(args[4], Arg::UseDef, Arg::FP, Arg::Width64);
break;
case Jump:
break;
case Ret:
break;
case Oops:
break;
case Patch:
functor(args[0], Arg::Use, Arg::GP, Arg::pointerWidth()); // This is basically bogus, but it works for analyses that model Special as an immediate.
args[0].special()->forEachArg(*this, scopedLambda<EachArgCallback>(functor));
break;
default:
break;
}
}
template<typename... Arguments>
ALWAYS_INLINE bool isValidForm(Opcode opcode, Arguments... arguments)
{
Arg::Kind kinds[sizeof...(Arguments)] = { arguments... };
switch (opcode) {
case Nop:
switch (sizeof...(Arguments)) {
case 0:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Add32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Add64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case AddDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case AddFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Sub32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Sub64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SubDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SubFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Neg32:
switch (sizeof...(Arguments)) {
case 1:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Neg64:
switch (sizeof...(Arguments)) {
case 1:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Mul32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Mul64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MulDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MulFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case DivDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case DivFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case X86ConvertToDoubleWord32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case X86ConvertToQuadWord64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case X86Div32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case X86Div64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Lea:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case And32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case And64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case AndDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case AndFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Lshift32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Lshift64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Rshift32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Rshift64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case urshift32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Urshift32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Urshift64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Or32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Or64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Xor32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Xor64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Not32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case 1:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Not64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case 1:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case CeilDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case CeilFloat:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SqrtDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SqrtFloat:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ConvertInt32ToDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ConvertInt64ToDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case CountLeadingZeros32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case CountLeadingZeros64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ConvertDoubleToFloat:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ConvertFloatToDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Move:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
#if USE(JSVALUE64)
case Arg::Imm64:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
#endif // USE(JSVALUE64)
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Move32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Index:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SignExtend32ToPtr:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ZeroExtend8To32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SignExtend8To32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case ZeroExtend16To32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case SignExtend16To32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveFloat:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveZeroToDouble:
switch (sizeof...(Arguments)) {
case 1:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Move64ToDouble:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Move32ToFloat:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleTo64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveFloatTo32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Load8:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Store8:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Index:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Load8SignedExtendTo32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Load16:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Load16SignedExtendTo32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Store16:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Index:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Compare32:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Compare64:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Test32:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Test64:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case CompareDouble:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case CompareFloat:
switch (sizeof...(Arguments)) {
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Branch8:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Branch32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Imm:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Branch64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchTest8:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchTest32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Imm:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchTest64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Imm:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Index:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchDouble:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchFloat:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchAdd32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchAdd64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchMul32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case 4:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchMul64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchSub32:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Addr:
case Arg::Stack:
case Arg::CallArg:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchSub64:
switch (sizeof...(Arguments)) {
case 3:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchNeg32:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case BranchNeg64:
switch (sizeof...(Arguments)) {
case 2:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionally32:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionally64:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionallyTest32:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86) || CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionallyTest64:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionallyDouble:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveConditionallyFloat:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionally32:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionally64:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::RelCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionallyTest32:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionallyTest64:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::ResCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
case Arg::Imm:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
#if CPU(X86_64) || CPU(ARM64)
OPGEN_RETURN(true);
#endif
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionallyDouble:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case MoveDoubleConditionallyFloat:
switch (sizeof...(Arguments)) {
case 5:
switch (opgenHiddenPtrIdentity(kinds)[0]) {
case Arg::DoubleCond:
switch (opgenHiddenPtrIdentity(kinds)[1]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[2]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[3]) {
case Arg::Tmp:
switch (opgenHiddenPtrIdentity(kinds)[4]) {
case Arg::Tmp:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
default:
break;
}
break;
case Jump:
switch (sizeof...(Arguments)) {
case 0:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Ret:
switch (sizeof...(Arguments)) {
case 0:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Oops:
switch (sizeof...(Arguments)) {
case 0:
OPGEN_RETURN(true);
break;
break;
default:
break;
}
break;
case Patch:
switch (sizeof...(Arguments)) {
default:
break;
}
break;
default:
break;
}
return false; 
}
inline bool isTerminal(Opcode opcode)
{
switch (opcode) {
case Branch8:
case Branch32:
case Branch64:
case BranchTest8:
case BranchTest32:
case BranchTest64:
case BranchDouble:
case BranchFloat:
case BranchAdd32:
case BranchAdd64:
case BranchMul32:
case BranchMul64:
case BranchSub32:
case BranchSub64:
case BranchNeg32:
case BranchNeg64:
case Jump:
case Ret:
case Oops:
return true;
default:
return false;
}
}
} } } // namespace JSC::B3::Air
#endif // AirOpcodeUtils_h
